{ /* eslint-disable no-unused-vars */

/**
 * This file is used first by the entire `src` including `injected`.
 * `global` is used instead of WebPack's polyfill which we disable in webpack.conf.js.
 * Not exporting NodeJS built-in globals as this file is imported in the test scripts.
 */
const global = false ? globalThis : this; // eslint-disable-line no-undef

const {
  window
} = global; // it's unforgeable so we extract it primarily to improve minification

const VIOLENTMONKEY = 'Violentmonkey';
const AUTO = 'auto';
const CONTENT = 'content';
const EXPOSE = 'expose';
const FORCE_CONTENT = 'forceContent';
const IDS = 'ids';
const ID_BAD_REALM = -1;
const ID_INJECTING = 2;
const INJECT_INTO = 'injectInto';
const MORE = 'more';
const PAGE = 'page';
const RUN_AT = 'runAt';
const SCRIPTS = 'scripts';
const VALUES = 'values';
const kResponse = 'response';
const kResponseHeaders = 'responseHeaders';
const kResponseText = 'responseText';
const kResponseType = 'responseType';
const kSessionId = 'sessionId';

const isFunction = val => typeof val === 'function';

const isObject = val => val != null && typeof val === 'object';
/* eslint-disable no-unused-vars */

/**
 * This file is used by entire `src` except `injected`.
 * `safeCall` is used by our modified babel-plugin-safe-bind.js.
 * Standard globals are extracted for better minification and marginally improved lookup speed.
 * Not exporting NodeJS built-in globals as this file is imported in the test scripts.
 */
const {
  Boolean,
  Error,
  Object,
  Promise,
  chrome,
  performance
} = global;
const SafePromise = Promise; // alias used by browser.js

const SafeError = Error; // alias used by browser.js

const {
  apply: safeApply
} = Reflect;
const hasOwnProperty = safeApply.call.bind({}.hasOwnProperty);
const safeCall = Object.call.bind(Object.call);
const IS_FIREFOX = !chrome.app;
const ROUTE_SCRIPTS = '#' + SCRIPTS;
const extensionRoot = chrome.runtime.getURL('/');
const extensionOrigin = extensionRoot.slice(0, -1);
const extensionManifest = chrome.runtime.getManifest(); // Using getURL because in Firefox manifest contains resolved (full) URLs

const extensionOptionsPage = chrome.runtime.getURL(extensionManifest.options_ui.page);
const ICON_PREFIX = chrome.runtime.getURL(extensionManifest.icons[16].replace("16.png", ""));(self["webpackChunkviolentmonkey"] = self["webpackChunkviolentmonkey"] || []).push([["common-ui"],{

/***/ "./node_modules/@violentmonkey/shortcut/dist/index.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@violentmonkey/shortcut/dist/index.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyboardService": () => (/* binding */ KeyboardService),
/* harmony export */   "aliases": () => (/* binding */ aliases),
/* harmony export */   "disable": () => (/* binding */ disable),
/* harmony export */   "enable": () => (/* binding */ enable),
/* harmony export */   "handleKey": () => (/* binding */ handleKey),
/* harmony export */   "modifierSymbols": () => (/* binding */ modifierSymbols),
/* harmony export */   "modifiers": () => (/* binding */ modifiers),
/* harmony export */   "normalizeKey": () => (/* binding */ normalizeKey),
/* harmony export */   "normalizeSequence": () => (/* binding */ normalizeSequence),
/* harmony export */   "parseCondition": () => (/* binding */ parseCondition),
/* harmony export */   "register": () => (/* binding */ register),
/* harmony export */   "reprKey": () => (/* binding */ reprKey),
/* harmony export */   "reprShortcut": () => (/* binding */ reprShortcut)
/* harmony export */ });
/*! @violentmonkey/shortcut v1.2.6 | ISC License */
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const isMacintosh = navigator.userAgent.includes('Macintosh');
const modifiers = {
  c: 'c',
  s: 's',
  a: 'a',
  m: 'm',
  ctrl: 'c',
  control: 'c',
  // macOS
  shift: 's',
  alt: 'a',
  meta: 'm',
  ctrlcmd: isMacintosh ? 'm' : 'c'
};
const modifierSymbols = {
  c: '^',
  s: '⇧',
  a: '⌥',
  m: '⌘'
};
const aliases = {
  arrowup: 'up',
  arrowdown: 'down',
  arrowleft: 'left',
  arrowright: 'right',
  enter: 'cr',
  escape: 'esc',
  ' ': 'space'
};
function reprKey(base, mod, caseSensitive = false) {
  const {
    c,
    s,
    a,
    m
  } = mod;
  if (!caseSensitive || base.length > 1) base = base.toLowerCase();
  base = aliases[base] || base;
  return [m && 'm', c && 'c', s && 's', a && 'a', base].filter(Boolean).join('-');
}
function normalizeKey(shortcut, caseSensitive = false) {
  const parts = shortcut.split('-');
  const base = parts.pop();
  const modifierState = {};

  for (const part of parts) {
    const key = modifiers[part.toLowerCase()];
    if (!key) throw new Error(`Unknown modifier key: ${part}`);
    modifierState[key] = true;
  }

  return reprKey(base, modifierState, caseSensitive);
}
function normalizeSequence(sequence, caseSensitive) {
  return sequence.split(' ').map(key => normalizeKey(key, caseSensitive));
}
function parseCondition(condition) {
  return condition.split('&&').map(key => {
    key = key.trim();
    if (!key) return;

    if (key[0] === '!') {
      return {
        not: true,
        field: key.slice(1).trim()
      };
    }

    return {
      not: false,
      field: key
    };
  }).filter(Boolean);
}
function reprShortcut(shortcut, caseSensitive = false) {
  const parts = normalizeKey(shortcut, caseSensitive).split('-');
  let base = parts.pop();
  base = base[0].toUpperCase() + base.slice(1);
  const modifiers = parts.map(p => modifierSymbols[p]).filter(Boolean);
  return [...modifiers, base].join('');
}

class KeyNode {
  constructor() {
    this.children = new Map();
    this.shortcuts = new Set();
  }

  add(sequence, shortcut) {
    let node = this;

    for (const key of sequence) {
      let child = node.children.get(key);

      if (!child) {
        child = new KeyNode();
        node.children.set(key, child);
      }

      node = child;
    }

    node.shortcuts.add(shortcut);
  }

  get(sequence) {
    let node = this;

    for (const key of sequence) {
      node = node.children.get(key);
      if (!node) return null;
    }

    return node;
  }

  remove(sequence, shortcut) {
    let node = this;
    const ancestors = [node];

    for (const key of sequence) {
      node = node.children.get(key);
      if (!node) return;
      ancestors.push(node);
    }

    if (shortcut) node.shortcuts.delete(shortcut);else node.shortcuts.clear();
    let i = ancestors.length - 1;

    while (i > 1) {
      node = ancestors[i];
      if (node.shortcuts.size || node.children.size) break;
      const last = ancestors[i - 1];
      last.children.delete(sequence[i - 1]);
      i -= 1;
    }
  }

}

class KeyboardService {
  constructor() {
    this._context = {};
    this._conditionData = {};
    this._dataCI = [];
    this._dataCS = [];
    this._rootCI = new KeyNode();
    this._rootCS = new KeyNode();
    this.options = {
      sequenceTimeout: 500
    };

    this._reset = () => {
      this._curCI = null;
      this._curCS = null;

      this._resetTimer();
    };

    this.handleKey = e => {
      // Chrome sends a trusted keydown event with no key when choosing from autofill
      if (!e.key || e.key.length > 1 && modifiers[e.key.toLowerCase()]) return;

      this._resetTimer();

      const keyCS = reprKey(e.key, {
        c: e.ctrlKey,
        a: e.altKey,
        m: e.metaKey
      }, true);
      const keyCI = reprKey(e.key, {
        c: e.ctrlKey,
        s: e.shiftKey,
        a: e.altKey,
        m: e.metaKey
      });

      if (this.handleKeyOnce(keyCS, keyCI, false)) {
        e.preventDefault();

        this._reset();
      }

      this._timer = setTimeout(this._reset, this.options.sequenceTimeout);
    };
  }

  _resetTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }

  _addCondition(condition) {
    let cache = this._conditionData[condition];

    if (!cache) {
      const value = parseCondition(condition);
      cache = {
        count: 0,
        value,
        result: this._evalCondition(value)
      };
      this._conditionData[condition] = cache;
    }

    cache.count += 1;
  }

  _removeCondition(condition) {
    const cache = this._conditionData[condition];

    if (cache) {
      cache.count -= 1;

      if (!cache.count) {
        delete this._conditionData[condition];
      }
    }
  }

  _evalCondition(conditions) {
    return conditions.every(cond => {
      let value = this._context[cond.field];
      if (cond.not) value = !value;
      return value;
    });
  }

  _checkShortcut(item) {
    const cache = item.condition && this._conditionData[item.condition];
    const enabled = !cache || cache.result;

    if (item.enabled !== enabled) {
      item.enabled = enabled;

      this._enableShortcut(item);
    }
  }

  _enableShortcut(item) {
    const root = item.caseSensitive ? this._rootCS : this._rootCI;

    if (item.enabled) {
      root.add(item.sequence, item);
    } else {
      root.remove(item.sequence, item);
    }
  }

  enable() {
    this.disable();
    document.addEventListener('keydown', this.handleKey);
  }

  disable() {
    document.removeEventListener('keydown', this.handleKey);
  }

  register(key, callback, options) {
    const {
      caseSensitive,
      condition
    } = _extends({
      caseSensitive: false
    }, options);

    const sequence = normalizeSequence(key, caseSensitive);
    const data = caseSensitive ? this._dataCS : this._dataCI;
    const item = {
      sequence,
      condition,
      callback,
      enabled: false,
      caseSensitive
    };
    if (condition) this._addCondition(condition);

    this._checkShortcut(item);

    data.push(item);
    return () => {
      const index = data.indexOf(item);

      if (index >= 0) {
        data.splice(index, 1);
        if (condition) this._removeCondition(condition);
        item.enabled = false;

        this._enableShortcut(item);
      }
    };
  }

  setContext(key, value) {
    this._context[key] = value;

    for (const cache of Object.values(this._conditionData)) {
      cache.result = this._evalCondition(cache.value);
    }

    for (const data of [this._dataCS, this._dataCI]) {
      for (const item of data) {
        this._checkShortcut(item);
      }
    }
  }

  handleKeyOnce(keyCS, keyCI, fromRoot) {
    var _curCS, _curCI;

    let curCS = this._curCS;
    let curCI = this._curCI;

    if (fromRoot || !curCS && !curCI) {
      // set fromRoot to true to avoid another retry
      fromRoot = true;
      curCS = this._rootCS;
      curCI = this._rootCI;
    }

    if (curCS) curCS = curCS.get([keyCS]);
    if (curCI) curCI = curCI.get([keyCI]);
    const shortcuts = [...(curCI ? curCI.shortcuts : []), ...(curCS ? curCS.shortcuts : [])].reverse();
    this._curCS = curCS;
    this._curCI = curCI;

    if (!fromRoot && !shortcuts.length && !((_curCS = curCS) != null && _curCS.children.size) && !((_curCI = curCI) != null && _curCI.children.size)) {
      // Nothing is matched with the last key, rematch from root
      return this.handleKeyOnce(keyCS, keyCI, true);
    }

    for (const shortcut of shortcuts) {
      try {
        shortcut.callback();
      } catch (_unused) {// ignore
      }

      return true;
    }
  }

}
let service;

function getService() {
  if (!service) {
    service = new KeyboardService();
    service.enable();
  }

  return service;
}

const register = (...args) => getService().register(...args);
const enable = () => getService().enable();
const disable = () => getService().disable();
const handleKey = (...args) => getService().handleKey(...args);




/***/ }),

/***/ "./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EffectScope": () => (/* binding */ EffectScope),
/* harmony export */   "ITERATE_KEY": () => (/* binding */ ITERATE_KEY),
/* harmony export */   "ReactiveEffect": () => (/* binding */ ReactiveEffect),
/* harmony export */   "computed": () => (/* binding */ computed),
/* harmony export */   "customRef": () => (/* binding */ customRef),
/* harmony export */   "deferredComputed": () => (/* binding */ deferredComputed),
/* harmony export */   "effect": () => (/* binding */ effect),
/* harmony export */   "effectScope": () => (/* binding */ effectScope),
/* harmony export */   "enableTracking": () => (/* binding */ enableTracking),
/* harmony export */   "getCurrentScope": () => (/* binding */ getCurrentScope),
/* harmony export */   "isProxy": () => (/* binding */ isProxy),
/* harmony export */   "isReactive": () => (/* binding */ isReactive),
/* harmony export */   "isReadonly": () => (/* binding */ isReadonly),
/* harmony export */   "isRef": () => (/* binding */ isRef),
/* harmony export */   "isShallow": () => (/* binding */ isShallow),
/* harmony export */   "markRaw": () => (/* binding */ markRaw),
/* harmony export */   "onScopeDispose": () => (/* binding */ onScopeDispose),
/* harmony export */   "pauseTracking": () => (/* binding */ pauseTracking),
/* harmony export */   "proxyRefs": () => (/* binding */ proxyRefs),
/* harmony export */   "reactive": () => (/* binding */ reactive),
/* harmony export */   "readonly": () => (/* binding */ readonly),
/* harmony export */   "ref": () => (/* binding */ ref),
/* harmony export */   "resetTracking": () => (/* binding */ resetTracking),
/* harmony export */   "shallowReactive": () => (/* binding */ shallowReactive),
/* harmony export */   "shallowReadonly": () => (/* binding */ shallowReadonly),
/* harmony export */   "shallowRef": () => (/* binding */ shallowRef),
/* harmony export */   "stop": () => (/* binding */ stop),
/* harmony export */   "toRaw": () => (/* binding */ toRaw),
/* harmony export */   "toRef": () => (/* binding */ toRef),
/* harmony export */   "toRefs": () => (/* binding */ toRefs),
/* harmony export */   "track": () => (/* binding */ track),
/* harmony export */   "trigger": () => (/* binding */ trigger),
/* harmony export */   "triggerRef": () => (/* binding */ triggerRef),
/* harmony export */   "unref": () => (/* binding */ unref)
/* harmony export */ });
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js");


function warn(msg, ...args) {
    console.warn(`[Vue warn] ${msg}`, ...args);
}

let activeEffectScope;
class EffectScope {
    constructor(detached = false) {
        this.detached = detached;
        /**
         * @internal
         */
        this.active = true;
        /**
         * @internal
         */
        this.effects = [];
        /**
         * @internal
         */
        this.cleanups = [];
        this.parent = activeEffectScope;
        if (!detached && activeEffectScope) {
            this.index =
                (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
    }
    run(fn) {
        if (this.active) {
            const currentEffectScope = activeEffectScope;
            try {
                activeEffectScope = this;
                return fn();
            }
            finally {
                activeEffectScope = currentEffectScope;
            }
        }
        else if ((true)) {
            warn(`cannot run an inactive effect scope.`);
        }
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    on() {
        activeEffectScope = this;
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    off() {
        activeEffectScope = this.parent;
    }
    stop(fromParent) {
        if (this.active) {
            let i, l;
            for (i = 0, l = this.effects.length; i < l; i++) {
                this.effects[i].stop();
            }
            for (i = 0, l = this.cleanups.length; i < l; i++) {
                this.cleanups[i]();
            }
            if (this.scopes) {
                for (i = 0, l = this.scopes.length; i < l; i++) {
                    this.scopes[i].stop(true);
                }
            }
            // nested scope, dereference from parent to avoid memory leaks
            if (!this.detached && this.parent && !fromParent) {
                // optimized O(1) removal
                const last = this.parent.scopes.pop();
                if (last && last !== this) {
                    this.parent.scopes[this.index] = last;
                    last.index = this.index;
                }
            }
            this.parent = undefined;
            this.active = false;
        }
    }
}
function effectScope(detached) {
    return new EffectScope(detached);
}
function recordEffectScope(effect, scope = activeEffectScope) {
    if (scope && scope.active) {
        scope.effects.push(effect);
    }
}
function getCurrentScope() {
    return activeEffectScope;
}
function onScopeDispose(fn) {
    if (activeEffectScope) {
        activeEffectScope.cleanups.push(fn);
    }
    else if ((true)) {
        warn(`onScopeDispose() is called when there is no active effect scope` +
            ` to be associated with.`);
    }
}

const createDep = (effects) => {
    const dep = new Set(effects);
    dep.w = 0;
    dep.n = 0;
    return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
    if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
            deps[i].w |= trackOpBit; // set was tracked
        }
    }
};
const finalizeDepMarkers = (effect) => {
    const { deps } = effect;
    if (deps.length) {
        let ptr = 0;
        for (let i = 0; i < deps.length; i++) {
            const dep = deps[i];
            if (wasTracked(dep) && !newTracked(dep)) {
                dep.delete(effect);
            }
            else {
                deps[ptr++] = dep;
            }
            // clear bits
            dep.w &= ~trackOpBit;
            dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
    }
};

const targetMap = new WeakMap();
// The number of effects currently being tracked recursively.
let effectTrackDepth = 0;
let trackOpBit = 1;
/**
 * The bitwise track markers support at most 30 levels of recursion.
 * This value is chosen to enable modern JS engines to use a SMI on all platforms.
 * When recursion depth is greater, fall back to using a full cleanup.
 */
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol(( true) ? 'iterate' : 0);
const MAP_KEY_ITERATE_KEY = Symbol(( true) ? 'Map key iterate' : 0);
class ReactiveEffect {
    constructor(fn, scheduler = null, scope) {
        this.fn = fn;
        this.scheduler = scheduler;
        this.active = true;
        this.deps = [];
        this.parent = undefined;
        recordEffectScope(this, scope);
    }
    run() {
        if (!this.active) {
            return this.fn();
        }
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while (parent) {
            if (parent === this) {
                return;
            }
            parent = parent.parent;
        }
        try {
            this.parent = activeEffect;
            activeEffect = this;
            shouldTrack = true;
            trackOpBit = 1 << ++effectTrackDepth;
            if (effectTrackDepth <= maxMarkerBits) {
                initDepMarkers(this);
            }
            else {
                cleanupEffect(this);
            }
            return this.fn();
        }
        finally {
            if (effectTrackDepth <= maxMarkerBits) {
                finalizeDepMarkers(this);
            }
            trackOpBit = 1 << --effectTrackDepth;
            activeEffect = this.parent;
            shouldTrack = lastShouldTrack;
            this.parent = undefined;
            if (this.deferStop) {
                this.stop();
            }
        }
    }
    stop() {
        // stopped while running itself - defer the cleanup
        if (activeEffect === this) {
            this.deferStop = true;
        }
        else if (this.active) {
            cleanupEffect(this);
            if (this.onStop) {
                this.onStop();
            }
            this.active = false;
        }
    }
}
function cleanupEffect(effect) {
    const { deps } = effect;
    if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
            deps[i].delete(effect);
        }
        deps.length = 0;
    }
}
function effect(fn, options) {
    if (fn.effect) {
        fn = fn.effect.fn;
    }
    const _effect = new ReactiveEffect(fn);
    if (options) {
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.extend)(_effect, options);
        if (options.scope)
            recordEffectScope(_effect, options.scope);
    }
    if (!options || !options.lazy) {
        _effect.run();
    }
    const runner = _effect.run.bind(_effect);
    runner.effect = _effect;
    return runner;
}
function stop(runner) {
    runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
}
function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === undefined ? true : last;
}
function track(target, type, key) {
    if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) {
            targetMap.set(target, (depsMap = new Map()));
        }
        let dep = depsMap.get(key);
        if (!dep) {
            depsMap.set(key, (dep = createDep()));
        }
        const eventInfo = ( true)
            ? { effect: activeEffect, target, type, key }
            : 0;
        trackEffects(dep, eventInfo);
    }
}
function trackEffects(dep, debuggerEventExtraInfo) {
    let shouldTrack = false;
    if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
            dep.n |= trackOpBit; // set newly tracked
            shouldTrack = !wasTracked(dep);
        }
    }
    else {
        // Full cleanup mode.
        shouldTrack = !dep.has(activeEffect);
    }
    if (shouldTrack) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (( true) && activeEffect.onTrack) {
            activeEffect.onTrack(Object.assign({ effect: activeEffect }, debuggerEventExtraInfo));
        }
    }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) {
        // never been tracked
        return;
    }
    let deps = [];
    if (type === "clear" /* TriggerOpTypes.CLEAR */) {
        // collection being cleared
        // trigger all effects for target
        deps = [...depsMap.values()];
    }
    else if (key === 'length' && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {
        const newLength = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.toNumber)(newValue);
        depsMap.forEach((dep, key) => {
            if (key === 'length' || key >= newLength) {
                deps.push(dep);
            }
        });
    }
    else {
        // schedule runs for SET | ADD | DELETE
        if (key !== void 0) {
            deps.push(depsMap.get(key));
        }
        // also run for iteration key on ADD | DELETE | Map.SET
        switch (type) {
            case "add" /* TriggerOpTypes.ADD */:
                if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target)) {
                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                    }
                }
                else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isIntegerKey)(key)) {
                    // new index added to array -> length changes
                    deps.push(depsMap.get('length'));
                }
                break;
            case "delete" /* TriggerOpTypes.DELETE */:
                if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target)) {
                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                    }
                }
                break;
            case "set" /* TriggerOpTypes.SET */:
                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                }
                break;
        }
    }
    const eventInfo = ( true)
        ? { target, type, key, newValue, oldValue, oldTarget }
        : 0;
    if (deps.length === 1) {
        if (deps[0]) {
            if ((true)) {
                triggerEffects(deps[0], eventInfo);
            }
            else {}
        }
    }
    else {
        const effects = [];
        for (const dep of deps) {
            if (dep) {
                effects.push(...dep);
            }
        }
        if ((true)) {
            triggerEffects(createDep(effects), eventInfo);
        }
        else {}
    }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
    // spread into array for stabilization
    const effects = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(dep) ? dep : [...dep];
    for (const effect of effects) {
        if (effect.computed) {
            triggerEffect(effect, debuggerEventExtraInfo);
        }
    }
    for (const effect of effects) {
        if (!effect.computed) {
            triggerEffect(effect, debuggerEventExtraInfo);
        }
    }
}
function triggerEffect(effect, debuggerEventExtraInfo) {
    if (effect !== activeEffect || effect.allowRecurse) {
        if (( true) && effect.onTrigger) {
            effect.onTrigger((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.extend)({ effect }, debuggerEventExtraInfo));
        }
        if (effect.scheduler) {
            effect.scheduler();
        }
        else {
            effect.run();
        }
    }
}

const isNonTrackableKeys = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.makeMap)(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
/*#__PURE__*/
Object.getOwnPropertyNames(Symbol)
    // ios10.x Object.getOwnPropertyNames(Symbol) can enumerate 'arguments' and 'caller'
    // but accessing them on Symbol leads to TypeError because Symbol is a strict mode
    // function
    .filter(key => key !== 'arguments' && key !== 'caller')
    .map(key => Symbol[key])
    .filter(_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol));
const get = /*#__PURE__*/ createGetter();
const shallowGet = /*#__PURE__*/ createGetter(false, true);
const readonlyGet = /*#__PURE__*/ createGetter(true);
const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);
const arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();
function createArrayInstrumentations() {
    const instrumentations = {};
    ['includes', 'indexOf', 'lastIndexOf'].forEach(key => {
        instrumentations[key] = function (...args) {
            const arr = toRaw(this);
            for (let i = 0, l = this.length; i < l; i++) {
                track(arr, "get" /* TrackOpTypes.GET */, i + '');
            }
            // we run the method using the original args first (which may be reactive)
            const res = arr[key](...args);
            if (res === -1 || res === false) {
                // if that didn't work, run it again using raw values.
                return arr[key](...args.map(toRaw));
            }
            else {
                return res;
            }
        };
    });
    ['push', 'pop', 'shift', 'unshift', 'splice'].forEach(key => {
        instrumentations[key] = function (...args) {
            pauseTracking();
            const res = toRaw(this)[key].apply(this, args);
            resetTracking();
            return res;
        };
    });
    return instrumentations;
}
function createGetter(isReadonly = false, shallow = false) {
    return function get(target, key, receiver) {
        if (key === "__v_isReactive" /* ReactiveFlags.IS_REACTIVE */) {
            return !isReadonly;
        }
        else if (key === "__v_isReadonly" /* ReactiveFlags.IS_READONLY */) {
            return isReadonly;
        }
        else if (key === "__v_isShallow" /* ReactiveFlags.IS_SHALLOW */) {
            return shallow;
        }
        else if (key === "__v_raw" /* ReactiveFlags.RAW */ &&
            receiver ===
                (isReadonly
                    ? shallow
                        ? shallowReadonlyMap
                        : readonlyMap
                    : shallow
                        ? shallowReactiveMap
                        : reactiveMap).get(target)) {
            return target;
        }
        const targetIsArray = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target);
        if (!isReadonly && targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(arrayInstrumentations, key)) {
            return Reflect.get(arrayInstrumentations, key, receiver);
        }
        const res = Reflect.get(target, key, receiver);
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
            return res;
        }
        if (!isReadonly) {
            track(target, "get" /* TrackOpTypes.GET */, key);
        }
        if (shallow) {
            return res;
        }
        if (isRef(res)) {
            // ref unwrapping - skip unwrap for Array + integer key.
            return targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isIntegerKey)(key) ? res : res.value;
        }
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(res)) {
            // Convert returned value into a proxy as well. we do the isObject check
            // here to avoid invalid value warning. Also need to lazy access readonly
            // and reactive here to avoid circular dependency.
            return isReadonly ? readonly(res) : reactive(res);
        }
        return res;
    };
}
const set = /*#__PURE__*/ createSetter();
const shallowSet = /*#__PURE__*/ createSetter(true);
function createSetter(shallow = false) {
    return function set(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
            return false;
        }
        if (!shallow) {
            if (!isShallow(value) && !isReadonly(value)) {
                oldValue = toRaw(oldValue);
                value = toRaw(value);
            }
            if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
                return true;
            }
        }
        const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isIntegerKey)(key)
            ? Number(key) < target.length
            : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(target, key);
        const result = Reflect.set(target, key, value, receiver);
        // don't trigger if target is something up in the prototype chain of original
        if (target === toRaw(receiver)) {
            if (!hadKey) {
                trigger(target, "add" /* TriggerOpTypes.ADD */, key, value);
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(value, oldValue)) {
                trigger(target, "set" /* TriggerOpTypes.SET */, key, value, oldValue);
            }
        }
        return result;
    };
}
function deleteProperty(target, key) {
    const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
        trigger(target, "delete" /* TriggerOpTypes.DELETE */, key, undefined, oldValue);
    }
    return result;
}
function has(target, key) {
    const result = Reflect.has(target, key);
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isSymbol)(key) || !builtInSymbols.has(key)) {
        track(target, "has" /* TrackOpTypes.HAS */, key);
    }
    return result;
}
function ownKeys(target) {
    track(target, "iterate" /* TrackOpTypes.ITERATE */, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(target) ? 'length' : ITERATE_KEY);
    return Reflect.ownKeys(target);
}
const mutableHandlers = {
    get,
    set,
    deleteProperty,
    has,
    ownKeys
};
const readonlyHandlers = {
    get: readonlyGet,
    set(target, key) {
        if ((true)) {
            warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
    },
    deleteProperty(target, key) {
        if ((true)) {
            warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
    }
};
const shallowReactiveHandlers = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.extend)({}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
});
// Props handlers are special in the sense that it should not unwrap top-level
// refs (in order to allow refs to be explicitly passed down), but should
// retain the reactivity of the normal readonly object.
const shallowReadonlyHandlers = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.extend)({}, readonlyHandlers, {
    get: shallowReadonlyGet
});

const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly = false, isShallow = false) {
    // #1772: readonly(reactive(Map)) should return readonly + reactive version
    // of the value
    target = target["__v_raw" /* ReactiveFlags.RAW */];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (!isReadonly) {
        if (key !== rawKey) {
            track(rawTarget, "get" /* TrackOpTypes.GET */, key);
        }
        track(rawTarget, "get" /* TrackOpTypes.GET */, rawKey);
    }
    const { has } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has.call(rawTarget, key)) {
        return wrap(target.get(key));
    }
    else if (has.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
    }
    else if (target !== rawTarget) {
        // #3602 readonly(reactive(Map))
        // ensure that the nested reactive `Map` can do tracking for itself
        target.get(key);
    }
}
function has$1(key, isReadonly = false) {
    const target = this["__v_raw" /* ReactiveFlags.RAW */];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (!isReadonly) {
        if (key !== rawKey) {
            track(rawTarget, "has" /* TrackOpTypes.HAS */, key);
        }
        track(rawTarget, "has" /* TrackOpTypes.HAS */, rawKey);
    }
    return key === rawKey
        ? target.has(key)
        : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly = false) {
    target = target["__v_raw" /* ReactiveFlags.RAW */];
    !isReadonly && track(toRaw(target), "iterate" /* TrackOpTypes.ITERATE */, ITERATE_KEY);
    return Reflect.get(target, 'size', target);
}
function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
        target.add(value);
        trigger(target, "add" /* TriggerOpTypes.ADD */, value, value);
    }
    return this;
}
function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has, get } = getProto(target);
    let hadKey = has.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has.call(target, key);
    }
    else if ((true)) {
        checkIdentityKeys(target, has, key);
    }
    const oldValue = get.call(target, key);
    target.set(key, value);
    if (!hadKey) {
        trigger(target, "add" /* TriggerOpTypes.ADD */, key, value);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(value, oldValue)) {
        trigger(target, "set" /* TriggerOpTypes.SET */, key, value, oldValue);
    }
    return this;
}
function deleteEntry(key) {
    const target = toRaw(this);
    const { has, get } = getProto(target);
    let hadKey = has.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has.call(target, key);
    }
    else if ((true)) {
        checkIdentityKeys(target, has, key);
    }
    const oldValue = get ? get.call(target, key) : undefined;
    // forward the operation before queueing reactions
    const result = target.delete(key);
    if (hadKey) {
        trigger(target, "delete" /* TriggerOpTypes.DELETE */, key, undefined, oldValue);
    }
    return result;
}
function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = ( true)
        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(target)
            ? new Map(target)
            : new Set(target)
        : 0;
    // forward the operation before queueing reactions
    const result = target.clear();
    if (hadItems) {
        trigger(target, "clear" /* TriggerOpTypes.CLEAR */, undefined, undefined, oldTarget);
    }
    return result;
}
function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw" /* ReactiveFlags.RAW */];
        const rawTarget = toRaw(target);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate" /* TrackOpTypes.ITERATE */, ITERATE_KEY);
        return target.forEach((value, key) => {
            // important: make sure the callback is
            // 1. invoked with the reactive map as `this` and 3rd arg
            // 2. the value received should be a corresponding reactive/readonly.
            return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
    };
}
function createIterableMethod(method, isReadonly, isShallow) {
    return function (...args) {
        const target = this["__v_raw" /* ReactiveFlags.RAW */];
        const rawTarget = toRaw(target);
        const targetIsMap = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isMap)(rawTarget);
        const isPair = method === 'entries' || (method === Symbol.iterator && targetIsMap);
        const isKeyOnly = method === 'keys' && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly &&
            track(rawTarget, "iterate" /* TrackOpTypes.ITERATE */, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        // return a wrapped iterator which returns observed versions of the
        // values emitted from the real iterator
        return {
            // iterator protocol
            next() {
                const { value, done } = innerIterator.next();
                return done
                    ? { value, done }
                    : {
                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
                        done
                    };
            },
            // iterable protocol
            [Symbol.iterator]() {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function (...args) {
        if ((true)) {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            console.warn(`${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.capitalize)(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" /* TriggerOpTypes.DELETE */ ? false : this;
    };
}
function createInstrumentations() {
    const mutableInstrumentations = {
        get(key) {
            return get$1(this, key);
        },
        get size() {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
    };
    const shallowInstrumentations = {
        get(key) {
            return get$1(this, key, false, true);
        },
        get size() {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
    };
    const readonlyInstrumentations = {
        get(key) {
            return get$1(this, key, true);
        },
        get size() {
            return size(this, true);
        },
        has(key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* TriggerOpTypes.ADD */),
        set: createReadonlyMethod("set" /* TriggerOpTypes.SET */),
        delete: createReadonlyMethod("delete" /* TriggerOpTypes.DELETE */),
        clear: createReadonlyMethod("clear" /* TriggerOpTypes.CLEAR */),
        forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations = {
        get(key) {
            return get$1(this, key, true, true);
        },
        get size() {
            return size(this, true);
        },
        has(key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* TriggerOpTypes.ADD */),
        set: createReadonlyMethod("set" /* TriggerOpTypes.SET */),
        delete: createReadonlyMethod("delete" /* TriggerOpTypes.DELETE */),
        clear: createReadonlyMethod("clear" /* TriggerOpTypes.CLEAR */),
        forEach: createForEach(true, true)
    };
    const iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];
    iteratorMethods.forEach(method => {
        mutableInstrumentations[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations[method] = createIterableMethod(method, true, false);
        shallowInstrumentations[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
    });
    return [
        mutableInstrumentations,
        readonlyInstrumentations,
        shallowInstrumentations,
        shallowReadonlyInstrumentations
    ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();
function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow
        ? isReadonly
            ? shallowReadonlyInstrumentations
            : shallowInstrumentations
        : isReadonly
            ? readonlyInstrumentations
            : mutableInstrumentations;
    return (target, key, receiver) => {
        if (key === "__v_isReactive" /* ReactiveFlags.IS_REACTIVE */) {
            return !isReadonly;
        }
        else if (key === "__v_isReadonly" /* ReactiveFlags.IS_READONLY */) {
            return isReadonly;
        }
        else if (key === "__v_raw" /* ReactiveFlags.RAW */) {
            return target;
        }
        return Reflect.get((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(instrumentations, key) && key in target
            ? instrumentations
            : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has.call(target, rawKey)) {
        const type = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.toRawType)(target);
        console.warn(`Reactive ${type} contains both the raw and reactive ` +
            `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +
            `which can lead to inconsistencies. ` +
            `Avoid differentiating between the raw and reactive versions ` +
            `of an object and only use the reactive version if possible.`);
    }
}

const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
    switch (rawType) {
        case 'Object':
        case 'Array':
            return 1 /* TargetType.COMMON */;
        case 'Map':
        case 'Set':
        case 'WeakMap':
        case 'WeakSet':
            return 2 /* TargetType.COLLECTION */;
        default:
            return 0 /* TargetType.INVALID */;
    }
}
function getTargetType(value) {
    return value["__v_skip" /* ReactiveFlags.SKIP */] || !Object.isExtensible(value)
        ? 0 /* TargetType.INVALID */
        : targetTypeMap((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.toRawType)(value));
}
function reactive(target) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (isReadonly(target)) {
        return target;
    }
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */
function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
/**
 * Creates a readonly copy of the original object. Note the returned copy is not
 * made reactive, but `readonly` can be called on an already reactive object.
 */
function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
/**
 * Returns a reactive-copy of the original object, where only the root level
 * properties are readonly, and does NOT unwrap refs nor recursively convert
 * returned properties.
 * This is used for creating the props proxy object for stateful components.
 */
function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(target)) {
        if ((true)) {
            console.warn(`value cannot be made reactive: ${String(target)}`);
        }
        return target;
    }
    // target is already a Proxy, return it.
    // exception: calling readonly() on a reactive object
    if (target["__v_raw" /* ReactiveFlags.RAW */] &&
        !(isReadonly && target["__v_isReactive" /* ReactiveFlags.IS_REACTIVE */])) {
        return target;
    }
    // target already has corresponding Proxy
    const existingProxy = proxyMap.get(target);
    if (existingProxy) {
        return existingProxy;
    }
    // only specific value types can be observed.
    const targetType = getTargetType(target);
    if (targetType === 0 /* TargetType.INVALID */) {
        return target;
    }
    const proxy = new Proxy(target, targetType === 2 /* TargetType.COLLECTION */ ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly(value)) {
        return isReactive(value["__v_raw" /* ReactiveFlags.RAW */]);
    }
    return !!(value && value["__v_isReactive" /* ReactiveFlags.IS_REACTIVE */]);
}
function isReadonly(value) {
    return !!(value && value["__v_isReadonly" /* ReactiveFlags.IS_READONLY */]);
}
function isShallow(value) {
    return !!(value && value["__v_isShallow" /* ReactiveFlags.IS_SHALLOW */]);
}
function isProxy(value) {
    return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
    const raw = observed && observed["__v_raw" /* ReactiveFlags.RAW */];
    return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.def)(value, "__v_skip" /* ReactiveFlags.SKIP */, true);
    return value;
}
const toReactive = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) ? reactive(value) : value;
const toReadonly = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) ? readonly(value) : value;

function trackRefValue(ref) {
    if (shouldTrack && activeEffect) {
        ref = toRaw(ref);
        if ((true)) {
            trackEffects(ref.dep || (ref.dep = createDep()), {
                target: ref,
                type: "get" /* TrackOpTypes.GET */,
                key: 'value'
            });
        }
        else {}
    }
}
function triggerRefValue(ref, newVal) {
    ref = toRaw(ref);
    if (ref.dep) {
        if ((true)) {
            triggerEffects(ref.dep, {
                target: ref,
                type: "set" /* TriggerOpTypes.SET */,
                key: 'value',
                newValue: newVal
            });
        }
        else {}
    }
}
function isRef(r) {
    return !!(r && r.__v_isRef === true);
}
function ref(value) {
    return createRef(value, false);
}
function shallowRef(value) {
    return createRef(value, true);
}
function createRef(rawValue, shallow) {
    if (isRef(rawValue)) {
        return rawValue;
    }
    return new RefImpl(rawValue, shallow);
}
class RefImpl {
    constructor(value, __v_isShallow) {
        this.__v_isShallow = __v_isShallow;
        this.dep = undefined;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
    }
    get value() {
        trackRefValue(this);
        return this._value;
    }
    set value(newVal) {
        const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
        newVal = useDirectValue ? newVal : toRaw(newVal);
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.hasChanged)(newVal, this._rawValue)) {
            this._rawValue = newVal;
            this._value = useDirectValue ? newVal : toReactive(newVal);
            triggerRefValue(this, newVal);
        }
    }
}
function triggerRef(ref) {
    triggerRefValue(ref, ( true) ? ref.value : 0);
}
function unref(ref) {
    return isRef(ref) ? ref.value : ref;
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
    set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
        }
        else {
            return Reflect.set(target, key, value, receiver);
        }
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs)
        ? objectWithRefs
        : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory) {
        this.dep = undefined;
        this.__v_isRef = true;
        const { get, set } = factory(() => trackRefValue(this), () => triggerRefValue(this));
        this._get = get;
        this._set = set;
    }
    get value() {
        return this._get();
    }
    set value(newVal) {
        this._set(newVal);
    }
}
function customRef(factory) {
    return new CustomRefImpl(factory);
}
function toRefs(object) {
    if (( true) && !isProxy(object)) {
        console.warn(`toRefs() expects a reactive object but received a plain one.`);
    }
    const ret = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isArray)(object) ? new Array(object.length) : {};
    for (const key in object) {
        ret[key] = toRef(object, key);
    }
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key, _defaultValue) {
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
    }
    get value() {
        const val = this._object[this._key];
        return val === undefined ? this._defaultValue : val;
    }
    set value(newVal) {
        this._object[this._key] = newVal;
    }
}
function toRef(object, key, defaultValue) {
    const val = object[key];
    return isRef(val)
        ? val
        : new ObjectRefImpl(object, key, defaultValue);
}

var _a;
class ComputedRefImpl {
    constructor(getter, _setter, isReadonly, isSSR) {
        this._setter = _setter;
        this.dep = undefined;
        this.__v_isRef = true;
        this[_a] = false;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, () => {
            if (!this._dirty) {
                this._dirty = true;
                triggerRefValue(this);
            }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this["__v_isReadonly" /* ReactiveFlags.IS_READONLY */] = isReadonly;
    }
    get value() {
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        const self = toRaw(this);
        trackRefValue(self);
        if (self._dirty || !self._cacheable) {
            self._dirty = false;
            self._value = self.effect.run();
        }
        return self._value;
    }
    set value(newValue) {
        this._setter(newValue);
    }
}
_a = "__v_isReadonly" /* ReactiveFlags.IS_READONLY */;
function computed(getterOrOptions, debugOptions, isSSR = false) {
    let getter;
    let setter;
    const onlyGetter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__.isFunction)(getterOrOptions);
    if (onlyGetter) {
        getter = getterOrOptions;
        setter = ( true)
            ? () => {
                console.warn('Write operation failed: computed value is readonly');
            }
            : 0;
    }
    else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
    if (( true) && debugOptions && !isSSR) {
        cRef.effect.onTrack = debugOptions.onTrack;
        cRef.effect.onTrigger = debugOptions.onTrigger;
    }
    return cRef;
}

var _a$1;
const tick = /*#__PURE__*/ Promise.resolve();
const queue = [];
let queued = false;
const scheduler = (fn) => {
    queue.push(fn);
    if (!queued) {
        queued = true;
        tick.then(flush);
    }
};
const flush = () => {
    for (let i = 0; i < queue.length; i++) {
        queue[i]();
    }
    queue.length = 0;
    queued = false;
};
class DeferredComputedRefImpl {
    constructor(getter) {
        this.dep = undefined;
        this._dirty = true;
        this.__v_isRef = true;
        this[_a$1] = true;
        let compareTarget;
        let hasCompareTarget = false;
        let scheduled = false;
        this.effect = new ReactiveEffect(getter, (computedTrigger) => {
            if (this.dep) {
                if (computedTrigger) {
                    compareTarget = this._value;
                    hasCompareTarget = true;
                }
                else if (!scheduled) {
                    const valueToCompare = hasCompareTarget ? compareTarget : this._value;
                    scheduled = true;
                    hasCompareTarget = false;
                    scheduler(() => {
                        if (this.effect.active && this._get() !== valueToCompare) {
                            triggerRefValue(this);
                        }
                        scheduled = false;
                    });
                }
                // chained upstream computeds are notified synchronously to ensure
                // value invalidation in case of sync access; normal effects are
                // deferred to be triggered in scheduler.
                for (const e of this.dep) {
                    if (e.computed instanceof DeferredComputedRefImpl) {
                        e.scheduler(true /* computedTrigger */);
                    }
                }
            }
            this._dirty = true;
        });
        this.effect.computed = this;
    }
    _get() {
        if (this._dirty) {
            this._dirty = false;
            return (this._value = this.effect.run());
        }
        return this._value;
    }
    get value() {
        trackRefValue(this);
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        return toRaw(this)._get();
    }
}
_a$1 = "__v_isReadonly" /* ReactiveFlags.IS_READONLY */;
function deferredComputed(getter) {
    return new DeferredComputedRefImpl(getter);
}




/***/ }),

/***/ "./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": () => (/* binding */ BaseTransition),
/* harmony export */   "Comment": () => (/* binding */ Comment),
/* harmony export */   "EffectScope": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.EffectScope),
/* harmony export */   "Fragment": () => (/* binding */ Fragment),
/* harmony export */   "KeepAlive": () => (/* binding */ KeepAlive),
/* harmony export */   "ReactiveEffect": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect),
/* harmony export */   "Static": () => (/* binding */ Static),
/* harmony export */   "Suspense": () => (/* binding */ Suspense),
/* harmony export */   "Teleport": () => (/* binding */ Teleport),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "callWithAsyncErrorHandling": () => (/* binding */ callWithAsyncErrorHandling),
/* harmony export */   "callWithErrorHandling": () => (/* binding */ callWithErrorHandling),
/* harmony export */   "camelize": () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize),
/* harmony export */   "capitalize": () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize),
/* harmony export */   "cloneVNode": () => (/* binding */ cloneVNode),
/* harmony export */   "compatUtils": () => (/* binding */ compatUtils),
/* harmony export */   "computed": () => (/* binding */ computed),
/* harmony export */   "createBlock": () => (/* binding */ createBlock),
/* harmony export */   "createCommentVNode": () => (/* binding */ createCommentVNode),
/* harmony export */   "createElementBlock": () => (/* binding */ createElementBlock),
/* harmony export */   "createElementVNode": () => (/* binding */ createBaseVNode),
/* harmony export */   "createHydrationRenderer": () => (/* binding */ createHydrationRenderer),
/* harmony export */   "createPropsRestProxy": () => (/* binding */ createPropsRestProxy),
/* harmony export */   "createRenderer": () => (/* binding */ createRenderer),
/* harmony export */   "createSlots": () => (/* binding */ createSlots),
/* harmony export */   "createStaticVNode": () => (/* binding */ createStaticVNode),
/* harmony export */   "createTextVNode": () => (/* binding */ createTextVNode),
/* harmony export */   "createVNode": () => (/* binding */ createVNode),
/* harmony export */   "customRef": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.customRef),
/* harmony export */   "defineAsyncComponent": () => (/* binding */ defineAsyncComponent),
/* harmony export */   "defineComponent": () => (/* binding */ defineComponent),
/* harmony export */   "defineEmits": () => (/* binding */ defineEmits),
/* harmony export */   "defineExpose": () => (/* binding */ defineExpose),
/* harmony export */   "defineProps": () => (/* binding */ defineProps),
/* harmony export */   "devtools": () => (/* binding */ devtools),
/* harmony export */   "effect": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.effect),
/* harmony export */   "effectScope": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.effectScope),
/* harmony export */   "getCurrentInstance": () => (/* binding */ getCurrentInstance),
/* harmony export */   "getCurrentScope": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope),
/* harmony export */   "getTransitionRawChildren": () => (/* binding */ getTransitionRawChildren),
/* harmony export */   "guardReactiveProps": () => (/* binding */ guardReactiveProps),
/* harmony export */   "h": () => (/* binding */ h),
/* harmony export */   "handleError": () => (/* binding */ handleError),
/* harmony export */   "initCustomFormatter": () => (/* binding */ initCustomFormatter),
/* harmony export */   "inject": () => (/* binding */ inject),
/* harmony export */   "isMemoSame": () => (/* binding */ isMemoSame),
/* harmony export */   "isProxy": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy),
/* harmony export */   "isReactive": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive),
/* harmony export */   "isReadonly": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReadonly),
/* harmony export */   "isRef": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef),
/* harmony export */   "isRuntimeOnly": () => (/* binding */ isRuntimeOnly),
/* harmony export */   "isShallow": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow),
/* harmony export */   "isVNode": () => (/* binding */ isVNode),
/* harmony export */   "markRaw": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.markRaw),
/* harmony export */   "mergeDefaults": () => (/* binding */ mergeDefaults),
/* harmony export */   "mergeProps": () => (/* binding */ mergeProps),
/* harmony export */   "nextTick": () => (/* binding */ nextTick),
/* harmony export */   "normalizeClass": () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeClass),
/* harmony export */   "normalizeProps": () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeProps),
/* harmony export */   "normalizeStyle": () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeStyle),
/* harmony export */   "onActivated": () => (/* binding */ onActivated),
/* harmony export */   "onBeforeMount": () => (/* binding */ onBeforeMount),
/* harmony export */   "onBeforeUnmount": () => (/* binding */ onBeforeUnmount),
/* harmony export */   "onBeforeUpdate": () => (/* binding */ onBeforeUpdate),
/* harmony export */   "onDeactivated": () => (/* binding */ onDeactivated),
/* harmony export */   "onErrorCaptured": () => (/* binding */ onErrorCaptured),
/* harmony export */   "onMounted": () => (/* binding */ onMounted),
/* harmony export */   "onRenderTracked": () => (/* binding */ onRenderTracked),
/* harmony export */   "onRenderTriggered": () => (/* binding */ onRenderTriggered),
/* harmony export */   "onScopeDispose": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.onScopeDispose),
/* harmony export */   "onServerPrefetch": () => (/* binding */ onServerPrefetch),
/* harmony export */   "onUnmounted": () => (/* binding */ onUnmounted),
/* harmony export */   "onUpdated": () => (/* binding */ onUpdated),
/* harmony export */   "openBlock": () => (/* binding */ openBlock),
/* harmony export */   "popScopeId": () => (/* binding */ popScopeId),
/* harmony export */   "provide": () => (/* binding */ provide),
/* harmony export */   "proxyRefs": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.proxyRefs),
/* harmony export */   "pushScopeId": () => (/* binding */ pushScopeId),
/* harmony export */   "queuePostFlushCb": () => (/* binding */ queuePostFlushCb),
/* harmony export */   "reactive": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.reactive),
/* harmony export */   "readonly": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.readonly),
/* harmony export */   "ref": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref),
/* harmony export */   "registerRuntimeCompiler": () => (/* binding */ registerRuntimeCompiler),
/* harmony export */   "renderList": () => (/* binding */ renderList),
/* harmony export */   "renderSlot": () => (/* binding */ renderSlot),
/* harmony export */   "resolveComponent": () => (/* binding */ resolveComponent),
/* harmony export */   "resolveDirective": () => (/* binding */ resolveDirective),
/* harmony export */   "resolveDynamicComponent": () => (/* binding */ resolveDynamicComponent),
/* harmony export */   "resolveFilter": () => (/* binding */ resolveFilter),
/* harmony export */   "resolveTransitionHooks": () => (/* binding */ resolveTransitionHooks),
/* harmony export */   "setBlockTracking": () => (/* binding */ setBlockTracking),
/* harmony export */   "setDevtoolsHook": () => (/* binding */ setDevtoolsHook),
/* harmony export */   "setTransitionHooks": () => (/* binding */ setTransitionHooks),
/* harmony export */   "shallowReactive": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReactive),
/* harmony export */   "shallowReadonly": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly),
/* harmony export */   "shallowRef": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowRef),
/* harmony export */   "ssrContextKey": () => (/* binding */ ssrContextKey),
/* harmony export */   "ssrUtils": () => (/* binding */ ssrUtils),
/* harmony export */   "stop": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.stop),
/* harmony export */   "toDisplayString": () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.toDisplayString),
/* harmony export */   "toHandlerKey": () => (/* reexport safe */ _vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey),
/* harmony export */   "toHandlers": () => (/* binding */ toHandlers),
/* harmony export */   "toRaw": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw),
/* harmony export */   "toRef": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRef),
/* harmony export */   "toRefs": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRefs),
/* harmony export */   "transformVNodeArgs": () => (/* binding */ transformVNodeArgs),
/* harmony export */   "triggerRef": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.triggerRef),
/* harmony export */   "unref": () => (/* reexport safe */ _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.unref),
/* harmony export */   "useAttrs": () => (/* binding */ useAttrs),
/* harmony export */   "useSSRContext": () => (/* binding */ useSSRContext),
/* harmony export */   "useSlots": () => (/* binding */ useSlots),
/* harmony export */   "useTransitionState": () => (/* binding */ useTransitionState),
/* harmony export */   "version": () => (/* binding */ version),
/* harmony export */   "warn": () => (/* binding */ warn),
/* harmony export */   "watch": () => (/* binding */ watch),
/* harmony export */   "watchEffect": () => (/* binding */ watchEffect),
/* harmony export */   "watchPostEffect": () => (/* binding */ watchPostEffect),
/* harmony export */   "watchSyncEffect": () => (/* binding */ watchSyncEffect),
/* harmony export */   "withAsyncContext": () => (/* binding */ withAsyncContext),
/* harmony export */   "withCtx": () => (/* binding */ withCtx),
/* harmony export */   "withDefaults": () => (/* binding */ withDefaults),
/* harmony export */   "withDirectives": () => (/* binding */ withDirectives),
/* harmony export */   "withMemo": () => (/* binding */ withMemo),
/* harmony export */   "withScopeId": () => (/* binding */ withScopeId)
/* harmony export */ });
/* harmony import */ var _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/reactivity */ "./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js");
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js");





const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
function warn(msg, ...args) {
    if (false)
        {}
    // avoid props formatting or warn handler tracking deps that might be mutated
    // during patch, leading to infinite recursion.
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) {
        callWithErrorHandling(appWarnHandler, instance, 11 /* ErrorCodes.APP_WARN_HANDLER */, [
            msg + args.join(''),
            instance && instance.proxy,
            trace
                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)
                .join('\n'),
            trace
        ]);
    }
    else {
        const warnArgs = [`[Vue warn]: ${msg}`, ...args];
        /* istanbul ignore if */
        if (trace.length &&
            // avoid spamming console during tests
            !false) {
            warnArgs.push(`\n`, ...formatTrace(trace));
        }
        console.warn(...warnArgs);
    }
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) {
        return [];
    }
    // we can't just use the stack because it will be incomplete during updates
    // that did not start from the root. Re-construct the parent chain using
    // instance parent pointers.
    const normalizedStack = [];
    while (currentVNode) {
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) {
            last.recurseCount++;
        }
        else {
            normalizedStack.push({
                vnode: currentVNode,
                recurseCount: 0
            });
        }
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
/* istanbul ignore next */
function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i) => {
        logs.push(...(i === 0 ? [] : [`\n`]), ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props
        ? [open, ...formatProps(vnode.props), close]
        : [open + close];
}
/* istanbul ignore next */
function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach(key => {
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) {
        res.push(` ...`);
    }
    return res;
}
/* istanbul ignore next */
function formatProp(key, value, raw) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {
        value = JSON.stringify(value);
        return raw ? value : [`${key}=${value}`];
    }
    else if (typeof value === 'number' ||
        typeof value === 'boolean' ||
        value == null) {
        return raw ? value : [`${key}=${value}`];
    }
    else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(value)) {
        value = formatProp(key, (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(value.value), true);
        return raw ? value : [`${key}=Ref<`, value, `>`];
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {
        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
    }
    else {
        value = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(value);
        return raw ? value : [`${key}=`, value];
    }
}

const ErrorTypeStrings = {
    ["sp" /* LifecycleHooks.SERVER_PREFETCH */]: 'serverPrefetch hook',
    ["bc" /* LifecycleHooks.BEFORE_CREATE */]: 'beforeCreate hook',
    ["c" /* LifecycleHooks.CREATED */]: 'created hook',
    ["bm" /* LifecycleHooks.BEFORE_MOUNT */]: 'beforeMount hook',
    ["m" /* LifecycleHooks.MOUNTED */]: 'mounted hook',
    ["bu" /* LifecycleHooks.BEFORE_UPDATE */]: 'beforeUpdate hook',
    ["u" /* LifecycleHooks.UPDATED */]: 'updated',
    ["bum" /* LifecycleHooks.BEFORE_UNMOUNT */]: 'beforeUnmount hook',
    ["um" /* LifecycleHooks.UNMOUNTED */]: 'unmounted hook',
    ["a" /* LifecycleHooks.ACTIVATED */]: 'activated hook',
    ["da" /* LifecycleHooks.DEACTIVATED */]: 'deactivated hook',
    ["ec" /* LifecycleHooks.ERROR_CAPTURED */]: 'errorCaptured hook',
    ["rtc" /* LifecycleHooks.RENDER_TRACKED */]: 'renderTracked hook',
    ["rtg" /* LifecycleHooks.RENDER_TRIGGERED */]: 'renderTriggered hook',
    [0 /* ErrorCodes.SETUP_FUNCTION */]: 'setup function',
    [1 /* ErrorCodes.RENDER_FUNCTION */]: 'render function',
    [2 /* ErrorCodes.WATCH_GETTER */]: 'watcher getter',
    [3 /* ErrorCodes.WATCH_CALLBACK */]: 'watcher callback',
    [4 /* ErrorCodes.WATCH_CLEANUP */]: 'watcher cleanup function',
    [5 /* ErrorCodes.NATIVE_EVENT_HANDLER */]: 'native event handler',
    [6 /* ErrorCodes.COMPONENT_EVENT_HANDLER */]: 'component event handler',
    [7 /* ErrorCodes.VNODE_HOOK */]: 'vnode hook',
    [8 /* ErrorCodes.DIRECTIVE_HOOK */]: 'directive hook',
    [9 /* ErrorCodes.TRANSITION_HOOK */]: 'transition hook',
    [10 /* ErrorCodes.APP_ERROR_HANDLER */]: 'app errorHandler',
    [11 /* ErrorCodes.APP_WARN_HANDLER */]: 'app warnHandler',
    [12 /* ErrorCodes.FUNCTION_REF */]: 'ref function',
    [13 /* ErrorCodes.ASYNC_COMPONENT_LOADER */]: 'async component loader',
    [14 /* ErrorCodes.SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +
        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core'
};
function callWithErrorHandling(fn, instance, type, args) {
    let res;
    try {
        res = args ? fn(...args) : fn();
    }
    catch (err) {
        handleError(err, instance, type);
    }
    return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(res)) {
            res.catch(err => {
                handleError(err, instance, type);
            });
        }
        return res;
    }
    const values = [];
    for (let i = 0; i < fn.length; i++) {
        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    }
    return values;
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    if (instance) {
        let cur = instance.parent;
        // the exposed instance is the render proxy to keep it consistent with 2.x
        const exposedInstance = instance.proxy;
        // in production the hook receives only the error code
        const errorInfo = ( true) ? ErrorTypeStrings[type] : 0;
        while (cur) {
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) {
                for (let i = 0; i < errorCapturedHooks.length; i++) {
                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
                        return;
                    }
                }
            }
            cur = cur.parent;
        }
        // app-level handling
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
            callWithErrorHandling(appErrorHandler, null, 10 /* ErrorCodes.APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
    if ((true)) {
        const info = ErrorTypeStrings[type];
        if (contextVNode) {
            pushWarningContext(contextVNode);
        }
        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) {
            popWarningContext();
        }
        // crash in dev by default so it's more noticeable
        if (throwInDev) {
            throw err;
        }
        else {
            console.error(err);
        }
    }
    else {}
}

let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /*#__PURE__*/ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function findInsertionIndex(id) {
    // the start index should be `flushIndex + 1`
    let start = flushIndex + 1;
    let end = queue.length;
    while (start < end) {
        const middle = (start + end) >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < id ? (start = middle + 1) : (end = middle);
    }
    return start;
}
function queueJob(job) {
    // the dedupe search uses the startIndex argument of Array.includes()
    // by default the search index includes the current job that is being run
    // so it cannot recursively trigger itself again.
    // if the job is a watch() callback, the search will start with a +1 index to
    // allow it recursively trigger itself - it is the user's responsibility to
    // ensure it doesn't end up in an infinite loop.
    if (!queue.length ||
        !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) {
        if (job.id == null) {
            queue.push(job);
        }
        else {
            queue.splice(findInsertionIndex(job.id), 0, job);
        }
        queueFlush();
    }
}
function queueFlush() {
    if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
    }
}
function invalidateJob(job) {
    const i = queue.indexOf(job);
    if (i > flushIndex) {
        queue.splice(i, 1);
    }
}
function queuePostFlushCb(cb) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(cb)) {
        if (!activePostFlushCbs ||
            !activePostFlushCbs.includes(cb, cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex)) {
            pendingPostFlushCbs.push(cb);
        }
    }
    else {
        // if cb is an array, it is a component lifecycle hook which can only be
        // triggered by a job, which is already deduped in the main queue, so
        // we can skip duplicate check here to improve perf
        pendingPostFlushCbs.push(...cb);
    }
    queueFlush();
}
function flushPreFlushCbs(seen, 
// if currently flushing, skip the current job itself
i = isFlushing ? flushIndex + 1 : 0) {
    if ((true)) {
        seen = seen || new Map();
    }
    for (; i < queue.length; i++) {
        const cb = queue[i];
        if (cb && cb.pre) {
            if (( true) && checkRecursiveUpdates(seen, cb)) {
                continue;
            }
            queue.splice(i, 1);
            i--;
            cb();
        }
    }
}
function flushPostFlushCbs(seen) {
    if (pendingPostFlushCbs.length) {
        const deduped = [...new Set(pendingPostFlushCbs)];
        pendingPostFlushCbs.length = 0;
        // #1947 already has active queue, nested flushPostFlushCbs call
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        if ((true)) {
            seen = seen || new Map();
        }
        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
            if (( true) &&
                checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {
                continue;
            }
            activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a, b) => {
    const diff = getId(a) - getId(b);
    if (diff === 0) {
        if (a.pre && !b.pre)
            return -1;
        if (b.pre && !a.pre)
            return 1;
    }
    return diff;
};
function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    if ((true)) {
        seen = seen || new Map();
    }
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    queue.sort(comparator);
    // conditional usage of checkRecursiveUpdate must be determined out of
    // try ... catch block since Rollup by default de-optimizes treeshaking
    // inside try-catch. This can leave all warning code unshaked. Although
    // they would get eventually shaken by a minifier like terser, some minifiers
    // would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)
    const check = ( true)
        ? (job) => checkRecursiveUpdates(seen, job)
        : 0;
    try {
        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
            const job = queue[flushIndex];
            if (job && job.active !== false) {
                if (( true) && check(job)) {
                    continue;
                }
                // console.log(`running:`, job.id)
                callWithErrorHandling(job, null, 14 /* ErrorCodes.SCHEDULER */);
            }
        }
    }
    finally {
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen);
        isFlushing = false;
        currentFlushPromise = null;
        // some postFlushCb queued jobs!
        // keep flushing until it drains.
        if (queue.length || pendingPostFlushCbs.length) {
            flushJobs(seen);
        }
    }
}
function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) {
        seen.set(fn, 1);
    }
    else {
        const count = seen.get(fn);
        if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` +
                `This means you have a reactive effect that is mutating its own ` +
                `dependencies and thus recursively triggering itself. Possible sources ` +
                `include component template, render function, updated hook or ` +
                `watcher source function.`);
            return true;
        }
        else {
            seen.set(fn, count + 1);
        }
    }
}

/* eslint-disable no-restricted-globals */
let isHmrUpdating = false;
const hmrDirtyComponents = new Set();
// Expose the HMR runtime on the global object
// This makes it entirely tree-shakable without polluting the exports and makes
// it easier to be used in toolings like vue-loader
// Note: for a component to be eligible for HMR it also needs the __hmrId option
// to be set so that its instances can be registered / removed.
if ((true)) {
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)().__VUE_HMR_RUNTIME__ = {
        createRecord: tryWrap(createRecord),
        rerender: tryWrap(rerender),
        reload: tryWrap(reload)
    };
}
const map = new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
    }
    record.instances.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, initialDef) {
    if (map.has(id)) {
        return false;
    }
    map.set(id, {
        initialDef: normalizeClassComponent(initialDef),
        instances: new Set()
    });
    return true;
}
function normalizeClassComponent(component) {
    return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) {
        return;
    }
    // update initial record (for not-yet-rendered component)
    record.initialDef.render = newRender;
    [...record.instances].forEach(instance => {
        if (newRender) {
            instance.render = newRender;
            normalizeClassComponent(instance.type).render = newRender;
        }
        instance.renderCache = [];
        // this flag forces child components with slot content to update
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record)
        return;
    newComp = normalizeClassComponent(newComp);
    // update initial def (for not-yet-rendered components)
    updateComponentDef(record.initialDef, newComp);
    // create a snapshot which avoids the set being mutated during updates
    const instances = [...record.instances];
    for (const instance of instances) {
        const oldComp = normalizeClassComponent(instance.type);
        if (!hmrDirtyComponents.has(oldComp)) {
            // 1. Update existing comp definition to match new one
            if (oldComp !== record.initialDef) {
                updateComponentDef(oldComp, newComp);
            }
            // 2. mark definition dirty. This forces the renderer to replace the
            // component on patch.
            hmrDirtyComponents.add(oldComp);
        }
        // 3. invalidate options resolution cache
        instance.appContext.optionsCache.delete(instance.type);
        // 4. actually update
        if (instance.ceReload) {
            // custom element
            hmrDirtyComponents.add(oldComp);
            instance.ceReload(newComp.styles);
            hmrDirtyComponents.delete(oldComp);
        }
        else if (instance.parent) {
            // 4. Force the parent instance to re-render. This will cause all updated
            // components to be unmounted and re-mounted. Queue the update so that we
            // don't end up forcing the same parent to re-render multiple times.
            queueJob(instance.parent.update);
        }
        else if (instance.appContext.reload) {
            // root instance mounted via createApp() has a reload method
            instance.appContext.reload();
        }
        else if (typeof window !== 'undefined') {
            // root instance inside tree created via raw render(). Force reload.
            window.location.reload();
        }
        else {
            console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');
        }
    }
    // 5. make sure to cleanup dirty hmr components after update
    queuePostFlushCb(() => {
        for (const instance of instances) {
            hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
        }
    });
}
function updateComponentDef(oldComp, newComp) {
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(oldComp, newComp);
    for (const key in oldComp) {
        if (key !== '__file' && !(key in newComp)) {
            delete oldComp[key];
        }
    }
}
function tryWrap(fn) {
    return (id, arg) => {
        try {
            return fn(id, arg);
        }
        catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +
                `Full reload required.`);
        }
    };
}

let devtools;
let buffer = [];
let devtoolsNotInstalled = false;
function emit(event, ...args) {
    if (devtools) {
        devtools.emit(event, ...args);
    }
    else if (!devtoolsNotInstalled) {
        buffer.push({ event, args });
    }
}
function setDevtoolsHook(hook, target) {
    var _a, _b;
    devtools = hook;
    if (devtools) {
        devtools.enabled = true;
        buffer.forEach(({ event, args }) => devtools.emit(event, ...args));
        buffer = [];
    }
    else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== 'undefined' &&
        // some envs mock window but not fully
        window.HTMLElement &&
        // also exclude jsdom
        !((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.includes('jsdom'))) {
        const replay = (target.__VUE_DEVTOOLS_HOOK_REPLAY__ =
            target.__VUE_DEVTOOLS_HOOK_REPLAY__ || []);
        replay.push((newHook) => {
            setDevtoolsHook(newHook, target);
        });
        // clear buffer after 3s - the user probably doesn't have devtools installed
        // at all, and keeping the buffer will cause memory leaks (#4738)
        setTimeout(() => {
            if (!devtools) {
                target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
                devtoolsNotInstalled = true;
                buffer = [];
            }
        }, 3000);
    }
    else {
        // non-browser env, assume not installed
        devtoolsNotInstalled = true;
        buffer = [];
    }
}
function devtoolsInitApp(app, version) {
    emit("app:init" /* DevtoolsHooks.APP_INIT */, app, version, {
        Fragment,
        Text,
        Comment,
        Static
    });
}
function devtoolsUnmountApp(app) {
    emit("app:unmount" /* DevtoolsHooks.APP_UNMOUNT */, app);
}
const devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook("component:added" /* DevtoolsHooks.COMPONENT_ADDED */);
const devtoolsComponentUpdated = 
/*#__PURE__*/ createDevtoolsComponentHook("component:updated" /* DevtoolsHooks.COMPONENT_UPDATED */);
const _devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook("component:removed" /* DevtoolsHooks.COMPONENT_REMOVED */);
const devtoolsComponentRemoved = (component) => {
    if (devtools &&
        typeof devtools.cleanupBuffer === 'function' &&
        // remove the component if it wasn't buffered
        !devtools.cleanupBuffer(component)) {
        _devtoolsComponentRemoved(component);
    }
};
function createDevtoolsComponentHook(hook) {
    return (component) => {
        emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);
    };
}
const devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:start" /* DevtoolsHooks.PERFORMANCE_START */);
const devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook("perf:end" /* DevtoolsHooks.PERFORMANCE_END */);
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time) => {
        emit(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    emit("component:emit" /* DevtoolsHooks.COMPONENT_EMIT */, component.appContext.app, component, event, params);
}

function emit$1(instance, event, ...rawArgs) {
    if (instance.isUnmounted)
        return;
    const props = instance.vnode.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
    if ((true)) {
        const { emitsOptions, propsOptions: [propsOptions] } = instance;
        if (emitsOptions) {
            if (!(event in emitsOptions) &&
                !(false )) {
                if (!propsOptions || !((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(event) in propsOptions)) {
                    warn(`Component emitted event "${event}" but it is neither declared in ` +
                        `the emits option nor as an "${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(event)}" prop.`);
                }
            }
            else {
                const validator = emitsOptions[event];
                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(validator)) {
                    const isValid = validator(...rawArgs);
                    if (!isValid) {
                        warn(`Invalid event arguments: event validation failed for event "${event}".`);
                    }
                }
            }
        }
    }
    let args = rawArgs;
    const isModelListener = event.startsWith('update:');
    // for v-model update:xxx events, apply modifiers on args
    const modelArg = isModelListener && event.slice(7);
    if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;
        const { number, trim } = props[modifiersKey] || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
        if (trim) {
            args = rawArgs.map(a => ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(a) ? a.trim() : a));
        }
        if (number) {
            args = rawArgs.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber);
        }
    }
    if (true) {
        devtoolsComponentEmit(instance, event, args);
    }
    if ((true)) {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(lowerCaseEvent)]) {
            warn(`Event "${lowerCaseEvent}" is emitted in component ` +
                `${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". ` +
                `Note that HTML attributes are case-insensitive and you cannot use ` +
                `v-on to listen to camelCase events when using in-DOM templates. ` +
                `You should probably use "${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event)}" instead of "${event}".`);
        }
    }
    let handlerName;
    let handler = props[(handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(event))] ||
        // also try camelCase event handler (#2249)
        props[(handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(event)))];
    // for v-model update:xxx events, also trigger kebab-case equivalent
    // for props passed via kebab-case
    if (!handler && isModelListener) {
        handler = props[(handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event)))];
    }
    if (handler) {
        callWithAsyncErrorHandling(handler, instance, 6 /* ErrorCodes.COMPONENT_EVENT_HANDLER */, args);
    }
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) {
            instance.emitted = {};
        }
        else if (instance.emitted[handlerName]) {
            return;
        }
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6 /* ErrorCodes.COMPONENT_EVENT_HANDLER */, args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== undefined) {
        return cached;
    }
    const raw = comp.emits;
    let normalized = {};
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(comp)) {
        const extendEmits = (raw) => {
            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) {
            appContext.mixins.forEach(extendEmits);
        }
        if (comp.extends) {
            extendEmits(comp.extends);
        }
        if (comp.mixins) {
            comp.mixins.forEach(extendEmits);
        }
    }
    if (!raw && !hasExtends) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {
            cache.set(comp, null);
        }
        return null;
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {
        raw.forEach(key => (normalized[key] = null));
    }
    else {
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(normalized, raw);
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {
        cache.set(comp, normalized);
    }
    return normalized;
}
// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function isEmitListener(options, key) {
    if (!options || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {
        return false;
    }
    key = key.slice(2).replace(/Once$/, '');
    return ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, key[0].toLowerCase() + key.slice(1)) ||
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key)) ||
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, key));
}

/**
 * mark the current rendering instance for asset resolution (e.g.
 * resolveComponent, resolveDirective) during render
 */
let currentRenderingInstance = null;
let currentScopeId = null;
/**
 * Note: rendering calls maybe nested. The function returns the parent rendering
 * instance if present, which should be restored after the render is done:
 *
 * ```js
 * const prev = setCurrentRenderingInstance(i)
 * // ...render
 * setCurrentRenderingInstance(prev)
 * ```
 */
function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = (instance && instance.type.__scopeId) || null;
    return prev;
}
/**
 * Set scope id when creating hoisted vnodes.
 * @private compiler helper
 */
function pushScopeId(id) {
    currentScopeId = id;
}
/**
 * Technically we no longer need this after 3.0.8 but we need to keep the same
 * API for backwards compat w/ code generated by compilers.
 * @private
 */
function popScopeId() {
    currentScopeId = null;
}
/**
 * Only for backwards compat
 * @private
 */
const withScopeId = (_id) => withCtx;
/**
 * Wrap a slot function to memoize current rendering instance
 * @private compiler helper
 */
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only
) {
    if (!ctx)
        return fn;
    // already normalized
    if (fn._n) {
        return fn;
    }
    const renderFnWithContext = (...args) => {
        // If a user calls a compiled slot inside a template expression (#1745), it
        // can mess up block tracking, so by default we disable block tracking and
        // force bail out when invoking a compiled slot (indicated by the ._d flag).
        // This isn't necessary if rendering a compiled `<slot>`, so we flip the
        // ._d flag off when invoking the wrapped fn inside `renderSlot`.
        if (renderFnWithContext._d) {
            setBlockTracking(-1);
        }
        const prevInstance = setCurrentRenderingInstance(ctx);
        let res;
        try {
            res = fn(...args);
        }
        finally {
            setCurrentRenderingInstance(prevInstance);
            if (renderFnWithContext._d) {
                setBlockTracking(1);
            }
        }
        if (true) {
            devtoolsComponentUpdated(ctx);
        }
        return res;
    };
    // mark normalized to avoid duplicated wrapping
    renderFnWithContext._n = true;
    // mark this as compiled by default
    // this is used in vnode.ts -> normalizeChildren() to set the slot
    // rendering flag.
    renderFnWithContext._c = true;
    // disable block tracking by default
    renderFnWithContext._d = true;
    return renderFnWithContext;
}

/**
 * dev only flag to track whether $attrs was used during render.
 * If $attrs was used during render then the warning for failed attrs
 * fallthrough can be suppressed.
 */
let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;
    let result;
    let fallthroughAttrs;
    const prev = setCurrentRenderingInstance(instance);
    if ((true)) {
        accessedAttrs = false;
    }
    try {
        if (vnode.shapeFlag & 4 /* ShapeFlags.STATEFUL_COMPONENT */) {
            // withProxy is a proxy with a different `has` trap only for
            // runtime-compiled render functions using `with` block.
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
            fallthroughAttrs = attrs;
        }
        else {
            // functional
            const render = Component;
            // in dev, mark attrs accessed if optional props (attrs === props)
            if (( true) && attrs === props) {
                markAttrsAccessed();
            }
            result = normalizeVNode(render.length > 1
                ? render(props, ( true)
                    ? {
                        get attrs() {
                            markAttrsAccessed();
                            return attrs;
                        },
                        slots,
                        emit
                    }
                    : 0)
                : render(props, null /* we know it doesn't need it */));
            fallthroughAttrs = Component.props
                ? attrs
                : getFunctionalFallthrough(attrs);
        }
    }
    catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1 /* ErrorCodes.RENDER_FUNCTION */);
        result = createVNode(Comment);
    }
    // attr merging
    // in dev mode, comments are preserved, and it's possible for a template
    // to have comments along side the root element which makes it a fragment
    let root = result;
    let setRoot = undefined;
    if (( true) &&
        result.patchFlag > 0 &&
        result.patchFlag & 2048 /* PatchFlags.DEV_ROOT_FRAGMENT */) {
        [root, setRoot] = getChildRoot(result);
    }
    if (fallthroughAttrs && inheritAttrs !== false) {
        const keys = Object.keys(fallthroughAttrs);
        const { shapeFlag } = root;
        if (keys.length) {
            if (shapeFlag & (1 /* ShapeFlags.ELEMENT */ | 6 /* ShapeFlags.COMPONENT */)) {
                if (propsOptions && keys.some(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)) {
                    // If a v-model listener (onUpdate:xxx) has a corresponding declared
                    // prop, it indicates this component expects to handle v-model and
                    // it should not fallthrough.
                    // related: #1543, #1643, #1989
                    fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                }
                root = cloneVNode(root, fallthroughAttrs);
            }
            else if (( true) && !accessedAttrs && root.type !== Comment) {
                const allAttrs = Object.keys(attrs);
                const eventAttrs = [];
                const extraAttrs = [];
                for (let i = 0, l = allAttrs.length; i < l; i++) {
                    const key = allAttrs[i];
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {
                        // ignore v-model handlers when they fail to fallthrough
                        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)(key)) {
                            // remove `on`, lowercase first letter to reflect event casing
                            // accurately
                            eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                        }
                    }
                    else {
                        extraAttrs.push(key);
                    }
                }
                if (extraAttrs.length) {
                    warn(`Extraneous non-props attributes (` +
                        `${extraAttrs.join(', ')}) ` +
                        `were passed to component but could not be automatically inherited ` +
                        `because component renders fragment or text root nodes.`);
                }
                if (eventAttrs.length) {
                    warn(`Extraneous non-emits event listeners (` +
                        `${eventAttrs.join(', ')}) ` +
                        `were passed to component but could not be automatically inherited ` +
                        `because component renders fragment or text root nodes. ` +
                        `If the listener is intended to be a component custom event listener only, ` +
                        `declare it using the "emits" option.`);
                }
            }
        }
    }
    // inherit directives
    if (vnode.dirs) {
        if (( true) && !isElementRoot(root)) {
            warn(`Runtime directive used on component with non-element root node. ` +
                `The directives will not function as intended.`);
        }
        // clone before mutating since the root may be a hoisted vnode
        root = cloneVNode(root);
        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    // inherit transition data
    if (vnode.transition) {
        if (( true) && !isElementRoot(root)) {
            warn(`Component inside <Transition> renders non-element root node ` +
                `that cannot be animated.`);
        }
        root.transition = vnode.transition;
    }
    if (( true) && setRoot) {
        setRoot(root);
    }
    else {
        result = root;
    }
    setCurrentRenderingInstance(prev);
    return result;
}
/**
 * dev only
 * In dev mode, template root level comments are rendered, which turns the
 * template into a fragment root, but we need to locate the single element
 * root for attrs and scope id processing.
 */
const getChildRoot = (vnode) => {
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren);
    if (!childRoot) {
        return [vnode, undefined];
    }
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot) => {
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) {
                dynamicChildren[dynamicIndex] = updatedRoot;
            }
            else if (updatedRoot.patchFlag > 0) {
                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
            }
        }
    };
    return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children) {
    let singleRoot;
    for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (isVNode(child)) {
            // ignore user comment
            if (child.type !== Comment || child.children === 'v-if') {
                if (singleRoot) {
                    // has more than 1 non-comment child, return now
                    return;
                }
                else {
                    singleRoot = child;
                }
            }
        }
        else {
            return;
        }
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
    let res;
    for (const key in attrs) {
        if (key === 'class' || key === 'style' || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {
            (res || (res = {}))[key] = attrs[key];
        }
    }
    return res;
};
const filterModelListeners = (attrs, props) => {
    const res = {};
    for (const key in attrs) {
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)(key) || !(key.slice(9) in props)) {
            res[key] = attrs[key];
        }
    }
    return res;
};
const isElementRoot = (vnode) => {
    return (vnode.shapeFlag & (6 /* ShapeFlags.COMPONENT */ | 1 /* ShapeFlags.ELEMENT */) ||
        vnode.type === Comment // potential v-if branch switch
    );
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps, children: prevChildren, component } = prevVNode;
    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
    const emits = component.emitsOptions;
    // Parent component's render function was hot-updated. Since this may have
    // caused the child component's slots content to have changed, we need to
    // force the child to update as well.
    if (( true) && (prevChildren || nextChildren) && isHmrUpdating) {
        return true;
    }
    // force child update for runtime directive or transition on component vnode.
    if (nextVNode.dirs || nextVNode.transition) {
        return true;
    }
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024 /* PatchFlags.DYNAMIC_SLOTS */) {
            // slot content that references values that might have changed,
            // e.g. in a v-for
            return true;
        }
        if (patchFlag & 16 /* PatchFlags.FULL_PROPS */) {
            if (!prevProps) {
                return !!nextProps;
            }
            // presence of this flag indicates props are always non-null
            return hasPropsChanged(prevProps, nextProps, emits);
        }
        else if (patchFlag & 8 /* PatchFlags.PROPS */) {
            const dynamicProps = nextVNode.dynamicProps;
            for (let i = 0; i < dynamicProps.length; i++) {
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] &&
                    !isEmitListener(emits, key)) {
                    return true;
                }
            }
        }
    }
    else {
        // this path is only taken by manually written render functions
        // so presence of any children leads to a forced update
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) {
                return true;
            }
        }
        if (prevProps === nextProps) {
            return false;
        }
        if (!prevProps) {
            return !!nextProps;
        }
        if (!nextProps) {
            return true;
        }
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) {
        return true;
    }
    for (let i = 0; i < nextKeys.length; i++) {
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] &&
            !isEmitListener(emitsOptions, key)) {
            return true;
        }
    }
    return false;
}
function updateHOCHostEl({ vnode, parent }, el // HostNode
) {
    while (parent && parent.subTree === vnode) {
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
    }
}

const isSuspense = (type) => type.__isSuspense;
// Suspense exposes a component-like API, and is treated like a component
// in the compiler, but internally it's a special built-in type that hooks
// directly into the renderer.
const SuspenseImpl = {
    name: 'Suspense',
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, 
    // platform-specific impl passed from renderer
    rendererInternals) {
        if (n1 == null) {
            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        }
        else {
            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
        }
    },
    hydrate: hydrateSuspense,
    create: createSuspenseBoundary,
    normalize: normalizeSuspenseChildren
};
// Force-casted public typing for h and TSX props inference
const Suspense = (SuspenseImpl
    );
function triggerEvent(vnode, name) {
    const eventListener = vnode.props && vnode.props[name];
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(eventListener)) {
        eventListener();
    }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    const { p: patch, o: { createElement } } = rendererInternals;
    const hiddenContainer = createElement('div');
    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));
    // start mounting the content subtree in an off-dom container
    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
    // now check if we have encountered any async deps
    if (suspense.deps > 0) {
        // has async
        // invoke @fallback event
        triggerEvent(vnode, 'onPending');
        triggerEvent(vnode, 'onFallback');
        // mount the fallback tree
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
        isSVG, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    }
    else {
        // Suspense has no async deps. Just resolve.
        suspense.resolve();
    }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
    const suspense = (n2.suspense = n1.suspense);
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            // same root type but content may have changed.
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
                suspense.resolve();
            }
            else if (isInFallback) {
                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, newFallback);
            }
        }
        else {
            // toggled before pending tree is resolved
            suspense.pendingId++;
            if (isHydrating) {
                // if toggled before hydration is finished, the current DOM tree is
                // no longer valid. set it as the active branch so it will be unmounted
                // when resolved
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            }
            else {
                unmount(pendingBranch, parentComponent, suspense);
            }
            // increment pending ID. this is used to invalidate async callbacks
            // reset suspense state
            suspense.deps = 0;
            // discard effects from pending branch
            suspense.effects.length = 0;
            // discard previous container
            suspense.hiddenContainer = createElement('div');
            if (isInFallback) {
                // already in fallback state
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) {
                    suspense.resolve();
                }
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                    isSVG, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            }
            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                // toggled "back" to current active branch
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                // force resolve
                suspense.resolve(true);
            }
            else {
                // switched to a 3rd branch
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) {
                    suspense.resolve();
                }
            }
        }
    }
    else {
        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
            // root did not change, just normal patch
            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            setActiveBranch(suspense, newBranch);
        }
        else {
            // root node toggled
            // invoke @pending event
            triggerEvent(n2, 'onPending');
            // mount pending branch in off-dom container
            suspense.pendingBranch = newBranch;
            suspense.pendingId++;
            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
                // incoming branch has no async deps, resolve now.
                suspense.resolve();
            }
            else {
                const { timeout, pendingId } = suspense;
                if (timeout > 0) {
                    setTimeout(() => {
                        if (suspense.pendingId === pendingId) {
                            suspense.fallback(newFallback);
                        }
                    }, timeout);
                }
                else if (timeout === 0) {
                    suspense.fallback(newFallback);
                }
            }
        }
    }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    /* istanbul ignore if */
    if ( true && !hasWarned) {
        hasWarned = true;
        // @ts-ignore `console.info` cannot be null error
        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);
    }
    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;
    const timeout = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(vnode.props && vnode.props.timeout);
    const suspense = {
        vnode,
        parent,
        parentComponent,
        isSVG,
        container,
        hiddenContainer,
        anchor,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === 'number' ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve(resume = false) {
            if ((true)) {
                if (!resume && !suspense.pendingBranch) {
                    throw new Error(`suspense.resolve() is called without a pending branch.`);
                }
                if (suspense.isUnmounted) {
                    throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
                }
            }
            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;
            if (suspense.isHydrating) {
                suspense.isHydrating = false;
            }
            else if (!resume) {
                const delayEnter = activeBranch &&
                    pendingBranch.transition &&
                    pendingBranch.transition.mode === 'out-in';
                if (delayEnter) {
                    activeBranch.transition.afterLeave = () => {
                        if (pendingId === suspense.pendingId) {
                            move(pendingBranch, container, anchor, 0 /* MoveType.ENTER */);
                        }
                    };
                }
                // this is initial anchor on mount
                let { anchor } = suspense;
                // unmount current active tree
                if (activeBranch) {
                    // if the fallback tree was mounted, it may have been moved
                    // as part of a parent suspense. get the latest anchor for insertion
                    anchor = next(activeBranch);
                    unmount(activeBranch, parentComponent, suspense, true);
                }
                if (!delayEnter) {
                    // move content from off-dom container to actual container
                    move(pendingBranch, container, anchor, 0 /* MoveType.ENTER */);
                }
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            // flush buffered effects
            // check if there is a pending parent suspense
            let parent = suspense.parent;
            let hasUnresolvedAncestor = false;
            while (parent) {
                if (parent.pendingBranch) {
                    // found a pending parent suspense, merge buffered post jobs
                    // into that parent
                    parent.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent = parent.parent;
            }
            // no pending parent suspense, flush all jobs
            if (!hasUnresolvedAncestor) {
                queuePostFlushCb(effects);
            }
            suspense.effects = [];
            // invoke @resolve event
            triggerEvent(vnode, 'onResolve');
        },
        fallback(fallbackVNode) {
            if (!suspense.pendingBranch) {
                return;
            }
            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;
            // invoke @fallback event
            triggerEvent(vnode, 'onFallback');
            const anchor = next(activeBranch);
            const mountFallback = () => {
                if (!suspense.isInFallback) {
                    return;
                }
                // mount the fallback tree
                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';
            if (delayEnter) {
                activeBranch.transition.afterLeave = mountFallback;
            }
            suspense.isInFallback = true;
            // unmount current active branch
            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now
            true // shouldRemove
            );
            if (!delayEnter) {
                mountFallback();
            }
        },
        move(container, anchor, type) {
            suspense.activeBranch &&
                move(suspense.activeBranch, container, anchor, type);
            suspense.container = container;
        },
        next() {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep(instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) {
                suspense.deps++;
            }
            const hydratedEl = instance.vnode.el;
            instance
                .asyncDep.catch(err => {
                handleError(err, instance, 0 /* ErrorCodes.SETUP_FUNCTION */);
            })
                .then(asyncSetupResult => {
                // retry when the setup() promise resolves.
                // component may have been unmounted before resolve.
                if (instance.isUnmounted ||
                    suspense.isUnmounted ||
                    suspense.pendingId !== instance.suspenseId) {
                    return;
                }
                // retry from this component
                instance.asyncResolved = true;
                const { vnode } = instance;
                if ((true)) {
                    pushWarningContext(vnode);
                }
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) {
                    // vnode may have been replaced if an update happened before the
                    // async dep is resolved.
                    vnode.el = hydratedEl;
                }
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode, 
                // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), 
                // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);
                if (placeholder) {
                    remove(placeholder);
                }
                updateHOCHostEl(instance, vnode.el);
                if ((true)) {
                    popWarningContext();
                }
                // only decrease deps count if suspense is not already resolved
                if (isInPendingSuspense && --suspense.deps === 0) {
                    suspense.resolve();
                }
            });
        },
        unmount(parentSuspense, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) {
                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
            }
            if (suspense.pendingBranch) {
                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
            }
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    /* eslint-disable no-restricted-globals */
    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true /* hydrating */));
    // there are two possible scenarios for server-rendered suspense:
    // - success: ssr content should be fully resolved
    // - failure: ssr content should be the fallback branch.
    // however, on the client we don't really know if it has failed or not
    // attempt to hydrate the DOM assuming it has succeeded, but we still
    // need to construct a suspense boundary first
    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) {
        suspense.resolve();
    }
    return result;
    /* eslint-enable no-restricted-globals */
}
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag, children } = vnode;
    const isSlotChildren = shapeFlag & 32 /* ShapeFlags.SLOTS_CHILDREN */;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren
        ? normalizeSuspenseSlot(children.fallback)
        : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(s)) {
        const trackBlock = isBlockTreeEnabled && s._c;
        if (trackBlock) {
            // disableTracking: false
            // allow block tracking for compiled slots
            // (see ./componentRenderContext.ts)
            s._d = false;
            openBlock();
        }
        s = s();
        if (trackBlock) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(s)) {
        const singleChild = filterSingleRoot(s);
        if (( true) && !singleChild) {
            warn(`<Suspense> slots expect a single root node.`);
        }
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block && !s.dynamicChildren) {
        s.dynamicChildren = block.filter(c => c !== s);
    }
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(fn)) {
            suspense.effects.push(...fn);
        }
        else {
            suspense.effects.push(fn);
        }
    }
    else {
        queuePostFlushCb(fn);
    }
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode, parentComponent } = suspense;
    const el = (vnode.el = branch.el);
    // in case suspense is the root node of a component,
    // recursively update the HOC el
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}

function provide(key, value) {
    if (!currentInstance) {
        if ((true)) {
            warn(`provide() can only be used inside setup().`);
        }
    }
    else {
        let provides = currentInstance.provides;
        // by default an instance inherits its parent's provides object
        // but when it needs to provide values of its own, it creates its
        // own provides object using parent provides object as prototype.
        // this way in `inject` we can simply look up injections from direct
        // parent and let the prototype chain do the work.
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) {
            provides = currentInstance.provides = Object.create(parentProvides);
        }
        // TS doesn't allow symbol as index type
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    // fallback to `currentRenderingInstance` so that this can be called in
    // a functional component
    const instance = currentInstance || currentRenderingInstance;
    if (instance) {
        // #2400
        // to support `app.use` plugins,
        // fallback to appContext's `provides` if the instance is at root
        const provides = instance.parent == null
            ? instance.vnode.appContext && instance.vnode.appContext.provides
            : instance.parent.provides;
        if (provides && key in provides) {
            // TS doesn't allow symbol as index type
            return provides[key];
        }
        else if (arguments.length > 1) {
            return treatDefaultAsFactory && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(defaultValue)
                ? defaultValue.call(instance.proxy)
                : defaultValue;
        }
        else if ((true)) {
            warn(`injection "${String(key)}" not found.`);
        }
    }
    else if ((true)) {
        warn(`inject() can only be used inside setup() or functional components.`);
    }
}

// Simple effect.
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
    return doWatch(effect, null, (( true)
        ? Object.assign(Object.assign({}, options), { flush: 'post' }) : 0));
}
function watchSyncEffect(effect, options) {
    return doWatch(effect, null, (( true)
        ? Object.assign(Object.assign({}, options), { flush: 'sync' }) : 0));
}
// initial value for watchers to trigger on undefined initial values
const INITIAL_WATCHER_VALUE = {};
// implementation
function watch(source, cb, options) {
    if (( true) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(cb)) {
        warn(`\`watch(fn, options?)\` signature has been moved to a separate API. ` +
            `Use \`watchEffect(fn, options?)\` instead. \`watch\` now only ` +
            `supports \`watch(source, cb, options?) signature.`);
    }
    return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {
    if (( true) && !cb) {
        if (immediate !== undefined) {
            warn(`watch() "immediate" option is only respected when using the ` +
                `watch(source, callback, options?) signature.`);
        }
        if (deep !== undefined) {
            warn(`watch() "deep" option is only respected when using the ` +
                `watch(source, callback, options?) signature.`);
        }
    }
    const warnInvalidSource = (s) => {
        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +
            `a reactive object, or an array of these types.`);
    };
    const instance = currentInstance;
    let getter;
    let forceTrigger = false;
    let isMultiSource = false;
    if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(source)) {
        getter = () => source.value;
        forceTrigger = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow)(source);
    }
    else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive)(source)) {
        getter = () => source;
        deep = true;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(source)) {
        isMultiSource = true;
        forceTrigger = source.some(s => (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive)(s) || (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isShallow)(s));
        getter = () => source.map(s => {
            if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(s)) {
                return s.value;
            }
            else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive)(s)) {
                return traverse(s);
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(s)) {
                return callWithErrorHandling(s, instance, 2 /* ErrorCodes.WATCH_GETTER */);
            }
            else {
                ( true) && warnInvalidSource(s);
            }
        });
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(source)) {
        if (cb) {
            // getter with cb
            getter = () => callWithErrorHandling(source, instance, 2 /* ErrorCodes.WATCH_GETTER */);
        }
        else {
            // no cb -> simple effect
            getter = () => {
                if (instance && instance.isUnmounted) {
                    return;
                }
                if (cleanup) {
                    cleanup();
                }
                return callWithAsyncErrorHandling(source, instance, 3 /* ErrorCodes.WATCH_CALLBACK */, [onCleanup]);
            };
        }
    }
    else {
        getter = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;
        ( true) && warnInvalidSource(source);
    }
    if (cb && deep) {
        const baseGetter = getter;
        getter = () => traverse(baseGetter());
    }
    let cleanup;
    let onCleanup = (fn) => {
        cleanup = effect.onStop = () => {
            callWithErrorHandling(fn, instance, 4 /* ErrorCodes.WATCH_CLEANUP */);
        };
    };
    // in SSR there is no need to setup an actual effect, and it should be noop
    // unless it's eager or sync flush
    let ssrCleanup;
    if (isInSSRComponentSetup) {
        // we will also not call the invalidate callback (+ runner is not set up)
        onCleanup = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;
        if (!cb) {
            getter();
        }
        else if (immediate) {
            callWithAsyncErrorHandling(cb, instance, 3 /* ErrorCodes.WATCH_CALLBACK */, [
                getter(),
                isMultiSource ? [] : undefined,
                onCleanup
            ]);
        }
        if (flush === 'sync') {
            const ctx = useSSRContext();
            ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
        }
        else {
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;
        }
    }
    let oldValue = isMultiSource
        ? new Array(source.length).fill(INITIAL_WATCHER_VALUE)
        : INITIAL_WATCHER_VALUE;
    const job = () => {
        if (!effect.active) {
            return;
        }
        if (cb) {
            // watch(source, cb)
            const newValue = effect.run();
            if (deep ||
                forceTrigger ||
                (isMultiSource
                    ? newValue.some((v, i) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(v, oldValue[i]))
                    : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(newValue, oldValue)) ||
                (false  )) {
                // cleanup before running cb again
                if (cleanup) {
                    cleanup();
                }
                callWithAsyncErrorHandling(cb, instance, 3 /* ErrorCodes.WATCH_CALLBACK */, [
                    newValue,
                    // pass undefined as the old value when it's changed for the first time
                    oldValue === INITIAL_WATCHER_VALUE
                        ? undefined
                        : (isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE)
                            ? []
                            : oldValue,
                    onCleanup
                ]);
                oldValue = newValue;
            }
        }
        else {
            // watchEffect
            effect.run();
        }
    };
    // important: mark the job as a watcher callback so that scheduler knows
    // it is allowed to self-trigger (#1727)
    job.allowRecurse = !!cb;
    let scheduler;
    if (flush === 'sync') {
        scheduler = job; // the scheduler function gets called directly
    }
    else if (flush === 'post') {
        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
    }
    else {
        // default: 'pre'
        job.pre = true;
        if (instance)
            job.id = instance.uid;
        scheduler = () => queueJob(job);
    }
    const effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect(getter, scheduler);
    if ((true)) {
        effect.onTrack = onTrack;
        effect.onTrigger = onTrigger;
    }
    // initial run
    if (cb) {
        if (immediate) {
            job();
        }
        else {
            oldValue = effect.run();
        }
    }
    else if (flush === 'post') {
        queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
    }
    else {
        effect.run();
    }
    const unwatch = () => {
        effect.stop();
        if (instance && instance.scope) {
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.remove)(instance.scope.effects, effect);
        }
    };
    if (ssrCleanup)
        ssrCleanup.push(unwatch);
    return unwatch;
}
// this.$watch
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(source)
        ? source.includes('.')
            ? createPathGetter(publicThis, source)
            : () => publicThis[source]
        : source.bind(publicThis, publicThis);
    let cb;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {
        cb = value;
    }
    else {
        cb = value.handler;
        options = value;
    }
    const cur = currentInstance;
    setCurrentInstance(this);
    const res = doWatch(getter, cb.bind(publicThis), options);
    if (cur) {
        setCurrentInstance(cur);
    }
    else {
        unsetCurrentInstance();
    }
    return res;
}
function createPathGetter(ctx, path) {
    const segments = path.split('.');
    return () => {
        let cur = ctx;
        for (let i = 0; i < segments.length && cur; i++) {
            cur = cur[segments[i]];
        }
        return cur;
    };
}
function traverse(value, seen) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(value) || value["__v_skip" /* ReactiveFlags.SKIP */]) {
        return value;
    }
    seen = seen || new Set();
    if (seen.has(value)) {
        return value;
    }
    seen.add(value);
    if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(value)) {
        traverse(value.value, seen);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
        for (let i = 0; i < value.length; i++) {
            traverse(value[i], seen);
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isMap)(value)) {
        value.forEach((v) => {
            traverse(v, seen);
        });
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(value)) {
        for (const key in value) {
            traverse(value[key], seen);
        }
    }
    return value;
}

function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: new Map()
    };
    onMounted(() => {
        state.isMounted = true;
    });
    onBeforeUnmount(() => {
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
    },
    setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return () => {
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) {
                return;
            }
            let child = children[0];
            if (children.length > 1) {
                let hasFound = false;
                // locate first non-comment child
                for (const c of children) {
                    if (c.type !== Comment) {
                        if (( true) && hasFound) {
                            // warn more than one non-comment child
                            warn('<transition> can only be used on a single element or component. ' +
                                'Use <transition-group> for lists.');
                            break;
                        }
                        child = c;
                        hasFound = true;
                        if (false)
                            {}
                    }
                }
            }
            // there's no need to track reactivity for these props so use the raw
            // props for a bit better perf
            const rawProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);
            const { mode } = rawProps;
            // check mode
            if (( true) &&
                mode &&
                mode !== 'in-out' &&
                mode !== 'out-in' &&
                mode !== 'default') {
                warn(`invalid <transition> mode: ${mode}`);
            }
            if (state.isLeaving) {
                return emptyPlaceholder(child);
            }
            // in the case of <transition><keep-alive/></transition>, we need to
            // compare the type of the kept-alive children.
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) {
                return emptyPlaceholder(child);
            }
            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey } = innerChild.type;
            if (getTransitionKey) {
                const key = getTransitionKey();
                if (prevTransitionKey === undefined) {
                    prevTransitionKey = key;
                }
                else if (key !== prevTransitionKey) {
                    prevTransitionKey = key;
                    transitionKeyChanged = true;
                }
            }
            // handle mode
            if (oldInnerChild &&
                oldInnerChild.type !== Comment &&
                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                // update old tree's hooks in case of dynamic transition
                setTransitionHooks(oldInnerChild, leavingHooks);
                // switching between different views
                if (mode === 'out-in') {
                    state.isLeaving = true;
                    // return placeholder node and queue update when leave finishes
                    leavingHooks.afterLeave = () => {
                        state.isLeaving = false;
                        // #6835
                        // it also needs to be updated when active is undefined
                        if (instance.update.active !== false) {
                            instance.update();
                        }
                    };
                    return emptyPlaceholder(child);
                }
                else if (mode === 'in-out' && innerChild.type !== Comment) {
                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                        // early removal callback
                        el._leaveCb = () => {
                            earlyRemove();
                            el._leaveCb = undefined;
                            delete enterHooks.delayedLeave;
                        };
                        enterHooks.delayedLeave = delayedLeave;
                    };
                }
            }
            return child;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function resolveTransitionHooks(vnode, props, state, instance) {
    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
    const key = String(vnode.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode);
    const callHook = (hook, args) => {
        hook &&
            callWithAsyncErrorHandling(hook, instance, 9 /* ErrorCodes.TRANSITION_HOOK */, args);
    };
    const callAsyncHook = (hook, args) => {
        const done = args[1];
        callHook(hook, args);
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)) {
            if (hook.every(hook => hook.length <= 1))
                done();
        }
        else if (hook.length <= 1) {
            done();
        }
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter(el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) {
                    hook = onBeforeAppear || onBeforeEnter;
                }
                else {
                    return;
                }
            }
            // for same element (v-show)
            if (el._leaveCb) {
                el._leaveCb(true /* cancelled */);
            }
            // for toggled element with same key (v-if)
            const leavingVNode = leavingVNodesCache[key];
            if (leavingVNode &&
                isSameVNodeType(vnode, leavingVNode) &&
                leavingVNode.el._leaveCb) {
                // force early removal (not cancelled)
                leavingVNode.el._leaveCb();
            }
            callHook(hook, [el]);
        },
        enter(el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                }
                else {
                    return;
                }
            }
            let called = false;
            const done = (el._enterCb = (cancelled) => {
                if (called)
                    return;
                called = true;
                if (cancelled) {
                    callHook(cancelHook, [el]);
                }
                else {
                    callHook(afterHook, [el]);
                }
                if (hooks.delayedLeave) {
                    hooks.delayedLeave();
                }
                el._enterCb = undefined;
            });
            if (hook) {
                callAsyncHook(hook, [el, done]);
            }
            else {
                done();
            }
        },
        leave(el, remove) {
            const key = String(vnode.key);
            if (el._enterCb) {
                el._enterCb(true /* cancelled */);
            }
            if (state.isUnmounting) {
                return remove();
            }
            callHook(onBeforeLeave, [el]);
            let called = false;
            const done = (el._leaveCb = (cancelled) => {
                if (called)
                    return;
                called = true;
                remove();
                if (cancelled) {
                    callHook(onLeaveCancelled, [el]);
                }
                else {
                    callHook(onAfterLeave, [el]);
                }
                el._leaveCb = undefined;
                if (leavingVNodesCache[key] === vnode) {
                    delete leavingVNodesCache[key];
                }
            });
            leavingVNodesCache[key] = vnode;
            if (onLeave) {
                callAsyncHook(onLeave, [el, done]);
            }
            else {
                done();
            }
        },
        clone(vnode) {
            return resolveTransitionHooks(vnode, props, state, instance);
        }
    };
    return hooks;
}
// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getKeepAliveChild(vnode) {
    return isKeepAlive(vnode)
        ? vnode.children
            ? vnode.children[0]
            : undefined
        : vnode;
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 /* ShapeFlags.COMPONENT */ && vnode.component) {
        setTransitionHooks(vnode.component.subTree, hooks);
    }
    else if (vnode.shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    }
    else {
        vnode.transition = hooks;
    }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
    let ret = [];
    let keyedFragmentCount = 0;
    for (let i = 0; i < children.length; i++) {
        let child = children[i];
        // #5360 inherit parent key in case of <template v-for>
        const key = parentKey == null
            ? child.key
            : String(parentKey) + String(child.key != null ? child.key : i);
        // handle fragment children case, e.g. v-for
        if (child.type === Fragment) {
            if (child.patchFlag & 128 /* PatchFlags.KEYED_FRAGMENT */)
                keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
        }
        // comment placeholders should be skipped, e.g. v-if
        else if (keepComment || child.type !== Comment) {
            ret.push(key != null ? cloneVNode(child, { key }) : child);
        }
    }
    // #1126 if a transition children list contains multiple sub fragments, these
    // fragments will be merged into a flat children array. Since each v-for
    // fragment may contain different static bindings inside, we need to de-op
    // these children to force full diffs to ensure correct behavior.
    if (keyedFragmentCount > 1) {
        for (let i = 0; i < ret.length; i++) {
            ret[i].patchFlag = -2 /* PatchFlags.BAIL */;
        }
    }
    return ret;
}

// implementation, close to no-op
function defineComponent(options) {
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(options) ? { setup: options, name: options.name } : options;
}

const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
function defineAsyncComponent(source) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(source)) {
        source = { loader: source };
    }
    const { loader, loadingComponent, errorComponent, delay = 200, timeout, // undefined = never times out
    suspensible = true, onError: userOnError } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = () => {
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = () => {
        let thisRequest;
        return (pendingRequest ||
            (thisRequest = pendingRequest =
                loader()
                    .catch(err => {
                    err = err instanceof Error ? err : new Error(String(err));
                    if (userOnError) {
                        return new Promise((resolve, reject) => {
                            const userRetry = () => resolve(retry());
                            const userFail = () => reject(err);
                            userOnError(err, userRetry, userFail, retries + 1);
                        });
                    }
                    else {
                        throw err;
                    }
                })
                    .then((comp) => {
                    if (thisRequest !== pendingRequest && pendingRequest) {
                        return pendingRequest;
                    }
                    if (( true) && !comp) {
                        warn(`Async component loader resolved to undefined. ` +
                            `If you are using retry(), make sure to return its return value.`);
                    }
                    // interop module default
                    if (comp &&
                        (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {
                        comp = comp.default;
                    }
                    if (( true) && comp && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(comp)) {
                        throw new Error(`Invalid async component load result: ${comp}`);
                    }
                    resolvedComp = comp;
                    return comp;
                })));
    };
    return defineComponent({
        name: 'AsyncComponentWrapper',
        __asyncLoader: load,
        get __asyncResolved() {
            return resolvedComp;
        },
        setup() {
            const instance = currentInstance;
            // already resolved
            if (resolvedComp) {
                return () => createInnerComp(resolvedComp, instance);
            }
            const onError = (err) => {
                pendingRequest = null;
                handleError(err, instance, 13 /* ErrorCodes.ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);
            };
            // suspense-controlled or SSR.
            if ((suspensible && instance.suspense) ||
                (isInSSRComponentSetup)) {
                return load()
                    .then(comp => {
                    return () => createInnerComp(comp, instance);
                })
                    .catch(err => {
                    onError(err);
                    return () => errorComponent
                        ? createVNode(errorComponent, {
                            error: err
                        })
                        : null;
                });
            }
            const loaded = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)(false);
            const error = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)();
            const delayed = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ref)(!!delay);
            if (delay) {
                setTimeout(() => {
                    delayed.value = false;
                }, delay);
            }
            if (timeout != null) {
                setTimeout(() => {
                    if (!loaded.value && !error.value) {
                        const err = new Error(`Async component timed out after ${timeout}ms.`);
                        onError(err);
                        error.value = err;
                    }
                }, timeout);
            }
            load()
                .then(() => {
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) {
                    // parent is keep-alive, force update so the loaded component's
                    // name is taken into account
                    queueJob(instance.parent.update);
                }
            })
                .catch(err => {
                onError(err);
                error.value = err;
            });
            return () => {
                if (loaded.value && resolvedComp) {
                    return createInnerComp(resolvedComp, instance);
                }
                else if (error.value && errorComponent) {
                    return createVNode(errorComponent, {
                        error: error.value
                    });
                }
                else if (loadingComponent && !delayed.value) {
                    return createVNode(loadingComponent);
                }
            };
        }
    });
}
function createInnerComp(comp, parent) {
    const { ref, props, children, ce } = parent.vnode;
    const vnode = createVNode(comp, props, children);
    // ensure inner component inherits the async wrapper's ref owner
    vnode.ref = ref;
    // pass the custom element callback on to the inner comp
    // and remove it from the async wrapper
    vnode.ce = ce;
    delete parent.vnode.ce;
    return vnode;
}

const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [String, RegExp, Array],
        exclude: [String, RegExp, Array],
        max: [String, Number]
    },
    setup(props, { slots }) {
        const instance = getCurrentInstance();
        // KeepAlive communicates with the instantiated renderer via the
        // ctx where the renderer passes in its internals,
        // and the KeepAlive instance exposes activate/deactivate implementations.
        // The whole point of this is to avoid importing KeepAlive directly in the
        // renderer to facilitate tree-shaking.
        const sharedContext = instance.ctx;
        // if the internal renderer is not registered, it indicates that this is server-side rendering,
        // for KeepAlive, we just need to render its children
        if (!sharedContext.renderer) {
            return () => {
                const children = slots.default && slots.default();
                return children && children.length === 1 ? children[0] : children;
            };
        }
        const cache = new Map();
        const keys = new Set();
        let current = null;
        if (true) {
            instance.__v_cache = cache;
        }
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;
        const storageContainer = createElement('div');
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
            const instance = vnode.component;
            move(vnode, container, anchor, 0 /* MoveType.ENTER */, parentSuspense);
            // in case props have changed
            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(() => {
                instance.isDeactivated = false;
                if (instance.a) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance.a);
                }
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) {
                    invokeVNodeHook(vnodeHook, instance.parent, vnode);
                }
            }, parentSuspense);
            if (true) {
                // Update components tree
                devtoolsComponentAdded(instance);
            }
        };
        sharedContext.deactivate = (vnode) => {
            const instance = vnode.component;
            move(vnode, storageContainer, null, 1 /* MoveType.LEAVE */, parentSuspense);
            queuePostRenderEffect(() => {
                if (instance.da) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance.da);
                }
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) {
                    invokeVNodeHook(vnodeHook, instance.parent, vnode);
                }
                instance.isDeactivated = true;
            }, parentSuspense);
            if (true) {
                // Update components tree
                devtoolsComponentAdded(instance);
            }
        };
        function unmount(vnode) {
            // reset the shapeFlag so it can be properly unmounted
            resetShapeFlag(vnode);
            _unmount(vnode, instance, parentSuspense, true);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key) => {
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) {
                    pruneCacheEntry(key);
                }
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || cached.type !== current.type) {
                unmount(cached);
            }
            else if (current) {
                // current active instance should no longer be kept-alive.
                // we can't unmount it now but it might be later, so reset its flag now.
                resetShapeFlag(current);
            }
            cache.delete(key);
            keys.delete(key);
        }
        // prune cache on include/exclude prop change
        watch(() => [props.include, props.exclude], ([include, exclude]) => {
            include && pruneCache(name => matches(include, name));
            exclude && pruneCache(name => !matches(exclude, name));
        }, 
        // prune post-render after `current` has been updated
        { flush: 'post', deep: true });
        // cache sub tree after render
        let pendingCacheKey = null;
        const cacheSubtree = () => {
            // fix #1621, the pendingCacheKey could be 0
            if (pendingCacheKey != null) {
                cache.set(pendingCacheKey, getInnerChild(instance.subTree));
            }
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(() => {
            cache.forEach(cached => {
                const { subTree, suspense } = instance;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type) {
                    // current instance will be unmounted as part of keep-alive's unmount
                    resetShapeFlag(vnode);
                    // but invoke its deactivated hook here
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return () => {
            pendingCacheKey = null;
            if (!slots.default) {
                return null;
            }
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                if ((true)) {
                    warn(`KeepAlive should contain exactly one component child.`);
                }
                current = null;
                return children;
            }
            else if (!isVNode(rawVNode) ||
                (!(rawVNode.shapeFlag & 4 /* ShapeFlags.STATEFUL_COMPONENT */) &&
                    !(rawVNode.shapeFlag & 128 /* ShapeFlags.SUSPENSE */))) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            // for async components, name check should be based in its loaded
            // inner component if available
            const name = getComponentName(isAsyncWrapper(vnode)
                ? vnode.type.__asyncResolved || {}
                : comp);
            const { include, exclude, max } = props;
            if ((include && (!name || !matches(include, name))) ||
                (exclude && name && matches(exclude, name))) {
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            // clone vnode if it's reused because we are going to mutate it
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
                    rawVNode.ssContent = vnode;
                }
            }
            // #1513 it's possible for the returned vnode to be cloned due to attr
            // fallthrough or scopeId, so the vnode here may not be the final vnode
            // that is mounted. Instead of caching it directly, we store the pending
            // key and cache `instance.subTree` (the normalized vnode) in
            // beforeMount/beforeUpdate hooks.
            pendingCacheKey = key;
            if (cachedVNode) {
                // copy over mounted state
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) {
                    // recursively update transition hooks on subTree
                    setTransitionHooks(vnode, vnode.transition);
                }
                // avoid vnode being mounted as fresh
                vnode.shapeFlag |= 512 /* ShapeFlags.COMPONENT_KEPT_ALIVE */;
                // make this key the freshest
                keys.delete(key);
                keys.add(key);
            }
            else {
                keys.add(key);
                // prune oldest entry
                if (max && keys.size > parseInt(max, 10)) {
                    pruneCacheEntry(keys.values().next().value);
                }
            }
            // avoid vnode being unmounted
            vnode.shapeFlag |= 256 /* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */;
            current = vnode;
            return isSuspense(rawVNode.type) ? rawVNode : vnode;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(pattern)) {
        return pattern.some((p) => matches(p, name));
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(pattern)) {
        return pattern.split(',').includes(name);
    }
    else if (pattern.test) {
        return pattern.test(name);
    }
    /* istanbul ignore next */
    return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a" /* LifecycleHooks.ACTIVATED */, target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da" /* LifecycleHooks.DEACTIVATED */, target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    // cache the deactivate branch check wrapper for injected hooks so the same
    // hook can be properly deduped by the scheduler. "__wdc" stands for "with
    // deactivation check".
    const wrappedHook = hook.__wdc ||
        (hook.__wdc = () => {
            // only fire the hook if the target instance is NOT in a deactivated branch.
            let current = target;
            while (current) {
                if (current.isDeactivated) {
                    return;
                }
                current = current.parent;
            }
            return hook();
        });
    injectHook(type, wrappedHook, target);
    // In addition to registering it on the target instance, we walk up the parent
    // chain and register it on all ancestor instances that are keep-alive roots.
    // This avoids the need to walk the entire component tree when invoking these
    // hooks, and more importantly, avoids the need to track child components in
    // arrays.
    if (target) {
        let current = target.parent;
        while (current && current.parent) {
            if (isKeepAlive(current.parent.vnode)) {
                injectToKeepAliveRoot(wrappedHook, type, target, current);
            }
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    // injectHook wraps the original for error handling, so make sure to remove
    // the wrapped version.
    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);
    onUnmounted(() => {
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.remove)(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    // bitwise operations to remove keep alive flags
    vnode.shapeFlag &= ~256 /* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */;
    vnode.shapeFlag &= ~512 /* ShapeFlags.COMPONENT_KEPT_ALIVE */;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 /* ShapeFlags.SUSPENSE */ ? vnode.ssContent : vnode;
}

function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        // cache the error handling wrapper for injected hooks so the same hook
        // can be properly deduped by the scheduler. "__weh" stands for "with error
        // handling".
        const wrappedHook = hook.__weh ||
            (hook.__weh = (...args) => {
                if (target.isUnmounted) {
                    return;
                }
                // disable tracking inside all lifecycle hooks
                // since they can potentially be called inside effects.
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();
                // Set currentInstance during hook invocation.
                // This assumes the hook does not synchronously trigger other hooks, which
                // can only be false when the user does something really funky.
                setCurrentInstance(target);
                const res = callWithAsyncErrorHandling(hook, target, type, args);
                unsetCurrentInstance();
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();
                return res;
            });
        if (prepend) {
            hooks.unshift(wrappedHook);
        }
        else {
            hooks.push(wrappedHook);
        }
        return wrappedHook;
    }
    else if ((true)) {
        const apiName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(ErrorTypeStrings[type].replace(/ hook$/, ''));
        warn(`${apiName} is called when there is no active component instance to be ` +
            `associated with. ` +
            `Lifecycle injection APIs can only be used during execution of setup().` +
            (` If you are using async setup(), make sure to register lifecycle ` +
                    `hooks before the first await statement.`
                ));
    }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => 
// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
(!isInSSRComponentSetup || lifecycle === "sp" /* LifecycleHooks.SERVER_PREFETCH */) &&
    injectHook(lifecycle, (...args) => hook(...args), target);
const onBeforeMount = createHook("bm" /* LifecycleHooks.BEFORE_MOUNT */);
const onMounted = createHook("m" /* LifecycleHooks.MOUNTED */);
const onBeforeUpdate = createHook("bu" /* LifecycleHooks.BEFORE_UPDATE */);
const onUpdated = createHook("u" /* LifecycleHooks.UPDATED */);
const onBeforeUnmount = createHook("bum" /* LifecycleHooks.BEFORE_UNMOUNT */);
const onUnmounted = createHook("um" /* LifecycleHooks.UNMOUNTED */);
const onServerPrefetch = createHook("sp" /* LifecycleHooks.SERVER_PREFETCH */);
const onRenderTriggered = createHook("rtg" /* LifecycleHooks.RENDER_TRIGGERED */);
const onRenderTracked = createHook("rtc" /* LifecycleHooks.RENDER_TRACKED */);
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec" /* LifecycleHooks.ERROR_CAPTURED */, hook, target);
}

/**
Runtime helper for applying directives to a vnode. Example usage:

const comp = resolveComponent('comp')
const foo = resolveDirective('foo')
const bar = resolveDirective('bar')

return withDirectives(h(comp), [
  [foo, this.x],
  [bar, this.y]
])
*/
function validateDirectiveName(name) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isBuiltInDirective)(name)) {
        warn('Do not use built-in directive ids as custom directive id: ' + name);
    }
}
/**
 * Adds directives to a VNode.
 */
function withDirectives(vnode, directives) {
    const internalInstance = currentRenderingInstance;
    if (internalInstance === null) {
        ( true) && warn(`withDirectives can only be used inside render functions.`);
        return vnode;
    }
    const instance = getExposeProxy(internalInstance) ||
        internalInstance.proxy;
    const bindings = vnode.dirs || (vnode.dirs = []);
    for (let i = 0; i < directives.length; i++) {
        let [dir, value, arg, modifiers = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ] = directives[i];
        if (dir) {
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(dir)) {
                dir = {
                    mounted: dir,
                    updated: dir
                };
            }
            if (dir.deep) {
                traverse(value);
            }
            bindings.push({
                dir,
                instance,
                value,
                oldValue: void 0,
                arg,
                modifiers
            });
        }
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for (let i = 0; i < bindings.length; i++) {
        const binding = bindings[i];
        if (oldBindings) {
            binding.oldValue = oldBindings[i].value;
        }
        let hook = binding.dir[name];
        if (hook) {
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();
            callWithAsyncErrorHandling(hook, instance, 8 /* ErrorCodes.DIRECTIVE_HOOK */, [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();
        }
    }
}

const COMPONENTS = 'components';
const DIRECTIVES = 'directives';
/**
 * @private
 */
function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
/**
 * @private
 */
function resolveDynamicComponent(component) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(component)) {
        return resolveAsset(COMPONENTS, component, false) || component;
    }
    else {
        // invalid types will fallthrough to createVNode and raise warning
        return (component || NULL_DYNAMIC_COMPONENT);
    }
}
/**
 * @private
 */
function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
// implementation
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        // explicit self name has highest priority
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component, false /* do not include inferred name to avoid breaking existing code */);
            if (selfName &&
                (selfName === name ||
                    selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name) ||
                    selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name)))) {
                return Component;
            }
        }
        const res = 
        // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) ||
            // global registration
            resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) {
            // fallback to implicit self-reference
            return Component;
        }
        if (( true) && warnMissing && !res) {
            const extra = type === COMPONENTS
                ? `\nIf this is a native custom element, make sure to exclude it from ` +
                    `component resolution via compilerOptions.isCustomElement.`
                : ``;
            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
        }
        return res;
    }
    else if ((true)) {
        warn(`resolve${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)(type.slice(0, -1))} ` +
            `can only be used in render() or setup().`);
    }
}
function resolve(registry, name) {
    return (registry &&
        (registry[name] ||
            registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name)] ||
            registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(name))]));
}

/**
 * Actual implementation
 */
function renderList(source, renderItem, cache, index) {
    let ret;
    const cached = (cache && cache[index]);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(source) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(source)) {
        ret = new Array(source.length);
        for (let i = 0, l = source.length; i < l; i++) {
            ret[i] = renderItem(source[i], i, undefined, cached && cached[i]);
        }
    }
    else if (typeof source === 'number') {
        if (( true) && !Number.isInteger(source)) {
            warn(`The v-for range expect an integer value but got ${source}.`);
        }
        ret = new Array(source);
        for (let i = 0; i < source; i++) {
            ret[i] = renderItem(i + 1, i, undefined, cached && cached[i]);
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(source)) {
        if (source[Symbol.iterator]) {
            ret = Array.from(source, (item, i) => renderItem(item, i, undefined, cached && cached[i]));
        }
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for (let i = 0, l = keys.length; i < l; i++) {
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i, cached && cached[i]);
            }
        }
    }
    else {
        ret = [];
    }
    if (cache) {
        cache[index] = ret;
    }
    return ret;
}

/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */
function createSlots(slots, dynamicSlots) {
    for (let i = 0; i < dynamicSlots.length; i++) {
        const slot = dynamicSlots[i];
        // array of dynamic slot generated by <template v-for="..." #[...]>
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(slot)) {
            for (let j = 0; j < slot.length; j++) {
                slots[slot[j].name] = slot[j].fn;
            }
        }
        else if (slot) {
            // conditional single slot generated by <template v-if="..." #foo>
            slots[slot.name] = slot.key
                ? (...args) => {
                    const res = slot.fn(...args);
                    // attach branch key so each conditional branch is considered a
                    // different fragment
                    if (res)
                        res.key = slot.key;
                    return res;
                }
                : slot.fn;
        }
    }
    return slots;
}

/**
 * Compiler runtime helper for rendering `<slot/>`
 * @private
 */
function renderSlot(slots, name, props = {}, 
// this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
fallback, noSlotted) {
    if (currentRenderingInstance.isCE ||
        (currentRenderingInstance.parent &&
            isAsyncWrapper(currentRenderingInstance.parent) &&
            currentRenderingInstance.parent.isCE)) {
        if (name !== 'default')
            props.name = name;
        return createVNode('slot', props, fallback && fallback());
    }
    let slot = slots[name];
    if (( true) && slot && slot.length > 1) {
        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` +
            `function. You need to mark this component with $dynamic-slots in the ` +
            `parent template.`);
        slot = () => [];
    }
    // a compiled slot disables block tracking by default to avoid manual
    // invocation interfering with template-based block tracking, but in
    // `renderSlot` we can be sure that it's template-based so we can force
    // enable it.
    if (slot && slot._c) {
        slot._d = false;
    }
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const rendered = createBlock(Fragment, {
        key: props.key ||
            // slot content array of a dynamic conditional slot may have a branch
            // key attached in the `createSlots` helper, respect that
            (validSlotContent && validSlotContent.key) ||
            `_${name}`
    }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* SlotFlags.STABLE */
        ? 64 /* PatchFlags.STABLE_FRAGMENT */
        : -2 /* PatchFlags.BAIL */);
    if (!noSlotted && rendered.scopeId) {
        rendered.slotScopeIds = [rendered.scopeId + '-s'];
    }
    if (slot && slot._c) {
        slot._d = true;
    }
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some(child => {
        if (!isVNode(child))
            return true;
        if (child.type === Comment)
            return false;
        if (child.type === Fragment &&
            !ensureValidVNode(child.children))
            return false;
        return true;
    })
        ? vnodes
        : null;
}

/**
 * For prefixing keys in v-on="obj" with "on"
 * @private
 */
function toHandlers(obj, preserveCaseIfNecessary) {
    const ret = {};
    if (( true) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(obj)) {
        warn(`v-on with no argument expects an object value.`);
        return ret;
    }
    for (const key in obj) {
        ret[preserveCaseIfNecessary && /[A-Z]/.test(key)
            ? `on:${key}`
            : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toHandlerKey)(key)] = obj[key];
    }
    return ret;
}

/**
 * #2437 In Vue 3, functional components do not have a public instance proxy but
 * they exist in the internal parent chain. For code that relies on traversing
 * public $parent chains, skip functional ones and go to the parent instead.
 */
const getPublicInstance = (i) => {
    if (!i)
        return null;
    if (isStatefulComponent(i))
        return getExposeProxy(i) || i.proxy;
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = 
// Move PURE marker to new line to workaround compiler discarding it
// due to type annotation
/*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(Object.create(null), {
    $: i => i,
    $el: i => i.vnode.el,
    $data: i => i.data,
    $props: i => (( true) ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.props) : 0),
    $attrs: i => (( true) ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.attrs) : 0),
    $slots: i => (( true) ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.slots) : 0),
    $refs: i => (( true) ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(i.refs) : 0),
    $parent: i => getPublicInstance(i.parent),
    $root: i => getPublicInstance(i.root),
    $emit: i => i.emit,
    $options: i => (__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type),
    $forceUpdate: i => i.f || (i.f = () => queueJob(i.update)),
    $nextTick: i => i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: i => (__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP)
});
const isReservedPrefix = (key) => key === '_' || key === '$';
const hasSetupBinding = (state, key) => state !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && !state.__isScriptSetup && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(state, key);
const PublicInstanceProxyHandlers = {
    get({ _: instance }, key) {
        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
        // for internal formatters to know that this is a Vue instance
        if (( true) && key === '__isVue') {
            return true;
        }
        // data / props / ctx
        // This getter gets called for every property access on the render context
        // during render and is a major hotspot. The most expensive part of this
        // is the multiple hasOwn() calls. It's much faster to do a simple property
        // access on a plain object, so we use an accessCache object (with null
        // prototype) to memoize what access type a key corresponds to.
        let normalizedProps;
        if (key[0] !== '$') {
            const n = accessCache[key];
            if (n !== undefined) {
                switch (n) {
                    case 1 /* AccessTypes.SETUP */:
                        return setupState[key];
                    case 2 /* AccessTypes.DATA */:
                        return data[key];
                    case 4 /* AccessTypes.CONTEXT */:
                        return ctx[key];
                    case 3 /* AccessTypes.PROPS */:
                        return props[key];
                    // default: just fallthrough
                }
            }
            else if (hasSetupBinding(setupState, key)) {
                accessCache[key] = 1 /* AccessTypes.SETUP */;
                return setupState[key];
            }
            else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key)) {
                accessCache[key] = 2 /* AccessTypes.DATA */;
                return data[key];
            }
            else if (
            // only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) &&
                (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(normalizedProps, key)) {
                accessCache[key] = 3 /* AccessTypes.PROPS */;
                return props[key];
            }
            else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(ctx, key)) {
                accessCache[key] = 4 /* AccessTypes.CONTEXT */;
                return ctx[key];
            }
            else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {
                accessCache[key] = 0 /* AccessTypes.OTHER */;
            }
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        // public $xxx properties
        if (publicGetter) {
            if (key === '$attrs') {
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.track)(instance, "get" /* TrackOpTypes.GET */, key);
                ( true) && markAttrsAccessed();
            }
            return publicGetter(instance);
        }
        else if (
        // css module (injected by vue-loader)
        (cssModule = type.__cssModules) &&
            (cssModule = cssModule[key])) {
            return cssModule;
        }
        else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(ctx, key)) {
            // user may set custom properties to `this` that start with `$`
            accessCache[key] = 4 /* AccessTypes.CONTEXT */;
            return ctx[key];
        }
        else if (
        // global properties
        ((globalProperties = appContext.config.globalProperties),
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(globalProperties, key))) {
            {
                return globalProperties[key];
            }
        }
        else if (( true) &&
            currentRenderingInstance &&
            (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(key) ||
                // #1091 avoid internal isRef/isVNode checks on component instance leading
                // to infinite warning loop
                key.indexOf('__v') !== 0)) {
            if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && isReservedPrefix(key[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key)) {
                warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` +
                    `character ("$" or "_") and is not proxied on the render context.`);
            }
            else if (instance === currentRenderingInstance) {
                warn(`Property ${JSON.stringify(key)} was accessed during render ` +
                    `but is not defined on instance.`);
            }
        }
    },
    set({ _: instance }, key, value) {
        const { data, setupState, ctx } = instance;
        if (hasSetupBinding(setupState, key)) {
            setupState[key] = value;
            return true;
        }
        else if (( true) &&
            setupState.__isScriptSetup &&
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(setupState, key)) {
            warn(`Cannot mutate <script setup> binding "${key}" from Options API.`);
            return false;
        }
        else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key)) {
            data[key] = value;
            return true;
        }
        else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(instance.props, key)) {
            ( true) && warn(`Attempting to mutate prop "${key}". Props are readonly.`);
            return false;
        }
        if (key[0] === '$' && key.slice(1) in instance) {
            ( true) &&
                warn(`Attempting to mutate public property "${key}". ` +
                    `Properties starting with $ are reserved and readonly.`);
            return false;
        }
        else {
            if (( true) && key in instance.appContext.config.globalProperties) {
                Object.defineProperty(ctx, key, {
                    enumerable: true,
                    configurable: true,
                    value
                });
            }
            else {
                ctx[key] = value;
            }
        }
        return true;
    },
    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
        let normalizedProps;
        return (!!accessCache[key] ||
            (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(data, key)) ||
            hasSetupBinding(setupState, key) ||
            ((normalizedProps = propsOptions[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(normalizedProps, key)) ||
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(ctx, key) ||
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(publicPropertiesMap, key) ||
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(appContext.config.globalProperties, key));
    },
    defineProperty(target, key, descriptor) {
        if (descriptor.get != null) {
            // invalidate key cache of a getter based property #5417
            target._.accessCache[key] = 0;
        }
        else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(descriptor, 'value')) {
            this.set(target, key, descriptor.value, null);
        }
        return Reflect.defineProperty(target, key, descriptor);
    }
};
if (true) {
    PublicInstanceProxyHandlers.ownKeys = (target) => {
        warn(`Avoid app logic that relies on enumerating keys on a component instance. ` +
            `The keys will be empty in production mode to avoid performance overhead.`);
        return Reflect.ownKeys(target);
    };
}
const RuntimeCompiledPublicInstanceProxyHandlers = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, PublicInstanceProxyHandlers, {
    get(target, key) {
        // fast path for unscopables when using `with` block
        if (key === Symbol.unscopables) {
            return;
        }
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has(_, key) {
        const has = key[0] !== '_' && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isGloballyWhitelisted)(key);
        if (( true) && !has && PublicInstanceProxyHandlers.has(_, key)) {
            warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        }
        return has;
    }
});
// dev only
// In dev mode, the proxy target exposes the same properties as seen on `this`
// for easier console inspection. In prod mode it will be an empty object so
// these properties definitions can be skipped.
function createDevRenderContext(instance) {
    const target = {};
    // expose internal instance for proxy handlers
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: () => instance
    });
    // expose public properties
    Object.keys(publicPropertiesMap).forEach(key => {
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: () => publicPropertiesMap[key](instance),
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP
        });
    });
    return target;
}
// dev only
function exposePropsOnRenderContext(instance) {
    const { ctx, propsOptions: [propsOptions] } = instance;
    if (propsOptions) {
        Object.keys(propsOptions).forEach(key => {
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => instance.props[key],
                set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP
            });
        });
    }
}
// dev only
function exposeSetupStateOnRenderContext(instance) {
    const { ctx, setupState } = instance;
    Object.keys((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(setupState)).forEach(key => {
        if (!setupState.__isScriptSetup) {
            if (isReservedPrefix(key[0])) {
                warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` +
                    `which are reserved prefixes for Vue internals.`);
                return;
            }
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => setupState[key],
                set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP
            });
        }
    });
}

function createDuplicateChecker() {
    const cache = Object.create(null);
    return (type, key) => {
        if (cache[key]) {
            warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
        }
        else {
            cache[key] = type;
        }
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    // do not cache property access on public proxy during state initialization
    shouldCacheAccess = false;
    // call beforeCreate first before accessing other options since
    // the hook may mutate resolved options (#2791)
    if (options.beforeCreate) {
        callHook(options.beforeCreate, instance, "bc" /* LifecycleHooks.BEFORE_CREATE */);
    }
    const { 
    // state
    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, 
    // lifecycle
    created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, serverPrefetch, 
    // public API
    expose, inheritAttrs, 
    // assets
    components, directives, filters } = options;
    const checkDuplicateProperties = ( true) ? createDuplicateChecker() : 0;
    if ((true)) {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) {
            for (const key in propsOptions) {
                checkDuplicateProperties("Props" /* OptionTypes.PROPS */, key);
            }
        }
    }
    // options initialization order (to be consistent with Vue 2):
    // - props (already done outside of this function)
    // - inject
    // - methods
    // - data (deferred since it relies on `this` access)
    // - computed
    // - watch (deferred since it relies on `this` access)
    if (injectOptions) {
        resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
    }
    if (methods) {
        for (const key in methods) {
            const methodHandler = methods[key];
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(methodHandler)) {
                // In dev mode, we use the `createRenderContext` function to define
                // methods to the proxy target, and those are read-only but
                // reconfigurable, so it needs to be redefined here
                if ((true)) {
                    Object.defineProperty(ctx, key, {
                        value: methodHandler.bind(publicThis),
                        configurable: true,
                        enumerable: true,
                        writable: true
                    });
                }
                else {}
                if ((true)) {
                    checkDuplicateProperties("Methods" /* OptionTypes.METHODS */, key);
                }
            }
            else if ((true)) {
                warn(`Method "${key}" has type "${typeof methodHandler}" in the component definition. ` +
                    `Did you reference the function correctly?`);
            }
        }
    }
    if (dataOptions) {
        if (( true) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(dataOptions)) {
            warn(`The data option must be a function. ` +
                `Plain object usage is no longer supported.`);
        }
        const data = dataOptions.call(publicThis, publicThis);
        if (( true) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(data)) {
            warn(`data() returned a Promise - note data() cannot be async; If you ` +
                `intend to perform data fetching before component renders, use ` +
                `async setup() + <Suspense>.`);
        }
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(data)) {
            ( true) && warn(`data() should return an object.`);
        }
        else {
            instance.data = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.reactive)(data);
            if ((true)) {
                for (const key in data) {
                    checkDuplicateProperties("Data" /* OptionTypes.DATA */, key);
                    // expose data on ctx during dev
                    if (!isReservedPrefix(key[0])) {
                        Object.defineProperty(ctx, key, {
                            configurable: true,
                            enumerable: true,
                            get: () => data[key],
                            set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP
                        });
                    }
                }
            }
        }
    }
    // state initialization complete at this point - start caching access
    shouldCacheAccess = true;
    if (computedOptions) {
        for (const key in computedOptions) {
            const opt = computedOptions[key];
            const get = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt)
                ? opt.bind(publicThis, publicThis)
                : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt.get)
                    ? opt.get.bind(publicThis, publicThis)
                    : _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP;
            if (( true) && get === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP) {
                warn(`Computed property "${key}" has no getter.`);
            }
            const set = !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt.set)
                ? opt.set.bind(publicThis)
                : ( true)
                    ? () => {
                        warn(`Write operation failed: computed property "${key}" is readonly.`);
                    }
                    : 0;
            const c = computed({
                get,
                set
            });
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => c.value,
                set: v => (c.value = v)
            });
            if ((true)) {
                checkDuplicateProperties("Computed" /* OptionTypes.COMPUTED */, key);
            }
        }
    }
    if (watchOptions) {
        for (const key in watchOptions) {
            createWatcher(watchOptions[key], ctx, publicThis, key);
        }
    }
    if (provideOptions) {
        const provides = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(provideOptions)
            ? provideOptions.call(publicThis)
            : provideOptions;
        Reflect.ownKeys(provides).forEach(key => {
            provide(key, provides[key]);
        });
    }
    if (created) {
        callHook(created, instance, "c" /* LifecycleHooks.CREATED */);
    }
    function registerLifecycleHook(register, hook) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)) {
            hook.forEach(_hook => register(_hook.bind(publicThis)));
        }
        else if (hook) {
            register(hook.bind(publicThis));
        }
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {});
            expose.forEach(key => {
                Object.defineProperty(exposed, key, {
                    get: () => publicThis[key],
                    set: val => (publicThis[key] = val)
                });
            });
        }
        else if (!instance.exposed) {
            instance.exposed = {};
        }
    }
    // options that are handled when creating the instance but also need to be
    // applied from mixins
    if (render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP) {
        instance.render = render;
    }
    if (inheritAttrs != null) {
        instance.inheritAttrs = inheritAttrs;
    }
    // asset options.
    if (components)
        instance.components = components;
    if (directives)
        instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP, unwrapRef = false) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(injectOptions)) {
        injectOptions = normalizeInject(injectOptions);
    }
    for (const key in injectOptions) {
        const opt = injectOptions[key];
        let injected;
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(opt)) {
            if ('default' in opt) {
                injected = inject(opt.from || key, opt.default, true /* treat default function as factory */);
            }
            else {
                injected = inject(opt.from || key);
            }
        }
        else {
            injected = inject(opt);
        }
        if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(injected)) {
            // TODO remove the check in 3.3
            if (unwrapRef) {
                Object.defineProperty(ctx, key, {
                    enumerable: true,
                    configurable: true,
                    get: () => injected.value,
                    set: v => (injected.value = v)
                });
            }
            else {
                if ((true)) {
                    warn(`injected property "${key}" is a ref and will be auto-unwrapped ` +
                        `and no longer needs \`.value\` in the next minor release. ` +
                        `To opt-in to the new behavior now, ` +
                        `set \`app.config.unwrapInjectedRef = true\` (this config is ` +
                        `temporary and will not be needed in the future.)`);
                }
                ctx[key] = injected;
            }
        }
        else {
            ctx[key] = injected;
        }
        if ((true)) {
            checkDuplicateProperties("Inject" /* OptionTypes.INJECT */, key);
        }
    }
}
function callHook(hook, instance, type) {
    callWithAsyncErrorHandling((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)
        ? hook.map(h => h.bind(instance.proxy))
        : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    const getter = key.includes('.')
        ? createPathGetter(publicThis, key)
        : () => publicThis[key];
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(raw)) {
        const handler = ctx[raw];
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(handler)) {
            watch(getter, handler);
        }
        else if ((true)) {
            warn(`Invalid watch handler specified by key "${raw}"`, handler);
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(raw)) {
        watch(getter, raw.bind(publicThis));
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(raw)) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {
            raw.forEach(r => createWatcher(r, ctx, publicThis, key));
        }
        else {
            const handler = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(raw.handler)
                ? raw.handler.bind(publicThis)
                : ctx[raw.handler];
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(handler)) {
                watch(getter, handler, raw);
            }
            else if ((true)) {
                warn(`Invalid watch handler specified by key "${raw.handler}"`, handler);
            }
        }
    }
    else if ((true)) {
        warn(`Invalid watch option: "${key}"`, raw);
    }
}
/**
 * Resolve merged options and cache it on the component.
 * This is done only once per-component since the merging does not involve
 * instances.
 */
function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins, extends: extendsOptions } = base;
    const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) {
        resolved = cached;
    }
    else if (!globalMixins.length && !mixins && !extendsOptions) {
        {
            resolved = base;
        }
    }
    else {
        resolved = {};
        if (globalMixins.length) {
            globalMixins.forEach(m => mergeOptions(resolved, m, optionMergeStrategies, true));
        }
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(base)) {
        cache.set(base, resolved);
    }
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins, extends: extendsOptions } = from;
    if (extendsOptions) {
        mergeOptions(to, extendsOptions, strats, true);
    }
    if (mixins) {
        mixins.forEach((m) => mergeOptions(to, m, strats, true));
    }
    for (const key in from) {
        if (asMixin && key === 'expose') {
            ( true) &&
                warn(`"expose" option is ignored when declared in mixins or extends. ` +
                    `It should only be declared in the base component itself.`);
        }
        else {
            const strat = internalOptionMergeStrats[key] || (strats && strats[key]);
            to[key] = strat ? strat(to[key], from[key]) : from[key];
        }
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeObjectOptions,
    emits: mergeObjectOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    beforeUnmount: mergeAsArray,
    destroyed: mergeAsArray,
    unmounted: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) {
        return to;
    }
    if (!to) {
        return from;
    }
    return function mergedDataFn() {
        return ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend))((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(to) ? to.call(this, this) : to, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {
        const res = {};
        for (let i = 0; i < raw.length; i++) {
            res[raw[i]] = raw[i];
        }
        return res;
    }
    return raw;
}
function mergeAsArray(to, from) {
    return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
    return to ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
    if (!to)
        return from;
    if (!from)
        return to;
    const merged = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(Object.create(null), to);
    for (const key in from) {
        merged[key] = mergeAsArray(to[key], from[key]);
    }
    return merged;
}

function initProps(instance, rawProps, isStateful, // result of bitwise flag comparison
isSSR = false) {
    const props = {};
    const attrs = {};
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(attrs, InternalObjectKey, 1);
    instance.propsDefaults = Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    // ensure all declared prop keys are present
    for (const key in instance.propsOptions[0]) {
        if (!(key in props)) {
            props[key] = undefined;
        }
    }
    // validation
    if ((true)) {
        validateProps(rawProps || {}, props, instance);
    }
    if (isStateful) {
        // stateful
        instance.props = isSSR ? props : (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReactive)(props);
    }
    else {
        if (!instance.type.props) {
            // functional w/ optional props, props === attrs
            instance.props = attrs;
        }
        else {
            // functional w/ declared props
            instance.props = props;
        }
    }
    instance.attrs = attrs;
}
function isInHmrContext(instance) {
    while (instance) {
        if (instance.type.__hmrId)
            return true;
        instance = instance.parent;
    }
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props, attrs, vnode: { patchFlag } } = instance;
    const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !(( true) && isInHmrContext(instance)) &&
        (optimized || patchFlag > 0) &&
        !(patchFlag & 16 /* PatchFlags.FULL_PROPS */)) {
        if (patchFlag & 8 /* PatchFlags.PROPS */) {
            // Compiler-generated props & no keys change, just set the updated
            // the props.
            const propsToUpdate = instance.vnode.dynamicProps;
            for (let i = 0; i < propsToUpdate.length; i++) {
                let key = propsToUpdate[i];
                // skip if the prop key is a declared emit event listener
                if (isEmitListener(instance.emitsOptions, key)) {
                    continue;
                }
                // PROPS flag guarantees rawProps to be non-null
                const value = rawProps[key];
                if (options) {
                    // attr / props separation was done on init and will be consistent
                    // in this code path, so just check if attrs have it.
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    }
                    else {
                        const camelizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false /* isAbsent */);
                    }
                }
                else {
                    if (value !== attrs[key]) {
                        attrs[key] = value;
                        hasAttrsChanged = true;
                    }
                }
            }
        }
    }
    else {
        // full props update.
        if (setFullProps(instance, rawProps, props, attrs)) {
            hasAttrsChanged = true;
        }
        // in case of dynamic props, check if we need to delete keys from
        // the props object
        let kebabKey;
        for (const key in rawCurrentProps) {
            if (!rawProps ||
                // for camelCase
                (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, key) &&
                    // it's possible the original props was passed in as kebab-case
                    // and converted to camelCase (#955)
                    ((kebabKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key)) === key || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, kebabKey)))) {
                if (options) {
                    if (rawPrevProps &&
                        // for camelCase
                        (rawPrevProps[key] !== undefined ||
                            // for kebab-case
                            rawPrevProps[kebabKey] !== undefined)) {
                        props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true /* isAbsent */);
                    }
                }
                else {
                    delete props[key];
                }
            }
        }
        // in the case of functional component w/o props declaration, props and
        // attrs point to the same object so it should already have been updated.
        if (attrs !== rawCurrentProps) {
            for (const key in attrs) {
                if (!rawProps ||
                    (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, key) &&
                        (!false ))) {
                    delete attrs[key];
                    hasAttrsChanged = true;
                }
            }
        }
    }
    // trigger updates for $attrs in case it's used in component slots
    if (hasAttrsChanged) {
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.trigger)(instance, "set" /* TriggerOpTypes.SET */, '$attrs');
    }
    if ((true)) {
        validateProps(rawProps || {}, props, instance);
    }
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) {
        for (let key in rawProps) {
            // key, ref are reserved and never passed down
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key)) {
                continue;
            }
            const value = rawProps[key];
            // prop option names are camelized during normalization, so to support
            // kebab -> camel conversion here we need to camelize the key.
            let camelKey;
            if (options && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(options, (camelKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key)))) {
                if (!needCastKeys || !needCastKeys.includes(camelKey)) {
                    props[camelKey] = value;
                }
                else {
                    (rawCastValues || (rawCastValues = {}))[camelKey] = value;
                }
            }
            else if (!isEmitListener(instance.emitsOptions, key)) {
                if (!(key in attrs) || value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);
        const castValues = rawCastValues || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
        for (let i = 0; i < needCastKeys.length; i++) {
            const key = needCastKeys[i];
            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(castValues, key));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(opt, 'default');
        // default values
        if (hasDefault && value === undefined) {
            const defaultValue = opt.default;
            if (opt.type !== Function && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(defaultValue)) {
                const { propsDefaults } = instance;
                if (key in propsDefaults) {
                    value = propsDefaults[key];
                }
                else {
                    setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    unsetCurrentInstance();
                }
            }
            else {
                value = defaultValue;
            }
        }
        // boolean casting
        if (opt[0 /* BooleanFlags.shouldCast */]) {
            if (isAbsent && !hasDefault) {
                value = false;
            }
            else if (opt[1 /* BooleanFlags.shouldCastTrue */] &&
                (value === '' || value === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key))) {
                value = true;
            }
        }
    }
    return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) {
        return cached;
    }
    const raw = comp.props;
    const normalized = {};
    const needCastKeys = [];
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(comp)) {
        const extendProps = (raw) => {
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw, appContext, true);
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(normalized, props);
            if (keys)
                needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) {
            appContext.mixins.forEach(extendProps);
        }
        if (comp.extends) {
            extendProps(comp.extends);
        }
        if (comp.mixins) {
            comp.mixins.forEach(extendProps);
        }
    }
    if (!raw && !hasExtends) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {
            cache.set(comp, _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR);
        }
        return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)) {
        for (let i = 0; i < raw.length; i++) {
            if (( true) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(raw[i])) {
                warn(`props must be strings when using array syntax.`, raw[i]);
            }
            const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(raw[i]);
            if (validatePropName(normalizedKey)) {
                normalized[normalizedKey] = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
            }
        }
    }
    else if (raw) {
        if (( true) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(raw)) {
            warn(`invalid props options`, raw);
        }
        for (const key in raw) {
            const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw[key];
                const prop = (normalized[normalizedKey] =
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(opt) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt) ? { type: opt } : Object.assign({}, opt));
                if (prop) {
                    const booleanIndex = getTypeIndex(Boolean, prop.type);
                    const stringIndex = getTypeIndex(String, prop.type);
                    prop[0 /* BooleanFlags.shouldCast */] = booleanIndex > -1;
                    prop[1 /* BooleanFlags.shouldCastTrue */] =
                        stringIndex < 0 || booleanIndex < stringIndex;
                    // if the prop needs boolean casting or default value
                    if (booleanIndex > -1 || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(prop, 'default')) {
                        needCastKeys.push(normalizedKey);
                    }
                }
            }
        }
    }
    const res = [normalized, needCastKeys];
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(comp)) {
        cache.set(comp, res);
    }
    return res;
}
function validatePropName(key) {
    if (key[0] !== '$') {
        return true;
    }
    else if ((true)) {
        warn(`Invalid prop name: "${key}" is a reserved property.`);
    }
    return false;
}
// use function string name to check type constructors
// so that it works across vms / iframes.
function getType(ctor) {
    const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ctor === null ? 'null' : '';
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(expectedTypes)) {
        return expectedTypes.findIndex(t => isSameType(t, type));
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(expectedTypes)) {
        return isSameType(expectedTypes, type) ? 0 : -1;
    }
    return -1;
}
/**
 * dev only
 */
function validateProps(rawProps, props, instance) {
    const resolvedValues = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(props);
    const options = instance.propsOptions[0];
    for (const key in options) {
        let opt = options[key];
        if (opt == null)
            continue;
        validateProp(key, resolvedValues[key], opt, !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, key) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(rawProps, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key)));
    }
}
/**
 * dev only
 */
function validateProp(name, value, prop, isAbsent) {
    const { type, required, validator } = prop;
    // required!
    if (required && isAbsent) {
        warn('Missing required prop: "' + name + '"');
        return;
    }
    // missing but optional
    if (value == null && !prop.required) {
        return;
    }
    // type check
    if (type != null && type !== true) {
        let isValid = false;
        const types = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(type) ? type : [type];
        const expectedTypes = [];
        // value is valid as long as one of the specified types match
        for (let i = 0; i < types.length && !isValid; i++) {
            const { valid, expectedType } = assertType(value, types[i]);
            expectedTypes.push(expectedType || '');
            isValid = valid;
        }
        if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    // custom validator
    if (validator && !validator(value)) {
        warn('Invalid prop: custom validator check failed for prop "' + name + '".');
    }
}
const isSimpleType = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.makeMap)('String,Number,Boolean,Function,Symbol,BigInt');
/**
 * dev only
 */
function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === 'object') {
            valid = value instanceof type;
        }
    }
    else if (expectedType === 'Object') {
        valid = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(value);
    }
    else if (expectedType === 'Array') {
        valid = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value);
    }
    else if (expectedType === 'null') {
        valid = value === null;
    }
    else {
        valid = value instanceof type;
    }
    return {
        valid,
        expectedType
    };
}
/**
 * dev only
 */
function getInvalidTypeMessage(name, value, expectedTypes) {
    let message = `Invalid prop: type check failed for prop "${name}".` +
        ` Expected ${expectedTypes.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize).join(' | ')}`;
    const expectedType = expectedTypes[0];
    const receivedType = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toRawType)(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 &&
        isExplicable(expectedType) &&
        !isBoolean(expectedType, receivedType)) {
        message += ` with value ${expectedValue}`;
    }
    message += `, got ${receivedType} `;
    // check if we need to specify received value
    if (isExplicable(receivedType)) {
        message += `with value ${receivedValue}.`;
    }
    return message;
}
/**
 * dev only
 */
function styleValue(value, type) {
    if (type === 'String') {
        return `"${value}"`;
    }
    else if (type === 'Number') {
        return `${Number(value)}`;
    }
    else {
        return `${value}`;
    }
}
/**
 * dev only
 */
function isExplicable(type) {
    const explicitTypes = ['string', 'number', 'boolean'];
    return explicitTypes.some(elem => type.toLowerCase() === elem);
}
/**
 * dev only
 */
function isBoolean(...args) {
    return args.some(elem => elem.toLowerCase() === 'boolean');
}

const isInternalKey = (key) => key[0] === '_' || key === '$stable';
const normalizeSlotValue = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)
    ? value.map(normalizeVNode)
    : [normalizeVNode(value)];
const normalizeSlot = (key, rawSlot, ctx) => {
    if (rawSlot._n) {
        // already normalized - #5353
        return rawSlot;
    }
    const normalized = withCtx((...args) => {
        if (( true) && currentInstance) {
            warn(`Slot "${key}" invoked outside of the render function: ` +
                `this will not track dependencies used in the slot. ` +
                `Invoke the slot function inside the render function instead.`);
        }
        return normalizeSlotValue(rawSlot(...args));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
    const ctx = rawSlots._ctx;
    for (const key in rawSlots) {
        if (isInternalKey(key))
            continue;
        const value = rawSlots[key];
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {
            slots[key] = normalizeSlot(key, value, ctx);
        }
        else if (value != null) {
            if (true) {
                warn(`Non-function value encountered for slot "${key}". ` +
                    `Prefer function slots for better performance.`);
            }
            const normalized = normalizeSlotValue(value);
            slots[key] = () => normalized;
        }
    }
};
const normalizeVNodeSlots = (instance, children) => {
    if (( true) &&
        !isKeepAlive(instance.vnode) &&
        !(false )) {
        warn(`Non-function value encountered for default slot. ` +
            `Prefer function slots for better performance.`);
    }
    const normalized = normalizeSlotValue(children);
    instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
    if (instance.vnode.shapeFlag & 32 /* ShapeFlags.SLOTS_CHILDREN */) {
        const type = children._;
        if (type) {
            // users can get the shallow readonly version of the slots object through `this.$slots`,
            // we should avoid the proxy object polluting the slots of the internal instance
            instance.slots = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(children);
            // make compiler marker non-enumerable
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(children, '_', type);
        }
        else {
            normalizeObjectSlots(children, (instance.slots = {}));
        }
    }
    else {
        instance.slots = {};
        if (children) {
            normalizeVNodeSlots(instance, children);
        }
    }
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.def)(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
    const { vnode, slots } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
    if (vnode.shapeFlag & 32 /* ShapeFlags.SLOTS_CHILDREN */) {
        const type = children._;
        if (type) {
            // compiled slots.
            if (( true) && isHmrUpdating) {
                // Parent was HMR updated so slot content may have changed.
                // force update slots and mark instance for hmr as well
                (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(slots, children);
            }
            else if (optimized && type === 1 /* SlotFlags.STABLE */) {
                // compiled AND stable.
                // no need to update, and skip stale slots removal.
                needDeletionCheck = false;
            }
            else {
                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip
                // normalization.
                (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(slots, children);
                // #2893
                // when rendering the optimized slots by manually written render function,
                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
                // i.e. let the `renderSlot` create the bailed Fragment
                if (!optimized && type === 1 /* SlotFlags.STABLE */) {
                    delete slots._;
                }
            }
        }
        else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    }
    else if (children) {
        // non slot object children (direct value) passed to a component
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = { default: 1 };
    }
    // delete stale slots
    if (needDeletionCheck) {
        for (const key in slots) {
            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
                delete slots[key];
            }
        }
    }
};

function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NO,
            performance: false,
            globalProperties: {},
            optionMergeStrategies: {},
            errorHandler: undefined,
            warnHandler: undefined,
            compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: Object.create(null),
        optionsCache: new WeakMap(),
        propsCache: new WeakMap(),
        emitsCache: new WeakMap()
    };
}
let uid = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(rootComponent)) {
            rootComponent = Object.assign({}, rootComponent);
        }
        if (rootProps != null && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(rootProps)) {
            ( true) && warn(`root props passed to app.mount() must be an object.`);
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = new Set();
        let isMounted = false;
        const app = (context.app = {
            _uid: uid++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version,
            get config() {
                return context.config;
            },
            set config(v) {
                if ((true)) {
                    warn(`app.config cannot be replaced. Modify individual options instead.`);
                }
            },
            use(plugin, ...options) {
                if (installedPlugins.has(plugin)) {
                    ( true) && warn(`Plugin has already been applied to target app.`);
                }
                else if (plugin && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                }
                else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                }
                else if ((true)) {
                    warn(`A plugin must either be a function or an object with an "install" ` +
                        `function.`);
                }
                return app;
            },
            mixin(mixin) {
                if (__VUE_OPTIONS_API__) {
                    if (!context.mixins.includes(mixin)) {
                        context.mixins.push(mixin);
                    }
                    else if ((true)) {
                        warn('Mixin has already been applied to target app' +
                            (mixin.name ? `: ${mixin.name}` : ''));
                    }
                }
                else if ((true)) {
                    warn('Mixins are only available in builds supporting Options API');
                }
                return app;
            },
            component(name, component) {
                if ((true)) {
                    validateComponentName(name, context.config);
                }
                if (!component) {
                    return context.components[name];
                }
                if (( true) && context.components[name]) {
                    warn(`Component "${name}" has already been registered in target app.`);
                }
                context.components[name] = component;
                return app;
            },
            directive(name, directive) {
                if ((true)) {
                    validateDirectiveName(name);
                }
                if (!directive) {
                    return context.directives[name];
                }
                if (( true) && context.directives[name]) {
                    warn(`Directive "${name}" has already been registered in target app.`);
                }
                context.directives[name] = directive;
                return app;
            },
            mount(rootContainer, isHydrate, isSVG) {
                if (!isMounted) {
                    // #5571
                    if (( true) && rootContainer.__vue_app__) {
                        warn(`There is already an app instance mounted on the host container.\n` +
                            ` If you want to mount another app on the same host container,` +
                            ` you need to unmount the previous app by calling \`app.unmount()\` first.`);
                    }
                    const vnode = createVNode(rootComponent, rootProps);
                    // store app context on the root VNode.
                    // this will be set on the root instance on initial mount.
                    vnode.appContext = context;
                    // HMR root reload
                    if ((true)) {
                        context.reload = () => {
                            render(cloneVNode(vnode), rootContainer, isSVG);
                        };
                    }
                    if (isHydrate && hydrate) {
                        hydrate(vnode, rootContainer);
                    }
                    else {
                        render(vnode, rootContainer, isSVG);
                    }
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    if (true) {
                        app._instance = vnode.component;
                        devtoolsInitApp(app, version);
                    }
                    return getExposeProxy(vnode.component) || vnode.component.proxy;
                }
                else if ((true)) {
                    warn(`App has already been mounted.\n` +
                        `If you want to remount the same app, move your app creation logic ` +
                        `into a factory function and create fresh app instances for each ` +
                        `mount - e.g. \`const createMyApp = () => createApp(App)\``);
                }
            },
            unmount() {
                if (isMounted) {
                    render(null, app._container);
                    if (true) {
                        app._instance = null;
                        devtoolsUnmountApp(app);
                    }
                    delete app._container.__vue_app__;
                }
                else if ((true)) {
                    warn(`Cannot unmount an app that is not mounted.`);
                }
            },
            provide(key, value) {
                if (( true) && key in context.provides) {
                    warn(`App already provides property with key "${String(key)}". ` +
                        `It will be overwritten with the new value.`);
                }
                context.provides[key] = value;
                return app;
            }
        });
        return app;
    };
}

/**
 * Function for handling a template ref
 */
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(rawRef)) {
        rawRef.forEach((r, i) => setRef(r, oldRawRef && ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) {
        // when mounting async components, nothing needs to be done,
        // because the template ref is forwarded to inner component
        return;
    }
    const refValue = vnode.shapeFlag & 4 /* ShapeFlags.STATEFUL_COMPONENT */
        ? getExposeProxy(vnode.component) || vnode.component.proxy
        : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner, r: ref } = rawRef;
    if (( true) && !owner) {
        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` +
            `A vnode with ref must be created inside the render function.`);
        return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ ? (owner.refs = {}) : owner.refs;
    const setupState = owner.setupState;
    // dynamic ref changed. unset old ref
    if (oldRef != null && oldRef !== ref) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(oldRef)) {
            refs[oldRef] = null;
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(setupState, oldRef)) {
                setupState[oldRef] = null;
            }
        }
        else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(oldRef)) {
            oldRef.value = null;
        }
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(ref)) {
        callWithErrorHandling(ref, owner, 12 /* ErrorCodes.FUNCTION_REF */, [value, refs]);
    }
    else {
        const _isString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(ref);
        const _isRef = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(ref);
        if (_isString || _isRef) {
            const doSet = () => {
                if (rawRef.f) {
                    const existing = _isString
                        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(setupState, ref)
                            ? setupState[ref]
                            : refs[ref]
                        : ref.value;
                    if (isUnmount) {
                        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(existing) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.remove)(existing, refValue);
                    }
                    else {
                        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(existing)) {
                            if (_isString) {
                                refs[ref] = [refValue];
                                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(setupState, ref)) {
                                    setupState[ref] = refs[ref];
                                }
                            }
                            else {
                                ref.value = [refValue];
                                if (rawRef.k)
                                    refs[rawRef.k] = ref.value;
                            }
                        }
                        else if (!existing.includes(refValue)) {
                            existing.push(refValue);
                        }
                    }
                }
                else if (_isString) {
                    refs[ref] = value;
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasOwn)(setupState, ref)) {
                        setupState[ref] = value;
                    }
                }
                else if (_isRef) {
                    ref.value = value;
                    if (rawRef.k)
                        refs[rawRef.k] = value;
                }
                else if ((true)) {
                    warn('Invalid template ref type:', ref, `(${typeof ref})`);
                }
            };
            if (value) {
                doSet.id = -1;
                queuePostRenderEffect(doSet, parentSuspense);
            }
            else {
                doSet();
            }
        }
        else if ((true)) {
            warn('Invalid template ref type:', ref, `(${typeof ref})`);
        }
    }
}

let hasMismatch = false;
const isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';
const isComment = (node) => node.nodeType === 8 /* DOMNodeTypes.COMMENT */;
// Note: hydration is DOM-specific
// But we have to place it in core due to tight coupling with core - splitting
// it out creates a ton of unnecessary complexity.
// Hydration also depends on some renderer internal logic which needs to be
// passed in via arguments.
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent, p: patch, o: { patchProp, createText, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;
    const hydrate = (vnode, container) => {
        if (!container.hasChildNodes()) {
            ( true) &&
                warn(`Attempting to hydrate existing markup but container is empty. ` +
                    `Performing full mount instead.`);
            patch(null, vnode, container);
            flushPostFlushCbs();
            container._vnode = vnode;
            return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        container._vnode = vnode;
        if (hasMismatch && !false) {
            // this error should show up in production
            console.error(`Hydration completed but contains mismatches.`);
        }
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
        const isFragmentStart = isComment(node) && node.data === '[';
        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
        const { type, ref, shapeFlag, patchFlag } = vnode;
        let domType = node.nodeType;
        vnode.el = node;
        if (patchFlag === -2 /* PatchFlags.BAIL */) {
            optimized = false;
            vnode.dynamicChildren = null;
        }
        let nextNode = null;
        switch (type) {
            case Text:
                if (domType !== 3 /* DOMNodeTypes.TEXT */) {
                    // #5728 empty text node inside a slot can cause hydration failure
                    // because the server rendered HTML won't contain a text node
                    if (vnode.children === '') {
                        insert((vnode.el = createText('')), parentNode(node), node);
                        nextNode = node;
                    }
                    else {
                        nextNode = onMismatch();
                    }
                }
                else {
                    if (node.data !== vnode.children) {
                        hasMismatch = true;
                        ( true) &&
                            warn(`Hydration text mismatch:` +
                                `\n- Client: ${JSON.stringify(node.data)}` +
                                `\n- Server: ${JSON.stringify(vnode.children)}`);
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment:
                if (domType !== 8 /* DOMNodeTypes.COMMENT */ || isFragmentStart) {
                    nextNode = onMismatch();
                }
                else {
                    nextNode = nextSibling(node);
                }
                break;
            case Static:
                if (isFragmentStart) {
                    // entire template is static but SSRed as a fragment
                    node = nextSibling(node);
                    domType = node.nodeType;
                }
                if (domType === 1 /* DOMNodeTypes.ELEMENT */ || domType === 3 /* DOMNodeTypes.TEXT */) {
                    // determine anchor, adopt content
                    nextNode = node;
                    // if the static vnode has its content stripped during build,
                    // adopt it from the server-rendered HTML.
                    const needToAdoptContent = !vnode.children.length;
                    for (let i = 0; i < vnode.staticCount; i++) {
                        if (needToAdoptContent)
                            vnode.children +=
                                nextNode.nodeType === 1 /* DOMNodeTypes.ELEMENT */
                                    ? nextNode.outerHTML
                                    : nextNode.data;
                        if (i === vnode.staticCount - 1) {
                            vnode.anchor = nextNode;
                        }
                        nextNode = nextSibling(nextNode);
                    }
                    return isFragmentStart ? nextSibling(nextNode) : nextNode;
                }
                else {
                    onMismatch();
                }
                break;
            case Fragment:
                if (!isFragmentStart) {
                    nextNode = onMismatch();
                }
                else {
                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                }
                break;
            default:
                if (shapeFlag & 1 /* ShapeFlags.ELEMENT */) {
                    if (domType !== 1 /* DOMNodeTypes.ELEMENT */ ||
                        vnode.type.toLowerCase() !==
                            node.tagName.toLowerCase()) {
                        nextNode = onMismatch();
                    }
                    else {
                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                    }
                }
                else if (shapeFlag & 6 /* ShapeFlags.COMPONENT */) {
                    // when setting up the render effect, if the initial vnode already
                    // has .el set, the component will perform hydration instead of mount
                    // on its sub-tree.
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
                    // component may be async, so in the case of fragments we cannot rely
                    // on component's rendered output to determine the end of the fragment
                    // instead, we do a lookahead to find the end anchor node.
                    nextNode = isFragmentStart
                        ? locateClosingAsyncAnchor(node)
                        : nextSibling(node);
                    // #4293 teleport as component root
                    if (nextNode &&
                        isComment(nextNode) &&
                        nextNode.data === 'teleport end') {
                        nextNode = nextSibling(nextNode);
                    }
                    // #3787
                    // if component is async, it may get moved / unmounted before its
                    // inner component is loaded, so we need to give it a placeholder
                    // vnode that matches its adopted DOM.
                    if (isAsyncWrapper(vnode)) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode
                                ? nextNode.previousSibling
                                : container.lastChild;
                        }
                        else {
                            subTree =
                                node.nodeType === 3 ? createTextVNode('') : createVNode('div');
                        }
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                }
                else if (shapeFlag & 64 /* ShapeFlags.TELEPORT */) {
                    if (domType !== 8 /* DOMNodeTypes.COMMENT */) {
                        nextNode = onMismatch();
                    }
                    else {
                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                    }
                }
                else if (shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                }
                else if ((true)) {
                    warn('Invalid HostVNode type:', type, `(${typeof type})`);
                }
        }
        if (ref != null) {
            setRef(ref, null, parentSuspense, vnode);
        }
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!vnode.dynamicChildren;
        const { type, props, patchFlag, shapeFlag, dirs } = vnode;
        // #4006 for form elements with non-string v-model value bindings
        // e.g. <option :value="obj">, <input type="checkbox" :true-value="1">
        const forcePatchValue = (type === 'input' && dirs) || type === 'option';
        // skip props & children if this is hoisted static nodes
        // #5405 in dev, always hydrate children for HMR
        if (true /* PatchFlags.HOISTED */) {
            if (dirs) {
                invokeDirectiveHook(vnode, null, parentComponent, 'created');
            }
            // props
            if (props) {
                if (forcePatchValue ||
                    !optimized ||
                    patchFlag & (16 /* PatchFlags.FULL_PROPS */ | 32 /* PatchFlags.HYDRATE_EVENTS */)) {
                    for (const key in props) {
                        if ((forcePatchValue && key.endsWith('value')) ||
                            ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key))) {
                            patchProp(el, key, null, props[key], false, undefined, parentComponent);
                        }
                    }
                }
                else if (props.onClick) {
                    // Fast path for click listeners (which is most often) to avoid
                    // iterating through props.
                    patchProp(el, 'onClick', null, props.onClick, false, undefined, parentComponent);
                }
            }
            // vnode / directive hooks
            let vnodeHooks;
            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {
                invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            }
            if (dirs) {
                invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
            }
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
                queueEffectWithSuspense(() => {
                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                    dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
                }, parentSuspense);
            }
            // children
            if (shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */ &&
                // skip if element has innerHTML / textContent
                !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned = false;
                while (next) {
                    hasMismatch = true;
                    if (( true) && !hasWarned) {
                        warn(`Hydration children mismatch in <${vnode.type}>: ` +
                            `server rendered element contains more child nodes than client vdom.`);
                        hasWarned = true;
                    }
                    // The SSRed DOM contains more nodes than it should. Remove them.
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            }
            else if (shapeFlag & 8 /* ShapeFlags.TEXT_CHILDREN */) {
                if (el.textContent !== vnode.children) {
                    hasMismatch = true;
                    ( true) &&
                        warn(`Hydration text content mismatch in <${vnode.type}>:\n` +
                            `- Client: ${el.textContent}\n` +
                            `- Server: ${vnode.children}`);
                    el.textContent = vnode.children;
                }
            }
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned = false;
        for (let i = 0; i < l; i++) {
            const vnode = optimized
                ? children[i]
                : (children[i] = normalizeVNode(children[i]));
            if (node) {
                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            else if (vnode.type === Text && !vnode.children) {
                continue;
            }
            else {
                hasMismatch = true;
                if (( true) && !hasWarned) {
                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` +
                        `server rendered element contains fewer child nodes than client vdom.`);
                    hasWarned = true;
                }
                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.
                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        const { slotScopeIds: fragmentSlotScopeIds } = vnode;
        if (fragmentSlotScopeIds) {
            slotScopeIds = slotScopeIds
                ? slotScopeIds.concat(fragmentSlotScopeIds)
                : fragmentSlotScopeIds;
        }
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === ']') {
            return nextSibling((vnode.anchor = next));
        }
        else {
            // fragment didn't hydrate successfully, since we didn't get a end anchor
            // back. This should have led to node/children mismatch warnings.
            hasMismatch = true;
            // since the anchor is missing, we need to create one and insert it
            insert((vnode.anchor = createComment(`]`)), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
        hasMismatch = true;
        ( true) &&
            warn(`Hydration node mismatch:\n- Client vnode:`, vnode.type, `\n- Server rendered DOM:`, node, node.nodeType === 3 /* DOMNodeTypes.TEXT */
                ? `(text)`
                : isComment(node) && node.data === '['
                    ? `(start of fragment)`
                    : ``);
        vnode.el = null;
        if (isFragment) {
            // remove excessive fragment nodes
            const end = locateClosingAsyncAnchor(node);
            while (true) {
                const next = nextSibling(node);
                if (next && next !== end) {
                    remove(next);
                }
                else {
                    break;
                }
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
    };
    const locateClosingAsyncAnchor = (node) => {
        let match = 0;
        while (node) {
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === '[')
                    match++;
                if (node.data === ']') {
                    if (match === 0) {
                        return nextSibling(node);
                    }
                    else {
                        match--;
                    }
                }
            }
        }
        return node;
    };
    return [hydrate, hydrateNode];
}

/* eslint-disable no-restricted-globals */
let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        perf.mark(`vue-${type}-${instance.uid}`);
    }
    if (true) {
        devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
    }
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    if (true) {
        devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
    }
}
function isSupported() {
    if (supported !== undefined) {
        return supported;
    }
    if (typeof window !== 'undefined' && window.performance) {
        supported = true;
        perf = window.performance;
    }
    else {
        supported = false;
    }
    return supported;
}

/**
 * This is only called in esm-bundler builds.
 * It is called when a renderer is created, in `baseCreateRenderer` so that
 * importing runtime-core is side-effects free.
 *
 * istanbul-ignore-next
 */
function initFeatureFlags() {
    const needWarn = [];
    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {
        ( true) && needWarn.push(`__VUE_OPTIONS_API__`);
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)().__VUE_OPTIONS_API__ = true;
    }
    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {
        ( true) && needWarn.push(`__VUE_PROD_DEVTOOLS__`);
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (( true) && needWarn.length) {
        const multi = needWarn.length > 1;
        console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(', ')} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, ` +
            `which expects these compile-time feature flags to be globally injected ` +
            `via the bundler config in order to get better tree-shaking in the ` +
            `production bundle.\n\n` +
            `For more details, see https://link.vuejs.org/feature-flags.`);
    }
}

const queuePostRenderEffect = queueEffectWithSuspense
    ;
/**
 * The createRenderer function accepts two generic arguments:
 * HostNode and HostElement, corresponding to Node and Element types in the
 * host environment. For example, for runtime-dom, HostNode would be the DOM
 * `Node` interface and HostElement would be the DOM `Element` interface.
 *
 * Custom renderers can pass in the platform specific types like this:
 *
 * ``` js
 * const { render, createApp } = createRenderer<Node, Element>({
 *   patchProp,
 *   ...nodeOps
 * })
 * ```
 */
function createRenderer(options) {
    return baseCreateRenderer(options);
}
// Separate API for creating hydration-enabled renderer.
// Hydration logic is only used when calling this function, making it
// tree-shakable.
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
// implementation
function baseCreateRenderer(options, createHydrationFns) {
    // compile-time feature flags check
    {
        initFeatureFlags();
    }
    const target = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.getGlobalThis)();
    target.__VUE__ = true;
    if (true) {
        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
    }
    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP, insertStaticContent: hostInsertStaticContent } = options;
    // Note: functions inside this closure should use `const xxx = () => {}`
    // style in order to prevent being inlined by minifiers.
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = ( true) && isHmrUpdating ? false : !!n2.dynamicChildren) => {
        if (n1 === n2) {
            return;
        }
        // patching & not same type, unmount old tree
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2 /* PatchFlags.BAIL */) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type, ref, shapeFlag } = n2;
        switch (type) {
            case Text:
                processText(n1, n2, container, anchor);
                break;
            case Comment:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) {
                    mountStaticNode(n2, container, anchor, isSVG);
                }
                else if ((true)) {
                    patchStaticNode(n1, n2, container, isSVG);
                }
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ShapeFlags.ELEMENT */) {
                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else if (shapeFlag & 6 /* ShapeFlags.COMPONENT */) {
                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else if (shapeFlag & 64 /* ShapeFlags.TELEPORT */) {
                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                }
                else if (shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                }
                else if ((true)) {
                    warn('Invalid VNode type:', type, `(${typeof type})`);
                }
        }
        // set ref
        if (ref != null && parentComponent) {
            setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
        }
    };
    const processText = (n1, n2, container, anchor) => {
        if (n1 == null) {
            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);
        }
        else {
            const el = (n2.el = n1.el);
            if (n2.children !== n1.children) {
                hostSetText(el, n2.children);
            }
        }
    };
    const processCommentNode = (n1, n2, container, anchor) => {
        if (n1 == null) {
            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);
        }
        else {
            // there's no support for dynamic comments
            n2.el = n1.el;
        }
    };
    const mountStaticNode = (n2, container, anchor, isSVG) => {
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
    };
    /**
     * Dev / HMR only
     */
    const patchStaticNode = (n1, n2, container, isSVG) => {
        // static nodes are only patched during dev for HMR
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            // remove existing
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        }
        else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
        let next;
        while (el && el !== anchor) {
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el, anchor }) => {
        let next;
        while (el && el !== anchor) {
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        isSVG = isSVG || n2.type === 'svg';
        if (n1 == null) {
            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        else {
            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let el;
        let vnodeHook;
        const { type, props, shapeFlag, transition, dirs } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
        // mount children first, since some props may rely on child content
        // being already rendered, e.g. `<select value>`
        if (shapeFlag & 8 /* ShapeFlags.TEXT_CHILDREN */) {
            hostSetElementText(el, vnode.children);
        }
        else if (shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
            mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized);
        }
        if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, 'created');
        }
        // props
        if (props) {
            for (const key in props) {
                if (key !== 'value' && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key)) {
                    hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
                }
            }
            /**
             * Special case for setting value on DOM elements:
             * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)
             * - it needs to be forced (#1471)
             * #2353 proposes adding another renderer option to configure this, but
             * the properties affects are so finite it is worth special casing it
             * here to reduce the complexity. (Special casing it also should not
             * affect non-DOM renderers)
             */
            if ('value' in props) {
                hostPatchProp(el, 'value', null, props.value);
            }
            if ((vnodeHook = props.onVnodeBeforeMount)) {
                invokeVNodeHook(vnodeHook, parentComponent, vnode);
            }
        }
        // scopeId
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        if (true) {
            Object.defineProperty(el, '__vnode', {
                value: vnode,
                enumerable: false
            });
            Object.defineProperty(el, '__vueParentComponent', {
                value: parentComponent,
                enumerable: false
            });
        }
        if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
        }
        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
        // #1689 For inside suspense + suspense resolved case, just call it
        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&
            transition &&
            !transition.persisted;
        if (needCallTransitionHooks) {
            transition.beforeEnter(el);
        }
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) ||
            needCallTransitionHooks ||
            dirs) {
            queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
                needCallTransitionHooks && transition.enter(el);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
            }, parentSuspense);
        }
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
        if (scopeId) {
            hostSetScopeId(el, scopeId);
        }
        if (slotScopeIds) {
            for (let i = 0; i < slotScopeIds.length; i++) {
                hostSetScopeId(el, slotScopeIds[i]);
            }
        }
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (( true) &&
                subTree.patchFlag > 0 &&
                subTree.patchFlag & 2048 /* PatchFlags.DEV_ROOT_FRAGMENT */) {
                subTree =
                    filterSingleRoot(subTree.children) || subTree;
            }
            if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
        for (let i = start; i < children.length; i++) {
            const child = (children[i] = optimized
                ? cloneIfMounted(children[i])
                : normalizeVNode(children[i]));
            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const el = (n2.el = n1.el);
        let { patchFlag, dynamicChildren, dirs } = n2;
        // #1426 take the old vnode's patch flag into account since user may clone a
        // compiler-generated vnode, which de-opts to FULL_PROPS
        patchFlag |= n1.patchFlag & 16 /* PatchFlags.FULL_PROPS */;
        const oldProps = n1.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
        const newProps = n2.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
        let vnodeHook;
        // disable recurse in beforeUpdate hooks
        parentComponent && toggleRecurse(parentComponent, false);
        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {
            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        }
        if (dirs) {
            invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');
        }
        parentComponent && toggleRecurse(parentComponent, true);
        if (( true) && isHmrUpdating) {
            // HMR updated, force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
            if (( true) && parentComponent && parentComponent.type.__hmrId) {
                traverseStaticChildren(n1, n2);
            }
        }
        else if (!optimized) {
            // full diff
            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        }
        if (patchFlag > 0) {
            // the presence of a patchFlag means this element's render code was
            // generated by the compiler and can take the fast path.
            // in this path old node and new node are guaranteed to have the same shape
            // (i.e. at the exact same position in the source template)
            if (patchFlag & 16 /* PatchFlags.FULL_PROPS */) {
                // element props contain dynamic keys, full diff needed
                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
            }
            else {
                // class
                // this flag is matched when the element has dynamic class bindings.
                if (patchFlag & 2 /* PatchFlags.CLASS */) {
                    if (oldProps.class !== newProps.class) {
                        hostPatchProp(el, 'class', null, newProps.class, isSVG);
                    }
                }
                // style
                // this flag is matched when the element has dynamic style bindings
                if (patchFlag & 4 /* PatchFlags.STYLE */) {
                    hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);
                }
                // props
                // This flag is matched when the element has dynamic prop/attr bindings
                // other than class and style. The keys of dynamic prop/attrs are saved for
                // faster iteration.
                // Note dynamic keys like :[foo]="bar" will cause this optimization to
                // bail out and go through a full diff because we need to unset the old key
                if (patchFlag & 8 /* PatchFlags.PROPS */) {
                    // if the flag is present then dynamicProps must be non-null
                    const propsToUpdate = n2.dynamicProps;
                    for (let i = 0; i < propsToUpdate.length; i++) {
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        // #1471 force patch value
                        if (next !== prev || key === 'value') {
                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                        }
                    }
                }
            }
            // text
            // This flag is matched when the element has only dynamic text children.
            if (patchFlag & 1 /* PatchFlags.TEXT */) {
                if (n1.children !== n2.children) {
                    hostSetElementText(el, n2.children);
                }
            }
        }
        else if (!optimized && dynamicChildren == null) {
            // unoptimized, full diff
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        }
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
            queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
                dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');
            }, parentSuspense);
        }
    };
    // The fast path for blocks.
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
        for (let i = 0; i < newChildren.length; i++) {
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            // Determine the container (parent element) for the patch.
            const container = 
            // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el &&
                // - In the case of a Fragment, we need to provide the actual parent
                // of the Fragment itself so it can move its children.
                (oldVNode.type === Fragment ||
                    // - In the case of different nodes, there is going to be a replacement
                    // which also requires the correct parent container
                    !isSameVNodeType(oldVNode, newVNode) ||
                    // - In the case of a component, it could contain anything.
                    oldVNode.shapeFlag & (6 /* ShapeFlags.COMPONENT */ | 64 /* ShapeFlags.TELEPORT */))
                ? hostParentNode(oldVNode.el)
                : // In other cases, the parent container is not actually used so we
                    // just pass the block element here to avoid a DOM parentNode call.
                    fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
    };
    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
        if (oldProps !== newProps) {
            if (oldProps !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {
                for (const key in oldProps) {
                    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key) && !(key in newProps)) {
                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
            }
            for (const key in newProps) {
                // empty string is not valid prop
                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isReservedProp)(key))
                    continue;
                const next = newProps[key];
                const prev = oldProps[key];
                // defer patching value
                if (next !== prev && key !== 'value') {
                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
                }
            }
            if ('value' in newProps) {
                hostPatchProp(el, 'value', oldProps.value, newProps.value);
            }
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''));
        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''));
        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
        if (( true) &&
            // #5523 dev root fragment may inherit directives
            (isHmrUpdating || patchFlag & 2048 /* PatchFlags.DEV_ROOT_FRAGMENT */)) {
            // HMR updated / Dev root fragment (w/ comments), force full diff
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        // check if this is a slot fragment with :slotted scope ids
        if (fragmentSlotScopeIds) {
            slotScopeIds = slotScopeIds
                ? slotScopeIds.concat(fragmentSlotScopeIds)
                : fragmentSlotScopeIds;
        }
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            // a fragment can only have array children
            // since they are either generated by the compiler, or implicitly created
            // from arrays.
            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        else {
            if (patchFlag > 0 &&
                patchFlag & 64 /* PatchFlags.STABLE_FRAGMENT */ &&
                dynamicChildren &&
                // #2715 the previous fragment could've been a BAILed one as a result
                // of renderSlot() with no valid children
                n1.dynamicChildren) {
                // a stable fragment (template root or <template v-for>) doesn't need to
                // patch children order, but it may contain dynamicChildren.
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
                if (( true) && parentComponent && parentComponent.type.__hmrId) {
                    traverseStaticChildren(n1, n2);
                }
                else if (
                // #2080 if the stable fragment has a key, it's a <template v-for> that may
                //  get moved around. Make sure all root level vnodes inherit el.
                // #2134 or if it's a component root, it may also get moved around
                // as the component is being moved.
                n2.key != null ||
                    (parentComponent && n2 === parentComponent.subTree)) {
                    traverseStaticChildren(n1, n2, true /* shallow */);
                }
            }
            else {
                // keyed / unkeyed, or manual fragments.
                // for keyed & unkeyed, since they are compiler generated from v-for,
                // each child is guaranteed to be a block so the fragment will never
                // have dynamicChildren.
                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
        }
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512 /* ShapeFlags.COMPONENT_KEPT_ALIVE */) {
                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
            }
            else {
                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
            }
        }
        else {
            updateComponent(n1, n2, optimized);
        }
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));
        if (( true) && instance.type.__hmrId) {
            registerHMR(instance);
        }
        if ((true)) {
            pushWarningContext(initialVNode);
            startMeasure(instance, `mount`);
        }
        // inject renderer internals for keepAlive
        if (isKeepAlive(initialVNode)) {
            instance.ctx.renderer = internals;
        }
        // resolve props and slots for setup context
        {
            if ((true)) {
                startMeasure(instance, `init`);
            }
            setupComponent(instance);
            if ((true)) {
                endMeasure(instance, `init`);
            }
        }
        // setup() is async. This component relies on async logic to be resolved
        // before proceeding
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            // Give it a placeholder if this is not hydration
            // TODO handle self-defined fallback
            if (!initialVNode.el) {
                const placeholder = (instance.subTree = createVNode(Comment));
                processCommentNode(null, placeholder, container, anchor);
            }
            return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        if ((true)) {
            popWarningContext();
            endMeasure(instance, `mount`);
        }
    };
    const updateComponent = (n1, n2, optimized) => {
        const instance = (n2.component = n1.component);
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep &&
                !instance.asyncResolved) {
                // async & still pending - just update props and slots
                // since the component's reactive effect for render isn't set-up yet
                if ((true)) {
                    pushWarningContext(n2);
                }
                updateComponentPreRender(instance, n2, optimized);
                if ((true)) {
                    popWarningContext();
                }
                return;
            }
            else {
                // normal update
                instance.next = n2;
                // in case the child component is also queued, remove it to avoid
                // double updating the same child component in the same flush.
                invalidateJob(instance.update);
                // instance.update is the reactive effect.
                instance.update();
            }
        }
        else {
            // no update needed. just copy over properties
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
        const componentUpdateFn = () => {
            if (!instance.isMounted) {
                let vnodeHook;
                const { el, props } = initialVNode;
                const { bm, m, parent } = instance;
                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
                toggleRecurse(instance, false);
                // beforeMount hook
                if (bm) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(bm);
                }
                // onVnodeBeforeMount
                if (!isAsyncWrapperVNode &&
                    (vnodeHook = props && props.onVnodeBeforeMount)) {
                    invokeVNodeHook(vnodeHook, parent, initialVNode);
                }
                toggleRecurse(instance, true);
                if (el && hydrateNode) {
                    // vnode has adopted host node - perform hydration instead of mount.
                    const hydrateSubTree = () => {
                        if ((true)) {
                            startMeasure(instance, `render`);
                        }
                        instance.subTree = renderComponentRoot(instance);
                        if ((true)) {
                            endMeasure(instance, `render`);
                        }
                        if ((true)) {
                            startMeasure(instance, `hydrate`);
                        }
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        if ((true)) {
                            endMeasure(instance, `hydrate`);
                        }
                    };
                    if (isAsyncWrapperVNode) {
                        initialVNode.type.__asyncLoader().then(
                        // note: we are moving the render call into an async callback,
                        // which means it won't track dependencies - but it's ok because
                        // a server-rendered async wrapper is already in resolved state
                        // and it will never need to change.
                        () => !instance.isUnmounted && hydrateSubTree());
                    }
                    else {
                        hydrateSubTree();
                    }
                }
                else {
                    if ((true)) {
                        startMeasure(instance, `render`);
                    }
                    const subTree = (instance.subTree = renderComponentRoot(instance));
                    if ((true)) {
                        endMeasure(instance, `render`);
                    }
                    if ((true)) {
                        startMeasure(instance, `patch`);
                    }
                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
                    if ((true)) {
                        endMeasure(instance, `patch`);
                    }
                    initialVNode.el = subTree.el;
                }
                // mounted hook
                if (m) {
                    queuePostRenderEffect(m, parentSuspense);
                }
                // onVnodeMounted
                if (!isAsyncWrapperVNode &&
                    (vnodeHook = props && props.onVnodeMounted)) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
                }
                // activated hook for keep-alive roots.
                // #1742 activated hook must be accessed after first render
                // since the hook may be injected by a child keep-alive
                if (initialVNode.shapeFlag & 256 /* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */ ||
                    (parent &&
                        isAsyncWrapper(parent.vnode) &&
                        parent.vnode.shapeFlag & 256 /* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */)) {
                    instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                }
                instance.isMounted = true;
                if (true) {
                    devtoolsComponentAdded(instance);
                }
                // #2458: deference mount-only object parameters to prevent memleaks
                initialVNode = container = anchor = null;
            }
            else {
                // updateComponent
                // This is triggered by mutation of component's own state (next: null)
                // OR parent calling processComponent (next: VNode)
                let { next, bu, u, parent, vnode } = instance;
                let originNext = next;
                let vnodeHook;
                if ((true)) {
                    pushWarningContext(next || instance.vnode);
                }
                // Disallow component effect recursion during pre-lifecycle hooks.
                toggleRecurse(instance, false);
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                }
                else {
                    next = vnode;
                }
                // beforeUpdate hook
                if (bu) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(bu);
                }
                // onVnodeBeforeUpdate
                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {
                    invokeVNodeHook(vnodeHook, parent, next, vnode);
                }
                toggleRecurse(instance, true);
                // render
                if ((true)) {
                    startMeasure(instance, `render`);
                }
                const nextTree = renderComponentRoot(instance);
                if ((true)) {
                    endMeasure(instance, `render`);
                }
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                if ((true)) {
                    startMeasure(instance, `patch`);
                }
                patch(prevTree, nextTree, 
                // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), 
                // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, isSVG);
                if ((true)) {
                    endMeasure(instance, `patch`);
                }
                next.el = nextTree.el;
                if (originNext === null) {
                    // self-triggered update. In case of HOC, update parent component
                    // vnode el. HOC is indicated by parent instance's subTree pointing
                    // to child component's vnode
                    updateHOCHostEl(instance, nextTree.el);
                }
                // updated hook
                if (u) {
                    queuePostRenderEffect(u, parentSuspense);
                }
                // onVnodeUpdated
                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {
                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
                }
                if (true) {
                    devtoolsComponentUpdated(instance);
                }
                if ((true)) {
                    popWarningContext();
                }
            }
        };
        // create reactive effect for rendering
        const effect = (instance.effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect(componentUpdateFn, () => queueJob(update), instance.scope // track it in component's effect scope
        ));
        const update = (instance.update = () => effect.run());
        update.id = instance.uid;
        // allowRecurse
        // #1801, #2043 component render effects should allow recursive updates
        toggleRecurse(instance, true);
        if ((true)) {
            effect.onTrack = instance.rtc
                ? e => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance.rtc, e)
                : void 0;
            effect.onTrigger = instance.rtg
                ? e => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(instance.rtg, e)
                : void 0;
            update.ownerInstance = instance;
        }
        update();
    };
    const updateComponentPreRender = (instance, nextVNode, optimized) => {
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();
        // props update may have triggered pre-flush watchers.
        // flush them before the render update.
        flushPreFlushCbs();
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag, shapeFlag } = n2;
        // fast path
        if (patchFlag > 0) {
            if (patchFlag & 128 /* PatchFlags.KEYED_FRAGMENT */) {
                // this could be either fully-keyed or mixed (some keyed some not)
                // presence of patchFlag means children are guaranteed to be arrays
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
            else if (patchFlag & 256 /* PatchFlags.UNKEYED_FRAGMENT */) {
                // unkeyed
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
        }
        // children has 3 possibilities: text, array or no children.
        if (shapeFlag & 8 /* ShapeFlags.TEXT_CHILDREN */) {
            // text children fast path
            if (prevShapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
                unmountChildren(c1, parentComponent, parentSuspense);
            }
            if (c2 !== c1) {
                hostSetElementText(container, c2);
            }
        }
        else {
            if (prevShapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
                // prev children was array
                if (shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
                    // two arrays, cannot assume anything, do full diff
                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else {
                    // no new children, just unmount old
                    unmountChildren(c1, parentComponent, parentSuspense, true);
                }
            }
            else {
                // prev children was text OR null
                // new children is array OR null
                if (prevShapeFlag & 8 /* ShapeFlags.TEXT_CHILDREN */) {
                    hostSetElementText(container, '');
                }
                // mount new if array
                if (shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
            }
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        c1 = c1 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;
        c2 = c2 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for (i = 0; i < commonLength; i++) {
            const nextChild = (c2[i] = optimized
                ? cloneIfMounted(c2[i])
                : normalizeVNode(c2[i]));
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) {
            // remove old
            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        }
        else {
            // mount new
            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
        }
    };
    // can be all-keyed or mixed
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1; // prev ending index
        let e2 = l2 - 1; // next ending index
        // 1. sync from start
        // (a b) c
        // (a b) d e
        while (i <= e1 && i <= e2) {
            const n1 = c1[i];
            const n2 = (c2[i] = optimized
                ? cloneIfMounted(c2[i])
                : normalizeVNode(c2[i]));
            if (isSameVNodeType(n1, n2)) {
                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
            else {
                break;
            }
            i++;
        }
        // 2. sync from end
        // a (b c)
        // d e (b c)
        while (i <= e1 && i <= e2) {
            const n1 = c1[e1];
            const n2 = (c2[e2] = optimized
                ? cloneIfMounted(c2[e2])
                : normalizeVNode(c2[e2]));
            if (isSameVNodeType(n1, n2)) {
                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
            else {
                break;
            }
            e1--;
            e2--;
        }
        // 3. common sequence + mount
        // (a b)
        // (a b) c
        // i = 2, e1 = 1, e2 = 2
        // (a b)
        // c (a b)
        // i = 0, e1 = -1, e2 = 0
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while (i <= e2) {
                    patch(null, (c2[i] = optimized
                        ? cloneIfMounted(c2[i])
                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    i++;
                }
            }
        }
        // 4. common sequence + unmount
        // (a b) c
        // (a b)
        // i = 2, e1 = 2, e2 = 1
        // a (b c)
        // (b c)
        // i = 0, e1 = 0, e2 = -1
        else if (i > e2) {
            while (i <= e1) {
                unmount(c1[i], parentComponent, parentSuspense, true);
                i++;
            }
        }
        // 5. unknown sequence
        // [i ... e1 + 1]: a b [c d e] f g
        // [i ... e2 + 1]: a b [e d c h] f g
        // i = 2, e1 = 4, e2 = 5
        else {
            const s1 = i; // prev starting index
            const s2 = i; // next starting index
            // 5.1 build key:index map for newChildren
            const keyToNewIndexMap = new Map();
            for (i = s2; i <= e2; i++) {
                const nextChild = (c2[i] = optimized
                    ? cloneIfMounted(c2[i])
                    : normalizeVNode(c2[i]));
                if (nextChild.key != null) {
                    if (( true) && keyToNewIndexMap.has(nextChild.key)) {
                        warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
                    }
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            // 5.2 loop through old children left to be patched and try to patch
            // matching nodes & remove nodes that are no longer present
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            // used to track whether any node has moved
            let maxNewIndexSoFar = 0;
            // works as Map<newIndex, oldIndex>
            // Note that oldIndex is offset by +1
            // and oldIndex = 0 is a special value indicating the new node has
            // no corresponding old node.
            // used for determining longest stable subsequence
            const newIndexToOldIndexMap = new Array(toBePatched);
            for (i = 0; i < toBePatched; i++)
                newIndexToOldIndexMap[i] = 0;
            for (i = s1; i <= e1; i++) {
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    // all new children have been patched so this can only be a removal
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) {
                    newIndex = keyToNewIndexMap.get(prevChild.key);
                }
                else {
                    // key-less node, try to locate a key-less node of the same type
                    for (j = s2; j <= e2; j++) {
                        if (newIndexToOldIndexMap[j - s2] === 0 &&
                            isSameVNodeType(prevChild, c2[j])) {
                            newIndex = j;
                            break;
                        }
                    }
                }
                if (newIndex === undefined) {
                    unmount(prevChild, parentComponent, parentSuspense, true);
                }
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) {
                        maxNewIndexSoFar = newIndex;
                    }
                    else {
                        moved = true;
                    }
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    patched++;
                }
            }
            // 5.3 move and mount
            // generate longest stable subsequence only when nodes have moved
            const increasingNewIndexSequence = moved
                ? getSequence(newIndexToOldIndexMap)
                : _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR;
            j = increasingNewIndexSequence.length - 1;
            // looping backwards so that we can use last patched node as anchor
            for (i = toBePatched - 1; i >= 0; i--) {
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) {
                    // mount new
                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else if (moved) {
                    // move if:
                    // There is no stable subsequence (e.g. a reverse)
                    // OR current node is not among the stable sequence
                    if (j < 0 || i !== increasingNewIndexSequence[j]) {
                        move(nextChild, container, anchor, 2 /* MoveType.REORDER */);
                    }
                    else {
                        j--;
                    }
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
        const { el, type, transition, children, shapeFlag } = vnode;
        if (shapeFlag & 6 /* ShapeFlags.COMPONENT */) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64 /* ShapeFlags.TELEPORT */) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for (let i = 0; i < children.length; i++) {
                move(children[i], container, anchor, moveType);
            }
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        // single nodes
        const needTransition = moveType !== 2 /* MoveType.REORDER */ &&
            shapeFlag & 1 /* ShapeFlags.ELEMENT */ &&
            transition;
        if (needTransition) {
            if (moveType === 0 /* MoveType.ENTER */) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(() => transition.enter(el), parentSuspense);
            }
            else {
                const { leave, delayLeave, afterLeave } = transition;
                const remove = () => hostInsert(el, container, anchor);
                const performLeave = () => {
                    leave(el, () => {
                        remove();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) {
                    delayLeave(el, remove, performLeave);
                }
                else {
                    performLeave();
                }
            }
        }
        else {
            hostInsert(el, container, anchor);
        }
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
        // unset ref
        if (ref != null) {
            setRef(ref, null, parentSuspense, vnode, true);
        }
        if (shapeFlag & 256 /* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 /* ShapeFlags.ELEMENT */ && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook &&
            (vnodeHook = props && props.onVnodeBeforeUnmount)) {
            invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        if (shapeFlag & 6 /* ShapeFlags.COMPONENT */) {
            unmountComponent(vnode.component, parentSuspense, doRemove);
        }
        else {
            if (shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) {
                invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');
            }
            if (shapeFlag & 64 /* ShapeFlags.TELEPORT */) {
                vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
            }
            else if (dynamicChildren &&
                // #1153: fast path should not be taken for non-stable (v-for) fragments
                (type !== Fragment ||
                    (patchFlag > 0 && patchFlag & 64 /* PatchFlags.STABLE_FRAGMENT */))) {
                // fast path for block nodes: only need to unmount dynamic children.
                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            }
            else if ((type === Fragment &&
                patchFlag &
                    (128 /* PatchFlags.KEYED_FRAGMENT */ | 256 /* PatchFlags.UNKEYED_FRAGMENT */)) ||
                (!optimized && shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */)) {
                unmountChildren(children, parentComponent, parentSuspense);
            }
            if (doRemove) {
                remove(vnode);
            }
        }
        if ((shouldInvokeVnodeHook &&
            (vnodeHook = props && props.onVnodeUnmounted)) ||
            shouldInvokeDirs) {
            queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
                shouldInvokeDirs &&
                    invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');
            }, parentSuspense);
        }
    };
    const remove = vnode => {
        const { type, el, anchor, transition } = vnode;
        if (type === Fragment) {
            if (( true) &&
                vnode.patchFlag > 0 &&
                vnode.patchFlag & 2048 /* PatchFlags.DEV_ROOT_FRAGMENT */ &&
                transition &&
                !transition.persisted) {
                vnode.children.forEach(child => {
                    if (child.type === Comment) {
                        hostRemove(child.el);
                    }
                    else {
                        remove(child);
                    }
                });
            }
            else {
                removeFragment(el, anchor);
            }
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = () => {
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) {
                transition.afterLeave();
            }
        };
        if (vnode.shapeFlag & 1 /* ShapeFlags.ELEMENT */ &&
            transition &&
            !transition.persisted) {
            const { leave, delayLeave } = transition;
            const performLeave = () => leave(el, performRemove);
            if (delayLeave) {
                delayLeave(vnode.el, performRemove, performLeave);
            }
            else {
                performLeave();
            }
        }
        else {
            performRemove();
        }
    };
    const removeFragment = (cur, end) => {
        // For fragments, directly remove all contained DOM nodes.
        // (fragment child nodes cannot have transition)
        let next;
        while (cur !== end) {
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove) => {
        if (( true) && instance.type.__hmrId) {
            unregisterHMR(instance);
        }
        const { bum, scope, update, subTree, um } = instance;
        // beforeUnmount hook
        if (bum) {
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(bum);
        }
        // stop effects in component scope
        scope.stop();
        // update may be null if a component is unmounted before its async
        // setup has resolved.
        if (update) {
            // so that scheduler will no longer invoke it
            update.active = false;
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        // unmounted hook
        if (um) {
            queuePostRenderEffect(um, parentSuspense);
        }
        queuePostRenderEffect(() => {
            instance.isUnmounted = true;
        }, parentSuspense);
        // A component with async dep inside a pending suspense is unmounted before
        // its async dep resolves. This should remove the dep from the suspense, and
        // cause the suspense to resolve immediately if that was the last dep.
        if (parentSuspense &&
            parentSuspense.pendingBranch &&
            !parentSuspense.isUnmounted &&
            instance.asyncDep &&
            !instance.asyncResolved &&
            instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) {
                parentSuspense.resolve();
            }
        }
        if (true) {
            devtoolsComponentRemoved(instance);
        }
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
        for (let i = start; i < children.length; i++) {
            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
        }
    };
    const getNextHostNode = vnode => {
        if (vnode.shapeFlag & 6 /* ShapeFlags.COMPONENT */) {
            return getNextHostNode(vnode.component.subTree);
        }
        if (vnode.shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
            return vnode.suspense.next();
        }
        return hostNextSibling((vnode.anchor || vnode.el));
    };
    const render = (vnode, container, isSVG) => {
        if (vnode == null) {
            if (container._vnode) {
                unmount(container._vnode, null, null, true);
            }
        }
        else {
            patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        }
        flushPreFlushCbs();
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) {
        [hydrate, hydrateNode] = createHydrationFns(internals);
    }
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function toggleRecurse({ effect, update }, allowed) {
    effect.allowRecurse = update.allowRecurse = allowed;
}
/**
 * #1156
 * When a component is HMR-enabled, we need to make sure that all static nodes
 * inside a block also inherit the DOM element from the previous tree so that
 * HMR updates (which are full updates) can retrieve the element for patching.
 *
 * #2080
 * Inside keyed `template` fragment static children, if a fragment is moved,
 * the children will always be moved. Therefore, in order to ensure correct move
 * position, el should be inherited from previous nodes.
 */
function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(ch1) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(ch2)) {
        for (let i = 0; i < ch1.length; i++) {
            // this is only called in the optimized path so array children are
            // guaranteed to be vnodes
            const c1 = ch1[i];
            let c2 = ch2[i];
            if (c2.shapeFlag & 1 /* ShapeFlags.ELEMENT */ && !c2.dynamicChildren) {
                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* PatchFlags.HYDRATE_EVENTS */) {
                    c2 = ch2[i] = cloneIfMounted(ch2[i]);
                    c2.el = c1.el;
                }
                if (!shallow)
                    traverseStaticChildren(c1, c2);
            }
            // #6852 also inherit for text nodes
            if (c2.type === Text) {
                c2.el = c1.el;
            }
            // also inherit for comment nodes, but not placeholders (e.g. v-if which
            // would have received .el during block patch)
            if (( true) && c2.type === Comment && !c2.el) {
                c2.el = c1.el;
            }
        }
    }
}
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function getSequence(arr) {
    const p = arr.slice();
    const result = [0];
    let i, j, u, v, c;
    const len = arr.length;
    for (i = 0; i < len; i++) {
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while (u < v) {
                c = (u + v) >> 1;
                if (arr[result[c]] < arrI) {
                    u = c + 1;
                }
                else {
                    v = c;
                }
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) {
                    p[i] = result[u - 1];
                }
                result[u] = i;
            }
        }
    }
    u = result.length;
    v = result[u - 1];
    while (u-- > 0) {
        result[u] = v;
        v = p[v];
    }
    return result;
}

const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === '');
const isTargetSVG = (target) => typeof SVGElement !== 'undefined' && target instanceof SVGElement;
const resolveTarget = (props, select) => {
    const targetSelector = props && props.to;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(targetSelector)) {
        if (!select) {
            ( true) &&
                warn(`Current renderer does not support string target for Teleports. ` +
                    `(missing querySelector renderer option)`);
            return null;
        }
        else {
            const target = select(targetSelector);
            if (!target) {
                ( true) &&
                    warn(`Failed to locate Teleport target with selector "${targetSelector}". ` +
                        `Note the target element must exist before the component is mounted - ` +
                        `i.e. the target cannot be rendered by the component itself, and ` +
                        `ideally should be outside of the entire Vue component tree.`);
            }
            return target;
        }
    }
    else {
        if (( true) && !targetSelector && !isTeleportDisabled(props)) {
            warn(`Invalid Teleport target: ${targetSelector}`);
        }
        return targetSelector;
    }
};
const TeleportImpl = {
    __isTeleport: true,
    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag, children, dynamicChildren } = n2;
        // #3302
        // HMR updated, force full diff
        if (( true) && isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            // insert anchors in the main view
            const placeholder = (n2.el = ( true)
                ? createComment('teleport start')
                : 0);
            const mainAnchor = (n2.anchor = ( true)
                ? createComment('teleport end')
                : 0);
            insert(placeholder, container, anchor);
            insert(mainAnchor, container, anchor);
            const target = (n2.target = resolveTarget(n2.props, querySelector));
            const targetAnchor = (n2.targetAnchor = createText(''));
            if (target) {
                insert(targetAnchor, target);
                // #2652 we could be teleporting from a non-SVG tree into an SVG tree
                isSVG = isSVG || isTargetSVG(target);
            }
            else if (( true) && !disabled) {
                warn('Invalid Teleport target on mount:', target, `(${typeof target})`);
            }
            const mount = (container, anchor) => {
                // Teleport *always* has Array children. This is enforced in both the
                // compiler and vnode children normalization.
                if (shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
            };
            if (disabled) {
                mount(container, mainAnchor);
            }
            else if (target) {
                mount(target, targetAnchor);
            }
        }
        else {
            // update content
            n2.el = n1.el;
            const mainAnchor = (n2.anchor = n1.anchor);
            const target = (n2.target = n1.target);
            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
                // fast path when the teleport happens to be a block root
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
                // even in block tree mode we need to make sure all root-level nodes
                // in the teleport inherit previous DOM references so that they can
                // be moved in future patches.
                traverseStaticChildren(n1, n2, true);
            }
            else if (!optimized) {
                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
            }
            if (disabled) {
                if (!wasDisabled) {
                    // enabled -> disabled
                    // move into main container
                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TeleportMoveTypes.TOGGLE */);
                }
            }
            else {
                // target changed
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));
                    if (nextTarget) {
                        moveTeleport(n2, nextTarget, null, internals, 0 /* TeleportMoveTypes.TARGET_CHANGE */);
                    }
                    else if ((true)) {
                        warn('Invalid Teleport target on update:', target, `(${typeof target})`);
                    }
                }
                else if (wasDisabled) {
                    // disabled -> enabled
                    // move into teleport target
                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TeleportMoveTypes.TOGGLE */);
                }
            }
        }
        updateCssVars(n2);
    },
    remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
        if (target) {
            hostRemove(targetAnchor);
        }
        // an unmounted teleport should always remove its children if not disabled
        if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
                for (let i = 0; i < children.length; i++) {
                    const child = children[i];
                    unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
                }
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* TeleportMoveTypes.REORDER */) {
    // move target anchor if this is a target change.
    if (moveType === 0 /* TeleportMoveTypes.TARGET_CHANGE */) {
        insert(vnode.targetAnchor, container, parentAnchor);
    }
    const { el, anchor, shapeFlag, children, props } = vnode;
    const isReorder = moveType === 2 /* TeleportMoveTypes.REORDER */;
    // move main view anchor if this is a re-order.
    if (isReorder) {
        insert(el, container, parentAnchor);
    }
    // if this is a re-order and teleport is enabled (content is in target)
    // do not move children. So the opposite is: only move children if this
    // is not a reorder, or the teleport is disabled
    if (!isReorder || isTeleportDisabled(props)) {
        // Teleport has either Array children or no children.
        if (shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
            for (let i = 0; i < children.length; i++) {
                move(children[i], container, parentAnchor, 2 /* MoveType.REORDER */);
            }
        }
    }
    // move main view anchor if this is a re-order.
    if (isReorder) {
        insert(anchor, container, parentAnchor);
    }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
    const target = (vnode.target = resolveTarget(vnode.props, querySelector));
    if (target) {
        // if multiple teleports rendered to the same target element, we need to
        // pick up from where the last teleport finished instead of the first node
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16 /* ShapeFlags.ARRAY_CHILDREN */) {
            if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetAnchor = targetNode;
            }
            else {
                vnode.anchor = nextSibling(node);
                // lookahead until we find the target anchor
                // we cannot rely on return value of hydrateChildren() because there
                // could be nested teleports
                let targetAnchor = targetNode;
                while (targetAnchor) {
                    targetAnchor = nextSibling(targetAnchor);
                    if (targetAnchor &&
                        targetAnchor.nodeType === 8 &&
                        targetAnchor.data === 'teleport anchor') {
                        vnode.targetAnchor = targetAnchor;
                        target._lpa =
                            vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                        break;
                    }
                }
                hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
        }
        updateCssVars(vnode);
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
// Force-casted public typing for h and TSX props inference
const Teleport = TeleportImpl;
function updateCssVars(vnode) {
    // presence of .ut method indicates owner component uses css vars.
    // code path here can assume browser environment.
    const ctx = vnode.ctx;
    if (ctx && ctx.ut) {
        let node = vnode.children[0].el;
        while (node !== vnode.targetAnchor) {
            if (node.nodeType === 1)
                node.setAttribute('data-v-owner', ctx.uid);
            node = node.nextSibling;
        }
        ctx.ut();
    }
}

const Fragment = Symbol(( true) ? 'Fragment' : 0);
const Text = Symbol(( true) ? 'Text' : 0);
const Comment = Symbol(( true) ? 'Comment' : 0);
const Static = Symbol(( true) ? 'Static' : 0);
// Since v-if and v-for are the two possible ways node structure can dynamically
// change, once we consider v-if branches and each v-for fragment a block, we
// can divide a template into nested blocks, and within each block the node
// structure would be stable. This allows us to skip most children diffing
// and only worry about the dynamic nodes (indicated by patch flags).
const blockStack = [];
let currentBlock = null;
/**
 * Open a block.
 * This must be called before `createBlock`. It cannot be part of `createBlock`
 * because the children of the block are evaluated before `createBlock` itself
 * is called. The generated code typically looks like this:
 *
 * ```js
 * function render() {
 *   return (openBlock(),createBlock('div', null, [...]))
 * }
 * ```
 * disableTracking is true when creating a v-for fragment block, since a v-for
 * fragment always diffs its children.
 *
 * @private
 */
function openBlock(disableTracking = false) {
    blockStack.push((currentBlock = disableTracking ? null : []));
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let isBlockTreeEnabled = 1;
/**
 * Block tracking sometimes needs to be disabled, for example during the
 * creation of a tree that needs to be cached by v-once. The compiler generates
 * code like this:
 *
 * ``` js
 * _cache[1] || (
 *   setBlockTracking(-1),
 *   _cache[1] = createVNode(...),
 *   setBlockTracking(1),
 *   _cache[1]
 * )
 * ```
 *
 * @private
 */
function setBlockTracking(value) {
    isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
    // save current block children on the block vnode
    vnode.dynamicChildren =
        isBlockTreeEnabled > 0 ? currentBlock || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_ARR : null;
    // close block
    closeBlock();
    // a block is always going to be patched, so track it as a child of its
    // parent block
    if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(vnode);
    }
    return vnode;
}
/**
 * @private
 */
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true /* isBlock */));
}
/**
 * Create a block root vnode. Takes the same exact arguments as `createVNode`.
 * A block root keeps track of dynamic nodes within the block in the
 * `dynamicChildren` array.
 *
 * @private
 */
function createBlock(type, props, children, patchFlag, dynamicProps) {
    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */));
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (( true) &&
        n2.shapeFlag & 6 /* ShapeFlags.COMPONENT */ &&
        hmrDirtyComponents.has(n2.type)) {
        // #7042, ensure the vnode being unmounted during HMR
        // bitwise operations to remove keep alive flags
        n1.shapeFlag &= ~256 /* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */;
        n2.shapeFlag &= ~512 /* ShapeFlags.COMPONENT_KEPT_ALIVE */;
        // HMR only: if the component has been hot-updated, force a reload.
        return false;
    }
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
/**
 * Internal API for registering an arguments transform for createVNode
 * used for creating stubs in the test-utils
 * It is *internal* but needs to be exposed for test-utils to pick up proper
 * typings
 */
function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args) => {
    return _createVNode(...(vnodeArgsTransformer
        ? vnodeArgsTransformer(args, currentRenderingInstance)
        : args));
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({ ref, ref_key, ref_for }) => {
    return (ref != null
        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(ref) || (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(ref) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(ref)
            ? { i: currentRenderingInstance, r: ref, k: ref_key, f: !!ref_for }
            : ref
        : null);
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1 /* ShapeFlags.ELEMENT */, isBlockNode = false, needFullChildrenNormalization = false) {
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null,
        ctx: currentRenderingInstance
    };
    if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        // normalize suspense children
        if (shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
            type.normalize(vnode);
        }
    }
    else if (children) {
        // compiled element vnode - if children is passed, only possible types are
        // string or Array.
        vnode.shapeFlag |= (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(children)
            ? 8 /* ShapeFlags.TEXT_CHILDREN */
            : 16 /* ShapeFlags.ARRAY_CHILDREN */;
    }
    // validate key
    if (( true) && vnode.key !== vnode.key) {
        warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    }
    // track vnode for block tree
    if (isBlockTreeEnabled > 0 &&
        // avoid a block node from tracking itself
        !isBlockNode &&
        // has current parent block
        currentBlock &&
        // presence of a patch flag indicates this node needs patching on updates.
        // component nodes also should always be patched, because even if the
        // component doesn't need to update, it needs to persist the instance on to
        // the next vnode so that it can be properly unmounted later.
        (vnode.patchFlag > 0 || shapeFlag & 6 /* ShapeFlags.COMPONENT */) &&
        // the EVENTS flag is only for hydration and if it is the only flag, the
        // vnode should not be considered dynamic due to handler caching.
        vnode.patchFlag !== 32 /* PatchFlags.HYDRATE_EVENTS */) {
        currentBlock.push(vnode);
    }
    return vnode;
}
const createVNode = (( true) ? createVNodeWithArgsTransform : 0);
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (( true) && !type) {
            warn(`Invalid vnode type when creating vnode: ${type}.`);
        }
        type = Comment;
    }
    if (isVNode(type)) {
        // createVNode receiving an existing vnode. This happens in cases like
        // <component :is="vnode"/>
        // #2078 make sure to merge refs during the clone instead of overwriting it
        const cloned = cloneVNode(type, props, true /* mergeRef: true */);
        if (children) {
            normalizeChildren(cloned, children);
        }
        if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
            if (cloned.shapeFlag & 6 /* ShapeFlags.COMPONENT */) {
                currentBlock[currentBlock.indexOf(type)] = cloned;
            }
            else {
                currentBlock.push(cloned);
            }
        }
        cloned.patchFlag |= -2 /* PatchFlags.BAIL */;
        return cloned;
    }
    // class component normalization.
    if (isClassComponent(type)) {
        type = type.__vccOpts;
    }
    // class & style normalization.
    if (props) {
        // for reactive or proxy objects, we need to clone it to enable mutation.
        props = guardReactiveProps(props);
        let { class: klass, style } = props;
        if (klass && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(klass)) {
            props.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeClass)(klass);
        }
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(style)) {
            // reactive state objects need to be cloned since they are likely to be
            // mutated
            if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy)(style) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(style)) {
                style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, style);
            }
            props.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeStyle)(style);
        }
    }
    // encode the vnode type information into a bitmap
    const shapeFlag = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(type)
        ? 1 /* ShapeFlags.ELEMENT */
        : isSuspense(type)
            ? 128 /* ShapeFlags.SUSPENSE */
            : isTeleport(type)
                ? 64 /* ShapeFlags.TELEPORT */
                : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(type)
                    ? 4 /* ShapeFlags.STATEFUL_COMPONENT */
                    : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(type)
                        ? 2 /* ShapeFlags.FUNCTIONAL_COMPONENT */
                        : 0;
    if (( true) && shapeFlag & 4 /* ShapeFlags.STATEFUL_COMPONENT */ && (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy)(type)) {
        type = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(type);
        warn(`Vue received a Component which was made a reactive object. This can ` +
            `lead to unnecessary performance overhead, and should be avoided by ` +
            `marking the component with \`markRaw\` or using \`shallowRef\` ` +
            `instead of \`ref\`.`, `\nComponent that was made reactive: `, type);
    }
    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
    if (!props)
        return null;
    return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isProxy)(props) || InternalObjectKey in props
        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, props)
        : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
    // This is intentionally NOT using spread or extend to avoid the runtime
    // key enumeration cost.
    const { props, ref, patchFlag, children } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref
            ? // #2078 in the case of <component :is="vnode" ref="extra"/>
                // if the vnode itself already has a ref, cloneVNode will need to merge
                // the refs so the single vnode can be set on multiple refs
                mergeRef && ref
                    ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(ref)
                        ? ref.concat(normalizeRef(extraProps))
                        : [ref, normalizeRef(extraProps)]
                    : normalizeRef(extraProps)
            : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: ( true) && patchFlag === -1 /* PatchFlags.HOISTED */ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(children)
            ? children.map(deepCloneVNode)
            : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: preserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment
            ? patchFlag === -1 // hoisted node
                ? 16 /* PatchFlags.FULL_PROPS */
                : patchFlag | 16 /* PatchFlags.FULL_PROPS */
            : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor,
        ctx: vnode.ctx
    };
    return cloned;
}
/**
 * Dev only, for HMR of hoisted vnodes reused in v-for
 * https://github.com/vitejs/vite/issues/2022
 */
function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(vnode.children)) {
        cloned.children = vnode.children.map(deepCloneVNode);
    }
    return cloned;
}
/**
 * @private
 */
function createTextVNode(text = ' ', flag = 0) {
    return createVNode(Text, null, text, flag);
}
/**
 * @private
 */
function createStaticVNode(content, numberOfNodes) {
    // A static vnode can contain multiple stringified elements, and the number
    // of elements is necessary for hydration.
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
/**
 * @private
 */
function createCommentVNode(text = '', 
// when used as the v-else branch, the comment node must be created as a
// block to ensure correct updates.
asBlock = false) {
    return asBlock
        ? (openBlock(), createBlock(Comment, null, text))
        : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === 'boolean') {
        // empty placeholder
        return createVNode(Comment);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(child)) {
        // fragment
        return createVNode(Fragment, null, 
        // #3666, avoid reference pollution when reusing vnode
        child.slice());
    }
    else if (typeof child === 'object') {
        // already vnode, this should be the most common since compiled templates
        // always produce all-vnode children arrays
        return cloneIfMounted(child);
    }
    else {
        // strings and numbers
        return createVNode(Text, null, String(child));
    }
}
// optimized normalization for template-compiled render fns
function cloneIfMounted(child) {
    return (child.el === null && child.patchFlag !== -1 /* PatchFlags.HOISTED */) ||
        child.memo
        ? child
        : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag } = vnode;
    if (children == null) {
        children = null;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(children)) {
        type = 16 /* ShapeFlags.ARRAY_CHILDREN */;
    }
    else if (typeof children === 'object') {
        if (shapeFlag & (1 /* ShapeFlags.ELEMENT */ | 64 /* ShapeFlags.TELEPORT */)) {
            // Normalize slot to plain children for plain element and Teleport
            const slot = children.default;
            if (slot) {
                // _c marker is added by withCtx() indicating this is a compiled slot
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        }
        else {
            type = 32 /* ShapeFlags.SLOTS_CHILDREN */;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) {
                children._ctx = currentRenderingInstance;
            }
            else if (slotFlag === 3 /* SlotFlags.FORWARDED */ && currentRenderingInstance) {
                // a child component receives forwarded slots from the parent.
                // its slot type is determined by its parent's slot type.
                if (currentRenderingInstance.slots._ === 1 /* SlotFlags.STABLE */) {
                    children._ = 1 /* SlotFlags.STABLE */;
                }
                else {
                    children._ = 2 /* SlotFlags.DYNAMIC */;
                    vnode.patchFlag |= 1024 /* PatchFlags.DYNAMIC_SLOTS */;
                }
            }
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(children)) {
        children = { default: children, _ctx: currentRenderingInstance };
        type = 32 /* ShapeFlags.SLOTS_CHILDREN */;
    }
    else {
        children = String(children);
        // force teleport children to array so it can be moved around
        if (shapeFlag & 64 /* ShapeFlags.TELEPORT */) {
            type = 16 /* ShapeFlags.ARRAY_CHILDREN */;
            children = [createTextVNode(children)];
        }
        else {
            type = 8 /* ShapeFlags.TEXT_CHILDREN */;
        }
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = {};
    for (let i = 0; i < args.length; i++) {
        const toMerge = args[i];
        for (const key in toMerge) {
            if (key === 'class') {
                if (ret.class !== toMerge.class) {
                    ret.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeClass)([ret.class, toMerge.class]);
                }
            }
            else if (key === 'style') {
                ret.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.normalizeStyle)([ret.style, toMerge.style]);
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (incoming &&
                    existing !== incoming &&
                    !((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(existing) && existing.includes(incoming))) {
                    ret[key] = existing
                        ? [].concat(existing, incoming)
                        : incoming;
                }
            }
            else if (key !== '') {
                ret[key] = toMerge[key];
            }
        }
    }
    return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7 /* ErrorCodes.VNODE_HOOK */, [
        vnode,
        prevVNode
    ]);
}

const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    // inherit parent app context - or - if root, adopt from root vnode
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        effect: null,
        update: null,
        scope: new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.EffectScope(true /* detached */),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resolved assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        data: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        props: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        attrs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        slots: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        refs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        setupState: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ,
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    if ((true)) {
        instance.ctx = createDevRenderContext(instance);
    }
    else {}
    instance.root = parent ? parent.root : instance;
    instance.emit = emit$1.bind(null, instance);
    // apply custom element special handling
    if (vnode.ce) {
        vnode.ce(instance);
    }
    return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance) => {
    currentInstance = instance;
    instance.scope.on();
};
const unsetCurrentInstance = () => {
    currentInstance && currentInstance.scope.off();
    currentInstance = null;
};
const isBuiltInTag = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.makeMap)('slot,component');
function validateComponentName(name, config) {
    const appIsNativeTag = config.isNativeTag || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NO;
    if (isBuiltInTag(name) || appIsNativeTag(name)) {
        warn('Do not use built-in or reserved HTML elements as component id: ' + name);
    }
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4 /* ShapeFlags.STATEFUL_COMPONENT */;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
    isInSSRComponentSetup = isSSR;
    const { props, children } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children);
    const setupResult = isStateful
        ? setupStatefulComponent(instance, isSSR)
        : undefined;
    isInSSRComponentSetup = false;
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    var _a;
    const Component = instance.type;
    if ((true)) {
        if (Component.name) {
            validateComponentName(Component.name, instance.appContext.config);
        }
        if (Component.components) {
            const names = Object.keys(Component.components);
            for (let i = 0; i < names.length; i++) {
                validateComponentName(names[i], instance.appContext.config);
            }
        }
        if (Component.directives) {
            const names = Object.keys(Component.directives);
            for (let i = 0; i < names.length; i++) {
                validateDirectiveName(names[i]);
            }
        }
        if (Component.compilerOptions && isRuntimeOnly()) {
            warn(`"compilerOptions" is only supported when using a build of Vue that ` +
                `includes the runtime compiler. Since you are using a runtime-only ` +
                `build, the options should be passed via your build tool config instead.`);
        }
    }
    // 0. create render proxy property access cache
    instance.accessCache = Object.create(null);
    // 1. create public instance / render proxy
    // also mark it raw so it's never observed
    instance.proxy = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.markRaw)(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
    if ((true)) {
        exposePropsOnRenderContext(instance);
    }
    // 2. call setup()
    const { setup } = Component;
    if (setup) {
        const setupContext = (instance.setupContext =
            setup.length > 1 ? createSetupContext(instance) : null);
        setCurrentInstance(instance);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();
        const setupResult = callWithErrorHandling(setup, instance, 0 /* ErrorCodes.SETUP_FUNCTION */, [( true) ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(instance.props) : 0, setupContext]);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();
        unsetCurrentInstance();
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(setupResult)) {
            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
            if (isSSR) {
                // return the promise so server-renderer can wait on it
                return setupResult
                    .then((resolvedResult) => {
                    handleSetupResult(instance, resolvedResult, isSSR);
                })
                    .catch(e => {
                    handleError(e, instance, 0 /* ErrorCodes.SETUP_FUNCTION */);
                });
            }
            else {
                // async setup returned Promise.
                // bail here and wait for re-entry.
                instance.asyncDep = setupResult;
                if (( true) && !instance.suspense) {
                    const name = (_a = Component.name) !== null && _a !== void 0 ? _a : 'Anonymous';
                    warn(`Component <${name}>: setup function returned a promise, but no ` +
                        `<Suspense> boundary was found in the parent component tree. ` +
                        `A component with async setup() must be nested in a <Suspense> ` +
                        `in order to be rendered.`);
                }
            }
        }
        else {
            handleSetupResult(instance, setupResult, isSSR);
        }
    }
    else {
        finishComponentSetup(instance, isSSR);
    }
}
function handleSetupResult(instance, setupResult, isSSR) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(setupResult)) {
        // setup returned an inline render function
        if (instance.type.__ssrInlineRender) {
            // when the function's name is `ssrRender` (compiled by SFC inline mode),
            // set it as ssrRender instead.
            instance.ssrRender = setupResult;
        }
        else {
            instance.render = setupResult;
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(setupResult)) {
        if (( true) && isVNode(setupResult)) {
            warn(`setup() should not return VNodes directly - ` +
                `return a render function instead.`);
        }
        // setup returned bindings.
        // assuming a render function compiled from template is present.
        if (true) {
            instance.devtoolsRawSetupState = setupResult;
        }
        instance.setupState = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.proxyRefs)(setupResult);
        if ((true)) {
            exposeSetupStateOnRenderContext(instance);
        }
    }
    else if (( true) && setupResult !== undefined) {
        warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);
    }
    finishComponentSetup(instance, isSSR);
}
let compile;
let installWithProxy;
/**
 * For runtime-dom to register the compiler.
 * Note the exported method uses any to avoid d.ts relying on the compiler types.
 */
function registerRuntimeCompiler(_compile) {
    compile = _compile;
    installWithProxy = i => {
        if (i.render._rc) {
            i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
        }
    };
}
// dev only
const isRuntimeOnly = () => !compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    // template / render function normalization
    // could be already set when returned from setup()
    if (!instance.render) {
        // only do on-the-fly compile if not in SSR - SSR on-the-fly compilation
        // is done by server-renderer
        if (!isSSR && compile && !Component.render) {
            const template = Component.template ||
                resolveMergedOptions(instance).template;
            if (template) {
                if ((true)) {
                    startMeasure(instance, `compile`);
                }
                const { isCustomElement, compilerOptions } = instance.appContext.config;
                const { delimiters, compilerOptions: componentCompilerOptions } = Component;
                const finalCompilerOptions = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                if ((true)) {
                    endMeasure(instance, `compile`);
                }
            }
        }
        instance.render = (Component.render || _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP);
        // for runtime-compiled render functions using `with` blocks, the render
        // proxy used needs a different `has` handler which is more performant and
        // also only allows a whitelist of globals to fallthrough.
        if (installWithProxy) {
            installWithProxy(instance);
        }
    }
    // support for 2.x options
    if (__VUE_OPTIONS_API__ && !(false )) {
        setCurrentInstance(instance);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.pauseTracking)();
        applyOptions(instance);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.resetTracking)();
        unsetCurrentInstance();
    }
    // warn missing template/render
    // the runtime compilation of template in SSR is done by server-render
    if (( true) && !Component.render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NOOP && !isSSR) {
        /* istanbul ignore if */
        if (!compile && Component.template) {
            warn(`Component provided template option but ` +
                `runtime compilation is not supported in this build of Vue.` +
                (` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
                    ) /* should not happen */);
        }
        else {
            warn(`Component is missing template or render function.`);
        }
    }
}
function createAttrsProxy(instance) {
    return new Proxy(instance.attrs, ( true)
        ? {
            get(target, key) {
                markAttrsAccessed();
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.track)(instance, "get" /* TrackOpTypes.GET */, '$attrs');
                return target[key];
            },
            set() {
                warn(`setupContext.attrs is readonly.`);
                return false;
            },
            deleteProperty() {
                warn(`setupContext.attrs is readonly.`);
                return false;
            }
        }
        : 0);
}
function createSetupContext(instance) {
    const expose = exposed => {
        if (( true) && instance.exposed) {
            warn(`expose() should be called only once per setup().`);
        }
        instance.exposed = exposed || {};
    };
    let attrs;
    if ((true)) {
        // We use getters in dev in case libs like test-utils overwrite instance
        // properties (overwrites should not be done in prod)
        return Object.freeze({
            get attrs() {
                return attrs || (attrs = createAttrsProxy(instance));
            },
            get slots() {
                return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly)(instance.slots);
            },
            get emit() {
                return (event, ...args) => instance.emit(event, ...args);
            },
            expose
        });
    }
    else {}
}
function getExposeProxy(instance) {
    if (instance.exposed) {
        return (instance.exposeProxy ||
            (instance.exposeProxy = new Proxy((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.proxyRefs)((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.markRaw)(instance.exposed)), {
                get(target, key) {
                    if (key in target) {
                        return target[key];
                    }
                    else if (key in publicPropertiesMap) {
                        return publicPropertiesMap[key](instance);
                    }
                },
                has(target, key) {
                    return key in target || key in publicPropertiesMap;
                }
            })));
    }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');
function getComponentName(Component, includeInferred = true) {
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(Component)
        ? Component.displayName || Component.name
        : Component.name || (includeInferred && Component.__name);
}
/* istanbul ignore next */
function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) {
            name = match[1];
        }
    }
    if (!name && instance && instance.parent) {
        // try to infer the name based on reverse resolution
        const inferFromRegistry = (registry) => {
            for (const key in registry) {
                if (registry[key] === Component) {
                    return key;
                }
            }
        };
        name =
            inferFromRegistry(instance.components ||
                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value) && '__vccOpts' in value;
}

const computed = ((getterOrOptions, debugOptions) => {
    // @ts-ignore
    return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.computed)(getterOrOptions, debugOptions, isInSSRComponentSetup);
});

// dev only
const warnRuntimeUsage = (method) => warn(`${method}() is a compiler-hint helper that is only usable inside ` +
    `<script setup> of a single file component. Its arguments should be ` +
    `compiled away and passing it at runtime has no effect.`);
// implementation
function defineProps() {
    if ((true)) {
        warnRuntimeUsage(`defineProps`);
    }
    return null;
}
// implementation
function defineEmits() {
    if ((true)) {
        warnRuntimeUsage(`defineEmits`);
    }
    return null;
}
/**
 * Vue `<script setup>` compiler macro for declaring a component's exposed
 * instance properties when it is accessed by a parent component via template
 * refs.
 *
 * `<script setup>` components are closed by default - i.e. variables inside
 * the `<script setup>` scope is not exposed to parent unless explicitly exposed
 * via `defineExpose`.
 *
 * This is only usable inside `<script setup>`, is compiled away in the
 * output and should **not** be actually called at runtime.
 */
function defineExpose(exposed) {
    if ((true)) {
        warnRuntimeUsage(`defineExpose`);
    }
}
/**
 * Vue `<script setup>` compiler macro for providing props default values when
 * using type-based `defineProps` declaration.
 *
 * Example usage:
 * ```ts
 * withDefaults(defineProps<{
 *   size?: number
 *   labels?: string[]
 * }>(), {
 *   size: 3,
 *   labels: () => ['default label']
 * })
 * ```
 *
 * This is only usable inside `<script setup>`, is compiled away in the output
 * and should **not** be actually called at runtime.
 */
function withDefaults(props, defaults) {
    if ((true)) {
        warnRuntimeUsage(`withDefaults`);
    }
    return null;
}
function useSlots() {
    return getContext().slots;
}
function useAttrs() {
    return getContext().attrs;
}
function getContext() {
    const i = getCurrentInstance();
    if (( true) && !i) {
        warn(`useContext() called without active instance.`);
    }
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
/**
 * Runtime helper for merging default declarations. Imported by compiled code
 * only.
 * @internal
 */
function mergeDefaults(raw, defaults) {
    const props = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(raw)
        ? raw.reduce((normalized, p) => ((normalized[p] = {}), normalized), {})
        : raw;
    for (const key in defaults) {
        const opt = props[key];
        if (opt) {
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(opt) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(opt)) {
                props[key] = { type: opt, default: defaults[key] };
            }
            else {
                opt.default = defaults[key];
            }
        }
        else if (opt === null) {
            props[key] = { default: defaults[key] };
        }
        else if ((true)) {
            warn(`props default key "${key}" has no corresponding declaration.`);
        }
    }
    return props;
}
/**
 * Used to create a proxy for the rest element when destructuring props with
 * defineProps().
 * @internal
 */
function createPropsRestProxy(props, excludedKeys) {
    const ret = {};
    for (const key in props) {
        if (!excludedKeys.includes(key)) {
            Object.defineProperty(ret, key, {
                enumerable: true,
                get: () => props[key]
            });
        }
    }
    return ret;
}
/**
 * `<script setup>` helper for persisting the current instance context over
 * async/await flows.
 *
 * `@vue/compiler-sfc` converts the following:
 *
 * ```ts
 * const x = await foo()
 * ```
 *
 * into:
 *
 * ```ts
 * let __temp, __restore
 * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)
 * ```
 * @internal
 */
function withAsyncContext(getAwaitable) {
    const ctx = getCurrentInstance();
    if (( true) && !ctx) {
        warn(`withAsyncContext called without active current instance. ` +
            `This is likely a bug.`);
    }
    let awaitable = getAwaitable();
    unsetCurrentInstance();
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isPromise)(awaitable)) {
        awaitable = awaitable.catch(e => {
            setCurrentInstance(ctx);
            throw e;
        });
    }
    return [awaitable, () => setCurrentInstance(ctx)];
}

// Actual implementation
function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(propsOrChildren) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(propsOrChildren)) {
            // single vnode without props
            if (isVNode(propsOrChildren)) {
                return createVNode(type, null, [propsOrChildren]);
            }
            // props without children
            return createVNode(type, propsOrChildren);
        }
        else {
            // omit props
            return createVNode(type, null, propsOrChildren);
        }
    }
    else {
        if (l > 3) {
            children = Array.prototype.slice.call(arguments, 2);
        }
        else if (l === 3 && isVNode(children)) {
            children = [children];
        }
        return createVNode(type, propsOrChildren, children);
    }
}

const ssrContextKey = Symbol(( true) ? `ssrContext` : 0);
const useSSRContext = () => {
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) {
            ( true) &&
                warn(`Server rendering context not provided. Make sure to only call ` +
                    `useSSRContext() conditionally in the server build.`);
        }
        return ctx;
    }
};

function isShallow(value) {
    return !!(value && value["__v_isShallow" /* ReactiveFlags.IS_SHALLOW */]);
}

function initCustomFormatter() {
    /* eslint-disable no-restricted-globals */
    if ( false || typeof window === 'undefined') {
        return;
    }
    const vueStyle = { style: 'color:#3ba776' };
    const numberStyle = { style: 'color:#0b1bc9' };
    const stringStyle = { style: 'color:#b62e24' };
    const keywordStyle = { style: 'color:#9d288c' };
    // custom formatter for Chrome
    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html
    const formatter = {
        header(obj) {
            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup
            if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(obj)) {
                return null;
            }
            if (obj.__isVue) {
                return ['div', vueStyle, `VueInstance`];
            }
            else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isRef)(obj)) {
                return [
                    'div',
                    {},
                    ['span', vueStyle, genRefFlag(obj)],
                    '<',
                    formatValue(obj.value),
                    `>`
                ];
            }
            else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReactive)(obj)) {
                return [
                    'div',
                    {},
                    ['span', vueStyle, isShallow(obj) ? 'ShallowReactive' : 'Reactive'],
                    '<',
                    formatValue(obj),
                    `>${(0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReadonly)(obj) ? ` (readonly)` : ``}`
                ];
            }
            else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.isReadonly)(obj)) {
                return [
                    'div',
                    {},
                    ['span', vueStyle, isShallow(obj) ? 'ShallowReadonly' : 'Readonly'],
                    '<',
                    formatValue(obj),
                    '>'
                ];
            }
            return null;
        },
        hasBody(obj) {
            return obj && obj.__isVue;
        },
        body(obj) {
            if (obj && obj.__isVue) {
                return [
                    'div',
                    {},
                    ...formatInstance(obj.$)
                ];
            }
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) {
            blocks.push(createInstanceBlock('props', (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(instance.props)));
        }
        if (instance.setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {
            blocks.push(createInstanceBlock('setup', instance.setupState));
        }
        if (instance.data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ) {
            blocks.push(createInstanceBlock('data', (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(instance.data)));
        }
        const computed = extractKeys(instance, 'computed');
        if (computed) {
            blocks.push(createInstanceBlock('computed', computed));
        }
        const injected = extractKeys(instance, 'inject');
        if (injected) {
            blocks.push(createInstanceBlock('injected', injected));
        }
        blocks.push([
            'div',
            {},
            [
                'span',
                {
                    style: keywordStyle.style + ';opacity:0.66'
                },
                '$ (internal): '
            ],
            ['object', { object: instance }]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, target);
        if (!Object.keys(target).length) {
            return ['span', {}];
        }
        return [
            'div',
            { style: 'line-height:1.25em;margin-bottom:0.6em' },
            [
                'div',
                {
                    style: 'color:#476582'
                },
                type
            ],
            [
                'div',
                {
                    style: 'padding-left:1.25em'
                },
                ...Object.keys(target).map(key => {
                    return [
                        'div',
                        {},
                        ['span', keywordStyle, key + ': '],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v, asRaw = true) {
        if (typeof v === 'number') {
            return ['span', numberStyle, v];
        }
        else if (typeof v === 'string') {
            return ['span', stringStyle, JSON.stringify(v)];
        }
        else if (typeof v === 'boolean') {
            return ['span', keywordStyle, v];
        }
        else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(v)) {
            return ['object', { object: asRaw ? (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__.toRaw)(v) : v }];
        }
        else {
            return ['span', stringStyle, String(v)];
        }
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(Comp)) {
            return;
        }
        const extracted = {};
        for (const key in instance.ctx) {
            if (isKeyOfType(Comp, key, type)) {
                extracted[key] = instance.ctx[key];
            }
        }
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if (((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(opts) && opts.includes(key)) ||
            ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(opts) && key in opts)) {
            return true;
        }
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
            return true;
        }
        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {
            return true;
        }
    }
    function genRefFlag(v) {
        if (isShallow(v)) {
            return `ShallowRef`;
        }
        if (v.effect) {
            return `ComputedRef`;
        }
        return `Ref`;
    }
    if (window.devtoolsFormatters) {
        window.devtoolsFormatters.push(formatter);
    }
    else {
        window.devtoolsFormatters = [formatter];
    }
}

function withMemo(memo, render, cache, index) {
    const cached = cache[index];
    if (cached && isMemoSame(cached, memo)) {
        return cached;
    }
    const ret = render();
    // shallow clone
    ret.memo = memo.slice();
    return (cache[index] = ret);
}
function isMemoSame(cached, memo) {
    const prev = cached.memo;
    if (prev.length != memo.length) {
        return false;
    }
    for (let i = 0; i < prev.length; i++) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hasChanged)(prev[i], memo[i])) {
            return false;
        }
    }
    // make sure to let parent block track it when returning cached
    if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(cached);
    }
    return true;
}

// Core API ------------------------------------------------------------------
const version = "3.2.45";
const _ssrUtils = {
    createComponentInstance,
    setupComponent,
    renderComponentRoot,
    setCurrentRenderingInstance,
    isVNode,
    normalizeVNode
};
/**
 * SSR utils for \@vue/server-renderer. Only exposed in ssr-possible builds.
 * @internal
 */
const ssrUtils = (_ssrUtils );
/**
 * @internal only exposed in compat builds
 */
const resolveFilter = null;
/**
 * @internal only exposed in compat builds.
 */
const compatUtils = (null);




/***/ }),

/***/ "./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.BaseTransition),
/* harmony export */   "Comment": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Comment),
/* harmony export */   "EffectScope": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.EffectScope),
/* harmony export */   "Fragment": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Fragment),
/* harmony export */   "KeepAlive": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.KeepAlive),
/* harmony export */   "ReactiveEffect": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect),
/* harmony export */   "Static": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Static),
/* harmony export */   "Suspense": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Suspense),
/* harmony export */   "Teleport": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Teleport),
/* harmony export */   "Text": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Text),
/* harmony export */   "Transition": () => (/* binding */ Transition),
/* harmony export */   "TransitionGroup": () => (/* binding */ TransitionGroup),
/* harmony export */   "VueElement": () => (/* binding */ VueElement),
/* harmony export */   "callWithAsyncErrorHandling": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.callWithAsyncErrorHandling),
/* harmony export */   "callWithErrorHandling": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.callWithErrorHandling),
/* harmony export */   "camelize": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.camelize),
/* harmony export */   "capitalize": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.capitalize),
/* harmony export */   "cloneVNode": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.cloneVNode),
/* harmony export */   "compatUtils": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.compatUtils),
/* harmony export */   "computed": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.computed),
/* harmony export */   "createApp": () => (/* binding */ createApp),
/* harmony export */   "createBlock": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createBlock),
/* harmony export */   "createCommentVNode": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode),
/* harmony export */   "createElementBlock": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createElementBlock),
/* harmony export */   "createElementVNode": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createElementVNode),
/* harmony export */   "createHydrationRenderer": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createHydrationRenderer),
/* harmony export */   "createPropsRestProxy": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createPropsRestProxy),
/* harmony export */   "createRenderer": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createRenderer),
/* harmony export */   "createSSRApp": () => (/* binding */ createSSRApp),
/* harmony export */   "createSlots": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createSlots),
/* harmony export */   "createStaticVNode": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createStaticVNode),
/* harmony export */   "createTextVNode": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createTextVNode),
/* harmony export */   "createVNode": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createVNode),
/* harmony export */   "customRef": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.customRef),
/* harmony export */   "defineAsyncComponent": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineAsyncComponent),
/* harmony export */   "defineComponent": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineComponent),
/* harmony export */   "defineCustomElement": () => (/* binding */ defineCustomElement),
/* harmony export */   "defineEmits": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineEmits),
/* harmony export */   "defineExpose": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineExpose),
/* harmony export */   "defineProps": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineProps),
/* harmony export */   "defineSSRCustomElement": () => (/* binding */ defineSSRCustomElement),
/* harmony export */   "devtools": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.devtools),
/* harmony export */   "effect": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.effect),
/* harmony export */   "effectScope": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.effectScope),
/* harmony export */   "getCurrentInstance": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance),
/* harmony export */   "getCurrentScope": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope),
/* harmony export */   "getTransitionRawChildren": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getTransitionRawChildren),
/* harmony export */   "guardReactiveProps": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.guardReactiveProps),
/* harmony export */   "h": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.h),
/* harmony export */   "handleError": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.handleError),
/* harmony export */   "hydrate": () => (/* binding */ hydrate),
/* harmony export */   "initCustomFormatter": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.initCustomFormatter),
/* harmony export */   "initDirectivesForSSR": () => (/* binding */ initDirectivesForSSR),
/* harmony export */   "inject": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.inject),
/* harmony export */   "isMemoSame": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isMemoSame),
/* harmony export */   "isProxy": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isProxy),
/* harmony export */   "isReactive": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isReactive),
/* harmony export */   "isReadonly": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isReadonly),
/* harmony export */   "isRef": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isRef),
/* harmony export */   "isRuntimeOnly": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isRuntimeOnly),
/* harmony export */   "isShallow": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isShallow),
/* harmony export */   "isVNode": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isVNode),
/* harmony export */   "markRaw": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.markRaw),
/* harmony export */   "mergeDefaults": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.mergeDefaults),
/* harmony export */   "mergeProps": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.mergeProps),
/* harmony export */   "nextTick": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.nextTick),
/* harmony export */   "normalizeClass": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.normalizeClass),
/* harmony export */   "normalizeProps": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.normalizeProps),
/* harmony export */   "normalizeStyle": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle),
/* harmony export */   "onActivated": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onActivated),
/* harmony export */   "onBeforeMount": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount),
/* harmony export */   "onBeforeUnmount": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount),
/* harmony export */   "onBeforeUpdate": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onBeforeUpdate),
/* harmony export */   "onDeactivated": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onDeactivated),
/* harmony export */   "onErrorCaptured": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onErrorCaptured),
/* harmony export */   "onMounted": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onMounted),
/* harmony export */   "onRenderTracked": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onRenderTracked),
/* harmony export */   "onRenderTriggered": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onRenderTriggered),
/* harmony export */   "onScopeDispose": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onScopeDispose),
/* harmony export */   "onServerPrefetch": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onServerPrefetch),
/* harmony export */   "onUnmounted": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUnmounted),
/* harmony export */   "onUpdated": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUpdated),
/* harmony export */   "openBlock": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.openBlock),
/* harmony export */   "popScopeId": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.popScopeId),
/* harmony export */   "provide": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.provide),
/* harmony export */   "proxyRefs": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.proxyRefs),
/* harmony export */   "pushScopeId": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.pushScopeId),
/* harmony export */   "queuePostFlushCb": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.queuePostFlushCb),
/* harmony export */   "reactive": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.reactive),
/* harmony export */   "readonly": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.readonly),
/* harmony export */   "ref": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ref),
/* harmony export */   "registerRuntimeCompiler": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.registerRuntimeCompiler),
/* harmony export */   "render": () => (/* binding */ render),
/* harmony export */   "renderList": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.renderList),
/* harmony export */   "renderSlot": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.renderSlot),
/* harmony export */   "resolveComponent": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveComponent),
/* harmony export */   "resolveDirective": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveDirective),
/* harmony export */   "resolveDynamicComponent": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent),
/* harmony export */   "resolveFilter": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveFilter),
/* harmony export */   "resolveTransitionHooks": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks),
/* harmony export */   "setBlockTracking": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setBlockTracking),
/* harmony export */   "setDevtoolsHook": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setDevtoolsHook),
/* harmony export */   "setTransitionHooks": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks),
/* harmony export */   "shallowReactive": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.shallowReactive),
/* harmony export */   "shallowReadonly": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly),
/* harmony export */   "shallowRef": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.shallowRef),
/* harmony export */   "ssrContextKey": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ssrContextKey),
/* harmony export */   "ssrUtils": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ssrUtils),
/* harmony export */   "stop": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.stop),
/* harmony export */   "toDisplayString": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toDisplayString),
/* harmony export */   "toHandlerKey": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toHandlerKey),
/* harmony export */   "toHandlers": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toHandlers),
/* harmony export */   "toRaw": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toRaw),
/* harmony export */   "toRef": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toRef),
/* harmony export */   "toRefs": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.toRefs),
/* harmony export */   "transformVNodeArgs": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.transformVNodeArgs),
/* harmony export */   "triggerRef": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.triggerRef),
/* harmony export */   "unref": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.unref),
/* harmony export */   "useAttrs": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useAttrs),
/* harmony export */   "useCssModule": () => (/* binding */ useCssModule),
/* harmony export */   "useCssVars": () => (/* binding */ useCssVars),
/* harmony export */   "useSSRContext": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useSSRContext),
/* harmony export */   "useSlots": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useSlots),
/* harmony export */   "useTransitionState": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useTransitionState),
/* harmony export */   "vModelCheckbox": () => (/* binding */ vModelCheckbox),
/* harmony export */   "vModelDynamic": () => (/* binding */ vModelDynamic),
/* harmony export */   "vModelRadio": () => (/* binding */ vModelRadio),
/* harmony export */   "vModelSelect": () => (/* binding */ vModelSelect),
/* harmony export */   "vModelText": () => (/* binding */ vModelText),
/* harmony export */   "vShow": () => (/* binding */ vShow),
/* harmony export */   "version": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.version),
/* harmony export */   "warn": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn),
/* harmony export */   "watch": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watch),
/* harmony export */   "watchEffect": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchEffect),
/* harmony export */   "watchPostEffect": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchPostEffect),
/* harmony export */   "watchSyncEffect": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchSyncEffect),
/* harmony export */   "withAsyncContext": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withAsyncContext),
/* harmony export */   "withCtx": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withCtx),
/* harmony export */   "withDefaults": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withDefaults),
/* harmony export */   "withDirectives": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withDirectives),
/* harmony export */   "withKeys": () => (/* binding */ withKeys),
/* harmony export */   "withMemo": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withMemo),
/* harmony export */   "withModifiers": () => (/* binding */ withModifiers),
/* harmony export */   "withScopeId": () => (/* reexport safe */ _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.withScopeId)
/* harmony export */ });
/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/runtime-core */ "./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js");
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/shared */ "./node_modules/@vue/shared/dist/shared.esm-bundler.js");
/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @vue/runtime-core */ "./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js");




const svgNS = 'http://www.w3.org/2000/svg';
const doc = (typeof document !== 'undefined' ? document : null);
const templateContainer = doc && /*#__PURE__*/ doc.createElement('template');
const nodeOps = {
    insert: (child, parent, anchor) => {
        parent.insertBefore(child, anchor || null);
    },
    remove: child => {
        const parent = child.parentNode;
        if (parent) {
            parent.removeChild(child);
        }
    },
    createElement: (tag, isSVG, is, props) => {
        const el = isSVG
            ? doc.createElementNS(svgNS, tag)
            : doc.createElement(tag, is ? { is } : undefined);
        if (tag === 'select' && props && props.multiple != null) {
            el.setAttribute('multiple', props.multiple);
        }
        return el;
    },
    createText: text => doc.createTextNode(text),
    createComment: text => doc.createComment(text),
    setText: (node, text) => {
        node.nodeValue = text;
    },
    setElementText: (el, text) => {
        el.textContent = text;
    },
    parentNode: node => node.parentNode,
    nextSibling: node => node.nextSibling,
    querySelector: selector => doc.querySelector(selector),
    setScopeId(el, id) {
        el.setAttribute(id, '');
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent(content, parent, anchor, isSVG, start, end) {
        // <parent> before | first ... last | anchor </parent>
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        // #5308 can only take cached path if:
        // - has a single root node
        // - nextSibling info is still available
        if (start && (start === end || start.nextSibling)) {
            // cached
            while (true) {
                parent.insertBefore(start.cloneNode(true), anchor);
                if (start === end || !(start = start.nextSibling))
                    break;
            }
        }
        else {
            // fresh insert
            templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
            const template = templateContainer.content;
            if (isSVG) {
                // remove outer svg wrapper
                const wrapper = template.firstChild;
                while (wrapper.firstChild) {
                    template.appendChild(wrapper.firstChild);
                }
                template.removeChild(wrapper);
            }
            parent.insertBefore(template, anchor);
        }
        return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
        ];
    }
};

// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function patchClass(el, value, isSVG) {
    // directly setting className should be faster than setAttribute in theory
    // if this is an element during a transition, take the temporary transition
    // classes into account.
    const transitionClasses = el._vtc;
    if (transitionClasses) {
        value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(' ');
    }
    if (value == null) {
        el.removeAttribute('class');
    }
    else if (isSVG) {
        el.setAttribute('class', value);
    }
    else {
        el.className = value;
    }
}

function patchStyle(el, prev, next) {
    const style = el.style;
    const isCssString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(next);
    if (next && !isCssString) {
        for (const key in next) {
            setStyle(style, key, next[key]);
        }
        if (prev && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(prev)) {
            for (const key in prev) {
                if (next[key] == null) {
                    setStyle(style, key, '');
                }
            }
        }
    }
    else {
        const currentDisplay = style.display;
        if (isCssString) {
            if (prev !== next) {
                style.cssText = next;
            }
        }
        else if (prev) {
            el.removeAttribute('style');
        }
        // indicates that the `display` of the element is controlled by `v-show`,
        // so we always keep the current `display` value regardless of the `style`
        // value, thus handing over control to `v-show`.
        if ('_vod' in el) {
            style.display = currentDisplay;
        }
    }
}
const semicolonRE = /[^\\];\s*$/;
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(val)) {
        val.forEach(v => setStyle(style, name, v));
    }
    else {
        if (val == null)
            val = '';
        if ((true)) {
            if (semicolonRE.test(val)) {
                (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Unexpected semicolon at the end of '${name}' style value: '${val}'`);
            }
        }
        if (name.startsWith('--')) {
            // custom property definition
            style.setProperty(name, val);
        }
        else {
            const prefixed = autoPrefix(style, name);
            if (importantRE.test(val)) {
                // !important
                style.setProperty((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(prefixed), val.replace(importantRE, ''), 'important');
            }
            else {
                style[prefixed] = val;
            }
        }
    }
}
const prefixes = ['Webkit', 'Moz', 'ms'];
const prefixCache = {};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) {
        return cached;
    }
    let name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(rawName);
    if (name !== 'filter' && name in style) {
        return (prefixCache[rawName] = name);
    }
    name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.capitalize)(name);
    for (let i = 0; i < prefixes.length; i++) {
        const prefixed = prefixes[i] + name;
        if (prefixed in style) {
            return (prefixCache[rawName] = prefixed);
        }
    }
    return rawName;
}

const xlinkNS = 'http://www.w3.org/1999/xlink';
function patchAttr(el, key, value, isSVG, instance) {
    if (isSVG && key.startsWith('xlink:')) {
        if (value == null) {
            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        }
        else {
            el.setAttributeNS(xlinkNS, key, value);
        }
    }
    else {
        // note we are only checking boolean attributes that don't have a
        // corresponding dom prop of the same name here.
        const isBoolean = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSpecialBooleanAttr)(key);
        if (value == null || (isBoolean && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.includeBooleanAttr)(value))) {
            el.removeAttribute(key);
        }
        else {
            el.setAttribute(key, isBoolean ? '' : value);
        }
    }
}

// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function patchDOMProp(el, key, value, 
// the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
prevChildren, parentComponent, parentSuspense, unmountChildren) {
    if (key === 'innerHTML' || key === 'textContent') {
        if (prevChildren) {
            unmountChildren(prevChildren, parentComponent, parentSuspense);
        }
        el[key] = value == null ? '' : value;
        return;
    }
    if (key === 'value' &&
        el.tagName !== 'PROGRESS' &&
        // custom elements may use _value internally
        !el.tagName.includes('-')) {
        // store value as _value as well since
        // non-string values will be stringified.
        el._value = value;
        const newValue = value == null ? '' : value;
        if (el.value !== newValue ||
            // #4956: always set for OPTION elements because its value falls back to
            // textContent if no value attribute is present. And setting .value for
            // OPTION has no side effect
            el.tagName === 'OPTION') {
            el.value = newValue;
        }
        if (value == null) {
            el.removeAttribute(key);
        }
        return;
    }
    let needRemove = false;
    if (value === '' || value == null) {
        const type = typeof el[key];
        if (type === 'boolean') {
            // e.g. <select multiple> compiles to { multiple: '' }
            value = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.includeBooleanAttr)(value);
        }
        else if (value == null && type === 'string') {
            // e.g. <div :id="null">
            value = '';
            needRemove = true;
        }
        else if (type === 'number') {
            // e.g. <img :width="null">
            value = 0;
            needRemove = true;
        }
    }
    // some properties perform value validation and throw,
    // some properties has getter, no setter, will error in 'use strict'
    // eg. <select :type="null"></select> <select :willValidate="null"></select>
    try {
        el[key] = value;
    }
    catch (e) {
        // do not warn if value is auto-coerced from nullish values
        if (( true) && !needRemove) {
            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: ` +
                `value ${value} is invalid.`, e);
        }
    }
    needRemove && el.removeAttribute(key);
}

function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {});
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) {
        // patch
        existingInvoker.value = nextValue;
    }
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));
            addEventListener(el, name, invoker, options);
        }
        else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while ((m = name.match(optionsModifierRE))) {
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    const event = name[2] === ':' ? name.slice(3) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(name.slice(2));
    return [event, options];
}
// To avoid the overhead of repeatedly calling Date.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
let cachedNow = 0;
const p = /*#__PURE__*/ Promise.resolve();
const getNow = () => cachedNow || (p.then(() => (cachedNow = 0)), (cachedNow = Date.now()));
function createInvoker(initialValue, instance) {
    const invoker = (e) => {
        // async edge case vuejs/vue#6566
        // inner click event triggers patch, event handler
        // attached to outer element during patch, and triggered again. This
        // happens because browsers fire microtask ticks between event propagation.
        // this no longer happens for templates in Vue 3, but could still be
        // theoretically possible for hand-written render functions.
        // the solution: we save the timestamp when a handler is attached,
        // and also attach the timestamp to any event that was handled by vue
        // for the first time (to avoid inconsistent event timestamp implementations
        // or events fired from iframes, e.g. #2513)
        // The handler would only fire if the event passed to it was fired
        // AFTER it was attached.
        if (!e._vts) {
            e._vts = Date.now();
        }
        else if (e._vts <= invoker.attached) {
            return;
        }
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.callWithAsyncErrorHandling)(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* ErrorCodes.NATIVE_EVENT_HANDLER */, [e]);
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function patchStopImmediatePropagation(e, value) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
        const originalStop = e.stopImmediatePropagation;
        e.stopImmediatePropagation = () => {
            originalStop.call(e);
            e._stopped = true;
        };
        return value.map(fn => (e) => !e._stopped && fn && fn(e));
    }
    else {
        return value;
    }
}

const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
    if (key === 'class') {
        patchClass(el, nextValue, isSVG);
    }
    else if (key === 'style') {
        patchStyle(el, prevValue, nextValue);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isOn)(key)) {
        // ignore v-model listeners
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isModelListener)(key)) {
            patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
    }
    else if (key[0] === '.'
        ? ((key = key.slice(1)), true)
        : key[0] === '^'
            ? ((key = key.slice(1)), false)
            : shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
    }
    else {
        // special case for <input v-model type="checkbox"> with
        // :true-value & :false-value
        // store value as dom properties since non-string values will be
        // stringified.
        if (key === 'true-value') {
            el._trueValue = nextValue;
        }
        else if (key === 'false-value') {
            el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        // most keys must be set as attribute on svg elements to work
        // ...except innerHTML & textContent
        if (key === 'innerHTML' || key === 'textContent') {
            return true;
        }
        // or native onclick with function values
        if (key in el && nativeOnRE.test(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(value)) {
            return true;
        }
        return false;
    }
    // these are enumerated attrs, however their corresponding DOM properties
    // are actually booleans - this leads to setting it with a string "false"
    // value leading it to be coerced to `true`, so we need to always treat
    // them as attributes.
    // Note that `contentEditable` doesn't have this problem: its DOM
    // property is also enumerated string values.
    if (key === 'spellcheck' || key === 'draggable' || key === 'translate') {
        return false;
    }
    // #1787, #2840 form property on form elements is readonly and must be set as
    // attribute.
    if (key === 'form') {
        return false;
    }
    // #1526 <input list> must be set as attribute
    if (key === 'list' && el.tagName === 'INPUT') {
        return false;
    }
    // #2766 <textarea type> must be set as attribute
    if (key === 'type' && el.tagName === 'TEXTAREA') {
        return false;
    }
    // native onclick with string value, must be set as attribute
    if (nativeOnRE.test(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {
        return false;
    }
    return key in el;
}

function defineCustomElement(options, hydrate) {
    const Comp = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.defineComponent)(options);
    class VueCustomElement extends VueElement {
        constructor(initialProps) {
            super(Comp, initialProps, hydrate);
        }
    }
    VueCustomElement.def = Comp;
    return VueCustomElement;
}
const defineSSRCustomElement = ((options) => {
    // @ts-ignore
    return defineCustomElement(options, hydrate);
});
const BaseClass = (typeof HTMLElement !== 'undefined' ? HTMLElement : class {
});
class VueElement extends BaseClass {
    constructor(_def, _props = {}, hydrate) {
        super();
        this._def = _def;
        this._props = _props;
        /**
         * @internal
         */
        this._instance = null;
        this._connected = false;
        this._resolved = false;
        this._numberProps = null;
        if (this.shadowRoot && hydrate) {
            hydrate(this._createVNode(), this.shadowRoot);
        }
        else {
            if (( true) && this.shadowRoot) {
                (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Custom element has pre-rendered declarative shadow root but is not ` +
                    `defined as hydratable. Use \`defineSSRCustomElement\`.`);
            }
            this.attachShadow({ mode: 'open' });
            if (!this._def.__asyncLoader) {
                // for sync component defs we can immediately resolve props
                this._resolveProps(this._def);
            }
        }
    }
    connectedCallback() {
        this._connected = true;
        if (!this._instance) {
            if (this._resolved) {
                this._update();
            }
            else {
                this._resolveDef();
            }
        }
    }
    disconnectedCallback() {
        this._connected = false;
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {
            if (!this._connected) {
                render(null, this.shadowRoot);
                this._instance = null;
            }
        });
    }
    /**
     * resolve inner component definition (handle possible async component)
     */
    _resolveDef() {
        this._resolved = true;
        // set initial attrs
        for (let i = 0; i < this.attributes.length; i++) {
            this._setAttr(this.attributes[i].name);
        }
        // watch future attr changes
        new MutationObserver(mutations => {
            for (const m of mutations) {
                this._setAttr(m.attributeName);
            }
        }).observe(this, { attributes: true });
        const resolve = (def, isAsync = false) => {
            const { props, styles } = def;
            // cast Number-type props set before resolve
            let numberProps;
            if (props && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(props)) {
                for (const key in props) {
                    const opt = props[key];
                    if (opt === Number || (opt && opt.type === Number)) {
                        if (key in this._props) {
                            this._props[key] = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(this._props[key]);
                        }
                        (numberProps || (numberProps = Object.create(null)))[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key)] = true;
                    }
                }
            }
            this._numberProps = numberProps;
            if (isAsync) {
                // defining getter/setters on prototype
                // for sync defs, this already happened in the constructor
                this._resolveProps(def);
            }
            // apply CSS
            this._applyStyles(styles);
            // initial render
            this._update();
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) {
            asyncDef().then(def => resolve(def, true));
        }
        else {
            resolve(this._def);
        }
    }
    _resolveProps(def) {
        const { props } = def;
        const declaredPropKeys = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(props) ? props : Object.keys(props || {});
        // check if there are props set pre-upgrade or connect
        for (const key of Object.keys(this)) {
            if (key[0] !== '_' && declaredPropKeys.includes(key)) {
                this._setProp(key, this[key], true, false);
            }
        }
        // defining getter/setters on prototype
        for (const key of declaredPropKeys.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)) {
            Object.defineProperty(this, key, {
                get() {
                    return this._getProp(key);
                },
                set(val) {
                    this._setProp(key, val);
                }
            });
        }
    }
    _setAttr(key) {
        let value = this.getAttribute(key);
        const camelKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.camelize)(key);
        if (this._numberProps && this._numberProps[camelKey]) {
            value = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(value);
        }
        this._setProp(camelKey, value, false);
    }
    /**
     * @internal
     */
    _getProp(key) {
        return this._props[key];
    }
    /**
     * @internal
     */
    _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
        if (val !== this._props[key]) {
            this._props[key] = val;
            if (shouldUpdate && this._instance) {
                this._update();
            }
            // reflect
            if (shouldReflect) {
                if (val === true) {
                    this.setAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key), '');
                }
                else if (typeof val === 'string' || typeof val === 'number') {
                    this.setAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key), val + '');
                }
                else if (!val) {
                    this.removeAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(key));
                }
            }
        }
    }
    _update() {
        render(this._createVNode(), this.shadowRoot);
    }
    _createVNode() {
        const vnode = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createVNode)(this._def, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, this._props));
        if (!this._instance) {
            vnode.ce = instance => {
                this._instance = instance;
                instance.isCE = true;
                // HMR
                if ((true)) {
                    instance.ceReload = newStyles => {
                        // always reset styles
                        if (this._styles) {
                            this._styles.forEach(s => this.shadowRoot.removeChild(s));
                            this._styles.length = 0;
                        }
                        this._applyStyles(newStyles);
                        this._instance = null;
                        this._update();
                    };
                }
                const dispatch = (event, args) => {
                    this.dispatchEvent(new CustomEvent(event, {
                        detail: args
                    }));
                };
                // intercept emit
                instance.emit = (event, ...args) => {
                    // dispatch both the raw and hyphenated versions of an event
                    // to match Vue behavior
                    dispatch(event, args);
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event) !== event) {
                        dispatch((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event), args);
                    }
                };
                // locate nearest Vue custom element parent for provide/inject
                let parent = this;
                while ((parent =
                    parent && (parent.parentNode || parent.host))) {
                    if (parent instanceof VueElement) {
                        instance.parent = parent._instance;
                        instance.provides = parent._instance.provides;
                        break;
                    }
                }
            };
        }
        return vnode;
    }
    _applyStyles(styles) {
        if (styles) {
            styles.forEach(css => {
                const s = document.createElement('style');
                s.textContent = css;
                this.shadowRoot.appendChild(s);
                // record for HMR
                if ((true)) {
                    (this._styles || (this._styles = [])).push(s);
                }
            });
        }
    }
}

function useCssModule(name = '$style') {
    /* istanbul ignore else */
    {
        const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();
        if (!instance) {
            ( true) && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`useCssModule must be called inside setup()`);
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            ( true) && (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Current instance does not have CSS modules injected.`);
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            ( true) &&
                (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Current instance does not have CSS module named "${name}".`);
            return _vue_shared__WEBPACK_IMPORTED_MODULE_1__.EMPTY_OBJ;
        }
        return mod;
    }
}

/**
 * Runtime helper for SFC's CSS variable injection feature.
 * @private
 */
function useCssVars(getter) {
    const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();
    /* istanbul ignore next */
    if (!instance) {
        ( true) &&
            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`useCssVars is called without current active component instance.`);
        return;
    }
    const updateTeleports = (instance.ut = (vars = getter(instance.proxy)) => {
        Array.from(document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)).forEach(node => setVarsOnNode(node, vars));
    });
    const setVars = () => {
        const vars = getter(instance.proxy);
        setVarsOnVNode(instance.subTree, vars);
        updateTeleports(vars);
    };
    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.watchPostEffect)(setVars);
    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, { childList: true });
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => ob.disconnect());
    });
}
function setVarsOnVNode(vnode, vars) {
    if (vnode.shapeFlag & 128 /* ShapeFlags.SUSPENSE */) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) {
            suspense.effects.push(() => {
                setVarsOnVNode(suspense.activeBranch, vars);
            });
        }
    }
    // drill down HOCs until it's a non-component vnode
    while (vnode.component) {
        vnode = vnode.component.subTree;
    }
    if (vnode.shapeFlag & 1 /* ShapeFlags.ELEMENT */ && vnode.el) {
        setVarsOnNode(vnode.el, vars);
    }
    else if (vnode.type === _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Fragment) {
        vnode.children.forEach(c => setVarsOnVNode(c, vars));
    }
    else if (vnode.type === _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Static) {
        let { el, anchor } = vnode;
        while (el) {
            setVarsOnNode(el, vars);
            if (el === anchor)
                break;
            el = el.nextSibling;
        }
    }
}
function setVarsOnNode(el, vars) {
    if (el.nodeType === 1) {
        const style = el.style;
        for (const key in vars) {
            style.setProperty(`--${key}`, vars[key]);
        }
    }
}

const TRANSITION = 'transition';
const ANIMATION = 'animation';
// DOM Transition is a higher-order-component based on the platform-agnostic
// base Transition component, with DOM-specific logic.
const Transition = (props, { slots }) => (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.h)(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = 'Transition';
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [String, Number, Object],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = (Transition.props =
    /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.BaseTransition.props, DOMTransitionPropsValidators));
/**
 * #3227 Incoming hooks may be merged into arrays when wrapping Transition
 * with custom HOCs.
 */
const callHook = (hook, args = []) => {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)) {
        hook.forEach(h => h(...args));
    }
    else if (hook) {
        hook(...args);
    }
};
/**
 * Check if a hook expects a callback (2nd arg), which means the user
 * intends to explicitly control the end of the transition.
 */
const hasExplicitCallback = (hook) => {
    return hook
        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(hook)
            ? hook.some(h => h.length > 1)
            : hook.length > 1
        : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {};
    for (const key in rawProps) {
        if (!(key in DOMTransitionPropsValidators)) {
            baseProps[key] = rawProps[key];
        }
    }
    if (rawProps.css === false) {
        return baseProps;
    }
    const { name = 'v', type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
    const finishEnter = (el, isAppear, done) => {
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    const finishLeave = (el, done) => {
        el._isLeaving = false;
        removeTransitionClass(el, leaveFromClass);
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear) => {
        return (el, done) => {
            const hook = isAppear ? onAppear : onEnter;
            const resolve = () => finishEnter(el, isAppear, done);
            callHook(hook, [el, resolve]);
            nextFrame(() => {
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) {
                    whenTransitionEnds(el, type, enterDuration, resolve);
                }
            });
        };
    };
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)(baseProps, {
        onBeforeEnter(el) {
            callHook(onBeforeEnter, [el]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear(el) {
            callHook(onBeforeAppear, [el]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave(el, done) {
            el._isLeaving = true;
            const resolve = () => finishLeave(el, done);
            addTransitionClass(el, leaveFromClass);
            // force reflow so *-leave-from classes immediately take effect (#2593)
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(() => {
                if (!el._isLeaving) {
                    // cancelled
                    return;
                }
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) {
                    whenTransitionEnds(el, type, leaveDuration, resolve);
                }
            });
            callHook(onLeave, [el, resolve]);
        },
        onEnterCancelled(el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [el]);
        },
        onAppearCancelled(el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [el]);
        },
        onLeaveCancelled(el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [el]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) {
        return null;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(duration)) {
        return [NumberOf(duration.enter), NumberOf(duration.leave)];
    }
    else {
        const n = NumberOf(duration);
        return [n, n];
    }
}
function NumberOf(val) {
    const res = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(val);
    if ((true))
        validateDuration(res);
    return res;
}
function validateDuration(val) {
    if (typeof val !== 'number') {
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`<transition> explicit duration is not a valid number - ` +
            `got ${JSON.stringify(val)}.`);
    }
    else if (isNaN(val)) {
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`<transition> explicit duration is NaN - ` +
            'the duration expression might be incorrect.');
    }
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach(c => c && el.classList.add(c));
    (el._vtc ||
        (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach(c => c && el.classList.remove(c));
    const { _vtc } = el;
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) {
            el._vtc = undefined;
        }
    }
}
function nextFrame(cb) {
    requestAnimationFrame(() => {
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = (el._endId = ++endId);
    const resolveIfNotStale = () => {
        if (id === el._endId) {
            resolve();
        }
    };
    if (explicitTimeout) {
        return setTimeout(resolveIfNotStale, explicitTimeout);
    }
    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
    if (!type) {
        return resolve();
    }
    const endEvent = type + 'end';
    let ended = 0;
    const end = () => {
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e) => {
        if (e.target === el && ++ended >= propCount) {
            end();
        }
    };
    setTimeout(() => {
        if (ended < propCount) {
            end();
        }
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    const getStyleProperties = (key) => (styles[key] || '').split(', ');
    const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
    const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
    const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    }
    else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    }
    else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type =
            timeout > 0
                ? transitionTimeout > animationTimeout
                    ? TRANSITION
                    : ANIMATION
                : null;
        propCount = type
            ? type === TRANSITION
                ? transitionDurations.length
                : animationDurations.length
            : 0;
    }
    const hasTransform = type === TRANSITION &&
        /\b(transform|all)(,|$)/.test(getStyleProperties(`${TRANSITION}Property`).toString());
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while (delays.length < durations.length) {
        delays = delays.concat(delays);
    }
    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
// synchronously force layout to put elements into a certain state
function forceReflow() {
    return document.body.offsetHeight;
}

const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
    name: 'TransitionGroup',
    props: /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup(props, { slots }) {
        const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance)();
        const state = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.useTransitionState)();
        let prevChildren;
        let children;
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.onUpdated)(() => {
            // children is guaranteed to exist after initial render
            if (!prevChildren.length) {
                return;
            }
            const moveClass = props.moveClass || `${props.name || 'v'}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
                return;
            }
            // we divide the work into three loops to avoid mixing DOM reads and writes
            // in each iteration - which helps prevent layout thrashing.
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            // force reflow to put everything in position
            forceReflow();
            movedChildren.forEach(c => {
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = '';
                const cb = (el._moveCb = (e) => {
                    if (e && e.target !== el) {
                        return;
                    }
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener('transitionend', cb);
                        el._moveCb = null;
                        removeTransitionClass(el, moveClass);
                    }
                });
                el.addEventListener('transitionend', cb);
            });
        });
        return () => {
            const rawProps = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__.toRaw)(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Fragment;
            prevChildren = children;
            children = slots.default ? (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getTransitionRawChildren)(slots.default()) : [];
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (child.key != null) {
                    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks)(child, (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                }
                else if ((true)) {
                    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`<TransitionGroup> children must be keyed.`);
                }
            }
            if (prevChildren) {
                for (let i = 0; i < prevChildren.length; i++) {
                    const child = prevChildren[i];
                    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks)(child, (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                    positionMap.set(child, child.el.getBoundingClientRect());
                }
            }
            return (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createVNode)(tag, null, children);
        };
    }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el._moveCb) {
        el._moveCb();
    }
    if (el._enterCb) {
        el._enterCb();
    }
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = '0s';
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    // Detect whether an element with the move class applied has
    // CSS transitions. Since the element may be inside an entering
    // transition at this very moment, we make a clone of it and remove
    // all other transition classes applied to ensure only the move class
    // is applied.
    const clone = el.cloneNode();
    if (el._vtc) {
        el._vtc.forEach(cls => {
            cls.split(/\s+/).forEach(c => c && clone.classList.remove(c));
        });
    }
    moveClass.split(/\s+/).forEach(c => c && clone.classList.add(c));
    clone.style.display = 'none';
    const container = (root.nodeType === 1 ? root : root.parentNode);
    container.appendChild(clone);
    const { hasTransform } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}

const getModelAssigner = (vnode) => {
    const fn = vnode.props['onUpdate:modelValue'] ||
        (false );
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(fn) ? value => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.invokeArrayFns)(fn, value) : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        target.dispatchEvent(new Event('input'));
    }
}
// We are exporting the v-model runtime directly as vnode hooks so that it can
// be tree-shaken in case v-model is never used.
const vModelText = {
    created(el, { modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || (vnode.props && vnode.props.type === 'number');
        addEventListener(el, lazy ? 'change' : 'input', e => {
            if (e.target.composing)
                return;
            let domValue = el.value;
            if (trim) {
                domValue = domValue.trim();
            }
            if (castToNumber) {
                domValue = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(domValue);
            }
            el._assign(domValue);
        });
        if (trim) {
            addEventListener(el, 'change', () => {
                el.value = el.value.trim();
            });
        }
        if (!lazy) {
            addEventListener(el, 'compositionstart', onCompositionStart);
            addEventListener(el, 'compositionend', onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            addEventListener(el, 'change', onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted(el, { value }) {
        el.value = value == null ? '' : value;
    },
    beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        // avoid clearing unresolved text. #2302
        if (el.composing)
            return;
        if (document.activeElement === el && el.type !== 'range') {
            if (lazy) {
                return;
            }
            if (trim && el.value.trim() === value) {
                return;
            }
            if ((number || el.type === 'number') && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(el.value) === value) {
                return;
            }
        }
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) {
            el.value = newValue;
        }
    }
};
const vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created(el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', () => {
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(modelValue)) {
                const index = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) {
                    assign(modelValue.concat(elementValue));
                }
                else if (!checked && found) {
                    const filtered = [...modelValue];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) {
                    cloned.add(elementValue);
                }
                else {
                    cloned.delete(elementValue);
                }
                assign(cloned);
            }
            else {
                assign(getCheckboxValue(el, checked));
            }
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate(el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value, oldValue }, vnode) {
    el._modelValue = value;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
        el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(value, vnode.props.value) > -1;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value)) {
        el.checked = value.has(vnode.props.value);
    }
    else if (value !== oldValue) {
        el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(value, getCheckboxValue(el, true));
    }
}
const vModelRadio = {
    created(el, { value }, vnode) {
        el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', () => {
            el._assign(getValue(el));
        });
    },
    beforeUpdate(el, { value, oldValue }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) {
            el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(value, vnode.props.value);
        }
    }
};
const vModelSelect = {
    // <select multiple> value need to be deep traversed
    deep: true,
    created(el, { value, modifiers: { number } }, vnode) {
        const isSetModel = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value);
        addEventListener(el, 'change', () => {
            const selectedVal = Array.prototype.filter
                .call(el.options, (o) => o.selected)
                .map((o) => number ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.toNumber)(getValue(o)) : getValue(o));
            el._assign(el.multiple
                ? isSetModel
                    ? new Set(selectedVal)
                    : selectedVal
                : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted(el, { value }) {
        setSelected(el, value);
    },
    beforeUpdate(el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
    },
    updated(el, { value }) {
        setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    if (isMultiple && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value)) {
        ( true) &&
            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`<select multiple v-model> expects an Array or Set value for its binding, ` +
                `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
    }
    for (let i = 0, l = el.options.length; i < l; i++) {
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
                option.selected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(value, optionValue) > -1;
            }
            else {
                option.selected = value.has(optionValue);
            }
        }
        else {
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(getValue(option), value)) {
                if (el.selectedIndex !== i)
                    el.selectedIndex = i;
                return;
            }
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) {
        el.selectedIndex = -1;
    }
}
// retrieve raw value set via :value bindings
function getValue(el) {
    return '_value' in el ? el._value : el.value;
}
// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings
function getCheckboxValue(el, checked) {
    const key = checked ? '_trueValue' : '_falseValue';
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'created');
    },
    mounted(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'mounted');
    },
    beforeUpdate(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');
    },
    updated(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'updated');
    }
};
function resolveDynamicModel(tagName, type) {
    switch (tagName) {
        case 'SELECT':
            return vModelSelect;
        case 'TEXTAREA':
            return vModelText;
        default:
            switch (type) {
                case 'checkbox':
                    return vModelCheckbox;
                case 'radio':
                    return vModelRadio;
                default:
                    return vModelText;
            }
    }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
    const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVModelForSSR() {
    vModelText.getSSRProps = ({ value }) => ({ value });
    vModelRadio.getSSRProps = ({ value }, vnode) => {
        if (vnode.props && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseEqual)(vnode.props.value, value)) {
            return { checked: true };
        }
    };
    vModelCheckbox.getSSRProps = ({ value }, vnode) => {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isArray)(value)) {
            if (vnode.props && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.looseIndexOf)(value, vnode.props.value) > -1) {
                return { checked: true };
            }
        }
        else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSet)(value)) {
            if (vnode.props && value.has(vnode.props.value)) {
                return { checked: true };
            }
        }
        else if (value) {
            return { checked: true };
        }
    };
    vModelDynamic.getSSRProps = (binding, vnode) => {
        if (typeof vnode.type !== 'string') {
            return;
        }
        const modelToUse = resolveDynamicModel(
        // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
        vnode.type.toUpperCase(), vnode.props && vnode.props.type);
        if (modelToUse.getSSRProps) {
            return modelToUse.getSSRProps(binding, vnode);
        }
    };
}

const systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];
const modifierGuards = {
    stop: e => e.stopPropagation(),
    prevent: e => e.preventDefault(),
    self: e => e.target !== e.currentTarget,
    ctrl: e => !e.ctrlKey,
    shift: e => !e.shiftKey,
    alt: e => !e.altKey,
    meta: e => !e.metaKey,
    left: e => 'button' in e && e.button !== 0,
    middle: e => 'button' in e && e.button !== 1,
    right: e => 'button' in e && e.button !== 2,
    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))
};
/**
 * @private
 */
const withModifiers = (fn, modifiers) => {
    return (event, ...args) => {
        for (let i = 0; i < modifiers.length; i++) {
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers))
                return;
        }
        return fn(event, ...args);
    };
};
// Kept for 2.x compat.
// Note: IE11 compat for `spacebar` and `del` is removed for now.
const keyNames = {
    esc: 'escape',
    space: ' ',
    up: 'arrow-up',
    left: 'arrow-left',
    right: 'arrow-right',
    down: 'arrow-down',
    delete: 'backspace'
};
/**
 * @private
 */
const withKeys = (fn, modifiers) => {
    return (event) => {
        if (!('key' in event)) {
            return;
        }
        const eventKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.hyphenate)(event.key);
        if (modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {
            return fn(event);
        }
    };
};

const vShow = {
    beforeMount(el, { value }, { transition }) {
        el._vod = el.style.display === 'none' ? '' : el.style.display;
        if (transition && value) {
            transition.beforeEnter(el);
        }
        else {
            setDisplay(el, value);
        }
    },
    mounted(el, { value }, { transition }) {
        if (transition && value) {
            transition.enter(el);
        }
    },
    updated(el, { value, oldValue }, { transition }) {
        if (!value === !oldValue)
            return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            }
            else {
                transition.leave(el, () => {
                    setDisplay(el, false);
                });
            }
        }
        else {
            setDisplay(el, value);
        }
    },
    beforeUnmount(el, { value }) {
        setDisplay(el, value);
    }
};
function setDisplay(el, value) {
    el.style.display = value ? el._vod : 'none';
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVShowForSSR() {
    vShow.getSSRProps = ({ value }) => {
        if (!value) {
            return { style: { display: 'none' } };
        }
    };
}

const rendererOptions = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.extend)({ patchProp }, nodeOps);
// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return (renderer ||
        (renderer = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createRenderer)(rendererOptions)));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration
        ? renderer
        : (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.createHydrationRenderer)(rendererOptions);
    enabledHydration = true;
    return renderer;
}
// use explicit type casts here to avoid import() calls in rolled-up d.ts
const render = ((...args) => {
    ensureRenderer().render(...args);
});
const hydrate = ((...args) => {
    ensureHydrationRenderer().hydrate(...args);
});
const createApp = ((...args) => {
    const app = ensureRenderer().createApp(...args);
    if ((true)) {
        injectNativeTagCheck(app);
        injectCompilerOptionsCheck(app);
    }
    const { mount } = app;
    app.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (!container)
            return;
        const component = app._component;
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isFunction)(component) && !component.render && !component.template) {
            // __UNSAFE__
            // Reason: potential execution of JS expressions in in-DOM template.
            // The user must make sure the in-DOM template is trusted. If it's
            // rendered by the server, the template should not contain any user data.
            component.template = container.innerHTML;
        }
        // clear content before mounting
        container.innerHTML = '';
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
            container.removeAttribute('v-cloak');
            container.setAttribute('data-v-app', '');
        }
        return proxy;
    };
    return app;
});
const createSSRApp = ((...args) => {
    const app = ensureHydrationRenderer().createApp(...args);
    if ((true)) {
        injectNativeTagCheck(app);
        injectCompilerOptionsCheck(app);
    }
    const { mount } = app;
    app.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (container) {
            return mount(container, true, container instanceof SVGElement);
        }
    };
    return app;
});
function injectNativeTagCheck(app) {
    // Inject `isNativeTag`
    // this is used for component name validation (dev only)
    Object.defineProperty(app.config, 'isNativeTag', {
        value: (tag) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isHTMLTag)(tag) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isSVGTag)(tag),
        writable: false
    });
}
// dev only
function injectCompilerOptionsCheck(app) {
    if ((0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.isRuntimeOnly)()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, 'isCustomElement', {
            get() {
                return isCustomElement;
            },
            set() {
                (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`The \`isCustomElement\` config option is deprecated. Use ` +
                    `\`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using ` +
            `a build of Vue.js that includes the runtime compiler (aka "full build"). ` +
            `Since you are using the runtime-only build, \`compilerOptions\` ` +
            `must be passed to \`@vue/compiler-dom\` in the build setup instead.\n` +
            `- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.\n` +
            `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n` +
            `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app.config, 'compilerOptions', {
            get() {
                (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(msg);
                return compilerOptions;
            },
            set() {
                (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__.isString)(container)) {
        const res = document.querySelector(container);
        if (( true) && !res) {
            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`Failed to mount app: mount target selector "${container}" returned null.`);
        }
        return res;
    }
    if (( true) &&
        window.ShadowRoot &&
        container instanceof window.ShadowRoot &&
        container.mode === 'closed') {
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.warn)(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
    }
    return container;
}
let ssrDirectiveInitialized = false;
/**
 * @internal
 */
const initDirectivesForSSR = () => {
        if (!ssrDirectiveInitialized) {
            ssrDirectiveInitialized = true;
            initVModelForSSR();
            initVShowForSSR();
        }
    }
    ;




/***/ }),

/***/ "./node_modules/@vue/shared/dist/shared.esm-bundler.js":
/*!*************************************************************!*\
  !*** ./node_modules/@vue/shared/dist/shared.esm-bundler.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EMPTY_ARR": () => (/* binding */ EMPTY_ARR),
/* harmony export */   "EMPTY_OBJ": () => (/* binding */ EMPTY_OBJ),
/* harmony export */   "NO": () => (/* binding */ NO),
/* harmony export */   "NOOP": () => (/* binding */ NOOP),
/* harmony export */   "PatchFlagNames": () => (/* binding */ PatchFlagNames),
/* harmony export */   "camelize": () => (/* binding */ camelize),
/* harmony export */   "capitalize": () => (/* binding */ capitalize),
/* harmony export */   "def": () => (/* binding */ def),
/* harmony export */   "escapeHtml": () => (/* binding */ escapeHtml),
/* harmony export */   "escapeHtmlComment": () => (/* binding */ escapeHtmlComment),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "genPropsAccessExp": () => (/* binding */ genPropsAccessExp),
/* harmony export */   "generateCodeFrame": () => (/* binding */ generateCodeFrame),
/* harmony export */   "getGlobalThis": () => (/* binding */ getGlobalThis),
/* harmony export */   "hasChanged": () => (/* binding */ hasChanged),
/* harmony export */   "hasOwn": () => (/* binding */ hasOwn),
/* harmony export */   "hyphenate": () => (/* binding */ hyphenate),
/* harmony export */   "includeBooleanAttr": () => (/* binding */ includeBooleanAttr),
/* harmony export */   "invokeArrayFns": () => (/* binding */ invokeArrayFns),
/* harmony export */   "isArray": () => (/* binding */ isArray),
/* harmony export */   "isBooleanAttr": () => (/* binding */ isBooleanAttr),
/* harmony export */   "isBuiltInDirective": () => (/* binding */ isBuiltInDirective),
/* harmony export */   "isDate": () => (/* binding */ isDate),
/* harmony export */   "isFunction": () => (/* binding */ isFunction),
/* harmony export */   "isGloballyWhitelisted": () => (/* binding */ isGloballyWhitelisted),
/* harmony export */   "isHTMLTag": () => (/* binding */ isHTMLTag),
/* harmony export */   "isIntegerKey": () => (/* binding */ isIntegerKey),
/* harmony export */   "isKnownHtmlAttr": () => (/* binding */ isKnownHtmlAttr),
/* harmony export */   "isKnownSvgAttr": () => (/* binding */ isKnownSvgAttr),
/* harmony export */   "isMap": () => (/* binding */ isMap),
/* harmony export */   "isModelListener": () => (/* binding */ isModelListener),
/* harmony export */   "isObject": () => (/* binding */ isObject),
/* harmony export */   "isOn": () => (/* binding */ isOn),
/* harmony export */   "isPlainObject": () => (/* binding */ isPlainObject),
/* harmony export */   "isPromise": () => (/* binding */ isPromise),
/* harmony export */   "isReservedProp": () => (/* binding */ isReservedProp),
/* harmony export */   "isSSRSafeAttrName": () => (/* binding */ isSSRSafeAttrName),
/* harmony export */   "isSVGTag": () => (/* binding */ isSVGTag),
/* harmony export */   "isSet": () => (/* binding */ isSet),
/* harmony export */   "isSpecialBooleanAttr": () => (/* binding */ isSpecialBooleanAttr),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "isSymbol": () => (/* binding */ isSymbol),
/* harmony export */   "isVoidTag": () => (/* binding */ isVoidTag),
/* harmony export */   "looseEqual": () => (/* binding */ looseEqual),
/* harmony export */   "looseIndexOf": () => (/* binding */ looseIndexOf),
/* harmony export */   "makeMap": () => (/* binding */ makeMap),
/* harmony export */   "normalizeClass": () => (/* binding */ normalizeClass),
/* harmony export */   "normalizeProps": () => (/* binding */ normalizeProps),
/* harmony export */   "normalizeStyle": () => (/* binding */ normalizeStyle),
/* harmony export */   "objectToString": () => (/* binding */ objectToString),
/* harmony export */   "parseStringStyle": () => (/* binding */ parseStringStyle),
/* harmony export */   "propsToAttrMap": () => (/* binding */ propsToAttrMap),
/* harmony export */   "remove": () => (/* binding */ remove),
/* harmony export */   "slotFlagsText": () => (/* binding */ slotFlagsText),
/* harmony export */   "stringifyStyle": () => (/* binding */ stringifyStyle),
/* harmony export */   "toDisplayString": () => (/* binding */ toDisplayString),
/* harmony export */   "toHandlerKey": () => (/* binding */ toHandlerKey),
/* harmony export */   "toNumber": () => (/* binding */ toNumber),
/* harmony export */   "toRawType": () => (/* binding */ toRawType),
/* harmony export */   "toTypeString": () => (/* binding */ toTypeString)
/* harmony export */ });
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */
function makeMap(str, expectsLowerCase) {
  const map = Object.create(null);
  const list = str.split(',');

  for (let i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];
}
/**
 * dev only flag -> name mapping
 */


const PatchFlagNames = {
  [1
  /* PatchFlags.TEXT */
  ]: `TEXT`,
  [2
  /* PatchFlags.CLASS */
  ]: `CLASS`,
  [4
  /* PatchFlags.STYLE */
  ]: `STYLE`,
  [8
  /* PatchFlags.PROPS */
  ]: `PROPS`,
  [16
  /* PatchFlags.FULL_PROPS */
  ]: `FULL_PROPS`,
  [32
  /* PatchFlags.HYDRATE_EVENTS */
  ]: `HYDRATE_EVENTS`,
  [64
  /* PatchFlags.STABLE_FRAGMENT */
  ]: `STABLE_FRAGMENT`,
  [128
  /* PatchFlags.KEYED_FRAGMENT */
  ]: `KEYED_FRAGMENT`,
  [256
  /* PatchFlags.UNKEYED_FRAGMENT */
  ]: `UNKEYED_FRAGMENT`,
  [512
  /* PatchFlags.NEED_PATCH */
  ]: `NEED_PATCH`,
  [1024
  /* PatchFlags.DYNAMIC_SLOTS */
  ]: `DYNAMIC_SLOTS`,
  [2048
  /* PatchFlags.DEV_ROOT_FRAGMENT */
  ]: `DEV_ROOT_FRAGMENT`,
  [-1
  /* PatchFlags.HOISTED */
  ]: `HOISTED`,
  [-2
  /* PatchFlags.BAIL */
  ]: `BAIL`
};
/**
 * Dev only
 */

const slotFlagsText = {
  [1
  /* SlotFlags.STABLE */
  ]: 'STABLE',
  [2
  /* SlotFlags.DYNAMIC */
  ]: 'DYNAMIC',
  [3
  /* SlotFlags.FORWARDED */
  ]: 'FORWARDED'
};
const GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' + 'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' + 'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt';
const isGloballyWhitelisted = /*#__PURE__*/makeMap(GLOBALS_WHITE_LISTED);
const range = 2;

function generateCodeFrame(source, start = 0, end = source.length) {
  // Split the content into individual lines but capture the newline sequence
  // that separated each line. This is important because the actual sequence is
  // needed to properly take into account the full line length for offset
  // comparison
  let lines = source.split(/(\r?\n)/); // Separate the lines and newline sequences into separate arrays for easier referencing

  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
  lines = lines.filter((_, idx) => idx % 2 === 0);
  let count = 0;
  const res = [];

  for (let i = 0; i < lines.length; i++) {
    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);

    if (count >= start) {
      for (let j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) continue;
        const line = j + 1;
        res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
        const lineLength = lines[j].length;
        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;

        if (j === i) {
          // push underline
          const pad = start - (count - (lineLength + newLineSeqLength));
          const length = Math.max(1, end > count ? lineLength - pad : end - start);
          res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));
        } else if (j > i) {
          if (end > count) {
            const length = Math.max(Math.min(end - count, lineLength), 1);
            res.push(`   |  ` + '^'.repeat(length));
          }

          count += lineLength + newLineSeqLength;
        }
      }

      break;
    }
  }

  return res.join('\n');
}

function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};

    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);

      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }

    return res;
  } else if (isString(value)) {
    return value;
  } else if (isObject(value)) {
    return value;
  }
}

const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[\0-\uFFFF]*?\*\//g;

function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, '').split(listDelimiterRE).forEach(item => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}

function stringifyStyle(styles) {
  let ret = '';

  if (!styles || isString(styles)) {
    return ret;
  }

  for (const key in styles) {
    const value = styles[key];
    const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);

    if (isString(value) || typeof value === 'number') {
      // only render valid values
      ret += `${normalizedKey}:${value};`;
    }
  }

  return ret;
}

function normalizeClass(value) {
  let res = '';

  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);

      if (normalized) {
        res += normalized + ' ';
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + ' ';
      }
    }
  }

  return res.trim();
}

function normalizeProps(props) {
  if (!props) return null;
  let {
    class: klass,
    style
  } = props;

  if (klass && !isString(klass)) {
    props.class = normalizeClass(klass);
  }

  if (style) {
    props.style = normalizeStyle(style);
  }

  return props;
} // These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element


const HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' + 'header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,' + 'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' + 'data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,' + 'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' + 'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' + 'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' + 'option,output,progress,select,textarea,details,dialog,menu,' + 'summary,template,blockquote,iframe,tfoot'; // https://developer.mozilla.org/en-US/docs/Web/SVG/Element

const SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' + 'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' + 'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' + 'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' + 'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' + 'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' + 'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' + 'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' + 'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' + 'text,textPath,title,tspan,unknown,use,view';
const VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */

const isHTMLTag = /*#__PURE__*/makeMap(HTML_TAGS);
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */

const isSVGTag = /*#__PURE__*/makeMap(SVG_TAGS);
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */

const isVoidTag = /*#__PURE__*/makeMap(VOID_TAGS);
/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */

const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */

const isBooleanAttr = /*#__PURE__*/makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. `<select multiple>` compiles to `{ multiple: '' }`
 */

function includeBooleanAttr(value) {
  return !!value || value === '';
}

const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};

function isSSRSafeAttrName(name) {
  if (attrValidationCache.hasOwnProperty(name)) {
    return attrValidationCache[name];
  }

  const isUnsafe = unsafeAttrCharRE.test(name);

  if (isUnsafe) {
    console.error(`unsafe attribute name: ${name}`);
  }

  return attrValidationCache[name] = !isUnsafe;
}

const propsToAttrMap = {
  acceptCharset: 'accept-charset',
  className: 'class',
  htmlFor: 'for',
  httpEquiv: 'http-equiv'
};
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */

const isKnownHtmlAttr = /*#__PURE__*/makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */

const isKnownSvgAttr = /*#__PURE__*/makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` + `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` + `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` + `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` + `color-interpolation-filters,color-profile,color-rendering,` + `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` + `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` + `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` + `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` + `font-family,font-size,font-size-adjust,font-stretch,font-style,` + `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` + `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` + `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` + `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` + `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` + `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` + `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` + `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` + `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` + `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` + `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` + `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` + `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` + `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` + `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` + `specularConstant,specularExponent,speed,spreadMethod,startOffset,` + `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` + `strikethrough-position,strikethrough-thickness,string,stroke,` + `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` + `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` + `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` + `text-decoration,text-rendering,textLength,to,transform,transform-origin,` + `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` + `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` + `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` + `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` + `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` + `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` + `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
const escapeRE = /["'&<>]/;

function escapeHtml(string) {
  const str = '' + string;
  const match = escapeRE.exec(str);

  if (!match) {
    return str;
  }

  let html = '';
  let escaped;
  let index;
  let lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escaped = '&quot;';
        break;

      case 38:
        // &
        escaped = '&amp;';
        break;

      case 39:
        // '
        escaped = '&#39;';
        break;

      case 60:
        // <
        escaped = '&lt;';
        break;

      case 62:
        // >
        escaped = '&gt;';
        break;

      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.slice(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escaped;
  }

  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
} // https://www.w3.org/TR/html52/syntax.html#comments


const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;

function escapeHtmlComment(src) {
  return src.replace(commentStripRE, '');
}

function looseCompareArrays(a, b) {
  if (a.length !== b.length) return false;
  let equal = true;

  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }

  return equal;
}

function looseEqual(a, b) {
  if (a === b) return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);

  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }

  aValidType = isSymbol(a);
  bValidType = isSymbol(b);

  if (aValidType || bValidType) {
    return a === b;
  }

  aValidType = isArray(a);
  bValidType = isArray(b);

  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }

  aValidType = isObject(a);
  bValidType = isObject(b);

  if (aValidType || bValidType) {
    /* istanbul ignore if: this if will probably never be called */
    if (!aValidType || !bValidType) {
      return false;
    }

    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;

    if (aKeysCount !== bKeysCount) {
      return false;
    }

    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);

      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }

  return String(a) === String(b);
}

function looseIndexOf(arr, val) {
  return arr.findIndex(item => looseEqual(item, val));
}
/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */


const toDisplayString = val => {
  return isString(val) ? val : val == null ? '' : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};

const replacer = (_key, val) => {
  // can't use isRef here since @vue/shared has no deps
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {
        entries[`${key} =>`] = val;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
    return String(val);
  }

  return val;
};

const EMPTY_OBJ =  true ? Object.freeze({}) : 0;
const EMPTY_ARR =  true ? Object.freeze([]) : 0;

const NOOP = () => {};
/**
 * Always return false.
 */


const NO = () => false;

const onRE = /^on[^a-z]/;

const isOn = key => onRE.test(key);

const isModelListener = key => key.startsWith('onUpdate:');

const extend = Object.assign;

const remove = (arr, el) => {
  const i = arr.indexOf(el);

  if (i > -1) {
    arr.splice(i, 1);
  }
};

const hasOwnProperty = Object.prototype.hasOwnProperty;

const hasOwn = (val, key) => hasOwnProperty.call(val, key);

const isArray = Array.isArray;

const isMap = val => toTypeString(val) === '[object Map]';

const isSet = val => toTypeString(val) === '[object Set]';

const isDate = val => toTypeString(val) === '[object Date]';

const isFunction = val => typeof val === 'function';

const isString = val => typeof val === 'string';

const isSymbol = val => typeof val === 'symbol';

const isObject = val => val !== null && typeof val === 'object';

const isPromise = val => {
  return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};

const objectToString = Object.prototype.toString;

const toTypeString = value => objectToString.call(value);

const toRawType = value => {
  // extract "RawType" from strings like "[object RawType]"
  return toTypeString(value).slice(8, -1);
};

const isPlainObject = val => toTypeString(val) === '[object Object]';

const isIntegerKey = key => isString(key) && key !== 'NaN' && key[0] !== '-' && '' + parseInt(key, 10) === key;

const isReservedProp = /*#__PURE__*/makeMap( // the leading comma is intentional so empty string "" is also included
',key,ref,ref_for,ref_key,' + 'onVnodeBeforeMount,onVnodeMounted,' + 'onVnodeBeforeUpdate,onVnodeUpdated,' + 'onVnodeBeforeUnmount,onVnodeUnmounted');
const isBuiltInDirective = /*#__PURE__*/makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo');

const cacheStringFunction = fn => {
  const cache = Object.create(null);
  return str => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};

const camelizeRE = /-(\w)/g;
/**
 * @private
 */

const camelize = cacheStringFunction(str => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '');
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */

const hyphenate = cacheStringFunction(str => str.replace(hyphenateRE, '-$1').toLowerCase());
/**
 * @private
 */

const capitalize = cacheStringFunction(str => str.charAt(0).toUpperCase() + str.slice(1));
/**
 * @private
 */

const toHandlerKey = cacheStringFunction(str => str ? `on${capitalize(str)}` : ``); // compare whether a value has changed, accounting for NaN.

const hasChanged = (value, oldValue) => !Object.is(value, oldValue);

const invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};

const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};

const toNumber = val => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};

let _globalThis;

const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {});
};

const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;

function genPropsAccessExp(name) {
  return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
}



/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=script&lang=js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=script&lang=js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/vueleton/lib/util.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'vl-dropdown',
  props: {
    /**
     * If true, the dropdown menu will close on menu clicked.
     */
    closeAfterClick: {
      type: Boolean,
      default: false
    },

    /**
     * If true, the dropdown menu will open on toggle focused.
     */
    focusOpen: {
      type: Boolean,
      default: false
    },

    /**
     * Set alignment of the dropdown menu, either 'left' or 'right'.
     */
    align: {
      type: String,
      default: 'left'
    },

    /**
     * Set direction of the dropdown menu, either 'down' or 'up'.
     */
    direction: {
      type: String,
      default: 'down'
    },

    /**
     * Content of dropdown, can be overriden by `v-slot:content`.
     */
    content: {
      type: String
    },

    /**
     * Whether to show dropdown.
     */
    [_util__WEBPACK_IMPORTED_MODULE_0__.modelFields.value]: {
      type: Boolean,
      default: false
    }
  },
  emits: [_util__WEBPACK_IMPORTED_MODULE_0__.modelFields.update],

  data() {
    return {
      open: this.modelValue
    };
  },

  watch: {
    [_util__WEBPACK_IMPORTED_MODULE_0__.modelFields.value](value) {
      this.open = value;
    },

    open(value, prevValue) {
      if (value === prevValue) return;

      if (value) {
        document.addEventListener('mousedown', this.onClose, false);
      } else {
        document.removeEventListener('mousedown', this.onClose, false);
      }
    }

  },
  methods: {
    onToggle() {
      this.open = !this.open;
      this.$emit(_util__WEBPACK_IMPORTED_MODULE_0__.modelFields.update, this.open);
    },

    onClose() {
      if (this.open) this.onToggle();
    },

    onFocus() {
      if (this.focusOpen && !this.open) this.onToggle();
    },

    onBlur() {
      const {
        activeElement
      } = document;

      if (activeElement !== document.body && !this.$el.contains(activeElement)) {
        this.onClose();
      }
    },

    onMouseUp() {
      if (this.closeAfterClick) this.onClose();
    }

  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/modal/modal.vue?vue&type=script&lang=js":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/modal/modal.vue?vue&type=script&lang=js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const components = {};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'vl-modal',
  components,
  props: {
    modalClass: {
      type: String,
      default: ''
    },
    backdropClass: {
      type: String,
      default: ''
    },
    transition: {
      type: String,
      default: ''
    },
    show: {
      type: Boolean,
      default: false
    },
    backdrop: {
      type: [Object, Boolean],
      default: () => ({
        close: true
      })
    }
  },
  emits: ['close', 'afterLeave'],
  methods: {
    onBackdropClick() {
      if (this.backdrop === true || this.backdrop.close) {
        this.$emit('close', {
          source: 'backdrop'
        });
      }
    },

    onAfterLeave() {
      this.$emit('afterLeave');
    }

  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=script&lang=js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=script&lang=js ***!
  \************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  props: {
    placement: {
      type: String,
      default: 'auto-y'
    },
    align: {
      type: String,
      default: 'center' // start | center | end

    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=script&lang=js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=script&lang=js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tooltip_content_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltip-content.vue */ "./node_modules/vueleton/lib/tooltip/tooltip-content.vue");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/vueleton/lib/util.js");


const components = {
  TooltipContent: _tooltip_content_vue__WEBPACK_IMPORTED_MODULE_0__["default"]
};
const tooltips = [];
const throttledUpdate = throttleWithRAF(updateTooltips);
document.addEventListener('scroll', throttledUpdate, true);
window.addEventListener('resize', throttledUpdate, false);

function throttleWithRAF(func) {
  let running = false;

  function exec() {
    func();
    running = false;
  }

  return () => {
    if (running) return;
    requestAnimationFrame(exec);
    running = true;
  };
}

function updateTooltips() {
  tooltips.forEach(tooltip => {
    tooltip.render();
  });
}

function addTooltip(tooltip) {
  tooltips.push(tooltip);
}

function removeTooltip(tooltip) {
  tooltip.clean();
  const i = tooltips.indexOf(tooltip);
  if (i >= 0) tooltips.splice(i, 1);
}

const PLACEMENT_TOP = 'top';
const PLACEMENT_BOTTOM = 'bottom';
const PLACEMENT_LEFT = 'left';
const PLACEMENT_RIGHT = 'right';
const PLACEMENT_AUTO_Y = 'auto-y';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'vl-tooltip',
  components,
  props: {
    active: {
      type: Boolean,
      default: false
    },
    noMouse: {
      type: Boolean,
      default: false
    },
    placement: {
      type: String,
      default: PLACEMENT_AUTO_Y
    },
    align: {
      type: String,
      default: 'center' // start | center | end

    },
    content: {
      type: String
    },
    gap: {
      type: Number,
      default: 10
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },

  data() {
    return {
      hovered: false,
      tooltip: null
    };
  },

  computed: {
    shouldHandleMouse() {
      return !this.disabled && !this.noMouse;
    },

    shouldShow() {
      return !this.disabled && (this.active || this.hovered);
    }

  },
  watch: {
    shouldShow: 'render',
    placement: 'render',
    align: 'render',
    content: 'render',
    gap: 'render'
  },
  methods: {
    onEnter() {
      if (this.shouldHandleMouse) this.hovered = true;
    },

    onLeave() {
      this.hovered = false;
    },

    render() {
      if (this.shouldShow) this.update();else this.clean();
    },

    update() {
      const rect = this.$el.getBoundingClientRect();
      let {
        pageXOffset: left,
        pageYOffset: top
      } = window;
      let {
        placement
      } = this;

      if (placement === PLACEMENT_AUTO_Y) {
        placement = rect.bottom < document.body.clientHeight / 2 ? PLACEMENT_BOTTOM : PLACEMENT_TOP;
      }

      if (placement === PLACEMENT_TOP || placement === PLACEMENT_BOTTOM) {
        left += rect.left + rect.width / 2;
        top += placement === PLACEMENT_TOP ? rect.top - this.gap : rect.bottom + this.gap;
      } else if (placement === PLACEMENT_LEFT || placement === PLACEMENT_RIGHT) {
        top += rect.top + rect.height / 2;
        left += placement === PLACEMENT_LEFT ? rect.left - this.gap : rect.right + this.gap;
      } else if (true) {
        console.warn(`Unknown placement: ${placement}`);
      }

      this.tooltip = {
        placement,
        align: this.align,
        style: {
          top: `${top}px`,
          left: `${left}px`
        }
      };
    },

    clean() {
      if (this.tooltip) {
        this.tooltip = null;
      }
    }

  },

  created() {
    addTooltip(this);
  },

  mounted() {
    this.render();
  },

  [_util__WEBPACK_IMPORTED_MODULE_1__.lifecycleBeforeUnmount]() {
    removeTooltip(this);
  }

});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=template&id=1006cbb1":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=template&id=1006cbb1 ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(["vl-dropdown", `vl-dropdown-${$props.align} vl-dropdown-${$props.direction}`]),
    onMouseup: _cache[4] || (_cache[4] = (...args) => $options.onMouseUp && $options.onMouseUp(...args))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
    class: "vl-dropdown-toggle",
    onClick: _cache[0] || (_cache[0] = (...args) => $options.onToggle && $options.onToggle(...args)),
    onFocus: _cache[1] || (_cache[1] = (...args) => $options.onFocus && $options.onFocus(...args)),
    onBlur: _cache[2] || (_cache[2] = (...args) => $options.onBlur && $options.onBlur(...args))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")], 32
  /* HYDRATE_EVENTS */
  ), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", {
    class: "vl-dropdown-menu",
    onMousedown: _cache[3] || (_cache[3] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)(() => {}, ["stop"]))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "content", {}, () => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.content), 1
  /* TEXT */
  )])], 544
  /* HYDRATE_EVENTS, NEED_PATCH */
  ), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, $data.open]])], 34
  /* CLASS, HYDRATE_EVENTS */
  );
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/modal/modal.vue?vue&type=template&id=7b1ae4a6":
/*!****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/modal/modal.vue?vue&type=template&id=7b1ae4a6 ***!
  \****************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Teleport, {
    to: "body"
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {
    name: $props.transition,
    onAfterLeave: $options.onAfterLeave,
    appear: ""
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [$props.show ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
      key: 0,
      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(`vl-modal ${$props.modalClass}`)
    }, [$props.backdrop ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
      key: 0,
      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(`vl-modal-backdrop ${$props.backdropClass}`),
      onClick: _cache[0] || (_cache[0] = (...args) => $options.onBackdropClick && $options.onBackdropClick(...args))
    }, null, 2
    /* CLASS */
    )) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")], 2
    /* CLASS */
    )) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true)]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["name", "onAfterLeave"])]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=template&id=f8eacef6":
/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=template&id=f8eacef6 ***!
  \****************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");


const _hoisted_1 = /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("i", null, null, -1
/* HOISTED */
);

const _hoisted_2 = {
  class: "vl-tooltip-wrap"
};
const _hoisted_3 = {
  class: "vl-tooltip-content"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(["vl-tooltip", `vl-tooltip-${$props.placement} vl-tooltip-align-${$props.align}`])
  }, [_hoisted_1, (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_2, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_3, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")])])], 2
  /* CLASS */
  );
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=template&id=8b21f04e":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=template&id=8b21f04e ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_TooltipContent = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)("TooltipContent");

  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("span", {
    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)({
      disabled: $props.disabled
    }),
    onMouseenter: _cache[0] || (_cache[0] = (...args) => $options.onEnter && $options.onEnter(...args)),
    onMouseleave: _cache[1] || (_cache[1] = (...args) => $options.onLeave && $options.onLeave(...args)),
    onTipshow: _cache[2] || (_cache[2] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($event => $data.hovered = true, ["stop"])),
    onTiphide: _cache[3] || (_cache[3] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($event => $data.hovered = false, ["stop"])),
    onTiptoggle: _cache[4] || (_cache[4] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($event => $data.hovered = !$data.hovered, ["stop"]))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default"), $data.tooltip ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Teleport, {
    key: 0,
    to: "body"
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_TooltipContent, {
    placement: $data.tooltip.placement,
    align: $data.tooltip.align,
    style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)($data.tooltip.style)
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "content", {}, () => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.content), 1
    /* TEXT */
    )])]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["placement", "align", "style"])])) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true)], 34
  /* CLASS, HYDRATE_EVENTS */
  );
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=template&id=4dacab06":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=template&id=4dacab06 ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const _hoisted_1 = {
  class: "flex flex-col"
};
const _hoisted_2 = {
  class: "editor-code flex-auto",
  ref: "code"
};
const _hoisted_3 = {
  class: "frame-block editor-search flex"
};
const _hoisted_4 = ["textContent"];
const _hoisted_5 = ["textContent"];
const _hoisted_6 = ["title"];

const _hoisted_7 = /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("button", {
  type: "submit"
}, ">", -1
/* HOISTED */
);

const _hoisted_8 = ["textContent"];
const _hoisted_9 = ["textContent"];
const _hoisted_10 = ["textContent"];
function render(_ctx, _cache) {
  const _component_tooltip = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)("tooltip");

  const _component_toggle_button = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)("toggle-button");

  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_2, null, 512
  /* NEED_PATCH */
  ), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_3, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("form", {
    onSubmit: _cache[1] || (_cache[1] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($event => _ctx.goToLine(), ["prevent"]))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", {
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(_ctx.i18n('labelLineNumber'))
  }, null, 8
  /* PROPS */
  , _hoisted_4), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {
    type: "text",
    class: "w-1",
    "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.jumpPos = $event)
  }, null, 512
  /* NEED_PATCH */
  ), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, _ctx.jumpPos]])], 32
  /* HYDRATE_EVENTS */
  ), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("form", {
    class: "flex-1",
    onSubmit: _cache[4] || (_cache[4] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($event => _ctx.findNext(), ["prevent"]))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", {
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(_ctx.i18n('labelSearch'))
  }, null, 8
  /* PROPS */
  , _hoisted_5), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_tooltip, {
    content: _ctx.tooltip.find,
    class: "flex-1"
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(" id is required for the built-in autocomplete using entered values "), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {
      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)({
        'is-error': !_ctx.search.hasResult
      }),
      title: _ctx.search.error,
      type: "search",
      id: "editor-search",
      ref: "search",
      "onUpdate:modelValue": _cache[2] || (_cache[2] = $event => _ctx.search.query = $event)
    }, null, 10
    /* CLASS, PROPS */
    , _hoisted_6), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, _ctx.search.query]])]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["content"]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_tooltip, {
    content: _ctx.tooltip.findPrev
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("button", {
      type: "button",
      onClick: _cache[3] || (_cache[3] = $event => _ctx.findNext(1))
    }, "<")]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["content"]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_tooltip, {
    content: _ctx.tooltip.findNext
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [_hoisted_7]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["content"])], 32
  /* HYDRATE_EVENTS */
  ), !_ctx.readOnly ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("form", {
    key: 0,
    class: "flex-1",
    onSubmit: _cache[7] || (_cache[7] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($event => _ctx.replace(), ["prevent"]))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", {
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(_ctx.i18n('labelReplace'))
  }, null, 8
  /* PROPS */
  , _hoisted_8), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(" id is required for the built-in autocomplete using entered values "), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {
    class: "flex-1",
    type: "search",
    id: "editor-replace",
    "onUpdate:modelValue": _cache[5] || (_cache[5] = $event => _ctx.search.replace = $event)
  }, null, 512
  /* NEED_PATCH */
  ), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, _ctx.search.replace]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_tooltip, {
    content: _ctx.tooltip.replace
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("button", {
      type: "submit",
      textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(_ctx.i18n('buttonReplace'))
    }, null, 8
    /* PROPS */
    , _hoisted_9)]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["content"]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_tooltip, {
    content: _ctx.tooltip.replaceAll
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("button", {
      type: "button",
      textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(_ctx.i18n('buttonReplaceAll')),
      onClick: _cache[6] || (_cache[6] = $event => _ctx.replace(1))
    }, null, 8
    /* PROPS */
    , _hoisted_10)]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["content"])], 32
  /* HYDRATE_EVENTS */
  )) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", null, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_tooltip, {
    content: _ctx.i18n('searchUseRegex')
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_toggle_button, {
      modelValue: _ctx.search.options.useRegex,
      "onUpdate:modelValue": _cache[8] || (_cache[8] = $event => _ctx.search.options.useRegex = $event)
    }, {
      default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(".*")]),
      _: 1
      /* STABLE */

    }, 8
    /* PROPS */
    , ["modelValue"])]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["content"]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_tooltip, {
    content: _ctx.i18n('searchCaseSensitive')
  }, {
    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_toggle_button, {
      modelValue: _ctx.search.options.caseSensitive,
      "onUpdate:modelValue": _cache[9] || (_cache[9] = $event => _ctx.search.options.caseSensitive = $event)
    }, {
      default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)("Aa")]),
      _: 1
      /* STABLE */

    }, 8
    /* PROPS */
    , ["modelValue"])]),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["content"])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("button", {
    onClick: _cache[10] || (_cache[10] = (...args) => _ctx.clearSearch && _ctx.clearSearch(...args))
  }, "×")], 512
  /* NEED_PATCH */
  ), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, _ctx.search.show]])]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=template&id=2c99f1b0":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=template&id=2c99f1b0 ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const _hoisted_1 = {
  class: "edit-externals flex flex-col"
};
const _hoisted_2 = ["data-has-main"];
const _hoisted_3 = ["onClick"];
const _hoisted_4 = ["textContent"];
const _hoisted_5 = {
  class: "ellipsis flex-1"
};
const _hoisted_6 = ["href"];
const _hoisted_7 = ["textContent"];
const _hoisted_8 = ["textContent"];
const _hoisted_9 = {
  class: "contents pos-rel flex-1"
};
const _hoisted_10 = ["src"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_1, [!$props.install || $setup.all.length > 1 ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
    key: 0,
    class: "select",
    "data-has-main": $props.install ? '' : null
  }, [((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($setup.all, ([type, url, contents], i) => {
    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("dl", {
      key: i,
      class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(["flex", {
        active: $setup.index === i,
        loading: $props.install && i && contents == null,
        error: contents === false
      }]),
      onClick: $event => contents !== false && ($setup.index = i)
    }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("dt", {
      textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(type)
    }, null, 8
    /* PROPS */
    , _hoisted_4), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("dd", _hoisted_5, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("a", {
      href: url,
      target: "_blank"
    }, "↗", 8
    /* PROPS */
    , _hoisted_6), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", {
      textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(decodeURIComponent(url))
    }, null, 8
    /* PROPS */
    , _hoisted_7)]), contents ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("dd", {
      key: 0,
      textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($setup.formatLength(contents, type)),
      class: "ml-2"
    }, null, 8
    /* PROPS */
    , _hoisted_8)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true)], 10
    /* CLASS, PROPS */
    , _hoisted_3);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 8
  /* PROPS */
  , _hoisted_2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_9, [$setup.data.image ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("img", {
    key: 0,
    src: $setup.data.image
  }, null, 8
  /* PROPS */
  , _hoisted_10)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)($setup["VmCode"], {
    class: "abs-full",
    value: $setup.data.code,
    ref: "code",
    readOnly: "",
    "cm-options": $props.cmOptions,
    mode: $setup.data.mode,
    commands: $props.commands
  }, null, 8
  /* PROPS */
  , ["value", "cm-options", "mode", "commands"]), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, !$setup.data.image]])])]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/icon.vue?vue&type=template&id=3e2bd9ee":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/icon.vue?vue&type=template&id=3e2bd9ee ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const _hoisted_1 = {
  class: "icon"
};
const _hoisted_2 = ["xlink:href"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("svg", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("use", {
    "xlink:href": `#${$props.name}`
  }, null, 8
  /* PROPS */
  , _hoisted_2)]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/locale-group.vue?vue&type=template&id=3739aa5c":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/locale-group.vue?vue&type=template&id=3739aa5c ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("span", null, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($options.parts[0]) + " ", 1
  /* TEXT */
  ), (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)(" " + (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($options.parts[1]), 1
  /* TEXT */
  )]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=template&id=e93248b2":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=template&id=e93248b2 ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const _hoisted_1 = {
  class: "message modal-content"
};
const _hoisted_2 = {
  class: "message-body"
};
const _hoisted_3 = ["textContent"];
const _hoisted_4 = ["textContent"];
const _hoisted_5 = {
  class: "mr-1c"
};
const _hoisted_6 = ["type", "textContent", "onClick"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_2, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("p", {
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($setup.content.title)
  }, null, 8
  /* PROPS */
  , _hoisted_3), $setup.content.desc ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("p", {
    key: 0,
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($setup.content.desc)
  }, null, 8
  /* PROPS */
  , _hoisted_4)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true)]), $props.message.buttons ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("form", {
    key: 0,
    onSubmit: _cache[1] || (_cache[1] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)(() => {}, ["prevent"]))
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(" eslint-disable vue/no-mutating-props "), $props.message.input !== false ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("input", {
    key: 0,
    ref: "refInput",
    class: "mb-1",
    type: "text",
    "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => $props.message.input = $event)
  }, null, 512
  /* NEED_PATCH */
  )), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $props.message.input]]) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(" eslint-enable vue/no-mutating-props "), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("div", _hoisted_5, [((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(vue__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderList)($props.message.buttons, (button, index) => {
    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("button", {
      key: index,
      type: button.type || 'button',
      textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(button.text),
      onClick: $event => $setup.onButtonClick(button)
    }, null, 8
    /* PROPS */
    , _hoisted_6);
  }), 128
  /* KEYED_FRAGMENT */
  ))])], 32
  /* HYDRATE_EVENTS */
  )) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true)]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=template&id=7753c22a":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=template&id=7753c22a ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const _hoisted_1 = {
  class: "setting-check"
};
const _hoisted_2 = ["disabled"];
const _hoisted_3 = ["textContent"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("label", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("input", {
    type: "checkbox",
    "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => $data.value = $event),
    disabled: $props.disabled
  }, null, 8
  /* PROPS */
  , _hoisted_2), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelCheckbox, $data.value]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default", {}, () => [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("span", {
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.label)
  }, null, 8
  /* PROPS */
  , _hoisted_3)])]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-text.vue?vue&type=template&id=3d4b389a":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-text.vue?vue&type=template&id=3d4b389a ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const _hoisted_1 = ["disabled", "title", "placeholder", "rows"];
const _hoisted_2 = ["textContent", "disabled"];
const _hoisted_3 = ["textContent", "disabled"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", null, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)("textarea", {
    ref: "text",
    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(["monospace-font", {
      'has-error': $options.parsedData.error
    }]),
    spellcheck: "false",
    "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => $data.value = $event),
    disabled: $props.disabled,
    title: $options.parsedData.error,
    placeholder: $data.placeholder,
    rows: $props.rows || _ctx.calcRows($data.value),
    onChange: _cache[1] || (_cache[1] = (...args) => $options.onChange && $options.onChange(...args))
  }, null, 42
  /* CLASS, PROPS, HYDRATE_EVENTS */
  , _hoisted_1), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, $data.value]]), $props.hasSave ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("button", {
    key: 0,
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(_ctx.i18n('buttonSave')),
    onClick: _cache[2] || (_cache[2] = (...args) => $options.onSave && $options.onSave(...args)),
    disabled: $props.disabled || !$options.canSave
  }, null, 8
  /* PROPS */
  , _hoisted_2)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true), $props.hasReset ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("button", {
    key: 1,
    textContent: (0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)(_ctx.i18n('buttonReset')),
    onClick: _cache[3] || (_cache[3] = (...args) => $options.onReset && $options.onReset(...args)),
    disabled: $props.disabled || !$options.canReset
  }, null, 8
  /* PROPS */
  , _hoisted_3)) : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)("v-if", true), (0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")]);
}

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=template&id=990df92a":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=template&id=990df92a ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const _hoisted_1 = ["onKeypress"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)("div", {
    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)(["toggle-button", {
      active: $props.modelValue
    }]),
    tabindex: "0",
    onKeypress: [(0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)((0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($setup.onToggle, ["exact"]), ["enter"]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withKeys)((0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)($setup.onToggle, ["exact"]), ["space"])],
    onClick: $setup.onToggle
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, "default")], 42
  /* CLASS, PROPS, HYDRATE_EVENTS */
  , _hoisted_1);
}

/***/ }),

/***/ "./node_modules/vueleton/lib/dropdown/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/vueleton/lib/dropdown/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dropdown_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown.vue */ "./node_modules/vueleton/lib/dropdown/dropdown.vue");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_dropdown_vue__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./node_modules/vueleton/lib/modal/index.js":
/*!**************************************************!*\
  !*** ./node_modules/vueleton/lib/modal/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _modal_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal.vue */ "./node_modules/vueleton/lib/modal/modal.vue");
/* harmony import */ var _modal_v3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal-v3 */ "./node_modules/vueleton/lib/modal/modal-v3.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_modal_vue__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./node_modules/vueleton/lib/modal/modal-v3.js":
/*!*****************************************************!*\
  !*** ./node_modules/vueleton/lib/modal/modal-v3.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");
/* harmony import */ var _modal_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modal.vue */ "./node_modules/vueleton/lib/modal/modal.vue");




function showModal(childComponent, props) {
  const data = (0,vue__WEBPACK_IMPORTED_MODULE_1__.reactive)((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props, {
    show: true,
    onAfterLeave: () => {
      app.unmount();
      container.remove();
    }
  }));

  const close = () => {
    data.show = false;
  };

  data.onClose = close;
  const app = (0,vue__WEBPACK_IMPORTED_MODULE_1__.createApp)({
    render: () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)(_modal_vue__WEBPACK_IMPORTED_MODULE_2__["default"], data, () => [(0,vue__WEBPACK_IMPORTED_MODULE_1__.h)(childComponent)])
  });
  const container = document.createElement('div');
  document.body.append(container);
  app.mount(container);
  return {
    close
  };
}

_modal_vue__WEBPACK_IMPORTED_MODULE_2__["default"].show = showModal;

/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/index.js":
/*!****************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tooltip_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltip.vue */ "./node_modules/vueleton/lib/tooltip/tooltip.vue");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_tooltip_vue__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./node_modules/vueleton/lib/util.js":
/*!*******************************************!*\
  !*** ./node_modules/vueleton/lib/util.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lifecycleBeforeUnmount": () => (/* binding */ lifecycleBeforeUnmount),
/* harmony export */   "modelFields": () => (/* binding */ modelFields)
/* harmony export */ });
const modelFields = {
  value: 'modelValue',
  update: 'update:modelValue'
};
const lifecycleBeforeUnmount = 'beforeUnmount';

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=script&lang=js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=script&lang=js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var codemirror_lib_codemirror_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! codemirror/lib/codemirror.css */ "./node_modules/codemirror/lib/codemirror.css");
/* harmony import */ var codemirror_addon_comment_continuecomment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! codemirror/addon/comment/continuecomment */ "./node_modules/codemirror/addon/comment/continuecomment.js");
/* harmony import */ var codemirror_addon_comment_continuecomment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_comment_continuecomment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var codemirror_addon_comment_comment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! codemirror/addon/comment/comment */ "./node_modules/codemirror/addon/comment/comment.js");
/* harmony import */ var codemirror_addon_comment_comment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_comment_comment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! codemirror/addon/edit/matchbrackets */ "./node_modules/codemirror/addon/edit/matchbrackets.js");
/* harmony import */ var codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_matchbrackets__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! codemirror/addon/edit/closebrackets */ "./node_modules/codemirror/addon/edit/closebrackets.js");
/* harmony import */ var codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_closebrackets__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var codemirror_addon_fold_foldcode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! codemirror/addon/fold/foldcode */ "./node_modules/codemirror/addon/fold/foldcode.js");
/* harmony import */ var codemirror_addon_fold_foldcode__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_foldcode__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var codemirror_addon_fold_foldgutter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! codemirror/addon/fold/foldgutter */ "./node_modules/codemirror/addon/fold/foldgutter.js");
/* harmony import */ var codemirror_addon_fold_foldgutter__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_foldgutter__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var codemirror_addon_fold_foldgutter_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! codemirror/addon/fold/foldgutter.css */ "./node_modules/codemirror/addon/fold/foldgutter.css");
/* harmony import */ var codemirror_addon_fold_brace_fold__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! codemirror/addon/fold/brace-fold */ "./node_modules/codemirror/addon/fold/brace-fold.js");
/* harmony import */ var codemirror_addon_fold_brace_fold__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_brace_fold__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var codemirror_addon_fold_comment_fold__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! codemirror/addon/fold/comment-fold */ "./node_modules/codemirror/addon/fold/comment-fold.js");
/* harmony import */ var codemirror_addon_fold_comment_fold__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_comment_fold__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var codemirror_addon_search_match_highlighter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! codemirror/addon/search/match-highlighter */ "./node_modules/codemirror/addon/search/match-highlighter.js");
/* harmony import */ var codemirror_addon_search_match_highlighter__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_search_match_highlighter__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var codemirror_addon_search_searchcursor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! codemirror/addon/search/searchcursor */ "./node_modules/codemirror/addon/search/searchcursor.js");
/* harmony import */ var codemirror_addon_search_searchcursor__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_search_searchcursor__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var codemirror_addon_selection_active_line__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! codemirror/addon/selection/active-line */ "./node_modules/codemirror/addon/selection/active-line.js");
/* harmony import */ var codemirror_addon_selection_active_line__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_selection_active_line__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var codemirror_keymap_sublime__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! codemirror/keymap/sublime */ "./node_modules/codemirror/keymap/sublime.js");
/* harmony import */ var codemirror_keymap_sublime__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(codemirror_keymap_sublime__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var codemirror_addon_hint_show_hint_css__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! codemirror/addon/hint/show-hint.css */ "./node_modules/codemirror/addon/hint/show-hint.css");
/* harmony import */ var codemirror_addon_hint_show_hint__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! codemirror/addon/hint/show-hint */ "./node_modules/codemirror/addon/hint/show-hint.js");
/* harmony import */ var codemirror_addon_hint_show_hint__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_hint_show_hint__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var codemirror_addon_hint_javascript_hint__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! codemirror/addon/hint/javascript-hint */ "./node_modules/codemirror/addon/hint/javascript-hint.js");
/* harmony import */ var codemirror_addon_hint_javascript_hint__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_hint_javascript_hint__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var codemirror_addon_hint_anyword_hint__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! codemirror/addon/hint/anyword-hint */ "./node_modules/codemirror/addon/hint/anyword-hint.js");
/* harmony import */ var codemirror_addon_hint_anyword_hint__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_hint_anyword_hint__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var vueleton_lib_tooltip__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! vueleton/lib/tooltip */ "./node_modules/vueleton/lib/tooltip/index.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_ui_toggle_button__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./src/common/ui/toggle-button */ "./src/common/ui/toggle-button.vue");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./src/common */ "./src/common/index.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_object__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./src/common/object */ "./src/common/object.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_hook_setting__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./src/common/hook-setting */ "./src/common/hook-setting.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_options__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./src/common/options */ "./src/common/options.js");
/* harmony import */ var _code_autocomplete__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./code-autocomplete */ "./src/common/ui/code-autocomplete.js");
/* harmony import */ var _code_js_mixed_mode__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./code-js-mixed-mode */ "./src/common/ui/code-js-mixed-mode.js");
/* harmony import */ var _code_trailing_spaces__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./code-trailing-spaces */ "./src/common/ui/code-trailing-spaces.js");





























/* eslint-disable no-control-regex */

let maxDisplayLength; // Make sure this is still the longest line in the doc

const CTRL_OPEN = (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_22__.getUniqId)('\x02'.repeat(256));
const CTRL_CLOSE = '\x03'.repeat(256);
const CTRL_RE = new RegExp(`${CTRL_OPEN}(\\d+)${CTRL_CLOSE}`, 'g');
const PLACEHOLDER_CLS = 'too-long-placeholder'; // To identify our CodeMirror markers we're using a Symbol since it's always unique

const PLACEHOLDER_SYM = Symbol(PLACEHOLDER_CLS);
const cmDefaults = {
  continueComments: true,
  styleActiveLine: true,
  foldGutter: true,
  gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],
  theme: 'default',
  mode: 'javascript-mixed',
  lineNumbers: true,
  matchBrackets: true,
  autoCloseBrackets: true,
  highlightSelectionMatches: true,
  keyMap: 'sublime',

  /* Limiting the max length to avoid delays while CodeMirror tries to make sense of a long line.
   * 100kB is fast enough for the main editor (moreover such long lines are rare in the main script),
   * and is big enough to include most of popular minified libraries for the `@resource/@require` viewer. */
  maxDisplayLength: 100000
};
const cmCommands = (codemirror__WEBPACK_IMPORTED_MODULE_19___default().commands);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  props: {
    active: Boolean,
    readOnly: {
      type: Boolean,
      default: false
    },
    value: {
      type: String,
      default: ''
    },
    mode: String,
    commands: {
      type: Object,
      default: null
    },
    cmOptions: Object
  },
  components: {
    Tooltip: vueleton_lib_tooltip__WEBPACK_IMPORTED_MODULE_20__["default"],
    ToggleButton: _home_runner_work_violentmonkey_violentmonkey_src_common_ui_toggle_button__WEBPACK_IMPORTED_MODULE_21__["default"]
  },

  data() {
    return {
      cmDefaults,
      content: '',
      jumpPos: '',
      search: {
        show: false,
        query: '',
        replace: '',
        hasResult: false,
        options: {
          useRegex: false,
          caseSensitive: false
        }
      },
      tooltip: {
        find: '',
        findPrev: '',
        findNext: '',
        replace: '',
        replaceAll: ''
      }
    };
  },

  watch: {
    active: 'onActive',

    mode(value) {
      this.cm.setOption('mode', value || cmDefaults.mode);
    },

    value: 'updateValue'
  },
  methods: {
    updateValue(value = this.value) {
      const {
        cm
      } = this;
      cm == null ? void 0 : cm.operation(() => {
        cm.setValue(value);
        cm.clearHistory();
        cm.markClean();
        cm.focus();
      });
    },

    onBeforeChange(cm, change) {
      if (this.createPlaceholders(change)) {
        cm.on('change', this.onChange); // triggered before DOM is updated

        change.update == null ? void 0 : change.update(null, null, change.text);
      } // TODO: remove placeholders that belong to a change beyond `undoDepth`

    },

    onChange(cm) {
      cm.off('change', this.onChange);
      this.renderPlaceholders();
    },

    onChanges(cm, [{
      origin
    }]) {
      // No need to report if changed externally via props.value
      if (origin !== 'setValue') {
        this.$emit('code-dirty', !cm.isClean());
      }
    },

    createPlaceholders(change) {
      const {
        line,
        ch
      } = change.from;
      let res = false;
      let len;
      let prefix;
      change.text.forEach((textLine, i) => {
        if (textLine.includes(CTRL_OPEN)) {
          textLine = this.getRealContent(textLine);
        }

        len = textLine.length - maxDisplayLength;
        prefix = len > 0 ? textLine.match(/^\s*/)[0] : '';
        len -= prefix.length;

        if (len > 0 && len - textLine.match(/\s*$/)[0].length > 0) {
          res = true;
          this.placeholderId += 1;
          const id = this.placeholderId;
          const body = textLine.slice(prefix.length);
          const replaced = `${CTRL_OPEN}${id}${CTRL_CLOSE}`;
          this.placeholders.set(id, {
            body,
            el: null,
            line: line + i,
            ch: ch + prefix.length,
            length: replaced.length
          });
          change.text[i] = `${prefix}${replaced}`;
        }
      });
      return res;
    },

    renderPlaceholders() {
      this.placeholders.forEach(p => {
        if (!p.el) {
          const {
            line,
            ch,
            body,
            length
          } = p;
          const {
            cm
          } = this;
          const el = document.createElement('span');
          const marker = cm.markText({
            line,
            ch
          }, {
            line,
            ch: ch + length
          }, {
            replacedWith: el
          });
          marker[PLACEHOLDER_SYM] = true;
          el.className = PLACEHOLDER_CLS;
          el.title = (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_22__.i18n)('editLongLineTooltip');
          el.textContent = `${body.slice(0, maxDisplayLength)}...[${(0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_22__.i18n)('editLongLine')}]`;

          el.onclick = () => {
            if (!`${window.getSelection()}`) {
              cm.setCursor(marker.find().from);
              cm.focus();
            }
          };

          p.el = el;
        }
      });
    },

    initialize(cm) {
      this.cm = cm;
      this.placeholders = new Map();
      this.placeholderId = 0;
      maxDisplayLength = cm.options.maxDisplayLength;
      cm.setOption('readOnly', this.readOnly); // these are active only in the code nav tab

      cm.state.commands = Object.assign({
        // call own methods explicitly to strip `cm` parameter passed by CodeMirror
        find: () => this.find(),
        findNext: () => this.findNext(),
        findPrev: () => this.findNext(1),
        replace: () => this.replace(),
        replaceAll: () => this.replace(1)
      }, this.commands);
      const cmOrigCommands = {};
      const {
        insertTab,
        insertSoftTab
      } = cmCommands;

      for (let _i = 0, _ref = [cm.state.commands, {
        autocomplete() {
          cm.showHint({
            hint: (codemirror__WEBPACK_IMPORTED_MODULE_19___default().hint.autoHintWithFallback)
          });
        },

        cancel: () => {
          if (this.search.show) {
            this.clearSearch();
          } else {
            cm.execCommand(cm.listSelections()[1] ? 'singleSelection' : 'close');
          }
        },

        commentSelection() {
          cm.blockComment(cm.getCursor('from'), cm.getCursor('to'), {
            fullLines: false
          });
        },

        insertTab() {
          // pressing Tab key inside a line with no selection will reuse indent type (tabs/spaces)
          (cm.options.indentWithTabs ? insertTab : insertSoftTab)(cm);
        },

        showHelp: (_this$commands = this.commands) == null ? void 0 : _this$commands.showHelp
      }]; _i < _ref.length; _i++) {
        var _this$commands;

        const cmds = _ref[_i];
        safeCall(_home_runner_work_violentmonkey_violentmonkey_src_common_object__WEBPACK_IMPORTED_MODULE_23__.forEachEntry, cmds, ([key, val]) => {
          cmOrigCommands[key] = cmCommands[key];
          cmCommands[key] = val;
        });
      }

      this.origCommands = cmOrigCommands; // these are active in all nav tabs

      cm.setOption('extraKeys', {
        Esc: 'cancel',
        F1: 'showHelp',
        'Ctrl-Space': 'autocomplete'
      });
      Object.assign((codemirror__WEBPACK_IMPORTED_MODULE_19___default().keyMap.sublime), {
        'Shift-Ctrl-/': 'commentSelection'
      });
      cm.on('keyHandled', (_cm, _name, e) => {
        e.stopPropagation();
      });
      this.cm.on('changes', this.onChanges);
      this.cm.on('beforeChange', this.onBeforeChange);
      if (this.value) this.updateValue();
      this.$emit('ready', cm);
    },

    onActive(state) {
      const onOff = state ? 'on' : 'off';
      this.cm[onOff]('blur', this.onKeyDownToggler);
      this.cm[onOff]('focus', this.onKeyDownToggler);

      if (state) {
        var _this$cm;

        (_this$cm = this.cm) == null ? void 0 : _this$cm.focus();
      } else {
        window.removeEventListener('keydown', this.onKeyDown);
      }
    },

    /* reroute hotkeys back to CM when it isn't focused,
       but ignore `window` blur (`evt` param is absent) */
    onKeyDownToggler(cm, evt) {
      if (evt) {
        window[`${evt.type === 'blur' ? 'add' : 'remove'}EventListener`]('keydown', this.onKeyDown);
      }
    },

    onKeyDown(e) {
      const name = codemirror__WEBPACK_IMPORTED_MODULE_19___default().keyName(e);
      if (!this.cm) return;
      [this.cm.options.extraKeys, this.cm.options.keyMap].some(keyMap => keyMap && this.lookupKey(name, keyMap, e) === 'handled');
    },

    lookupKey(name, keyMap, e) {
      return codemirror__WEBPACK_IMPORTED_MODULE_19___default().lookupKey(name, keyMap, b => {
        if (keyMap === this.cm.options.extraKeys || this.cm.state.commands[b]) {
          e.preventDefault();
          e.stopPropagation();
          this.cm.execCommand(b);
          return true;
        }
      }, this.cm);
    },

    findFillQuery(force) {
      const {
        cm,
        search
      } = this;

      if (!search.query || force) {
        const sel = cm.listSelections(); // use the currently selected text if it's within one line

        if ((sel == null ? void 0 : sel.length) === 1 && sel[0].anchor.line === sel[0].head.line && !sel[0].empty()) {
          const query = cm.getSelection();
          search.queryFilled = !!query;
          search.query = query;
        }

        search.show = true;
      }
    },

    /** @param {VMSearchOptions} opts */
    doSearch(opts) {
      const {
        search
      } = this;
      search.hasResult = !search.query || !!this.doSearchInternal((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, opts, {
        wrapAround: true
      }));
    },

    /**
     * @param {VMSearchOptions} opts
     * @returns {?true}
     */
    doSearchInternal({
      reversed,
      wrapAround,
      pos,
      reuseCursor
    } = {}) {
      const {
        cm,
        search
      } = this;
      const {
        caseSensitive,
        useRegex
      } = search.options;
      let retry = wrapAround ? 2 : 1;

      if (!pos || typeof pos === 'string') {
        pos = cm.getCursor(pos || (reversed ? 'from' : 'to'));
      }

      do {
        let cur;

        if (reuseCursor) {
          cur = search.cursor;
        } else {
          let {
            query
          } = search;

          if (useRegex) {
            try {
              query = new RegExp(query, caseSensitive ? '' : 'gi');
              search.error = null;
            } catch (err) {
              search.error = err;
              return;
            }
          }

          cur = cm.getSearchCursor(query, pos, {
            caseFold: !caseSensitive
          });
          search.cursor = cur;
        }

        while (cur.find(reversed)) {
          const from = cur.from();
          const to = cur.to();

          if (!cm.findMarks(from, to, m => m[PLACEHOLDER_SYM]).length) {
            this.reveal(from, to);
            cm.setSelection(from, to, {
              scroll: false
            });
            return true;
          }
        }

        retry -= 1;

        if (retry) {
          pos = {
            line: reversed ? cm.doc.size : 0,
            ch: 0
          };
        }
      } while (retry);
    },

    find() {
      this.findFillQuery(true);
      this.doSearch({
        pos: 'from'
      });
      this.$nextTick(() => {
        const {
          search
        } = this.$refs;
        search.select();
        search.focus();
      });
    },

    findNext(reversed) {
      const refocus = !this.search.query || !this.cm.hasFocus();
      this.findFillQuery();
      this.doSearch({
        reversed
      });
      if (refocus) this.$nextTick(() => this.$refs.search.focus());
    },

    clearSearch() {
      this.search.show = false;
      this.cm.focus();
    },

    replace(all) {
      const {
        cm,
        search
      } = this;
      const {
        replace,
        query
      } = search;

      if (!query || !search.show) {
        search.show = true;
        this.find();
        return;
      }

      if (all) {
        cm.operation(() => {
          let opts = {
            pos: {
              line: 0,
              ch: 0
            }
          };

          while (this.doSearchInternal(opts)) {
            search.cursor.replace(replace);
            opts = {
              reuseCursor: true
            };
          }
        });
      } else {
        const {
          sel
        } = cm.doc;
        this.doSearch({
          pos: 'from'
        });

        if (sel.somethingSelected() && sel.equals(cm.doc.sel)) {
          cm.replaceSelection(replace);
          this.doSearch();
        }
      }
    },

    /** Centers the selection if it's outside of viewport so the surrounding context is visible */
    reveal(from, to) {
      const {
        cm
      } = this;
      const vpm = cm.options.viewportMargin;
      const {
        viewFrom,
        viewTo
      } = cm.display;
      const inView = from.line >= viewFrom + vpm && to.line < viewTo - Math.min(cm.doc.size - viewTo, vpm);
      cm.scrollIntoView({
        from,
        to
      }, inView ? cm.defaultTextHeight() * 2 : cm.display.wrapper.clientHeight / 2);
    },

    goToLine() {
      const {
        cm,
        search,
        jumpPos
      } = this;
      let [line, ch] = jumpPos.split(':').map(Number) || [];

      if (line) {
        line -= 1;
        ch = ch ? ch - 1 : 0;
        cm.operation(() => {
          this.reveal({
            line,
            ch
          }, {
            line,
            ch
          });
          cm.setCursor(line, ch, {
            scroll: false
          });
        });
        search.show = false;
        cm.focus();
      }
    },

    onCopy(e) {
      var _this$cm2;

      // CM already prepared the correct text in DOM selection, which is particularly
      // important when using its lineWiseCopyCut option (on by default)
      const sel = `${window.getSelection()}` || ((_this$cm2 = this.cm) == null ? void 0 : _this$cm2.getSelection());
      if (!sel) return;
      const text = this.getRealContent(sel);
      e.clipboardData.setData('text', text);
      e.preventDefault();
      e.stopImmediatePropagation();
    },

    getRealContent(text) {
      const {
        placeholders
      } = this;

      if (text == null) {
        text = (0,_code_trailing_spaces__WEBPACK_IMPORTED_MODULE_28__.killTrailingSpaces)(this.cm, placeholders);
      }

      if (placeholders.size) {
        text = text.replace(CTRL_RE, (_, id) => {
          var _placeholders$get;

          return ((_placeholders$get = placeholders.get(+id)) == null ? void 0 : _placeholders$get.body) || '';
        });
      }

      return text;
    },

    expandKeyMap(res, ...maps) {
      if (!res) {
        const {
          keyMap,
          extraKeys
        } = this.cm.options;
        maps = [extraKeys, keyMap];
        res = {};
      }

      maps.forEach(map => {
        if (typeof map === 'string') map = (codemirror__WEBPACK_IMPORTED_MODULE_19___default().keyMap)[map];
        safeCall(_home_runner_work_violentmonkey_violentmonkey_src_common_object__WEBPACK_IMPORTED_MODULE_23__.forEachEntry, map, ([key, value]) => {
          if (!res[key] && /^[a-z]+$/i.test(value) && (codemirror__WEBPACK_IMPORTED_MODULE_19___default().commands)[value]) {
            res[key] = value;
          }
        });
        if (map.fallthrough) this.expandKeyMap(res, map.fallthrough);
      });
      delete res.fallthrough;
      return res;
    }

  },

  mounted() {
    let userOpts = _home_runner_work_violentmonkey_violentmonkey_src_common_options__WEBPACK_IMPORTED_MODULE_25__["default"].get('editor');
    const theme = _home_runner_work_violentmonkey_violentmonkey_src_common_options__WEBPACK_IMPORTED_MODULE_25__["default"].get('editorThemeName');
    const internalOpts = this.cmOptions || {};

    const opts = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, cmDefaults, userOpts, theme && {
      theme
    }, internalOpts, {
      // internal options passed via `props` have the highest priority
      mode: this.mode || cmDefaults.mode
    });

    codemirror__WEBPACK_IMPORTED_MODULE_19___default().registerHelper('hint', 'autoHintWithFallback', (cm, ...args) => {
      var _cm$getHelper;

      const result = (_cm$getHelper = cm.getHelper(cm.getCursor(), 'hint')) == null ? void 0 : _cm$getHelper(cm, ...args); // fallback to anyword if default returns nothing (or no default)

      return result != null && result.list.length ? result : codemirror__WEBPACK_IMPORTED_MODULE_19___default().hint.anyword(cm, ...args);
    });
    this.initialize(codemirror__WEBPACK_IMPORTED_MODULE_19___default()(this.$refs.code, opts));
    safeCall(_home_runner_work_violentmonkey_violentmonkey_src_common_object__WEBPACK_IMPORTED_MODULE_23__.forEachEntry, this.expandKeyMap(), ([key, cmd]) => {
      const tt = this.tooltip[cmd];
      if (tt != null) this.tooltip[cmd] += `${tt ? ', ' : ''}${key}`;
    }); // pressing Tab key inside a line with no selection will reuse indent size

    if (!opts.tabSize) this.cm.options.tabSize = this.cm.options.indentUnit;
    this.$refs.code.addEventListener('copy', this.onCopy);
    this.onActive(true);
    (0,_home_runner_work_violentmonkey_violentmonkey_src_common_hook_setting__WEBPACK_IMPORTED_MODULE_24__["default"])('editor', newUserOpts => {
      // Use defaults for keys that were present in the old userOpts but got deleted in newUserOpts
      safeCall(_home_runner_work_violentmonkey_violentmonkey_src_common_object__WEBPACK_IMPORTED_MODULE_23__.forEachEntry, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, cmDefaults, newUserOpts), ([key, val]) => {
        if ((key in newUserOpts || key in userOpts) && !(key in internalOpts) && !(0,_home_runner_work_violentmonkey_violentmonkey_src_common_object__WEBPACK_IMPORTED_MODULE_23__.deepEqual)(this.cm.getOption(key), val)) {
          this.cm.setOption(key, val);
        }
      });
      userOpts = newUserOpts;
    });
    (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_22__.sendCmdDirectly)('Storage', ['base', 'getOne', 'editorSearch']).then(prev => {
      const {
        search
      } = this;
      const saveSearchLater = (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_22__.debounce)(() => {
        (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_22__.sendCmdDirectly)('Storage', ['base', 'setOne', 'editorSearch', (0,_home_runner_work_violentmonkey_violentmonkey_src_common_object__WEBPACK_IMPORTED_MODULE_23__.objectPick)(search, ['query', 'replace', 'options'])]);
      }, 500);

      const searchAgain = () => {
        saveSearchLater();
        this.doSearch({
          pos: 'from'
        });
      };

      if (prev) Object.assign(search, prev);
      this.$watch('search.query', () => {
        if (!search.queryFilled) searchAgain();else search.queryFilled = null;
      });
      this.$watch('search.options', searchAgain, {
        deep: true
      });
      this.$watch('search.replace', saveSearchLater);
    });
    (0,_home_runner_work_violentmonkey_violentmonkey_src_common_hook_setting__WEBPACK_IMPORTED_MODULE_24__["default"])('editorThemeName', val => {
      if (val != null && val !== this.cm.options.theme) {
        this.cm.setOption('theme', val);
      }
    });
    this.updateValue();
  },

  beforeUnmount() {
    Object.assign(cmCommands, this.origCommands);
    this.onActive(false);
  }

});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=script&setup=true&lang=js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=script&setup=true&lang=js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/common */ "./src/common/index.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_ui_code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/common/ui/code */ "./src/common/ui/code.vue");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __name: 'externals',
  props: ['value', 'cmOptions', 'commands', 'install'],

  setup(__props, {
    expose
  }) {
    expose();
    const props = __props;
    const dependencies = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)({});
    const index = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(0);
    const data = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)({});
    const all = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      const {
        code,
        deps = dependencies.value,
        url: mainUrl
      } = props.install || {};
      const {
        require = [],
        resources = {}
      } = props.value.meta || {};
      return [...(mainUrl ? [[(0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.i18n)('editNavCode'), mainUrl, code]] : []), ...require.map(url => ['@require', url, deps[`0${url}`]]), ...Object.entries(resources).map(([id, url]) => [`@resource ${id}`, url, deps[`1${url}`]])];
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect)(update);

    async function update() {
      const [type, url] = all.value[index.value];
      if (!url) return;
      const {
        install
      } = props;
      const isMain = install && !index.value;
      const isDataUri = url.startsWith('data:');
      const isReq = !isMain && !isDataUri && type === '@require';
      const depsUrl = `${+!isReq}${url}`;
      let code;
      let contentType;
      let img;
      let raw;

      if (isMain) {
        code = install.code;
      } else {
        if (isDataUri) {
          raw = url;
        } else if (install) {
          raw = install.deps[depsUrl];
        } else {
          var _props$value$custom$p;

          const key = ((_props$value$custom$p = props.value.custom.pathMap) == null ? void 0 : _props$value$custom$p[url]) || url;
          raw = await (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.sendCmdDirectly)('Storage', [isReq ? 'require' : 'cache', 'getOne', key]);
          if (!isReq) raw = (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.makeDataUri)(raw, key);
        }

        if (isReq || !raw) {
          code = raw;
        } else if (raw.startsWith('data:image')) {
          img = raw;
        } else {
          [contentType, code] = raw.split(',');

          if (code == null) {
            var _url$match;

            // workaround for bugs in old VM, see 2e135cf7
            const fileExt = ((_url$match = url.match(/\.(\w+)([#&?]|$)/)) == null ? void 0 : _url$match[1]) || '';
            contentType = /^(png|jpe?g|bmp|svgz?|gz|zip)$/i.test(fileExt) ? '' : `text/${fileExt.toLowerCase()}`;
          } else if (contentType) {
            contentType = contentType.split(/[:;]/)[1];
          }

          code = (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.dataUri2text)(isDataUri ? url : `${contentType};base64,${code}`);
        }
      }

      data.value = {
        img,
        code,
        mode: contentType === 'text/css' || /\.css([#&?]|$)/i.test(url) ? 'css' : null
      };
      dependencies.value[depsUrl] = code;
    }

    function formatLength(str, type) {
      let len = str == null ? void 0 : str.length;

      if (type.startsWith('@resource')) {
        len = Math.round((len - str.indexOf(',') - 1) * 6 / 8); // base64 uses 6 bits out of 8
      }

      return (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.formatByteLength)(len);
    }

    const __returned__ = {
      props,
      dependencies,
      index,
      data,
      all,
      update,
      formatLength,
      computed: vue__WEBPACK_IMPORTED_MODULE_0__.computed,
      ref: vue__WEBPACK_IMPORTED_MODULE_0__.ref,
      watchEffect: vue__WEBPACK_IMPORTED_MODULE_0__.watchEffect,

      get dataUri2text() {
        return _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.dataUri2text;
      },

      get formatByteLength() {
        return _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.formatByteLength;
      },

      get i18n() {
        return _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.i18n;
      },

      get makeDataUri() {
        return _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.makeDataUri;
      },

      get sendCmdDirectly() {
        return _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_1__.sendCmdDirectly;
      },

      get VmCode() {
        return _home_runner_work_violentmonkey_violentmonkey_src_common_ui_code__WEBPACK_IMPORTED_MODULE_2__["default"];
      }

    };
    Object.defineProperty(__returned__, '__isScriptSetup', {
      enumerable: false,
      value: true
    });
    return __returned__;
  }

});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/icon.vue?vue&type=script&lang=js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/icon.vue?vue&type=script&lang=js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const requireIcon = __webpack_require__("./src/resources/svg sync \\.svg$");

requireIcon.keys().map(key => requireIcon(key));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  props: ['name']
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/locale-group.vue?vue&type=script&lang=js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/locale-group.vue?vue&type=script&lang=js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common */ "./src/common/index.js");

const SEP = '\x02';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  props: ['i18nKey'],
  computed: {
    parts() {
      return (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_0__.i18n)(this.i18nKey, [SEP]).split(SEP);
    }

  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=script&lang=js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=script&lang=js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");

const dismissers = [];
window.addEventListener('keydown', e => {
  if (e.keyCode === 27 && dismissers.length) {
    e.stopImmediatePropagation();
    dismissers.pop()();
  }
}, true);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  props: ['message'],

  setup(props, context) {
    const refInput = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();

    const dismiss = () => {
      context.emit('dismiss');
    };

    const onButtonClick = button => {
      const {
        onClick
      } = button;

      if (onClick) {
        if (onClick(props.message.input) !== false) dismiss();
      }
    };

    const onBackdropClick = () => {
      const {
        onBackdropClick
      } = props.message;

      if (onBackdropClick) {
        if (onBackdropClick() !== false) dismiss();
      }
    };

    const content = (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(() => {
      const {
        text
      } = props.message;
      const sep = text.indexOf('\n\n');

      if (sep > 0) {
        return {
          title: text.slice(0, sep),
          desc: text.slice(sep + 2)
        };
      }

      return {
        title: text
      };
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {
      if (refInput.value) {
        (0,vue__WEBPACK_IMPORTED_MODULE_0__.nextTick)(() => {
          refInput.value.focus();
        });
      }

      dismissers.push(dismiss);
      return () => {
        const i = dismissers.indexOf(dismiss);
        if (i >= 0) dismissers.splice(i, 1);
      };
    });
    return {
      refInput,
      content,
      onButtonClick,
      onBackdropClick
    };
  }

});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=script&lang=js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=script&lang=js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../options */ "./src/common/options.js");
/* harmony import */ var _hook_setting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hook-setting */ "./src/common/hook-setting.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  props: {
    name: String,
    label: String,
    disabled: Boolean,
    sync: {
      type: Boolean,
      default: true
    }
  },

  data() {
    return {
      value: null
    };
  },

  methods: {
    onChange(value) {
      // Maxthon is recognized as Chrome in Vue.js.
      // Due to vuejs/vue#4521, model is updated actually on click.
      // Normally `click` event should be fired before `change` event.
      // But Maxthon 4.4 sucks, `change` event is fired first, which breaks everything!
      // And this is fixed in later versions, so we watch the value instead of
      // listening to `change` event to keep the code consistent.
      if (this.sync) {
        _options__WEBPACK_IMPORTED_MODULE_0__["default"].set(this.name, value);
      }

      this.$emit('change', value);
    }

  },

  created() {
    this.revoke = (0,_hook_setting__WEBPACK_IMPORTED_MODULE_1__["default"])(this.name, val => {
      this.value = val;
    });
    this.$watch('value', this.onChange);
  },

  beforeUnmount() {
    if (this.revoke) this.revoke();
  }

});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-text.vue?vue&type=script&lang=js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-text.vue?vue&type=script&lang=js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common/router */ "./src/common/router.js");
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../object */ "./src/common/object.js");
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../options */ "./src/common/options.js");
/* harmony import */ var _options_defaults__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../options-defaults */ "./src/common/options-defaults.js");
/* harmony import */ var _hook_setting__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hook-setting */ "./src/common/hook-setting.js");





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  props: {
    name: String,
    json: Boolean,
    disabled: Boolean,
    hasSave: {
      type: Boolean,
      default: true
    },
    hasReset: Boolean,
    rows: Number
  },

  data() {
    return {
      value: null,
      placeholder: null,
      savedValue: null
    };
  },

  computed: {
    parsedData() {
      let value;
      let error;

      if (this.json) {
        try {
          value = JSON.parse(this.value);
        } catch (e) {
          error = e.message || e;
        }
      } else {
        value = this.value;
      }

      return {
        value,
        error
      };
    },

    isDirty() {
      return !(0,_object__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(this.parsedData.value, this.savedValue || '');
    },

    canSave() {
      return !this.parsedData.error && this.isDirty;
    },

    canReset() {
      return !(0,_object__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(this.parsedData.value, this.defaultValue || '');
    }

  },
  watch: {
    isDirty(state) {
      this.toggleUnloadSentry(state);
    }

  },

  created() {
    const handle = this.json ? value => JSON.stringify(value, null, '  ') // XXX compatible with old data format
    : value => Array.isArray(value) ? value.join('\n') : value || '';
    const defaultValue = (0,_object__WEBPACK_IMPORTED_MODULE_1__.objectGet)(_options_defaults__WEBPACK_IMPORTED_MODULE_3__["default"], this.name);
    this.revoke = (0,_hook_setting__WEBPACK_IMPORTED_MODULE_4__["default"])(this.name, val => {
      this.savedValue = val;
      this.value = handle(val);
    });
    this.defaultValue = defaultValue;
    this.placeholder = handle(defaultValue);
    this.toggleUnloadSentry = (0,_home_runner_work_violentmonkey_violentmonkey_src_common_router__WEBPACK_IMPORTED_MODULE_0__.getUnloadSentry)(() => {
      // Reset to saved value after confirming loss of data.
      // The component won't be destroyed on tab change, so the changes are actually kept.
      // Here we reset it to make sure the user loses the changes when leaving the settings tab.
      // Otherwise the user may be confused about where the changes are after switching back.
      this.value = handle(this.savedValue);
    });
  },

  beforeUnmount() {
    this.revoke();
    this.toggleUnloadSentry(false);
  },

  methods: {
    onChange() {
      // Auto save if there is no `Save` button
      if (!this.hasSave && this.canSave) this.onSave();
    },

    onSave() {
      _options__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.name, this.parsedData.value).catch(this.bgError);
      this.$emit('save');
    },

    onReset() {
      const el = this.$refs.text;
      /* Focusing to allow quick Ctrl-Z to undo.
       * Focusing also prevents layout shift when `reset` button auto-hides. */

      el.focus();

      if (!this.hasSave) {
        // No save button = something rather trivial e.g. the export file name
        _options__WEBPACK_IMPORTED_MODULE_2__["default"].set(this.name, this.defaultValue).catch(this.bgError);
      } else {
        // Save button exists = let the user undo the input
        el.select();

        if (!document.execCommand('insertText', false, this.placeholder)) {
          this.value = this.placeholder;
        }
      }
    },

    bgError(err) {
      this.$emit('bg-error', err);
    }

  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=script&setup=true&lang=js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=script&setup=true&lang=js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __name: 'toggle-button',
  props: ['modelValue'],
  emits: ['update:modelValue'],

  setup(__props, {
    expose,
    emit: emits
  }) {
    expose();
    const props = __props;

    function onToggle() {
      emits('update:modelValue', !props.modelValue);
    }

    const __returned__ = {
      props,
      emits,
      onToggle
    };
    Object.defineProperty(__returned__, '__isScriptSetup', {
      enumerable: false,
      value: true
    });
    return __returned__;
  }

});

/***/ }),

/***/ "./src/common/browser.js":
/*!*******************************!*\
  !*** ./src/common/browser.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var _browser;

let {
  browser
} = global; // Since this also runs in a content script we'll guard against implicit global variables
// for DOM elements with 'id' attribute which is a standard feature, more info:
// https://github.com/mozilla/webextension-polyfill/pull/153
// https://html.spec.whatwg.org/multipage/window-object.html#named-access-on-the-window-object

if (!IS_FIREFOX && !((_browser = browser) != null && _browser.runtime)) {
  const {
    Proxy: SafeProxy
  } = global;
  const {
    bind
  } = SafeProxy;
  const MESSAGE = 'message';
  const STACK = 'stack';

  const isSyncMethodName = key => key === 'addListener' || key === 'removeListener' || key === 'hasListener' || key === 'hasListeners';
  /** API types or enums or literal constants */


  const proxifyValue = (target, key, src, metaVal) => {
    const srcVal = src[key];
    if (srcVal === undefined) return;
    let res;

    if (isFunction(metaVal)) {
      res = metaVal(src, srcVal);
    } else if (isFunction(srcVal)) {
      res = metaVal === 0 || isSyncMethodName(key) || !hasOwnProperty(src, key) ? safeCall(bind, srcVal, src) : wrapAsync(src, srcVal); // eslint-disable-line no-use-before-define
    } else if (isObject(srcVal) && metaVal !== 0) {
      res = proxifyGroup(srcVal, metaVal); // eslint-disable-line no-use-before-define
    } else {
      res = srcVal;
    }

    target[key] = res;
    return res;
  };

  const proxifyGroup = (src, meta) => new SafeProxy({
    __proto__: null
  }, {
    __proto__: null,
    get: (group, key) => {
      var _group$key;

      return (_group$key = group[key]) != null ? _group$key : proxifyValue(group, key, src, meta == null ? void 0 : meta[key]);
    }
  });
  /**
   * @param {Object} thisArg - original API group
   * @param {function} func - original API function
   * @param {WrapAsyncPreprocessorFunc} [preprocessorFunc] - modifies the API callback's response
    */


  const wrapAsync = (thisArg, func, preprocessorFunc) => (...args) => {
    let resolve;
    let reject;
    /* Using resolve/reject to call API in the scope of this function, not inside Promise,
       because an API validation exception is thrown synchronously both in Chrome and FF
       so the caller can use try/catch to detect it like we've been doing in icon.js */

    const promise = new SafePromise((_resolve, _reject) => {
      resolve = _resolve;
      reject = _reject;
    }); // Make the error messages actually useful by capturing a real stack

    const stackInfo = new SafeError(`callstack before invoking ${func.name || 'chrome API'}:`); // A single parameter `result` is fine because we don't use API that return more

    const cb = result => {
      const runtimeErr = chrome.runtime.lastError;
      const err = runtimeErr || (preprocessorFunc ? preprocessorFunc(resolve, result) : resolve(result)); // Prefer `reject` over `throw` which stops debugger in 'pause on exceptions' mode

      if (err) {
        if (!runtimeErr) stackInfo[STACK] = `${err[1]}\n${stackInfo[STACK]}`;
        stackInfo[MESSAGE] = runtimeErr ? err[MESSAGE] : `${err[0]}`;
        stackInfo.isRuntime = !!runtimeErr;
        reject(stackInfo);
      }
    };

    if (false) {} else {
      /* Not process.env.IS_INJECTED */
      // eslint-disable-next-line no-restricted-syntax
      safeCall(func, thisArg, ...args, cb);
    }

    if (false) {}
    return promise;
  };

  const wrapResponse = (result, error) => {
    if (false) {}
    return [result, error && (error[MESSAGE] ? [error[MESSAGE], error[STACK]] : [error, new SafeError()[STACK]])];
  };

  const sendResponseAsync = async (result, sendResponse) => {
    try {
      sendResponse(wrapResponse(await result));
    } catch (err) {
      sendResponse(wrapResponse(0, err));
    }
  };

  const onMessageListener = (listener, message, sender, sendResponse) => {
    if (false) {}

    try {
      const result = listener(message, sender);

      if (result && ( false ? 0
      /* global isPromise */
      : result instanceof Promise)) {
        sendResponseAsync(result, sendResponse);
        return true;
      } else if (result !== undefined) {
        /* WARNING: when using onMessage in extension pages don't use `async`
         * and make sure to return `undefined` for content messages like GetInjected */
        sendResponse(wrapResponse(result));
      }
    } catch (err) {
      sendResponse(wrapResponse(0, err));
    }
  };
  /** @type {WrapAsyncPreprocessorFunc} */


  const unwrapResponse = (resolve, response) => !response && 'null response' || response[1] // error created in wrapResponse
  || resolve(response[0]) // result created in wrapResponse
  ;

  const wrapSendMessage = (runtime, sendMessage) => wrapAsync(runtime, sendMessage, unwrapResponse);
  /**
   * 0 = non-async method or the entire group
   * function = transformer like (originalObj, originalFunc): function
   */


  browser = global.browser = proxifyGroup(chrome, {
    extension: 0,
    // we don't use its async methods
    i18n: 0,
    // we don't use its async methods
    runtime: {
      connect: 0,
      getManifest: 0,
      getURL: 0,
      onMessage: {
        addListener: (onMessage, addListener) => listener => {
          if ( true && listener !== global.handleCommandMessage && /^async/.test(listener)) {
            throw new Error('onMessage listener cannot be async due to GetInjected interference!'); // TODO: migrate to addRuntimeListener(fn, commands: object)
          }

          return safeCall(addListener, onMessage, safeCall(bind, onMessageListener, null, listener));
        }
      },
      sendMessage: wrapSendMessage
    },
    tabs:  true && {
      connect: 0,
      sendMessage: wrapSendMessage
    }
  });
} else if (false) {}
/**
 * @callback WrapAsyncPreprocessorFunc
 * @param {function(any)} resolve - called on success
 * @param {any} response - API callback's response
 * @returns {?string[]} - [errorMessage, errorStack] array on error
 */


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (browser);

/***/ }),

/***/ "./src/common/cache.js":
/*!*****************************!*\
  !*** ./src/common/cache.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ initCache)
/* harmony export */ });
function initCache({
  lifetime: defaultLifetime = 3000,
  onDispose
} = {}) {
  let cache = Object.create(null); // setTimeout call is very expensive when done frequently,
  // 1000 calls performed for 50 scripts consume 50ms on each tab load,
  // so we'll schedule trim() just once per event loop cycle,
  // and then trim() will trim the cache and reschedule itself to the earliest expiry time.

  let timer;
  let minLifetime = -1; // same goes for the performance.now() used by hit() and put() which is why we expose batch(true)
  // to start an operation that reuses the same value of now(), and batch(false) to end it

  let batchStarted;
  let batchStartTime; // eslint-disable-next-line no-return-assign

  const getNow = () => batchStarted && batchStartTime || (batchStartTime = performance.now());

  const OVERRUN = 1000; // in ms, to reduce frequency of calling setTimeout

  const exports = {
    batch,
    get,
    some,
    pop,
    put,
    del,
    has,
    hit,
    destroy
  };
  if (true) Object.defineProperty(exports, 'data', {
    get: () => cache
  });
  return exports;

  function batch(enable) {
    batchStarted = enable;
    batchStartTime = 0;
  }

  function get(key, def, shouldHit = true) {
    const item = cache[key];

    if (item && shouldHit) {
      reschedule(item, item.lifetime);
    }

    return item ? item.value : def;
  }
  /**
   * @param {(val:?, key:string) => void} fn
   * @param {Object} [thisObj]
   */


  function some(fn, thisObj) {
    for (const key in cache) {
      const item = cache[key]; // Might be already deleted by fn

      if (item && fn.call(thisObj, item.value, key)) {
        return true;
      }
    }
  }

  function pop(key, def) {
    const value = get(key, def);
    del(key);
    return value;
  }

  function put(key, value, lifetime) {
    reschedule(cache[key] = lifetime ? {
      value,
      lifetime
    } : {
      value
    }, lifetime);
    return value;
  }

  function del(key) {
    const data = cache[key];

    if (data) {
      delete cache[key];
      onDispose == null ? void 0 : onDispose(data.value, key);
    }
  }

  function has(key) {
    return cache[key];
  }

  function hit(key, lifetime) {
    const entry = cache[key];

    if (entry) {
      reschedule(entry, lifetime);
    }
  }

  function destroy() {
    // delete all keys to make sure onDispose is called for each value
    if (onDispose) {
      // cache inherits null so we don't need to check hasOwnProperty
      // eslint-disable-next-line guard-for-in
      for (const key in cache) {
        del(key);
      }
    } else {
      cache = Object.create(null);
    }

    clearTimeout(timer);
    timer = 0;
  }

  function reschedule(entry, lifetime = defaultLifetime) {
    entry.expiry = lifetime + getNow();

    if (timer) {
      if (lifetime >= minLifetime) return;
      clearTimeout(timer);
    }

    minLifetime = lifetime;
    timer = setTimeout(trim, lifetime + OVERRUN);
  }

  function trim() {
    const now = performance.now();
    let closestExpiry = Number.MAX_SAFE_INTEGER; // eslint-disable-next-line guard-for-in

    for (const key in cache) {
      const {
        expiry
      } = cache[key];

      if (expiry < now) {
        del(key);
      } else if (expiry < closestExpiry) {
        closestExpiry = expiry;
      }
    }

    minLifetime = closestExpiry - now;
    timer = closestExpiry < Number.MAX_SAFE_INTEGER ? setTimeout(trim, minLifetime + OVERRUN) : 0;
  }
}

/***/ }),

/***/ "./src/common/consts.js":
/*!******************************!*\
  !*** ./src/common/consts.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BLACKLIST": () => (/* binding */ BLACKLIST),
/* harmony export */   "BLACKLIST_ERRORS": () => (/* binding */ BLACKLIST_ERRORS),
/* harmony export */   "CHARSET_UTF8": () => (/* binding */ CHARSET_UTF8),
/* harmony export */   "FORM_URLENCODED": () => (/* binding */ FORM_URLENCODED),
/* harmony export */   "HOMEPAGE_URL": () => (/* binding */ HOMEPAGE_URL),
/* harmony export */   "INFERRED": () => (/* binding */ INFERRED),
/* harmony export */   "INJECTABLE_TAB_URL_RE": () => (/* binding */ INJECTABLE_TAB_URL_RE),
/* harmony export */   "KNOWN_INJECT_INTO": () => (/* binding */ KNOWN_INJECT_INTO),
/* harmony export */   "METABLOCK_RE": () => (/* binding */ METABLOCK_RE),
/* harmony export */   "META_STR": () => (/* binding */ META_STR),
/* harmony export */   "NEWLINE_END_RE": () => (/* binding */ NEWLINE_END_RE),
/* harmony export */   "RUN_AT_RE": () => (/* binding */ RUN_AT_RE),
/* harmony export */   "SUPPORT_URL": () => (/* binding */ SUPPORT_URL),
/* harmony export */   "TIMEOUT_24HOURS": () => (/* binding */ TIMEOUT_24HOURS),
/* harmony export */   "TIMEOUT_HOUR": () => (/* binding */ TIMEOUT_HOUR),
/* harmony export */   "TIMEOUT_MAX": () => (/* binding */ TIMEOUT_MAX),
/* harmony export */   "TIMEOUT_WEEK": () => (/* binding */ TIMEOUT_WEEK),
/* harmony export */   "USERSCRIPT_META_INTRO": () => (/* binding */ USERSCRIPT_META_INTRO),
/* harmony export */   "WATCH_STORAGE": () => (/* binding */ WATCH_STORAGE),
/* harmony export */   "browser": () => (/* binding */ browser)
/* harmony export */ });
// SAFETY WARNING! Exports used by `injected` must make ::safe() calls and use __proto__:null
const CHARSET_UTF8 = 'charset=UTF-8';
const FORM_URLENCODED = 'application/x-www-form-urlencoded';
const INFERRED = 'inferred';
const HOMEPAGE_URL = 'homepageURL';
const SUPPORT_URL = 'supportURL'; // Allow metadata lines to start with WHITESPACE? '//' SPACE
// Allow anything to follow the predefined text of the metaStart/End
// The SPACE must be on the same line and specifically \x20 as \s would also match \r\n\t
// Note: when there's no valid metablock, an empty string is matched for convenience

const USERSCRIPT_META_INTRO = '// ==UserScript==';
const METABLOCK_RE = /((?:^|\n)\s*\/\/\x20==UserScript==)([\s\S]*?\n)\s*\/\/\x20==\/UserScript==|$/;
const META_STR = 'metaStr';
const NEWLINE_END_RE = /\n((?!\n)\s)*$/;
const INJECTABLE_TAB_URL_RE = /^(https?|file|ftps?):/;
const WATCH_STORAGE = 'watchStorage'; // `browser` is a local variable since we remove the global `chrome` and `browser` in injected*
// to prevent exposing them to userscripts with `@inject-into content`

const browser =  true && global.browser; // setTimeout truncates the delay to a 32-bit signed integer so the max delay is ~24 days

const TIMEOUT_MAX = 0x7FFFFFFF;
const TIMEOUT_HOUR = 60 * 60 * 1000;
const TIMEOUT_24HOURS = 24 * 60 * 60 * 1000;
const TIMEOUT_WEEK = 7 * 24 * 60 * 60 * 1000;
const BLACKLIST = 'blacklist';
const BLACKLIST_ERRORS = `${BLACKLIST}Errors`;
const RUN_AT_RE = /^document-(start|body|end|idle)$/;
const KNOWN_INJECT_INTO = {
  // Using the default injection order: auto, page, content
  [AUTO]: 1,
  [PAGE]: 1,
  [CONTENT]: 1
};

/***/ }),

/***/ "./src/common/date.js":
/*!****************************!*\
  !*** ./src/common/date.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DATE_FMT": () => (/* binding */ DATE_FMT),
/* harmony export */   "formatDate": () => (/* binding */ formatDate)
/* harmony export */ });
const DAY_MS = 24 * 3600e3;
const WEEK_MS = 7 * 24 * 3600e3; // Using simple padding functions because String#padStart is Chrome57+ but our minimum is 55

const pad2 = num => `${num < 10 ? '0' : ''}${num}`;

const pad3 = num => `${num < 10 && '00' || num < 100 && '0' || ''}${num}`;

const getYear = date => date.getFullYear();

const getDayOfYear = date => Math.floor((date - new Date(getYear(date), 0, 1)) / DAY_MS) + 1;

const getWeekOfYear = date => Math.floor((date - new Date(getYear(date), 0, 1)) / WEEK_MS) + 1;

const toLocaleString = (date, opts) => date.toLocaleString([navigator.language], opts);
/** @type {Object<string,(Date)=>string>} */


const DATE_FMT = {
  M: date => date.getMonth() + 1,
  // 1 2 ... 11 12
  MM: date => pad2(date.getMonth() + 1),
  // 01 02 ... 11 12
  MMM: date => toLocaleString(date, {
    month: 'short'
  }),
  // Jan Feb
  MMMM: date => toLocaleString(date, {
    month: 'long'
  }),
  // January February
  Q: date => Math.floor(date.getMonth() / 3) + 1,
  // 1 2 3 4
  D: date => date.getDate(),
  // 1 2 ... 30 31
  DD: date => pad2(date.getDate()),
  // 01 02 ... 30 31
  DDD: getDayOfYear,
  // 1 2 ... 364 365
  DDDD: date => pad3(getDayOfYear(date)),
  // 001 002 ... 364 365
  d: date => date.getDay(),
  // 0 1 ... 5 6
  dd: date => toLocaleString(date, {
    weekday: 'short'
  }).slice(0, 2),
  // Su Mo ... Fr Sa
  ddd: date => toLocaleString(date, {
    weekday: 'short'
  }),
  // Sun Mon ... Fri Sat
  dddd: date => toLocaleString(date, {
    weekday: 'long'
  }),
  // Sunday Monday ... Friday Saturday
  w: getWeekOfYear,
  // 1 2 ... 52 53
  ww: date => pad2(getWeekOfYear(date)),
  // 01 02 ... 52 53
  Y: getYear,
  YY: date => pad2(getYear(date) % 100),
  YYYY: date => `${getYear(date)}`.slice(-4),
  H: date => date.getHours(),
  // 0 1 ... 22 23
  HH: date => pad2(date.getHours()),
  // 00 01 ... 22 23
  m: date => date.getMinutes(),
  // 0 1 ... 58 59
  mm: date => pad2(date.getMinutes()),
  // 00 01 ... 58 59
  s: date => date.getSeconds(),
  // 0 1 ... 58 59
  ss: date => pad2(date.getSeconds()),
  // 00 01 ... 58 59
  S: date => `${+date}`.slice(-3, -2),
  // fractional second 0 1 ... 8 9
  SS: date => `${+date}`.slice(-3, -1),
  // fractional second 00 01 ... 98 99
  SSS: date => `${+date}`.slice(-3),
  // fractional second 000 001 ... 998 999
  ZZ: date => {
    // -0700 -0600 ... +0600 +0700
    const tz = date.getTimezoneOffset();
    const tza = Math.abs(tz);
    return `${tz < 0 ? '-' : '+'}${pad2(Math.floor(tza / 60))}${pad2(Math.floor(tza % 60))}`;
  }
};
let re;
function formatDate(tpl, date = new Date()) {
  if (!re) {
    re = new RegExp(`${// moment.js escaping for [literal text]
    /\[([^[\]]*)]/.source}|${// Matching longest first to allow omitting separators e.g. HHMM
    Object.keys(DATE_FMT).sort((a, b) => b.length - a.length).join('|')}`, 'g');
  }

  return tpl.replace(re, (s, literal) => hasOwnProperty(DATE_FMT, s) ? DATE_FMT[s](date) : literal != null ? literal : s);
}

/***/ }),

/***/ "./src/common/download.js":
/*!********************************!*\
  !*** ./src/common/download.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "downloadBlob": () => (/* binding */ downloadBlob)
/* harmony export */ });
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common */ "./src/common/index.js");

function downloadBlob(blob, name) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = name || '';
  a.dispatchEvent(new MouseEvent('click'));
  (0,_home_runner_work_violentmonkey_violentmonkey_src_common__WEBPACK_IMPORTED_MODULE_0__.makePause)(3000).then(() => URL.revokeObjectURL(url));
}

/***/ }),

/***/ "./src/common/handlers.js":
/*!********************************!*\
  !*** ./src/common/handlers.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options */ "./src/common/options.js");

const handlers = {
  UpdateOptions(data) {
    _options__WEBPACK_IMPORTED_MODULE_0__["default"].update(data);
  }

};
browser.runtime.onMessage.addListener((res, src) => {
  const handle = handlers[res.cmd];
  if (handle) handle(res.data, src);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (handlers);

/***/ }),

/***/ "./src/common/hook-setting.js":
/*!************************************!*\
  !*** ./src/common/hook-setting.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ hookSetting)
/* harmony export */ });
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options */ "./src/common/options.js");
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object */ "./src/common/object.js");


const hooks = {};
_options__WEBPACK_IMPORTED_MODULE_0__["default"].hook(data => {
  safeCall(_object__WEBPACK_IMPORTED_MODULE_1__.forEachEntry, hooks, ([key, list]) => {
    if (list) {
      const value = (0,_object__WEBPACK_IMPORTED_MODULE_1__.objectGet)(data, key);
      if (value !== undefined) list.forEach(update => update(value));
    }
  });
});
function hookSetting(key, update) {
  _options__WEBPACK_IMPORTED_MODULE_0__["default"].ready.then(() => update(_options__WEBPACK_IMPORTED_MODULE_0__["default"].get(key)));
  const list = hooks[key] || (hooks[key] = []);
  list.push(update);
  return () => {
    const i = list.indexOf(update);
    if (i >= 0) list.splice(i, 1);
  };
}

/***/ }),

/***/ "./src/common/index.js":
/*!*****************************!*\
  !*** ./src/common/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blob2base64": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.blob2base64),
/* harmony export */   "browserWindows": () => (/* binding */ browserWindows),
/* harmony export */   "buffer2string": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.buffer2string),
/* harmony export */   "compareVersion": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.compareVersion),
/* harmony export */   "dataUri2text": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.dataUri2text),
/* harmony export */   "debounce": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.debounce),
/* harmony export */   "decodeFilename": () => (/* binding */ decodeFilename),
/* harmony export */   "defaultImage": () => (/* binding */ defaultImage),
/* harmony export */   "dumpScriptValue": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.dumpScriptValue),
/* harmony export */   "encodeFilename": () => (/* binding */ encodeFilename),
/* harmony export */   "ensureArray": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.ensureArray),
/* harmony export */   "formatByteLength": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.formatByteLength),
/* harmony export */   "formatTime": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.formatTime),
/* harmony export */   "getActiveTab": () => (/* binding */ getActiveTab),
/* harmony export */   "getFullUrl": () => (/* binding */ getFullUrl),
/* harmony export */   "getLocaleString": () => (/* binding */ getLocaleString),
/* harmony export */   "getRandomString": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.getRandomString),
/* harmony export */   "getScriptHome": () => (/* binding */ getScriptHome),
/* harmony export */   "getScriptName": () => (/* binding */ getScriptName),
/* harmony export */   "getScriptPrettyUrl": () => (/* binding */ getScriptPrettyUrl),
/* harmony export */   "getScriptRunAt": () => (/* binding */ getScriptRunAt),
/* harmony export */   "getScriptSupportUrl": () => (/* binding */ getScriptSupportUrl),
/* harmony export */   "getScriptUpdateUrl": () => (/* binding */ getScriptUpdateUrl),
/* harmony export */   "getUniqId": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.getUniqId),
/* harmony export */   "i18n": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.i18n),
/* harmony export */   "ignoreNoReceiver": () => (/* binding */ ignoreNoReceiver),
/* harmony export */   "initHooks": () => (/* binding */ initHooks),
/* harmony export */   "isDataUri": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.isDataUri),
/* harmony export */   "isEmpty": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.isEmpty),
/* harmony export */   "isHttpOrHttps": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.isHttpOrHttps),
/* harmony export */   "isRemote": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.isRemote),
/* harmony export */   "leftpad": () => (/* binding */ leftpad),
/* harmony export */   "makeDataUri": () => (/* binding */ makeDataUri),
/* harmony export */   "makePause": () => (/* binding */ makePause),
/* harmony export */   "makeRaw": () => (/* binding */ makeRaw),
/* harmony export */   "memoize": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.memoize),
/* harmony export */   "noop": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.noop),
/* harmony export */   "normalizeKeys": () => (/* reexport safe */ _object__WEBPACK_IMPORTED_MODULE_1__.normalizeKeys),
/* harmony export */   "request": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.request),
/* harmony export */   "requestLocalFile": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.requestLocalFile),
/* harmony export */   "sendCmd": () => (/* binding */ sendCmd),
/* harmony export */   "sendCmdDirectly": () => (/* binding */ sendCmdDirectly),
/* harmony export */   "sendMessage": () => (/* binding */ sendMessage),
/* harmony export */   "sendMessageRetry": () => (/* binding */ sendMessageRetry),
/* harmony export */   "sendTabCmd": () => (/* binding */ sendTabCmd),
/* harmony export */   "string2uint8array": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.string2uint8array),
/* harmony export */   "throttle": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.throttle),
/* harmony export */   "toString": () => (/* reexport safe */ _util__WEBPACK_IMPORTED_MODULE_2__.toString),
/* harmony export */   "trueJoin": () => (/* binding */ trueJoin),
/* harmony export */   "tryUrl": () => (/* binding */ tryUrl)
/* harmony export */ });
/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consts */ "./src/common/consts.js");
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object */ "./src/common/object.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/common/util.js");
// SAFETY WARNING! Exports used by `injected` must make ::safe() calls and use __proto__:null






if (true) {
  const get = () => {
    throw 'Do not use `for-of` with Map/Set. Use forEach or for-of with a [...copy]' + '\n(not supported due to our config of @babel/plugin-transform-for-of).';
  };

  for (let _i = 0, _ref = [Map, Set, WeakMap, WeakSet]; _i < _ref.length; _i++) {
    const obj = _ref[_i];
    Object.defineProperty(obj.prototype, 'length', {
      get,
      configurable: true
    });
  }
}

const browserWindows = _consts__WEBPACK_IMPORTED_MODULE_0__.browser.windows;
const defaultImage =  true && `${ICON_PREFIX}128.png`;
/** Will be encoded to avoid splitting the URL in devtools UI */

const BAD_URL_CHAR = /[#/?]/g;
/** Fullwidth range starts at 0xFF00, normal range starts at space char code 0x20 */

const replaceWithFullWidthForm = s => String.fromCharCode(s.charCodeAt(0) - 0x20 + 0xFF00);

const PORT_ERROR_RE = /(Receiving end does not exist)|The message port closed before|$/;
function initHooks() {
  const hooks = [];

  function fire(data) {
    hooks.slice().forEach(cb => {
      cb(data);
    });
  }

  function hook(callback) {
    hooks.push(callback);
    return () => {
      const i = hooks.indexOf(callback);
      if (i >= 0) hooks.splice(i, 1);
    };
  }

  return {
    hook,
    fire
  };
}
/**
 * Used by `injected`
 * @param {string} cmd
 * @param data
 * @param {{retry?: boolean}} [options]
 * @return {Promise}
 */

function sendCmd(cmd, data, options) {
  // Firefox+Vue3 bug workaround for "Proxy object could not be cloned"
  if ( true && IS_FIREFOX && isObject(data)) {
    data = (0,_object__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(data);
  }

  return sendMessage({
    cmd,
    data
  }, options);
} // These need `src` parameter so we'll use sendCmd for them. We could have forged `src` via
// browser.tabs.getCurrent but there's no need as they normally use only a tiny amount of data.

const COMMANDS_WITH_SRC = ['ConfirmInstall', 'Notification', 'TabClose', 'TabFocus', 'TabOpen'
/*
  These are used only by content scripts where sendCmdDirectly can't be used anyway
  'GetInjected',
  'GetRequestId',
  'HttpRequest',
  'InjectionFeedback',
  'SetPopup',
*/
];

const getBgPage = () => _consts__WEBPACK_IMPORTED_MODULE_0__.browser.extension.getBackgroundPage == null ? void 0 : _consts__WEBPACK_IMPORTED_MODULE_0__.browser.extension.getBackgroundPage();
/**
 * Sends the command+data directly so it's synchronous and faster than sendCmd thanks to deepCopy.
 * WARNING! Make sure `cmd` handler doesn't use `src` or `cmd` is listed in COMMANDS_WITH_SRC.
 */


function sendCmdDirectly(cmd, data, options, fakeSrc) {
  const bg = !COMMANDS_WITH_SRC.includes(cmd) && getBgPage();
  const bgCopy = bg && bg !== window && bg.deepCopy;

  if (!bgCopy) {
    return sendCmd(cmd, data, options);
  }

  if (fakeSrc) {
    fakeSrc = bgCopy(fakeSrc);
    fakeSrc.fake = true;
  }

  return bg.handleCommandMessage(bgCopy({
    cmd,
    data
  }), fakeSrc).then(_object__WEBPACK_IMPORTED_MODULE_1__.deepCopy);
}
/**
 * @param {number} tabId
 * @param {string} cmd
 * @param data
 * @param {{frameId?: number}} [options]
 * @return {Promise}
 */

function sendTabCmd(tabId, cmd, data, options) {
  return _consts__WEBPACK_IMPORTED_MODULE_0__.browser.tabs.sendMessage(tabId, {
    cmd,
    data
  }, options).catch(ignoreNoReceiver);
} // Used by `injected`

function sendMessage(payload, {
  retry
} = {}) {
  if (retry) return sendMessageRetry(payload);
  let promise = _consts__WEBPACK_IMPORTED_MODULE_0__.browser.runtime.sendMessage(payload); // Ignoring errors when sending from the extension script because it's a broadcast

  if (true) {
    promise = promise.catch(ignoreNoReceiver);
  }

  return promise;
}
/**
 * Used by `injected`
 * The active tab page and its [content] scripts load before the extension's
 * persistent background script when Chrome starts with a URL via command line
 * or when configured to restore the session, https://crbug.com/314686
 */

async function sendMessageRetry(payload, maxDuration = 10e3) {
  for (let start = performance.now(); performance.now() - start < maxDuration;) {
    try {
      const data = await sendMessage(payload);

      if (data !== undefined) {
        return data;
      }
    } catch (e) {
      if (!PORT_ERROR_RE.exec(e)[1]) {
        throw e;
      }
    } // Not using setTimeout which may be cleared by the web page


    await _consts__WEBPACK_IMPORTED_MODULE_0__.browser.storage.local.get(VIOLENTMONKEY);
  }

  throw new Error(VIOLENTMONKEY + ' cannot connect to the background page.');
}
function ignoreNoReceiver(err) {
  if (!PORT_ERROR_RE.exec(err)[0]) {
    return Promise.reject(err);
  }
}
function leftpad(input, length, pad = '0') {
  let num = input.toString();

  while (num.length < length) num = `${pad}${num}`;

  return num;
}
/**
 * Get locale attributes such as `@name:zh-CN`
 */

function getLocaleString(meta, key) {
  const localeMeta = navigator.languages // Use `lang.toLowerCase()` since v2.6.5
  .map(lang => meta[`${key}:${lang}`] || meta[`${key}:${lang.toLowerCase()}`]).find(Boolean);
  return localeMeta || meta[key] || '';
}
/**
 * @param {VMScript} script
 * @returns {string | undefined}
 */

function getScriptHome(script) {
  var _script$INFERRED;

  let meta;
  return script.custom[_consts__WEBPACK_IMPORTED_MODULE_0__.HOMEPAGE_URL] || (meta = script.meta)[_consts__WEBPACK_IMPORTED_MODULE_0__.HOMEPAGE_URL] || ((_script$INFERRED = script[_consts__WEBPACK_IMPORTED_MODULE_0__.INFERRED]) == null ? void 0 : _script$INFERRED[_consts__WEBPACK_IMPORTED_MODULE_0__.HOMEPAGE_URL]) || meta.homepage || meta.website || meta.source;
}
/**
 * @param {VMScript} script
 * @returns {string | undefined}
 */

function getScriptSupportUrl(script) {
  var _script$INFERRED2;

  return script.meta[_consts__WEBPACK_IMPORTED_MODULE_0__.SUPPORT_URL] || ((_script$INFERRED2 = script[_consts__WEBPACK_IMPORTED_MODULE_0__.INFERRED]) == null ? void 0 : _script$INFERRED2[_consts__WEBPACK_IMPORTED_MODULE_0__.SUPPORT_URL]);
}
function getScriptName(script) {
  var _script$props$id;

  return script.custom.name || getLocaleString(script.meta, 'name') || `#${(_script$props$id = script.props.id) != null ? _script$props$id : (0,_util__WEBPACK_IMPORTED_MODULE_2__.i18n)('labelNoName')}`;
}
/** @returns {VMInjection.RunAt} without "document-" */

function getScriptRunAt(script) {
  var _match;

  return ((_match = `${script.custom[RUN_AT] || script.meta[RUN_AT] || ''}`.match(_consts__WEBPACK_IMPORTED_MODULE_0__.RUN_AT_RE)) == null ? void 0 : _match[1]) || 'end';
}
/** URL that shows the name of the script and opens in devtools sources or in our editor */

function getScriptPrettyUrl(script, displayName) {
  return `${extensionRoot}${// When called from prepareScript, adding a space to group scripts in one block visually
  displayName && IS_FIREFOX ? '%20' : ''}${encodeURIComponent((displayName || getScriptName(script)).replace(BAD_URL_CHAR, replaceWithFullWidthForm))}.user.js#${script.props.id}`;
}
/**
 * @param {VMScript} script
 * @param {boolean} [all] - to return all two urls (1: check, 2: download)
 * @return {Array<string>|string|void}
 */

function getScriptUpdateUrl(script, all) {
  if (script.config.shouldUpdate) {
    const {
      custom,
      meta
    } = script;
    /* URL in meta may be set to an invalid value to enforce disabling of the automatic updates
     * e.g. GreasyFork sets it to `none` when the user installs an old version.
     * We'll show such script as non-updatable. */

    const downloadURL = tryUrl(custom.downloadURL || meta.downloadURL || custom.lastInstallURL);
    const updateURL = tryUrl(custom.updateURL || meta.updateURL || downloadURL);
    const url = downloadURL || updateURL;
    if (url) return all ? [downloadURL, updateURL] : url;
  }
}
function getFullUrl(url, base) {
  let obj;

  try {
    obj = new URL(url, base);
  } catch (e) {
    return `data:,${e.message} ${url}`;
  } // Use protocol whitelist to filter URLs


  if (!['http:', 'https:', 'ftp:', 'data:'].includes(obj.protocol)) obj.protocol = 'http:';
  return obj.href;
}
function encodeFilename(name) {
  // `escape` generated URI has % in it
  return name.replace(/[-\\/:*?"<>|%\s]/g, m => {
    let code = m.charCodeAt(0).toString(16);
    if (code.length < 2) code = `0${code}`;
    return `-${code}`;
  });
}
function decodeFilename(filename) {
  return filename.replace(/-([0-9a-f]{2})/g, (_m, g) => String.fromCharCode(parseInt(g, 16)));
}
async function getActiveTab() {
  return (await _consts__WEBPACK_IMPORTED_MODULE_0__.browser.tabs.query({
    active: true,
    currentWindow: true
  }))[0] || browserWindows && ( // Chrome bug workaround when an undocked devtools window is focused
  await _consts__WEBPACK_IMPORTED_MODULE_0__.browser.tabs.query({
    active: true,
    windowId: (await browserWindows.getCurrent()).id
  }))[0];
}
function makePause(ms) {
  return ms < 0 ? Promise.resolve() : new Promise(resolve => setTimeout(resolve, ms));
}
function trueJoin(separator) {
  return this.filter(Boolean).join(separator);
}
/** @returns {string|undefined} */

function tryUrl(str) {
  try {
    if (str && new URL(str)) {
      return str; // throws on invalid urls
    }
  } catch (e) {// undefined
  }
}
/**
 * @param {string} url
 * @param {string} raw - raw value in storage.cache
 * @returns {?string}
 */

function makeDataUri(raw, url) {
  if ((0,_util__WEBPACK_IMPORTED_MODULE_2__.isDataUri)(url)) return url;

  if (/^(i,|image\/)/.test(raw)) {
    // workaround for bugs in old VM, see 2e135cf7
    const i = raw.lastIndexOf(',');
    const type = raw.startsWith('image/') ? raw.slice(0, i) : 'image/png';
    return `data:${type};base64,${raw.slice(i + 1)}`;
  }

  return raw;
}
/**
 * @param {VMReq.Response} response
 * @param {boolean} [noJoin]
 * @returns {string|string[]}
 */

async function makeRaw(response, noJoin) {
  const type = (response.headers.get('content-type') || '').split(';')[0] || '';
  const body = await (0,_util__WEBPACK_IMPORTED_MODULE_2__.blob2base64)(response.data);
  return noJoin ? [type, body] : `${type},${body}`;
}

/***/ }),

/***/ "./src/common/keyboard.js":
/*!********************************!*\
  !*** ./src/common/keyboard.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyboardService": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.KeyboardService),
/* harmony export */   "aliases": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.aliases),
/* harmony export */   "disable": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.disable),
/* harmony export */   "enable": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.enable),
/* harmony export */   "handleKey": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.handleKey),
/* harmony export */   "handleTabNavigation": () => (/* binding */ handleTabNavigation),
/* harmony export */   "isInput": () => (/* binding */ isInput),
/* harmony export */   "keyboardService": () => (/* binding */ keyboardService),
/* harmony export */   "modifierSymbols": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.modifierSymbols),
/* harmony export */   "modifiers": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.modifiers),
/* harmony export */   "normalizeKey": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.normalizeKey),
/* harmony export */   "normalizeSequence": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.normalizeSequence),
/* harmony export */   "parseCondition": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.parseCondition),
/* harmony export */   "register": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.register),
/* harmony export */   "reprKey": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.reprKey),
/* harmony export */   "reprShortcut": () => (/* reexport safe */ _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.reprShortcut),
/* harmony export */   "toggleTip": () => (/* binding */ toggleTip)
/* harmony export */ });
/* harmony import */ var _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @violentmonkey/shortcut */ "./node_modules/@violentmonkey/shortcut/dist/index.esm.js");


const keyboardService = new _violentmonkey_shortcut__WEBPACK_IMPORTED_MODULE_0__.KeyboardService();
bindKeys();
function isInput(el) {
  var _el$tagName;

  return ['input', 'textarea'].includes(el == null ? void 0 : (_el$tagName = el.tagName) == null ? void 0 : _el$tagName.toLowerCase());
}

function handleFocus(e) {
  if (isInput(e.target)) {
    keyboardService.setContext('inputFocus', true);
  }
}

function handleBlur(e) {
  if (isInput(e.target)) {
    keyboardService.setContext('inputFocus', false);
  } else {
    const event = new CustomEvent('tiphide', {
      bubbles: true
    });
    e.target.dispatchEvent(event);
  }
}

function handleEscape() {
  document.activeElement.blur();
}

function toggleTip(el) {
  const event = new CustomEvent('tiptoggle', {
    bubbles: true
  });
  el.dispatchEvent(event);
}

function bindKeys() {
  document.addEventListener('focus', handleFocus, true);
  document.addEventListener('blur', handleBlur, true);
  keyboardService.register('escape', handleEscape);
  keyboardService.register('c-[', handleEscape);
  keyboardService.register('enter', () => {
    const {
      activeElement
    } = document;
    activeElement.click();
  }, {
    condition: '!inputFocus'
  });
}
/**
 * Note: This is only used in Firefox to work around the issue that <a> cannot be focused.
 * Ref: https://stackoverflow.com/a/11713537/4238335
 */


function handleTabNavigation(dir) {
  const els = Array.from(document.querySelectorAll('[tabindex="0"],a[href],button,input,select,textarea')).filter(el => {
    if (el.tabIndex < 0) return false;
    const rect = el.getBoundingClientRect();
    return rect.width > 0 && rect.height > 0;
  });
  let index = els.indexOf(document.activeElement);
  index = (index + dir + els.length) % els.length;
  els[index].focus();
}

/***/ }),

/***/ "./src/common/load-script-icon.js":
/*!****************************************!*\
  !*** ./src/common/load-script-icon.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadScriptIcon": () => (/* binding */ loadScriptIcon)
/* harmony export */ });
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common/index */ "./src/common/index.js");
 // TODO: convert this into a component tag e.g. <safe-icon>

const KEY = 'safeIcon';
const KEY_DEFAULT = 'noIcon';
/**
 * Sets script's safeIcon property after the image is successfully loaded
 * @param {VMScript} script
 * @param {{cache?:{}, isHiDPI?:boolean}} [store]
 * @param {boolean} [showDefault]
 */

async function loadScriptIcon(script, store, showDefault) {
  var _script$custom, _script$custom$pathMa;

  let def;
  const {
    icon
  } = script.meta;
  const {
    cache = {},
    isHiDPI
  } = store || {};
  const url = ((_script$custom = script.custom) == null ? void 0 : (_script$custom$pathMa = _script$custom.pathMap) == null ? void 0 : _script$custom$pathMa[icon]) || icon || showDefault && (def = `${ICON_PREFIX}${isHiDPI && 128 || (script.config.removed ? 32 : 38)}.png`);

  if (!url || url !== script[KEY]) {
    // exposing scripts with no icon for user's CustomCSS
    script[KEY_DEFAULT] = def ? '' : null; // creates an observable property so Vue will see the change after `await`

    if (!(KEY in script)) {
      script[KEY] = null;
    }

    if (url) {
      script[KEY] = cache[url] || (0,_home_runner_work_violentmonkey_violentmonkey_src_common_index__WEBPACK_IMPORTED_MODULE_0__.isDataUri)(url) && url || isHiDPI && def // Using our big icon directly as its data URI is rendered slower
      || (def || (0,_home_runner_work_violentmonkey_violentmonkey_src_common_index__WEBPACK_IMPORTED_MODULE_0__.isHttpOrHttps)(url)) && (cache[url] = await (0,_home_runner_work_violentmonkey_violentmonkey_src_common_index__WEBPACK_IMPORTED_MODULE_0__.sendCmdDirectly)('GetImageData', url).catch(_home_runner_work_violentmonkey_violentmonkey_src_common_index__WEBPACK_IMPORTED_MODULE_0__.noop)) || null;
    }
  }

  return script[KEY];
}

/***/ }),

/***/ "./src/common/object.js":
/*!******************************!*\
  !*** ./src/common/object.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deepCopy": () => (/* binding */ deepCopy),
/* harmony export */   "deepCopyDiff": () => (/* binding */ deepCopyDiff),
/* harmony export */   "deepEqual": () => (/* binding */ deepEqual),
/* harmony export */   "deepSize": () => (/* binding */ deepSize),
/* harmony export */   "forEachEntry": () => (/* binding */ forEachEntry),
/* harmony export */   "forEachKey": () => (/* binding */ forEachKey),
/* harmony export */   "forEachValue": () => (/* binding */ forEachValue),
/* harmony export */   "mapEntry": () => (/* binding */ mapEntry),
/* harmony export */   "normalizeKeys": () => (/* binding */ normalizeKeys),
/* harmony export */   "objectGet": () => (/* binding */ objectGet),
/* harmony export */   "objectPick": () => (/* binding */ objectPick),
/* harmony export */   "objectSet": () => (/* binding */ objectSet)
/* harmony export */ });
/** @type {boolean} */
let deepDiff;
function normalizeKeys(key) {
  if (key == null) return [];
  if (Array.isArray(key)) return key;
  return `${key}`.split('.').filter(Boolean);
}
function objectGet(obj, rawKey) {
  for (let _i = 0, _normalizeKeys = normalizeKeys(rawKey); _i < _normalizeKeys.length; _i++) {
    const key = _normalizeKeys[_i];
    if (!obj || typeof obj !== 'object') break;
    obj = obj[key];
  }

  return obj;
}
/**
 * @param {Object} [obj = {}]
 * @param {string|string[]} [rawKey]
 * @param {?} [val] - if `undefined` or omitted the value is deleted
 * @param {boolean} [retParent]
 * @return {Object} the original object or the parent of `val` if retParent is set
 */

function objectSet(obj, rawKey, val, retParent) {
  rawKey = normalizeKeys(rawKey);
  let res = obj || {};
  let key;

  for (let i = 0; key = rawKey[i], i < rawKey.length - 1; i += 1) {
    res = res[key] || (res[key] = {});
  }

  if (val === undefined) {
    delete res[key];
  } else {
    res[key] = val;
  }

  return retParent ? res : obj;
}
/**
 * @param {{}} obj
 * @param {string[]} keys
 * @param {function(value,key):?} [transform]
 * @returns {{}}
 */

function objectPick(obj, keys, transform) {
  const res = {};

  for (let _i2 = 0; _i2 < keys.length; _i2++) {
    const key = keys[_i2];
    let value = obj == null ? void 0 : obj[key];
    if (transform) value = transform(value, key);
    if (value !== undefined) res[key] = value;
  }

  return res;
}
/**
 * @param {function} [fnValue] - (value, newKey, obj) => newValue
 * @param {function} [fnKey] - (key, val, obj) => newKey (if newKey is falsy the key is skipped)
 * @param {Object} [thisObj] - passed as `this` to both functions
 * @return {Object}
 */

function mapEntry(fnValue, fnKey, thisObj) {
  const res = {};

  for (let _i3 = 0, _Object$keys = Object.keys(this); _i3 < _Object$keys.length; _i3++) {
    let key = _Object$keys[_i3];
    const val = this[key];

    if (!fnKey || (key = safeCall(fnKey, thisObj, key, val, this))) {
      res[key] = fnValue ? safeCall(fnValue, thisObj, val, key, this) : val;
    }
  }

  return res;
} // invoked as obj::forEachEntry(([key, value], i, allEntries) => {})

function forEachEntry(func, thisObj) {
  if (this) Object.entries(this).forEach(func, thisObj);
} // invoked as obj::forEachKey(key => {}, i, allKeys)

function forEachKey(func, thisObj) {
  if (this) Object.keys(this).forEach(func, thisObj);
} // invoked as obj::forEachValue(value => {}, i, allValues)

function forEachValue(func, thisObj) {
  if (this) Object.values(this).forEach(func, thisObj);
}
function deepCopy(src) {
  if (!src || typeof src !== 'object') return src;
  /* Not using `map` because its result belongs to the `window` of the source,
   * so it becomes "dead object" in Firefox after GC collects it. */

  if (Array.isArray(src)) return Array.from(src, deepCopy);
  return safeCall(mapEntry, src, deepCopy);
} // Simplified deep equality checker

function deepEqual(a, b) {
  let res;

  if (!a || !b || typeof a !== typeof b || typeof a !== 'object') {
    res = a === b;
  } else if (Array.isArray(a)) {
    res = a.length === b.length && a.every((item, i) => deepEqual(item, b[i]));
  } else {
    const keysA = Object.keys(a);
    /* Not checking hasOwnProperty because 1) we only use own properties and
     * 2) this can be slow for a large value storage that has thousands of keys */

    res = keysA.length === Object.keys(b).length && keysA.every(key => deepEqual(a[key], b[key]));
  }

  return res;
}
/** @return {?} `undefined` if equal */

function deepCopyDiff(src, sample) {
  if (src === sample) return;
  if (!src || typeof src !== 'object') return src;
  if (!sample || typeof sample !== 'object') return deepCopy(src);
  if (deepDiff = false, src = deepCopyDiffObjects(src, sample), deepDiff) return src;
}

function deepCopyDiffObjects(src, sample) {
  const isArr = Array.isArray(src);
  const arr1 = isArr ? src : Object.keys(src);
  const arr2 = isArr ? sample : Object.keys(sample);
  const res = isArr ? [] : {};

  if (arr1.length !== arr2.length) {
    deepDiff = true;
  }

  for (let i = 0, key, a, b; i < arr1.length; i += 1) {
    key = isArr ? i : arr1[i];
    a = src[key];
    /* Not checking hasOwnProperty because 1) we only use own properties and
     * 2) this can be slow for a large value storage that has thousands of keys */

    b = sample[key];

    if (a && typeof a === 'object') {
      if (b && typeof b === 'object') {
        a = deepCopyDiffObjects(a, b);
      } else {
        a = deepCopy(a);
        deepDiff = true;
      }
    } else if (a !== b) {
      deepDiff = true;
    }

    res[key] = a;
  }

  return res;
}

function deepSize(val) {
  if (val === undefined) return 0;
  if (val === true || val == null) return 4;
  if (val === false) return 5;
  if (typeof val === 'string') return val.length + 2; // not counting escapes for \n\r\t and so on

  if (typeof val !== 'object') return `${val}`.length; // number and whatever

  if (Array.isArray(val)) return val.reduce((sum, v) => sum + 1 + deepSize(v), 2);
  return Object.keys(val).reduce((sum, k) => sum + k.length + 4 + deepSize(val[k]), 2);
}

/***/ }),

/***/ "./src/common/options-defaults.js":
/*!****************************************!*\
  !*** ./src/common/options-defaults.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isApplied: true,
  autoUpdate: 1,
  // days, 0 = disable
  updateEnabledScriptsOnly: true,
  // ignoreGrant: false,
  lastUpdate: 0,
  lastModified: 0,

  /** @type {VMBadgeMode} */
  showBadge: 'unique',
  badgeColor: '#880088',
  badgeColorBlocked: '#888888',
  exportValues: true,
  exportNameTemplate: '[violentmonkey]_YYYY-MM-DD_HH.mm.ss',
  [EXPOSE]: {
    // use percent-encoding for '.'
    'greasyfork%2Eorg': true,
    'sleazyfork%2Eorg': false
  },
  closeAfterInstall: false,
  trackLocalFile: false,
  autoReload: false,
  features: null,
  blacklist: null,
  syncScriptStatus: true,
  sync: null,
  customCSS: '',
  importScriptData: true,
  importSettings: true,
  notifyUpdates: false,
  notifyUpdatesGlobal: false,
  // `true` ignores script.config.notifyUpdates
  version: null,

  /** @type {VMScriptInjectInto} */
  defaultInjectInto: AUTO,
  ffInject: true,
  xhrInject: false,
  filters: {
    /** @type {'name' | 'code' | 'all'} */
    searchScope: 'name',

    /** @type {boolean} */
    showOrder: false,

    /** @type {'exec' | 'alpha' | 'update'} */
    sort: 'exec',

    /** @type {boolean} */
    viewSingleColumn: false,

    /** @type {boolean} */
    viewTable: false
  },
  filtersPopup: {
    /** @type {'exec' | 'alpha'} */
    sort: 'exec',
    enabledFirst: false,
    groupRunAt: true,

    /** @type {'' | 'hide' | 'group'} where '' = show */
    hideDisabled: ''
  },
  editor: {
    lineWrapping: false,
    indentWithTabs: false,
    indentUnit: 2,
    tabSize: 2,
    undoDepth: 500
  },
  editorTheme: '',
  editorThemeName: null,
  editorWindow: false,
  // whether popup opens editor in a new window
  editorWindowPos: {},
  // { left, top, width, height }
  editorWindowSimple: true,
  // whether to open a simplified popup or a normal browser window
  scriptTemplate: `\
// ==UserScript==
// @name        New script {{name}}
// @namespace   ${VIOLENTMONKEY} Scripts
// @match       {{url}}
// @grant       none
// @version     1.0
// @author      -
// @description {{date}}
// ==/UserScript==
`,
  showAdvanced: true,

  /** @type {'' | 'dark' | 'light'} */
  uiTheme: ''
});

/***/ }),

/***/ "./src/common/options.js":
/*!*******************************!*\
  !*** ./src/common/options.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_options_defaults__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common/options-defaults */ "./src/common/options-defaults.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ "./src/common/index.js");
/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object */ "./src/common/object.js");



let options = {};
const {
  hook,
  fire
} = (0,___WEBPACK_IMPORTED_MODULE_1__.initHooks)();
const ready = (0,___WEBPACK_IMPORTED_MODULE_1__.sendCmdDirectly)('GetAllOptions', null, {
  retry: true
}).then(data => {
  options = data;
  if (data) fire(data);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ready,
  hook,

  get(key) {
    var _objectGet;

    return (_objectGet = (0,_object__WEBPACK_IMPORTED_MODULE_2__.objectGet)(options, key)) != null ? _objectGet : (0,_object__WEBPACK_IMPORTED_MODULE_2__.objectGet)(_home_runner_work_violentmonkey_violentmonkey_src_common_options_defaults__WEBPACK_IMPORTED_MODULE_0__["default"], key);
  },

  set(key, value) {
    // the updated options object will be propagated from the background script after a pause
    // so meanwhile the local code should be able to see the new value using options.get()
    (0,_object__WEBPACK_IMPORTED_MODULE_2__.objectSet)(options, key, value);
    return (0,___WEBPACK_IMPORTED_MODULE_1__.sendCmdDirectly)('SetOptions', {
      key,
      value,
      reply: true
    });
  },

  update(data) {
    // Keys in `data` may be { flattened.like.this: 'foo' }
    const expandedData = {};
    safeCall(_object__WEBPACK_IMPORTED_MODULE_2__.forEachEntry, data, ([key, value]) => {
      (0,_object__WEBPACK_IMPORTED_MODULE_2__.objectSet)(options, key, value);
      (0,_object__WEBPACK_IMPORTED_MODULE_2__.objectSet)(expandedData, key, value);
    });
    fire(expandedData);
  }

});

/***/ }),

/***/ "./src/common/router.js":
/*!******************************!*\
  !*** ./src/common/router.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUnloadSentry": () => (/* binding */ getUnloadSentry),
/* harmony export */   "lastRoute": () => (/* binding */ lastRoute),
/* harmony export */   "route": () => (/* binding */ route),
/* harmony export */   "setRoute": () => (/* binding */ setRoute)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/common/ui */ "./src/common/ui/index.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/common/util.js");




function parse(hash) {
  const [pathname, search = ''] = hash.split('?');
  const query = search.split('&').reduce((res, seq) => {
    if (seq) {
      const [key, val] = seq.split('=');
      res[decodeURIComponent(key)] = decodeURIComponent(val);
    }

    return res;
  }, {});
  const paths = pathname.split('/');
  return {
    hash,
    pathname,
    paths,
    query
  };
}

const stack = [];
const route = (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)({});
const lastRoute = () => stack[stack.length - 1] || {};
updateRoute();

function updateRoute(noConfirm) {
  const hash = window.location.hash.slice(1);

  if (noConfirm || !route.confirmChange) {
    Object.assign(route, parse(hash));
  } else if (route.hash !== hash) {
    // restore the pinned route
    setRoute(route.hash, false, true);
    route.confirmChange(hash);
  }
} // popstate should be the first to ensure hashchange listeners see the correct lastRoute


window.addEventListener('popstate', () => stack.pop());
window.addEventListener('hashchange', () => updateRoute(), false);
function setRoute(hash, replace, noConfirm) {
  let hashString = `${hash}`;
  if (hashString[0] !== '#') hashString = `#${hashString}`;

  if (replace) {
    window.history.replaceState('', null, hashString);
  } else {
    stack.push(Object.assign({}, route));
    window.history.pushState('', null, hashString);
  }

  updateRoute(noConfirm);
}
function getUnloadSentry(onConfirm, onCancel) {
  async function confirmPopState(hash) {
    if (await (0,_home_runner_work_violentmonkey_violentmonkey_src_common_ui__WEBPACK_IMPORTED_MODULE_1__.showConfirmation)((0,_util__WEBPACK_IMPORTED_MODULE_2__.i18n)('confirmNotSaved'))) {
      // popstate cannot be prevented so we pin current `route` and display a confirmation
      setRoute(hash, false, true);
      onConfirm == null ? void 0 : onConfirm();
    } else {
      onCancel == null ? void 0 : onCancel();
    }
  }

  function toggle(state) {
    const onOff = `${state ? 'add' : 'remove'}EventListener`;
    global[onOff]('beforeunload', onUnload);
    route.confirmChange = state && confirmPopState;
  }

  return toggle;
}

function onUnload(e) {
  e.preventDefault(); // modern browser show their own message text

  e.returnValue = (0,_util__WEBPACK_IMPORTED_MODULE_2__.i18n)('confirmNotSaved');
}

/***/ }),

/***/ "./src/common/ua.js":
/*!**************************!*\
  !*** ./src/common/ua.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");


var _uaData$brands$;

// UA can be overridden by about:config in FF or devtools in Chrome
// so we'll test for window.chrome.app which is only defined in Chrome
// and for browser.runtime.getBrowserInfo in Firefox 51+

/** @type {VMUserAgent} */
const ua = {};
const kUaFullVersion = 'uaFullVersion'; // for new Chrome which simplifies UA version as #.0.0.0

const uaData = navigator.userAgentData;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ua); // using non-enumerable properties that won't be sent to content scripts via GetInjected

Object.defineProperties(ua, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, IS_FIREFOX ? {
  firefox: {
    value: matchNavUA(),
    // will be replaced with the real version number in ready()
    writable: true
  }
} : {
  chrome: {
    value: uaData && parseFloat((_uaData$brands$ = uaData.brands[0]) == null ? void 0 : _uaData$brands$.version) || matchNavUA(true)
  }
}, {
  ready: {
    value: Promise.all([browser.runtime.getPlatformInfo(), browser.runtime.getBrowserInfo == null ? void 0 : browser.runtime.getBrowserInfo(), uaData == null ? void 0 : uaData.getHighEntropyValues([kUaFullVersion])]).then(([{
      os,
      arch
    }, {
      name,
      version
    } = {}, {
      [kUaFullVersion]: fullVer
    } = {}]) => {
      Object.assign(ua, {
        arch,
        os,
        browserName: (name == null ? void 0 : name.toLowerCase()) || 'chrome',
        browserVersion: fullVer || version || matchNavUA(true, true)
      });

      if (IS_FIREFOX) {
        ua.firefox = parseFloat(version) || 0;
      }
    })
  }
}));

function matchNavUA(asChrome, asString) {
  const re = new RegExp(`\\s${asChrome ? 'Chrom(e|ium)' : 'Firefox'}/(\\d+[.0-9]*)|$`, 'i');
  const ver = navigator.userAgent.match(re).pop();
  return asString ? ver : parseFloat(ver);
}

/***/ }),

/***/ "./src/common/ui/code-autocomplete.js":
/*!********************************************!*\
  !*** ./src/common/ui/code-autocomplete.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_0__);

const ID = 'autocompleteOnTyping';
const DEFAULT = 100;
const OPTIONS = 'options';
const STATE = 'state';
const HINT_OPTIONS = 'hintOptions';
const COMPLETE_SINGLE = 'completeSingle';
const PICKED = 'picked';
const TIMER = 'timer'; // eslint-disable-next-line no-return-assign

const getMyState = ({
  [STATE]: state
}) => state[ID] || (state[ID] = {});

const delayedComplete = cm => {
  const options = cm[OPTIONS];
  const hintOptions = options[HINT_OPTIONS] || (options[HINT_OPTIONS] = {});
  const myState = getMyState(cm);
  hintOptions[COMPLETE_SINGLE] = false;
  myState[TIMER] = 0;
  myState[PICKED] = false;
  cm.execCommand('autocomplete');
  setTimeout(() => {
    hintOptions[COMPLETE_SINGLE] = true;
  });
};

const cancelDelay = myState => {
  if (myState[TIMER]) {
    clearTimeout(myState[TIMER]);
    myState[TIMER] = 0;
  }
};

const onChanges = (cm, [info]) => {
  const myState = getMyState(cm);
  const lastTyped = info.text[info.text.length - 1];

  if (cm[STATE].completionActive || info.origin && !info.origin.includes('input') || !lastTyped) {
    return;
  }

  if (myState[PICKED]) {
    myState[PICKED] = false;
    return;
  }

  if (/[-a-z!]$/i.test(lastTyped)) {
    cancelDelay(myState);
    myState[TIMER] = setTimeout(delayedComplete, cm[OPTIONS][ID], cm);
  }
};

const onPicked = cm => {
  getMyState(cm)[PICKED] = true;
};

codemirror__WEBPACK_IMPORTED_MODULE_0___default().defineOption(ID, DEFAULT, (cm, value) => {
  const myState = getMyState(cm);
  const onOff = value ? 'on' : 'off';
  cm[onOff]('changes', onChanges);
  cm[onOff]('pick', onPicked);

  if (myState && !value) {
    cancelDelay(myState);
    delete cm[STATE][ID];
  }
});

/***/ }),

/***/ "./src/common/ui/code-js-mixed-mode.js":
/*!*********************************************!*\
  !*** ./src/common/ui/code-js-mixed-mode.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var codemirror_mode_xml_xml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! codemirror/mode/xml/xml */ "./node_modules/codemirror/mode/xml/xml.js");
/* harmony import */ var codemirror_mode_xml_xml__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_xml_xml__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! codemirror/mode/javascript/javascript */ "./node_modules/codemirror/mode/javascript/javascript.js");
/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var codemirror_mode_css_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! codemirror/mode/css/css */ "./node_modules/codemirror/mode/css/css.js");
/* harmony import */ var codemirror_mode_css_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_css_css__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var codemirror_mode_htmlmixed_htmlmixed__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! codemirror/mode/htmlmixed/htmlmixed */ "./node_modules/codemirror/mode/htmlmixed/htmlmixed.js");
/* harmony import */ var codemirror_mode_htmlmixed_htmlmixed__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_htmlmixed_htmlmixed__WEBPACK_IMPORTED_MODULE_4__);
// Javascript mixed mode for CodeMirror
// Distributed under an MIT license
// Mod of the inactive https://github.com/orionlee/codemirror-js-mixed





codemirror__WEBPACK_IMPORTED_MODULE_0___default().defineMode('javascript-mixed', config => {
  const STYLE_PASS = 'XXX-PASS';
  const IS_END_BACKTICK_RE = /(^|[^\\])`/y;
  const NEXT_QUOTE_RE = {
    "'": /.*?'/,
    '"': /.*?"/,
    '`': /.*?`/
  }; // Using # to prevent inlining in Terser

  const kEnsureProperLocalModeStatePostJsExpr = '#ensureProperLocalModeStatePostJsExpr';
  const kInJsExprInStringTemplate = '#inJsExprInStringTemplate';
  const kIndexOfJsExprStart = '#indexOfJsExprStart';
  const kJsExprDepthInStringTemplate = '#jsExprDepthInStringTemplate';
  const kJsState = '#jsState';
  const kLocalHtmlPlainStringEndPos = '#localHtmlPlainStringEndPos';
  const kLocalMode = '#localMode';
  const kLocalState = '#localState';
  const kMaybeLocalContext = '#maybeLocalContext';
  const kQuoteCharSurroundJsExpr = '#quoteCharSurroundJsExpr';
  const kTokenize = 'tokenize';
  const kTokenizePostJsExpr = '#tokenizePostJsExpr';
  const {
    StringStream
  } = (codemirror__WEBPACK_IMPORTED_MODULE_0___default());
  const cmCopyState = (codemirror__WEBPACK_IMPORTED_MODULE_0___default().copyState);
  const cmStartState = (codemirror__WEBPACK_IMPORTED_MODULE_0___default().startState);
  const cmPass = (codemirror__WEBPACK_IMPORTED_MODULE_0___default().Pass);
  const jsMode = codemirror__WEBPACK_IMPORTED_MODULE_0___default().getMode(config, {
    name: 'javascript'
  });

  const jsTokenQuasi = (() => {
    // create a new stream of a non-ending (1st line of a multiline)
    // string template to obtain tokenQuasi tokenizer
    const dummyStream = new StringStream('`#dummy', 2, {});
    const dummyState = jsMode.startState();
    jsMode.token(dummyStream, dummyState);
    return dummyState[kTokenize];
  })();

  const cssMode = codemirror__WEBPACK_IMPORTED_MODULE_0___default().getMode(config, {
    name: 'css'
  }); // use htmlmixed to support highlighting css in <style> (and to a lesser extent, js in <script>)

  const htmlmixedMode = codemirror__WEBPACK_IMPORTED_MODULE_0___default().getMode(config, {
    name: 'htmlmixed'
  }); // for tokenizing plain string, where matchClosing would cause too many false errors
  // as the html often spans across multiple strings.
  // for plain string , use basic html mode so that it can support non-matching close tags
  // mixed mode is unlikely to be very helpful for plain string anyway

  const htmlNoMatchClosingMode = codemirror__WEBPACK_IMPORTED_MODULE_0___default().getMode(config, {
    name: 'xml',
    htmlMode: true,
    matchClosing: false
  });

  const [forceHtmlModeToAttrContinuedState, htmlStateForAttrValue] = (() => {
    const extractInnards = string => {
      const stream = new StringStream(string, 2, {});
      const state = htmlmixedMode.startState();
      const {
        htmlState
      } = state;

      while (stream.current() !== string) {
        htmlmixedMode.token(stream, state);
      }

      return [htmlState.state, htmlState[kTokenize]];
    }; // tried to obtain the states when the tokenizer encounters an *incomplete* attr value
    // (that would end in second line)


    const attrContinuedState = {
      '"': extractInnards('<p class="someClass'),
      "'": extractInnards('<p class=\'someClass')
    }; // record the state when the tokenizer encounters a *complete* attr value
    // single-quote attr val has the same state

    const stateForAttrValue = extractInnards('<p class="otherClass"')[0];
    /**
     * Force html tokenizer to treat next token as attribute value.
     *
     * Use case:
     * - html tokenizer encounters an js expression inside a complete attribute value
     * e.g., the value in class="foo ${someOtherClass()} bar"
     * - the html tokenizer would next expect another attribute or >
     * - but since we locally process the js expression, and then pass the remaining text
     *   back to html tokenizer, e.g.  bar", in the above example
     * - we want html tokenizer process it as part of attribute value
     * - this function forces the tokenizer to do so.
     *
     * The use case and the solution are both analogous to forceJsModeToQuasi(),
     * which handles tokenizing a single-line string template.
     */

    function forceHtmlModeToAttrContinuedState(stream, htmlState) {
      /*
       * Detect quote type by checking current token last char (use last char instead of
       * first char, because last char also works for multi-lined char value
       * while first char only works for the first line)
       * case it's part of a multi-lined attr value, and is not the last line yet
       * (i.e., no quote at the end) nothing needs to be done as it's already in the proper state.
       * OPEN: the logic breaks down if the last character of the line happens to be a quote
       * , but not the ending quote.
       * E.g., the single quote in the following example is just part of the value
       *  <p  title="foo bar
       *  something '
       *  def">
       * To properly handle it, we need to know the quote type for the current attribute value.
       * However, the quote type is not exposed by the underlying html tokenizer.
       */
      const cont = attrContinuedState[stream.string[stream.pos - 1]];

      if (cont) {
        htmlState.state = cont[0];
        htmlState[kTokenize] = cont[1];
      }
    }

    return [forceHtmlModeToAttrContinuedState, stateForAttrValue];
  })(); // Holds input parameters and return values for a rule execution


  const runCtx = new class RunContext {
    /**
     * The type of the current token determined by the outer javascript mode tokenizer.
     */
    get type() {
      return this.state[kJsState].lastType;
    }

    get text() {
      const value = this.stream.current();
      Object.defineProperty(this, 'text', {
        value,
        configurable: true
      });
      return value;
    }

  }(); // a map of all rules, keyed by id/type for quick lookup during matching

  const rulesById = {};
  const rulesByType = {};
  const rulesByLangCmt = [];

  function tokenIsCharEscaped(stream, charPos) {
    // assume charPos is within current token,
    // i.e., stream.start <= charPos < stream.pos
    // consider cases, for the 5 below:
    //  0123\56  : escaped
    //  012\\56  : not escaped
    //  01\\\56  : escaped
    let isEscaped = false;

    for (let i = charPos - 1; i >= stream.start; i -= 1) {
      if (stream.string[i] === '\\') {
        isEscaped = !isEscaped;
      } else {
        break;
      }
    }

    return isEscaped;
  }
  /**
   * Return the index of searchValue within the current token, i.e., stream.current(),
   * excluding those prefixed with escape. E.g., if searchValue is "${", it will ignore
   * those string with the pattern of "\${", as the dollar sign is escaped.
   *
   * The returned index is relative to the token, rather than the entire stream.
   */


  function tokenIndexOfUnescaped(stream, searchValue) {
    // comparing to the alternative of stream.current().match(searchValueRegex),
    // this implementation avoids a substring creation and regex match
    const searchEndIdxExclusive = stream.pos;
    const tokenStartIdx = stream.start;
    let searchStartIdx = stream.start;

    while (searchStartIdx < searchEndIdxExclusive) {
      const candidate = stream.string.indexOf(searchValue, searchStartIdx);

      if (candidate < 0 || candidate >= searchEndIdxExclusive) {
        return -1;
      } // ensure it's not an escaped one


      if (candidate === tokenStartIdx // candidate is the start of the token, it is not escaped
      || !tokenIsCharEscaped(stream, candidate)) {
        // case find a match
        return candidate - tokenStartIdx;
      } // else case an escaped ${, continue to search


      searchStartIdx = candidate + searchValue.length;
    }

    return -1; // reach beyond token boundary
  }
  /** @this {Rule} */


  function prepReparseStringTemplateInLocalMode({
    stream,
    state
  }) {
    // spit out beginning backtick as a token, and leave the rest of the text for local mode parsing
    stream.backUp(stream.pos - stream.start - (this.hasBeginBacktick !== false)); // workaround needed for 1-line string template,
    // to ensure the ending backtick is parsed correctly.

    state[kJsState][kTokenize] = jsTokenQuasi; // switch to local mode for subsequent text

    state[kLocalMode] = this.mode;
    state[kLocalState] = cmStartState(state[kLocalMode]);
    state[kInJsExprInStringTemplate] = false;
    state[kJsExprDepthInStringTemplate] = 0;
  }
  /** @this {Rule} */


  function isEndBacktick({
    stream,
    state
  }) {
    // check it hits ending backtick for string template,
    // ignoring the backticks that appear inside a JS expression.
    if (!state[kInJsExprInStringTemplate]) {
      IS_END_BACKTICK_RE.lastIndex = Math.max(0, stream.pos - 1);
      return IS_END_BACKTICK_RE.test(stream.string);
    }
  }
  /** @this {Rule} */


  function exitLocalModeWithEndBacktick(ctx) {
    // parse the ending JS string template backtick in js mode
    ctx.style = jsMode.token(ctx.stream, ctx.state[kJsState]);
  }

  function curModeStateOfHtmlmixed(htmlmixedState) {
    return htmlmixedState[kLocalMode] ? htmlmixedState[kLocalState] : htmlmixedState.htmlState;
  }

  Object.assign(htmlmixedMode, {
    /**
     * @return the position of '${' relative to the
     *         current token start position, i.e., stream.start; -1 otherwise.
     */
    [kIndexOfJsExprStart](stream, state) {
      var _localState$kLocalMod;

      const localState = state[kLocalState];
      const modeName = ((_localState$kLocalMod = localState[kLocalMode]) == null ? void 0 : _localState$kLocalMod.name) || 'html';

      switch (modeName) {
        case 'html':
          return tokenIndexOfUnescaped(stream, '${');

        case 'css':
          // css state is in the localState of htmlmixed
          return cssMode[kIndexOfJsExprStart](stream, curModeStateOfHtmlmixed(localState));

        case 'javascript':
          return -1;
        // let js mode handle ${ natively

        default:
          console.error('Unrecognized mode:', modeName);
      }

      return -1; // should never reach here
    },

    [kEnsureProperLocalModeStatePostJsExpr](stream, state, style) {
      var _localState$kLocalMod2;

      const localState = state[kLocalState];
      const modeName = ((_localState$kLocalMod2 = localState[kLocalMode]) == null ? void 0 : _localState$kLocalMod2.name) || 'html';
      const modeState = curModeStateOfHtmlmixed(localState);

      switch (modeName) {
        case 'html':
          if (modeState.state === htmlStateForAttrValue) {
            // case the js expression is an attribute value
            forceHtmlModeToAttrContinuedState(stream, modeState);
          }

          break;

        case 'css':
          cssMode[kEnsureProperLocalModeStatePostJsExpr](stream, modeState, style);
          break;

        case 'javascript':
          break;
        // NO-OP

        default:
          console.error('Unrecognized mode:', modeName);
      }
    }

  });
  Object.assign(cssMode, {
    [kIndexOfJsExprStart](stream) {
      // In most cases, CSS tokenizer treats $ as a single token,
      // detect ${ for those cases
      const {
        string,
        start
      } = stream;

      if (string[start] === '$' && string[start + 1] === '{') {
        return 0;
      } // else look for ${ in the entire token.
      //   It only works for limited cases such as content property value,
      //   where CSS parser sees entire expression as string.


      return tokenIndexOfUnescaped(stream, '${');
    },

    [kEnsureProperLocalModeStatePostJsExpr](stream, state, style) {
      // for case quoted string, remember the quote style, to be used in tokenizePostJsExpr
      if (style === 'string') {
        state[kQuoteCharSurroundJsExpr] = stream.string[stream.start];
      } // Note: we want to force the text after the JS expression be tokenized as string (up till the end quote),
      // but CSS tokenizer does not expose it, not even in the indirect way,
      // (akin to what we do for HTML attributes, also quoted).
      // We compensate it by remembering the state and do our own in tokenizePostJsExpr()

    },

    [kTokenizePostJsExpr](stream, state) {
      const quoteInUse = state[kQuoteCharSurroundJsExpr]; // first ensure, we let the css tokenizer continue the next time

      state[kTokenizePostJsExpr] = null;
      state[kQuoteCharSurroundJsExpr] = null;

      if (!quoteInUse) {
        return null;
      } // Now handle quoted string cases such as content: "suffix${someExpr()}prefix";
      // to return prefix" as a string token in the above case
      // regex: non-greedy match up to the immediate next quote char, to avoid over match
      // in the unexpected case (likely bugs) that we cannot find end quote, do nothing more
      // and let parent mode tokenizer to do its work


      return stream.match(NEXT_QUOTE_RE[quoteInUse], true) ? 'string' : null;
    }

  });

  function tokenJsExpressionInStringTemplate(stream, state) {
    const style = jsMode.token(stream, state[kJsState]); // track ${ , } to determine when the expression is complete.

    if (style === 'string-2' && tokenIndexOfUnescaped(stream, '${') >= 0) {
      // case nested ${
      state[kJsExprDepthInStringTemplate] += 1;
    } else if (style === 'string-2' && state[kJsState].lastType === '}') {
      // case expression-ending }
      // Note: must check BOTH style and lastType.
      // If there are blank spaces after },
      // when tokenizing the blank spaces, the style is null but the lastType remains to be }
      // (the one with meaningful token)
      // once it reaches back to 0, the logic would let the parent local mode handle the next token
      if ((state[kJsExprDepthInStringTemplate] -= 1) <= 0) {
        state[kInJsExprInStringTemplate] = false;
        const jsExpr = state[kLocalMode][kTokenizePostJsExpr];

        if (jsExpr) {
          // unless the mode also explicitly specify a tokenizer.
          state[kTokenizePostJsExpr] = jsExpr;
        }
      }
    }

    return style;
  } // For use of tokenInLocalModeStringTemplate,
  // to handle cases that the token contains string template ending backtick, i.e.,
  // bleeding over the string template


  function excludeEndBacktickFromToken(stream, style) {
    if (style === 'string-2') {
      // the token is meant to be a string template, e.g., string template within <script> tag
      // so do nothing
      return;
    }

    const backtickPos = tokenIndexOfUnescaped(stream, '`');

    if (backtickPos < 0) {
      return;
    }

    stream.backUp(stream.pos - stream.start - backtickPos);
  }
  /** @this {Rule} */


  function tokenInLocalModeStringTemplate(ctx) {
    const {
      stream,
      state
    } = ctx;

    if (state[kInJsExprInStringTemplate]) {
      ctx.style = tokenJsExpressionInStringTemplate(stream, state);
      return;
    }

    if (state[kTokenizePostJsExpr]) {
      ctx.style = state[kTokenizePostJsExpr](stream, state);
      return;
    } // else normal local mode tokenization


    const style = state[kLocalMode].token(stream, state[kLocalState]);
    excludeEndBacktickFromToken(stream, style);
    const jsExprStart = state[kLocalMode][kIndexOfJsExprStart](stream, state);

    if (jsExprStart < 0) {
      ctx.style = style;
      return;
    } // case there is an js expression


    state[kLocalMode][kEnsureProperLocalModeStatePostJsExpr](stream, state, style); // backup current token to exclude js expression, so that the next token starts with ${
    // MUST happen after ensureProperLocalModeStatePostJsExpr() call, as the ensure call
    // might need to access the token before js expression exclusion

    stream.backUp(stream.pos - stream.start - jsExprStart);
    state[kInJsExprInStringTemplate] = true; // next time the tokenizer will see ${... , the js parser, currently in string template/quasi mode
    // would recognize it as an js expression and tokenize as such.
    // Note: cannot increment state[kJsExprDepthInStringTemplate] yet,
    // as the ${ to be handled by js tokenizer the next time

    ctx.style = style;
  }
  /** @this {Rule} */


  function prepReparsePlainStringInLocalMode({
    stream,
    state
  }) {
    const oldPos = stream.pos; // spit out beginning beginning quote as a token, and leave the rest of the text for local mode parsing

    stream.backUp(stream.pos - stream.start - 1); // switch to local mode for subsequent text
    // and use end quote position to detect the end of the local html mode

    (state[kLocalState] = cmStartState(state[kLocalMode] = this.mode))[kLocalHtmlPlainStringEndPos] = oldPos;
  }
  /** @this {Rule} */


  function exitLocalModeWithEndQuote(ctx) {
    // parse the ending JS string quote,
    // cannot use the jsMode to parse, as it will be treated as the beginning of a string.
    // so we simulate it here.
    ctx.stream.next(); // should be single or double quote;

    ctx.style = 'string'; // the expected style
  }
  /** @this {Rule} */


  function tokenInLocalModePlainString(ctx) {
    const {
      stream,
      state
    } = ctx;
    const style = state[kLocalMode].token(stream, state[kLocalState]);
    const pos = state[kLocalState][kLocalHtmlPlainStringEndPos];

    if (stream.pos >= pos) {
      // backUp text beyond the string, plus one to exclude end quote
      stream.backUp(stream.pos - pos + 1);
    }

    ctx.style = style;
  }
  /** @typedef {function(RunContext):(?boolean)} RuleLambda */

  /**
   * @typedef Rule
   * @property {boolean} id - current context
   * @property {?string} next - next context or null
   * @property {?string} type - token type
   * @property {?string} style - token style, only 'comment' is handled for language hints
   * @property {Object} [mode] - CodeMirror mode
   * @property {boolean} [hasBeginBacktick=true]
   * @property {RuleLambda|string|RegExp} match - matching function/text/regexp,
   * in case of text/regexp the function is auto-created by makeRules()
   * @property {RuleLambda} [onMatch] - runs if matched
   * @property {RuleLambda} [onMiss] - runs if not matched
   */

  /**
   * @param {Object<string,Rule[]>} prefixedRuleGroups
   * @return {Rule[]}
   */


  function makeRules(prefixedRuleGroups) {
    Object.entries(prefixedRuleGroups).forEach(([seqPrefix, rules]) => {
      rules.forEach((rule, i) => {
        const {
          match,
          type,
          style
        } = rule;

        if (typeof match !== 'function') {
          if (typeof match === 'string') {
            rule.match = ctx => ctx.type === type && ctx.text === match;
          } else if (match instanceof RegExp) {
            rule.match = type ? ctx => ctx.type === type && match.test(ctx.text) : ctx => match.test(ctx.text);
          } else {
            rule.match = ctx => ctx.type === type;
          }
        }

        if (rule.id === undefined) {
          rule.id = i ? `${seqPrefix}-${i}` : '';
        }

        if (rule.next === undefined) {
          rule.next = `${seqPrefix}-${i + 1}`;
        }

        if (rule.id) {
          rulesById[rule.id] = [rule];
        }

        if (style === 'comment') {
          rulesByLangCmt.push(rule);
        }

        (rulesByType[type || ''] || (rulesByType[type || ''] = [])).push(rule);
      });
    });
  }

  function matchRule(stream, state, jsTokenStyle) {
    runCtx.jsTokenStyle = jsTokenStyle;
    runCtx.state = state;
    runCtx.stream = stream;
    runCtx.style = STYLE_PASS;
    delete runCtx.text;
    const id = state[kMaybeLocalContext] || '';
    const rules = id ? rulesById[id] : jsTokenStyle === 'comment' && runCtx.text[1] === '*' ? rulesByLangCmt : rulesByType[runCtx.type];

    if (rules) {
      for (let _i = 0; _i < rules.length; _i++) {
        const rule = rules[_i];

        if (rule.id === id) {
          if (rule.match(runCtx)) {
            state[kMaybeLocalContext] = rule.next;

            if (rule.next == null) {
              // local mode done, reset
              state[kLocalMode] = null;
              state[kLocalState] = null;
            }

            rule.onMatch == null ? void 0 : rule.onMatch(runCtx);
            break;
          } // case rule transition criteria not matched


          if (rule.onMiss) {
            rule.onMiss(runCtx);
          } else {
            // default not matched logic: reset local mode matching
            state[kMaybeLocalContext] = null;
          }
        }
      }
    }

    return runCtx.style;
  } // define the transition rules to enter local CSS mode;


  makeRules({
    // GM_addStyle(`css-string`);
    css1: [{
      match: 'GM_addStyle',
      type: 'variable'
    }, {
      match: '(',
      type: '('
    }, {
      type: 'quasi',
      // if it's a string template
      next: 'css-in',
      mode: cssMode,
      onMatch: prepReparseStringTemplateInLocalMode
    }, {
      match: isEndBacktick,
      id: 'css-in',
      next: null,
      // then exit local css mode
      onMatch: exitLocalModeWithEndBacktick,
      onMiss: tokenInLocalModeStringTemplate // else stay in local mode

    }],
    // GM.addStyle(`css-string`);
    css2: [{
      match: 'GM',
      type: 'variable'
    }, {
      match: '.',
      type: '.'
    }, {
      match: 'addStyle',
      type: 'variable'
    }, {
      match: '(',
      type: '('
    }, {
      type: 'quasi',
      // if it's a string template
      next: 'css-in',
      mode: cssMode,
      onMatch: prepReparseStringTemplateInLocalMode
    }],
    // var someCSS = /* css */ `css-string`
    // var someCSS = /* lang=css */ `css-string`
    // var someCSS = /* language=css */ `css-string`
    css3: [{
      style: 'comment',
      match: /^\/\*\s*(lang(uage)?\s*=\s*)?css\s*\*\/$/i
    }, {
      type: 'quasi',
      next: 'css-in',
      mode: cssMode,
      onMatch: prepReparseStringTemplateInLocalMode
    }]
  }); // define the transition rules to enter local html mode;

  makeRules({
    // inside a html string template
    html1: [{
      match: isEndBacktick,
      id: 'html-in',
      next: null,
      // then exit local html mode
      onMatch: exitLocalModeWithEndBacktick,
      onMiss: tokenInLocalModeStringTemplate // else stay in local mode

    }],
    // var someHTML = /* html */ `html-string`
    // var someHTML = /* lang=html */ `html-string`
    // var someHTML = /* language=html */ `html-string`
    html2: [{
      style: 'comment',
      match: /^\/\*\s*(lang(uage)?\s*=\s*)?html\s*\*\/$/i
    }, {
      type: 'quasi',
      next: 'html-in',
      mode: htmlmixedMode,
      onMatch: prepReparseStringTemplateInLocalMode
    }],
    // for plain string (single or double quoted) that looks like html
    // e.g., '<div class="foo">hello', "</div>", '  <hr/>', etc.
    html3: [{
      match: /^['"]\s*<\/?[a-z\d]+(\s|\/?>)/i,
      type: 'string',
      mode: htmlNoMatchClosingMode,
      onMatch: prepReparsePlainStringInLocalMode
    }, // match the expected ending quote by position
    {
      match: ctx => ctx.stream.start >= ctx.state[kLocalState][kLocalHtmlPlainStringEndPos] - 1,
      next: null,
      // then exit local html mode
      onMatch: exitLocalModeWithEndQuote,
      onMiss: tokenInLocalModePlainString // else stay local mode

    }],
    // for HTML string template (without inline comment as a hint)
    html4: [{
      match: /^`\s*<\/?[a-z\d]+(\s|\/?>)/i,
      type: 'quasi',
      next: 'html-in',
      mode: htmlmixedMode,
      onMatch: prepReparseStringTemplateInLocalMode
    }],
    // for HTML string template (where first line is blank, html started in second line)
    html5: [// first line is blank
    {
      match: /^`(\\)?\s*$/,
      type: 'quasi'
    }, // second line starts with a tag
    {
      match: /\s*<\/?[a-z\d]+(\s|\/?>)/i,
      type: 'quasi',
      next: 'html-in',
      mode: htmlmixedMode,
      hasBeginBacktick: false,
      onMatch: prepReparseStringTemplateInLocalMode
    }]
  });

  function jsToken(stream, state) {
    // adapt the existing jsMode tokenizer with the wrapper state
    let tokenStyle = null;

    if (!state[kLocalMode]) {
      // when in local html/css context, skip js parsing,
      // so as not to mess up js tokenizer's state.
      tokenStyle = jsMode.token(stream, state[kJsState]);

      if (tokenStyle === null) {
        // case the token is not relevant semantically, e.g., space or line break;
        // just return, skip local mode match, as such token is not reflected in stream/state
        // so the local mode matcher will end up seeing previous token.
        return state[kJsState][kTokenize] === jsTokenQuasi ? 'string-2' : null;
      }
    } // optimization: short-circuit to skip local mode match when the rules won't cover
    // Note: if the rules change (the <start> ones), the conditions here might need to be updated accordingly.


    if (state[kMaybeLocalContext] == null && tokenStyle !== 'variable' && tokenStyle !== 'comment' && tokenStyle !== 'string' && tokenStyle !== 'string-2') {
      return tokenStyle;
    } // match to see if it needs to switch to local html mode, return local mode style if applicable


    const maybeLocalStyle = matchRule(stream, state, tokenStyle);

    if (maybeLocalStyle !== STYLE_PASS) {
      return maybeLocalStyle;
    } // Differentiate regexps and templates, TODO: remove when implemented in CodeMirror


    if (tokenStyle === 'string-2' && state[kJsState].lastType === 'regexp') {
      return 'string-2 regexp';
    }

    return tokenStyle;
  }

  return {
    startState: () => ({
      [kInJsExprInStringTemplate]: false,
      [kJsExprDepthInStringTemplate]: 0,
      [kJsState]: cmStartState(jsMode),
      [kLocalMode]: null,
      [kLocalState]: null,
      [kMaybeLocalContext]: null,
      [kQuoteCharSurroundJsExpr]: null,
      [kTokenizePostJsExpr]: null
    }),
    copyState: state => ({
      [kInJsExprInStringTemplate]: state[kInJsExprInStringTemplate],
      [kJsExprDepthInStringTemplate]: state[kJsExprDepthInStringTemplate],
      [kJsState]: cmCopyState(jsMode, state[kJsState]),
      [kLocalMode]: state[kLocalMode],
      [kLocalState]: state[kLocalState] ? cmCopyState(state[kLocalMode], state[kLocalState]) : null,
      [kMaybeLocalContext]: state[kMaybeLocalContext],
      [kQuoteCharSurroundJsExpr]: state[kQuoteCharSurroundJsExpr],
      [kTokenizePostJsExpr]: state[kTokenizePostJsExpr]
    }),
    // token(stream, state)
    token: jsToken,

    indent(state, textAfter, line) {
      const localMode = state[kLocalMode];

      if (!localMode) {
        return jsMode.indent(state[kJsState], textAfter, line);
      }

      if (localMode.indent) {
        return localMode.indent(state[kLocalState], textAfter, line);
      }

      return cmPass;
    },

    innerMode(state) {
      return {
        state: state[kLocalState] || state[kJsState],
        mode: state[kLocalMode] || jsMode
      };
    }

  };
}, 'javascript', 'xml', 'css', 'htmlmixed');

/***/ }),

/***/ "./src/common/ui/code-trailing-spaces.js":
/*!***********************************************!*\
  !*** ./src/common/ui/code-trailing-spaces.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "killTrailingSpaces": () => (/* binding */ killTrailingSpaces)
/* harmony export */ });
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror */ "./node_modules/codemirror/lib/codemirror.js");
/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_0__);

const KILL_OPT = 'killTrailingSpaceOnSave';
const SHOW_OPT = 'showTrailingSpace';
const OVERLAY = 'trailingspace';
const DEFAULTS = {
  [KILL_OPT]: true,
  [SHOW_OPT]: true
};

if (!''.trimEnd) {
  // TODO: remove when min_chrome_version>=66, strict_min_version>=61
  String.prototype.trimEnd = function _() {
    return this.replace(/\s+$/, '');
  };
}

const killTrailingSpaces = (cm, placeholders) => {
  if (!cm.options[KILL_OPT]) {
    return cm.getValue();
  }

  const cursorLines = cm.doc.sel.ranges.map(r => r.head.line);
  let res = ''; // progressive concatenation is efficient in modern browsers

  let line = 0;
  cm.operation(() => {
    cm.eachLine(({
      text
    }) => {
      const trimmed = text.trimEnd();
      const len1 = trimmed.length;
      const len2 = text.length;
      res += (line ? '\n' : '') + trimmed; // The saved code is fully trimmed, but we keep the spaces in cursor line(s)

      if (len1 !== len2 && !cursorLines.includes(line)) {
        cm.replaceRange('', {
          line,
          ch: len1
        }, {
          line,
          ch: len2
        }, `*${KILL_OPT}`); // `*` reuses the same undo record for performance
      }

      line += 1;
    });
  });
  placeholders.forEach(p => {
    p.body = p.body.trimEnd();
  });
  return res;
};
codemirror__WEBPACK_IMPORTED_MODULE_0___default().defineOption(SHOW_OPT, DEFAULTS[SHOW_OPT], (cm, val, prev) => {
  if (prev === (codemirror__WEBPACK_IMPORTED_MODULE_0___default().Init)) prev = false;

  if (prev && !val) {
    cm.removeOverlay(OVERLAY);
  } else if (!prev && val) {
    cm.addOverlay({
      token(stream) {
        const s = stream.string;
        const i = /\s*$/.exec(s).index;

        if (i > stream.pos) {
          stream.pos = i;
          return null;
        }

        stream.pos = s.length;
        return OVERLAY;
      },

      name: OVERLAY
    });
  }
});
Object.assign((codemirror__WEBPACK_IMPORTED_MODULE_0___default().defaults), DEFAULTS);

/***/ }),

/***/ "./src/common/ui/favicon.js":
/*!**********************************!*\
  !*** ./src/common/ui/favicon.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isHiDPI": () => (/* binding */ isHiDPI)
/* harmony export */ });
const isHiDPI = matchMedia('screen and (min-resolution: 144dpi)').matches;

if (IS_FIREFOX) {
  // Firefox doesn't show favicon
  const el = document.createElement('link');
  el.rel = 'icon';
  el.href = `${ICON_PREFIX}${isHiDPI ? 32 : 16}.png`;
  document.head.appendChild(el);
}

/***/ }),

/***/ "./src/common/ui/index.js":
/*!********************************!*\
  !*** ./src/common/ui/index.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "calcRows": () => (/* binding */ calcRows),
/* harmony export */   "focusMe": () => (/* binding */ focusMe),
/* harmony export */   "render": () => (/* binding */ render),
/* harmony export */   "showConfirmation": () => (/* binding */ showConfirmation),
/* harmony export */   "showMessage": () => (/* binding */ showMessage),
/* harmony export */   "vFocus": () => (/* binding */ vFocus)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm-bundler.js");
/* harmony import */ var vueleton_lib_modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vueleton/lib/modal */ "./node_modules/vueleton/lib/modal/index.js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/common/util */ "./src/common/util.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./message */ "./src/common/ui/message.vue");





/** Showing unexpected errors in UI so that the users can notify us */

addEventListener('error', e => showUnhandledError(e.error));
addEventListener('unhandledrejection', e => showUnhandledError(e.reason));

function showUnhandledError(err) {
  if (!err) return;
  const el = document.createElement('pre'); // using an inline style because we don't know if our CSS is loaded at this stage

  el.style.cssText = `\
    position:fixed;
    z-index:${1e9};
    left:0;
    right:0;
    bottom:0;
    background:#000;
    color:red;
    padding: 1em;
  `.replace(/;/g, '!important;');
  el.textContent = `${IS_FIREFOX && err.message || ''}\n${err.stack || ''}`.trim() || err;

  el.onclick = () => getSelection().setBaseAndExtent(el, 0, el, 1);

  (document.body || document.documentElement).appendChild(el);
}

function showMessage(message) {
  const modal = vueleton_lib_modal__WEBPACK_IMPORTED_MODULE_2__["default"].show(() => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)(_message__WEBPACK_IMPORTED_MODULE_4__["default"], {
    message,

    onDismiss() {
      modal.close();
      message.onDismiss == null ? void 0 : message.onDismiss();
    }

  }), {
    transition: 'in-out'
  });

  if (message.buttons) {
    // TODO: implement proper keyboard navigation, autofocus, and Enter/Esc in Modal module
    document.querySelector('.vl-modal button').focus();
  } else {
    const timer = setInterval(() => {
      if (!document.querySelector('.vl-modal .modal-content:hover')) {
        clearInterval(timer);
        modal.close();
      }
    }, message.timeout || 2000);
  }
}
/**
 * @param {string} text - the text to display in the modal
 * @param {Object} cfg
 * @param {string | false} [cfg.input=false] if not false, shows a text input with this string
 * @param {?Object|false} [cfg.ok] additional props for the Ok button or `false` to remove it
 * @param {?Object|false} [cfg.cancel] same for the Cancel button
 * @return {Promise<?string|boolean>}
 *   `input` is false: <boolean> i.e. true on Ok, false otherwise;
 *   `input` is string: <?string> i.e. string on Ok, null otherwise;
 */

function showConfirmation(text, {
  ok,
  cancel,
  input = false
} = {}) {
  return new Promise(resolve => {
    const hasInput = input !== false;

    const onCancel = () => resolve(hasInput ? null : false);

    const onOk = val => resolve(!hasInput || val);

    showMessage({
      input,
      text,
      buttons: [ok !== false && (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
        text: (0,_home_runner_work_violentmonkey_violentmonkey_src_common_util__WEBPACK_IMPORTED_MODULE_3__.i18n)('buttonOK'),
        onClick: onOk
      }, ok), cancel !== false && (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
        text: (0,_home_runner_work_violentmonkey_violentmonkey_src_common_util__WEBPACK_IMPORTED_MODULE_3__.i18n)('buttonCancel'),
        onClick: onCancel
      }, cancel)].filter(Boolean),
      onBackdropClick: onCancel,
      onDismiss: onCancel // Esc key

    });
  });
}
/** @returns {?number} Number of lines + 1 if the last line is not empty */

function calcRows(val) {
  return val && val.match(/$/gm).length + !val.endsWith('\n');
}
function render(App, el) {
  const app = (0,vue__WEBPACK_IMPORTED_MODULE_1__.createApp)(App);
  Object.assign(app.config.globalProperties, {
    i18n: _home_runner_work_violentmonkey_violentmonkey_src_common_util__WEBPACK_IMPORTED_MODULE_3__.i18n,
    calcRows
  });

  if (!el) {
    el = document.createElement('div');
    document.body.append(el);
  }

  app.mount(el);
  return app;
}
/**
 * Focuses the first element with `focusme` attribute or root, which enables keyboard scrolling.
 * Not using `autofocus` to avoid warnings in console on page load.
 * A child component should use nextTick to change focus, which runs later.
 */

function focusMe(el) {
  (0,vue__WEBPACK_IMPORTED_MODULE_1__.nextTick)(() => {
    el = el.querySelector('[focusme]') || el;
    el.tabIndex = -1;
    el.focus();
  });
}

function vFocusFactory() {
  const handle = (el, value, oldValue) => {
    if (value === oldValue) return;

    if (value == null || value) {
      el.tabIndex = -1;
      el.focus();
    }
  };

  return {
    mounted(el, binding) {
      handle(el, binding.value, {});
    },

    updated(el, binding) {
      handle(el, binding.value, binding.oldValue);
    }

  };
}
/**
 * Usage:
 *
 * ```html
 * <!-- Focus on mounted -->
 * <div v-focus>...</div>
 *
 * <!-- Focus whenever `value` becomes truthy -->
 * <div v-focus="value">...</div>
 * ```
 */


const vFocus = vFocusFactory();

/***/ }),

/***/ "./src/common/ui/style/index.js":
/*!**************************************!*\
  !*** ./src/common/ui/style/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../options */ "./src/common/options.js");
/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./style.css */ "./src/common/ui/style/style.css");


let style;
let styleTheme;
/** @type {CSSMediaRule[]} */

let darkMediaRules;
let localStorage = {};
/* Accessing `localStorage` in may throw in Private Browsing mode or if dom.storage is disabled.
 * Since it allows object-like access, we'll map it to a variable with a fallback to a dummy. */

try {
  (localStorage = global.localStorage || {}).foo;
} catch (e) {
  /* keep the dummy object */
}

const CACHE_KEY = 'cacheCustomCSS';

const setStyle = (css, elem) => {
  if (css && !elem) {
    elem = document.createElement('style');
    document.documentElement.appendChild(elem);
  }

  if ((css || elem) && elem.textContent !== css) {
    elem.textContent = css;
  }

  return elem;
};

const setUiTheme = theme => {
  const darkThemeCondition = '(prefers-color-scheme: dark)';
  const mediaText = theme === 'dark' && 'screen' || theme === 'light' && 'not all' || darkThemeCondition;

  if (!darkMediaRules) {
    darkMediaRules = [];

    for (let _i = 0, _document$styleSheets = document.styleSheets; _i < _document$styleSheets.length; _i++) {
      const sheet = _document$styleSheets[_i];

      for (let _i2 = 0, _sheet$cssRules = sheet.cssRules; _i2 < _sheet$cssRules.length; _i2++) {
        var _rule$conditionText;

        const rule = _sheet$cssRules[_i2];

        if ((_rule$conditionText = rule.conditionText) != null && _rule$conditionText.includes(darkThemeCondition)) {
          darkMediaRules.push(rule);
        }
      }
    }
  }

  darkMediaRules.forEach(rule => {
    rule.media.mediaText = mediaText;
  });
};

style = setStyle(localStorage[CACHE_KEY] || '');
_options__WEBPACK_IMPORTED_MODULE_0__["default"].hook(changes => {
  let v;

  if ((v = changes.editorTheme) != null && !global.location.pathname.startsWith('/popup')) {
    styleTheme = setStyle(v, styleTheme);
  }

  if ((v = changes.uiTheme) != null) {
    setUiTheme(v);
  }

  if ((v = changes.customCSS) != null) {
    style = setStyle(v, style);

    if (v && localStorage[CACHE_KEY] !== v) {
      localStorage[CACHE_KEY] = v;
    } else if (!v && CACHE_KEY in localStorage) {
      delete localStorage[CACHE_KEY];
    }
  }
});

if ('ontouchstart' in document) {
  document.documentElement.classList.add('touch');
}

/***/ }),

/***/ "./src/common/util.js":
/*!****************************!*\
  !*** ./src/common/util.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blob2base64": () => (/* binding */ blob2base64),
/* harmony export */   "buffer2string": () => (/* binding */ buffer2string),
/* harmony export */   "compareVersion": () => (/* binding */ compareVersion),
/* harmony export */   "dataUri2text": () => (/* binding */ dataUri2text),
/* harmony export */   "debounce": () => (/* binding */ debounce),
/* harmony export */   "dumpScriptValue": () => (/* binding */ dumpScriptValue),
/* harmony export */   "ensureArray": () => (/* binding */ ensureArray),
/* harmony export */   "formatByteLength": () => (/* binding */ formatByteLength),
/* harmony export */   "formatTime": () => (/* binding */ formatTime),
/* harmony export */   "getRandomString": () => (/* binding */ getRandomString),
/* harmony export */   "getUniqId": () => (/* binding */ getUniqId),
/* harmony export */   "i18n": () => (/* binding */ i18n),
/* harmony export */   "isDataUri": () => (/* binding */ isDataUri),
/* harmony export */   "isEmpty": () => (/* binding */ isEmpty),
/* harmony export */   "isHttpOrHttps": () => (/* binding */ isHttpOrHttps),
/* harmony export */   "isRemote": () => (/* binding */ isRemote),
/* harmony export */   "memoize": () => (/* binding */ memoize),
/* harmony export */   "noop": () => (/* binding */ noop),
/* harmony export */   "request": () => (/* binding */ request),
/* harmony export */   "requestLocalFile": () => (/* binding */ requestLocalFile),
/* harmony export */   "string2uint8array": () => (/* binding */ string2uint8array),
/* harmony export */   "throttle": () => (/* binding */ throttle),
/* harmony export */   "toString": () => (/* binding */ toString)
/* harmony export */ });
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_src_common_consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common/consts */ "./src/common/consts.js");
// SAFETY WARNING! Exports used by `injected` must make ::safe() calls and use __proto__:null

function i18n(name, args) {
  return _home_runner_work_violentmonkey_violentmonkey_src_common_consts__WEBPACK_IMPORTED_MODULE_0__.browser.i18n.getMessage(name, args) || name;
}
function toString(param) {
  if (param == null) return '';
  return `${param}`;
}
function memoize(func, resolver = toString) {
  const cacheMap = {};

  function memoized(...args) {
    // Used in safe context
    // eslint-disable-next-line no-restricted-syntax
    const key = resolver(...args);
    let cache = cacheMap[key];

    if (!cache) {
      cache = {
        value: func.apply(this, args)
      };
      cacheMap[key] = cache;
    }

    return cache.value;
  }

  return memoized;
}
function debounce(func, time) {
  let startTime;
  let timer;
  let callback;
  time = Math.max(0, +time || 0);

  function checkTime() {
    timer = null;
    if (performance.now() >= startTime) callback();else checkTimer();
  }

  function checkTimer() {
    if (!timer) {
      const delta = startTime - performance.now();
      timer = setTimeout(checkTime, delta);
    }
  }

  function debouncedFunction(...args) {
    startTime = performance.now() + time;

    callback = () => {
      callback = null;
      func.apply(this, args);
    };

    checkTimer();
  }

  return debouncedFunction;
}
function throttle(func, time) {
  let lastTime = 0;
  time = Math.max(0, +time || 0);

  function throttledFunction(...args) {
    const now = performance.now();

    if (lastTime + time < now) {
      lastTime = now;
      func.apply(this, args);
    }
  }

  return throttledFunction;
}
function noop() {}
function getRandomString(minLength = 10, maxLength = 0) {
  for (let rnd = ''; rnd += Math.random().toString(36).slice(2);) {
    if (rnd.length >= minLength) return maxLength ? rnd.slice(0, maxLength) : rnd;
  }
}
function getUniqId(prefix = 'VM') {
  return prefix + getRandomString();
}
/**
 * @param {ArrayBuffer|Uint8Array|Array} buf
 * @param {number} [offset]
 * @param {number} [length]
 * @return {string} a binary string i.e. one byte per character
 */

function buffer2string(buf, offset = 0, length = 1e99) {
  // The max number of arguments varies between JS engines but it's >32k so we're safe
  const sliceSize = 8192;
  const slices = [];
  const arrayLen = buf.length; // present on Uint8Array/Array

  const end = Math.min(arrayLen || buf.byteLength, offset + length);
  const needsSlicing = arrayLen == null || offset || end > sliceSize;

  for (; offset < end; offset += sliceSize) {
    slices.push(String.fromCharCode.apply(null, needsSlicing ? new Uint8Array(buf, offset, Math.min(sliceSize, end - offset)) : buf));
  }

  return slices.join('');
}
/**
 * Faster than buffer2string+btoa: 2x in Chrome, 10x in FF
 * @param {Blob} blob
 * @param {number} [offset]
 * @param {number} [length]
 * @return {Promise<string>} base64-encoded contents
 */

function blob2base64(blob, offset = 0, length = 1e99) {
  if (offset || length < blob.size) {
    blob = blob.slice(offset, offset + length);
  }

  return !blob.size ? '' : new Promise(resolve => {
    const reader = new FileReader();
    reader.readAsDataURL(blob);

    reader.onload = () => {
      const res = reader.result;
      resolve(res.slice(res.indexOf(',') + 1));
    };
  });
}
function dataUri2text(url) {
  const i = url.indexOf(','); // a non-base64 data: uri may have many `,`

  const meta = url.slice(0, i);
  url = decodeURIComponent(url.slice(i + 1));
  url = /(^|;)\s*base64\s*(;|$)/.test(meta) ? atob(url) : url;
  return /[\x80-\xFF]/.test(url) ? new TextDecoder().decode(string2uint8array(url)) : url;
}
function string2uint8array(str) {
  const len = str.length;
  const array = new Uint8Array(len);

  for (let i = 0; i < len; i += 1) {
    array[i] = str.charCodeAt(i);
  }

  return array;
}
const VERSION_RE = /^(.*?)-([-.0-9a-z]+)|$/i;
const DIGITS_RE = /^\d+$/; // using regexp to avoid +'1e2' being parsed as 100

/** @return -1 | 0 | 1 */

function compareVersion(ver1, ver2) {
  // Used in safe context
  // eslint-disable-next-line no-restricted-syntax
  const [, main1 = ver1 || '', pre1] = VERSION_RE.exec(ver1); // eslint-disable-next-line no-restricted-syntax

  const [, main2 = ver2 || '', pre2] = VERSION_RE.exec(ver2);
  const delta = compareVersionChunk(main1, main2) || !pre1 - !pre2 // 1.2.3-pre-release is less than 1.2.3
  || pre1 && compareVersionChunk(pre1, pre2, true); // if pre1 is present, pre2 is too

  return delta < 0 ? -1 : +!!delta;
}

function compareVersionChunk(ver1, ver2, isSemverMode) {
  const parts1 = ver1.split('.');
  const parts2 = ver2.split('.');
  const len1 = parts1.length;
  const len2 = parts2.length;
  const len = (isSemverMode ? Math.min : Math.max)(len1, len2);
  let delta;

  for (let i = 0; !delta && i < len; i += 1) {
    const a = parts1[i];
    const b = parts2[i];

    if (isSemverMode) {
      delta = DIGITS_RE.test(a) && DIGITS_RE.test(b) ? a - b : a > b || a < b && -1;
    } else {
      delta = (parseInt(a, 10) || 0) - (parseInt(b, 10) || 0);
    }
  }

  return delta || isSemverMode && len1 - len2;
}

const units = [['min', 60], ['h', 24], ['d', 1000, 365], ['y']];
function formatTime(duration) {
  duration /= 60 * 1000;
  const unitInfo = units.find(item => {
    const max = item[1];
    if (!max || duration < max) return true;
    const step = item[2] || max;
    duration /= step;
    return false;
  });
  return `${duration | 0}${unitInfo[0]}`;
}
function formatByteLength(len, noBytes) {
  if (!len) return '';
  if (len < 1024 && !noBytes) return `${len} B`;
  if ((len /= 1024) < 1024) return `${Math.round(len)} k`;
  return `${+(len / 1024).toFixed(1)} M`;
} // Used by `injected`

function isEmpty(obj) {
  for (const key in obj) {
    if (hasOwnProperty(obj, key)) {
      return false;
    }
  }

  return true;
}
function ensureArray(data) {
  return Array.isArray(data) ? data : [data];
}
const binaryTypes = ['blob', 'arraybuffer'];
/**
 * @param {string} url
 * @param {VMReq.Options} options
 * @return {Promise<VMReq.Response>}
 */

async function requestLocalFile(url, options = {}) {
  // only GET method is allowed for local files
  // headers is meaningless
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    /** @type {VMReq.Response} */

    const result = {
      headers: {
        get: name => xhr.getResponseHeader(name)
      }
    };
    const {
      [kResponseType]: responseType
    } = options;
    xhr.open('GET', url, true);
    if (binaryTypes.includes(responseType)) xhr[kResponseType] = responseType;

    xhr.onload = () => {
      // status for `file:` protocol will always be `0`
      result.status = xhr.status || 200;
      result.data = xhr[binaryTypes.includes(responseType) ? kResponse : kResponseText];

      if (responseType === 'json') {
        try {
          result.data = JSON.parse(result.data);
        } catch (_unused) {// ignore invalid JSON
        }
      }

      if (result.status > 300) {
        reject(result);
      } else {
        resolve(result);
      }
    };

    xhr.onerror = () => {
      result.status = -1;
      reject(result);
    };

    xhr.send();
  });
}
const isLocalUrlRe = /^(file:\/\/|about:|data:|https?:\/\/([^@/]*@)?(localhost|127\.0\.0\.1|(192\.168|172\.16|10\.0)\.\d+\.\d+|\[(::1|(fe80|fc00)::[.:0-9a-f]+)]|[^/:]+\.(test|example|invalid|localhost))(:\d+|\/|$))/i;
const isDataUri = url => /^data:/i.test(url);
const isHttpOrHttps = url => /^https?:\/\//i.test(url);
const isRemote = url => url && !isLocalUrlRe.test(decodeURI(url));
/**
 * Make a request.
 * @param {string} url
 * @param {VMReq.Options} options
 * @return {Promise<VMReq.Response>}
 */

async function request(url, options = {}) {
  // fetch does not support local file
  if (url.startsWith('file://')) return requestLocalFile(url, options);
  const {
    body,
    headers,
    [kResponseType]: responseType
  } = options;
  const isBodyObj = body && safeCall({}.toString, body) === '[object Object]';
  const [, scheme, auth, hostname, urlTail] = url.match(/^([-\w]+:\/\/)([^@/]*@)?([^/]*)(.*)|$/); // Avoiding LINK header prefetch of js in 404 pages which cause CSP violations in our console
  // TODO: toggle a webRequest/declarativeNetRequest rule to strip LINK headers

  const accept = (hostname === 'greasyfork.org' || hostname === 'sleazyfork.org') && 'application/javascript, text/plain, text/css';
  const init = Object.assign({
    cache: isRemote(url) ? undefined : 'no-cache'
  }, options, {
    body: isBodyObj ? JSON.stringify(body) : body,
    headers: isBodyObj || accept || auth ? Object.assign({}, headers, isBodyObj && {
      'Content-Type': 'application/json'
    }, auth && {
      Authorization: `Basic ${btoa(decodeURIComponent(auth.slice(0, -1)))}`
    }, accept && {
      accept
    }) : headers
  });
  let result = {
    url,
    status: -1
  };

  try {
    const urlNoAuth = auth ? scheme + hostname + urlTail : url;
    const resp = await fetch(urlNoAuth, init);
    const loadMethod = {
      arraybuffer: 'arrayBuffer',
      blob: 'blob',
      json: 'json'
    }[responseType] || 'text'; // status for `file:` protocol will always be `0`

    result.status = resp.status || 200;
    result.headers = resp.headers;
    result.data = await resp[loadMethod]();
  } catch (err) {
    result = Object.assign(err, result);
    result.message += '\n' + url;
  }

  if (result.status < 0 || result.status > 300) throw result;
  return result;
} // Used by `injected`

const SIMPLE_VALUE_TYPE = {
  __proto__: null,
  string: 's',
  number: 'n',
  boolean: 'b'
}; // Used by `injected`

function dumpScriptValue(value, jsonDump = JSON.stringify) {
  if (value !== undefined) {
    const simple = SIMPLE_VALUE_TYPE[typeof value];
    return `${simple || 'o'}${simple ? value : jsonDump(value)}`;
  }
}

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css ***!
  \******************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".vl-dropdown {\n  position: relative;\n  display: inline-block;\n}\n.vl-dropdown-toggle {\n    cursor: pointer;\n}\n.vl-dropdown-menu {\n    position: absolute;\n    z-index: 10;\n}\n.vl-dropdown-right .vl-dropdown-menu {\n      right: 0;\n}\n.vl-dropdown-down .vl-dropdown-menu {\n      top: 100%;\n      margin-top: 5px;\n}\n.vl-dropdown-up .vl-dropdown-menu {\n      bottom: 100%;\n      margin-bottom: 5px;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".vl-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: 10;\n  text-align: center;\n}\n.vl-modal-backdrop {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0,0,0,.4);\n    z-index: -1;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css":
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ":root {\n  --vl-tooltip-bg: rgba(0,0,0,.8);\n  --vl-tooltip-max-width: 250px;\n  --vl-tooltip-arrow-width: 4px;\n  --vl-tooltip-arrow-height: 6px;\n}\n.vl-tooltip {\n  position: absolute;\n  color: white;\n  font-size: 12px;\n  line-height: 1.4;\n  z-index: 100;\n}\n.vl-tooltip > i {\n    position: absolute;\n    color: var(--vl-tooltip-bg);\n}\n.vl-tooltip > .vl-tooltip-wrap {\n    position: absolute;\n}\n.vl-tooltip-wrap {\n    width: var(--vl-tooltip-max-width);\n}\n.vl-tooltip-content {\n    display: inline-block;\n    padding: 8px;\n    background: var(--vl-tooltip-bg);\n    border-radius: 6px;\n    text-align: left;\n}\n.vl-tooltip-top > i, .vl-tooltip-bottom > i {\n      border-left: var(--vl-tooltip-arrow-width) solid transparent;\n      border-right: var(--vl-tooltip-arrow-width) solid transparent;\n      margin-left: calc(var(--vl-tooltip-arrow-width)*-1);\n}\n.vl-tooltip-top.vl-tooltip-align-center > .vl-tooltip-wrap, .vl-tooltip-bottom.vl-tooltip-align-center > .vl-tooltip-wrap {\n        margin-left: calc(var(--vl-tooltip-max-width)/-2);\n        text-align: center;\n}\n.vl-tooltip-top.vl-tooltip-align-start > .vl-tooltip-wrap, .vl-tooltip-bottom.vl-tooltip-align-start > .vl-tooltip-wrap {\n        margin-left: -10px;\n        text-align: left;\n}\n.vl-tooltip-top.vl-tooltip-align-end > .vl-tooltip-wrap, .vl-tooltip-bottom.vl-tooltip-align-end > .vl-tooltip-wrap {\n        right: 0;\n        margin-right: -10px;\n        text-align: right;\n}\n.vl-tooltip-left > i, .vl-tooltip-right > i {\n      border-top: var(--vl-tooltip-arrow-width) solid transparent;\n      border-bottom: var(--vl-tooltip-arrow-width) solid transparent;\n      margin-top: calc(var(--vl-tooltip-arrow-width)*-1);\n}\n.vl-tooltip-top > i {\n      top: 0;\n      border-top: var(--vl-tooltip-arrow-height) solid currentColor;\n}\n.vl-tooltip-top > .vl-tooltip-wrap {\n      bottom: 0;\n}\n.vl-tooltip-bottom > i {\n      bottom: 0;\n      border-bottom: var(--vl-tooltip-arrow-height) solid currentColor;\n}\n.vl-tooltip-bottom > .vl-tooltip-wrap {\n      top: 0;\n}\n.vl-tooltip-left > i {\n      left: 0;\n      border-left: var(--vl-tooltip-arrow-height) solid currentColor;\n}\n.vl-tooltip-left > .vl-tooltip-wrap {\n      right: 0;\n      text-align: right;\n      transform: translateY(-50%);\n}\n.vl-tooltip-right > i {\n      right: 0;\n      border-right: var(--vl-tooltip-arrow-height) solid currentColor;\n}\n.vl-tooltip-right > .vl-tooltip-wrap {\n      left: 0;\n      transform: translateY(-50%);\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./src/common/ui/style/style.css":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./src/common/ui/style/style.css ***!
  \***********************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  font: 14px menu;\n  --bg: var(--fill-0);\n  --fg: var(--fill-15);\n  --fill-0: #fff;\n  --fill-0-5: #f7f7f7;\n  --fill-1: #eee; /* step = 0x11*/\n  --fill-2: #ddd;\n  --fill-3: #ccc;\n  --fill-4: #bbb;\n  --fill-5: #aaa;\n  --fill-6: #999;\n  --fill-7: #888;\n  --fill-8: #777;\n  --fill-9: #666;\n  --fill-10: #555;\n  --fill-11: #444;\n  --fill-12: #333;\n  --fill-13: #222;\n  --fill-14: #111;\n  --fill-15: #000;\n  --tooltip-color: white;\n  --tooltip-bg: rgba(0,0,0,.8);\n  --tooltip-border-color: transparent;\n  --focus-border-color: var(--fill-12);\n}\n\n@media (prefers-color-scheme: dark) {\n\n:root {\n    --fg: var(--fill-11);\n    --fill-0: #1e1e1e;\n    --fill-0-5: #262626;\n    --fill-1: #2d2d2d; /* step = 0x0F*/\n    --fill-2: #3c3c3c;\n    --fill-3: #4b4b4b;\n    --fill-4: #5a5a5a;\n    --fill-5: #696969;\n    --fill-6: #787878;\n    --fill-7: #878787;\n    --fill-8: #969696;\n    --fill-9: #a5a5a5;\n    --fill-10: #b4b4b4;\n    --fill-11: #c3c3c3;\n    --fill-12: #d2d2d2;\n    --fill-13: #e1e1e1;\n    --fill-14: #f0f0f0;\n    --fill-15: #ffffff;\n    --tooltip-border-color: #8888;\n    --scrollbar-bg: #1a1a1a;\n    --input-bg: #111\n}\n  }\n\nbody {\n  /* overflow: hidden; // avoid flash of viewport caused by tooltip*/\n  font-size: 1rem;\n  background: var(--bg);\n  color: var(--fg);\n}\n\n/* Form elements will not inherit*/\n\nbody,\nbutton,\nselect,\ninput,\ntextarea {\n  font-family: -apple-system, system-ui, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", sans-serif;\n  font-size: 1rem;\n}\n\nh1 {\n  font-size: 1.5rem;\n}\n\nh2 {\n  font-size: 1.3rem;\n}\n\nh3 {\n  font-size: 1.1rem;\n}\n\nh1, h2, h3 {\n  margin-top: 1em;\n  margin-bottom: .5em;\n}\n\na {\n  color: dodgerblue;\n  text-decoration: none;\n}\n\n@media (prefers-color-scheme: dark) {\n\na {\n    color: #7baaff\n}\n  }\n\na:focus,\n  a:hover {\n    text-decoration: underline;\n  }\n\nhr {\n  margin: .5rem 0;\n  border-style: solid;\n  border-width: 1px 0 0 0;\n}\n\ninput[type=checkbox] {\n  margin-right: .2em;\n}\n\ninput[type=checkbox]:focus + * {\n    text-decoration: underline;\n  }\n\nbutton,\ninput[type=\"text\"],\ninput[type=\"search\"],\ninput[type=\"number\"],\ninput[type=\"password\"],\nselect,\ntextarea {\n  border: 1px solid var(--fill-3);\n}\n\nbutton:focus, input[type=\"text\"]:focus, input[type=\"search\"]:focus, input[type=\"number\"]:focus, input[type=\"password\"]:focus, select:focus, textarea:focus {\n    border-color: var(--focus-border-color);\n  }\n\ninput[disabled] ~ * {\n  opacity: .5;\n}\n\ninput[type=text],\ninput[type=url],\ninput[type=search],\ninput[type=number],\ninput[type=password] {\n  line-height: 1.5rem;\n}\n\ninput[type=text][disabled], input[type=url][disabled], input[type=search][disabled], input[type=number][disabled], input[type=password][disabled] {\n    background: var(--fill-1);\n    cursor: not-allowed;\n  }\n\ntextarea {\n  display: block;\n  width: 100%;\n}\n\ninput[type=text],\ninput[type=url],\ninput[type=search],\ninput[type=number],\ninput[type=password],\ntextarea {\n  padding: 0 .5rem;\n}\n\ncode {\n  padding: 0 .2em;\n  background: hsla(45, 75%, 75%, .25);\n}\n\n@media (prefers-color-scheme: dark) {\n\ncode {\n    background: hsla(40, 100%, 50%, .2)\n}\n  }\n\nfieldset {\n  display: inline-block;\n  padding: .5rem;\n  border: 1px solid var(--fill-3);\n}\n\n:focus {\n  outline: none;\n}\n\n.icon {\n  width: 1rem;\n  height: 1rem;\n}\n\n/* Firefox does not support `svg path` selector*/\n\nsvg {\n  fill: currentColor;\n}\n\nbutton {\n  border: 1px solid var(--fill-5);\n  background: var(--fill-1);\n}\n\n@media (prefers-color-scheme: dark) {\n\nbutton {\n    background: var(--fill-2)\n}\n  }\n\nbutton {\n  color: var(--fg);\n}\n\nbutton:not([disabled]):hover {\n    border-color: var(--fill-7);\n  }\n\nbutton:active {\n    background: var(--fill-5);\n  }\n\nbutton[disabled] {\n    opacity: .5;\n  }\n\nbutton:not([disabled]) {\n    cursor: pointer;\n  }\n\nbutton,\n.btn-ghost,\n.sep {\n  display: inline-block;\n  padding: 0 .5rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  vertical-align: bottom;\n}\n\n.btn-ghost {\n  color: inherit;\n  border: 1px solid transparent;\n  cursor: pointer;\n}\n\n.btn-ghost:focus,\n  .btn-ghost:hover {\n    border-color: var(--fill-5);\n    background: var(--bg);\n  }\n\n.btn-ghost > .icon {\n    display: block;\n    height: 2rem;\n  }\n\n.btn-ghost.active {\n    background: var(--fill-1);\n    border-color: var(--fill-4);\n  }\n\n.btn-danger {\n  color: #f00;\n}\n\nspan:focus,\na:focus {\n  text-decoration: underline;\n}\n\na[tabindex=\"0\"] {\n  cursor: pointer;\n}\n\n.sep::after {\n    content: '';\n    border-right: 1px solid var(--fill-4);\n  }\n\nul,\nol {\n  padding-left: 20px;\n}\n\nli {\n  line-height: 1.4;\n}\n\n.inline-block {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.flex-auto {\n  flex: auto;\n}\n\n.flex-col > .flex-auto {\n    height: 0;\n  }\n\n:not(.flex-col) > .flex-auto {\n    width: 0;\n  }\n\n.flex-1 {\n  flex: 1;\n}\n\n.center-items {\n  align-items: center;\n}\n\n.stretch-self {\n  align-self: stretch;\n}\n\n.pos-rel {\n  position: relative;\n}\n\n.ml-1, .ml-1c > :nth-child(n + 2) {\n  margin-left: .5em;\n}\n\n.mr-1, .mr-1c > :nth-last-child(n + 2) {\n  margin-right: .5em;\n}\n\n.ml-2, .ml-2c > :nth-child(n + 2) {\n  margin-left: 1em;\n}\n\n.mr-2, .mr-2c > :nth-last-child(n + 2) {\n  margin-right: 1em;\n}\n\n.mt-0, .mt-0c > :nth-child(n + 2) {\n  margin-top: 0;\n}\n\n.mt-1, .mt-1c > :nth-child(n + 2) {\n  margin-top: .5em;\n}\n\n.mb-1, .mb-1c > :nth-last-child(n + 2) {\n  margin-bottom: .5em;\n}\n\n.mb-2, .mb-2c > :nth-last-child(n + 2) {\n  margin-bottom: 1em;\n}\n\n.mx-1, .mx-1c > * {\n  margin-left: .5em;\n  margin-right: .5em;\n}\n\n.my-1, .my-1c > * {\n  margin-top: .5em;\n  margin-bottom: .5em;\n}\n\n.h-screen {\n  height: 100vh;\n}\n\n.h-100 {\n  height: 100%;\n}\n\n.w-1 {\n  width: 4em;\n}\n\n.fixed-full {\n  position: fixed;\n}\n\n.abs-full {\n  position: absolute;\n}\n\n.fixed-full,\n.abs-full {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.ellipsis {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-right {\n  text-align: right;\n}\n\n.scroll-y {\n  overflow-y: auto;\n}\n\n.subtle {\n  color: var(--fill-7);\n}\n\n.frame {\n  background: var(--fill-1);\n}\n\n.frame-block {\n    padding: .5rem;\n  }\n\n.editor-code .CodeMirror {\n  height: 100%;\n}\n\ncode,\n.monospace-font,\n.editor-code .CodeMirror,\n.CodeMirror-hints.default /* CSS specificity hack to override default CM style */ {\n  /* Use `Courier New` to ensure `&nbsp;` has the same width as an original space. */\n  font-family: \"Fira Code\", Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", Courier, monospace;\n}\n\nbody .vl-tooltip {\n  z-index: 10000;\n}\n\nbody .vl-tooltip > i {\n    color: var(--tooltip-bg);\n    z-index: 1;\n  }\n\nbody .vl-tooltip-content {\n    margin: -1px;\n    border: 1px solid var(--tooltip-border-color);\n    color: var(--tooltip-color);\n    background: var(--tooltip-bg);\n  }\n\n.vl-dropdown-menu {\n  padding: .5rem;\n  border: 1px solid var(--fill-4);\n  background: var(--bg);\n}\n\n.modal-content {\n  margin: 0 auto;\n  padding: 1rem;\n  background: var(--bg);\n  box-shadow: 0 0 40px #000;\n}\n\n.has-error {\n  /* reminder: make sure all colors are readable in light/dark schemes*/\n  border-color: #8008;\n  background: #f002;\n}\n\n.has-error:focus {\n    border-color: #f008;\n  }\n\n@media (prefers-color-scheme: dark) {\n  input[type=\"radio\"]:not(:checked),\n  input[type=\"checkbox\"]:not(:checked) {\n    filter: invert(1);\n  }\n  input[type=\"text\"],\n  input[type=\"url\"],\n  input[type=\"search\"],\n  input[type=\"number\"],\n  input[type=\"password\"],\n  select,\n  textarea {\n    background: var(--input-bg);\n    color: var(--fg);\n    border: 1px solid var(--fill-3);\n  }\n    input[type=\"text\"]:focus, input[type=\"url\"]:focus, input[type=\"search\"]:focus, input[type=\"number\"]:focus, input[type=\"password\"]:focus, select:focus, textarea:focus {\n      border-color: var(--focus-border-color);\n    }\n  ::-webkit-scrollbar {\n    width: 14px;\n    height: 14px;\n    background: var(--scrollbar-bg);\n  }\n    ::-webkit-scrollbar-button:single-button {\n      background: radial-gradient(circle at center, #333 40%, var(--scrollbar-bg) 40%);\n    }\n      ::-webkit-scrollbar-button:single-button:hover {\n        background: radial-gradient(circle at center, #444 40%, var(--scrollbar-bg) 40%);\n      }\n      ::-webkit-scrollbar-button:single-button:active {\n        background: radial-gradient(circle at center, #555 40%, var(--scrollbar-bg) 40%);\n      }\n    ::-webkit-scrollbar-track-piece {\n      background: #333;\n      border: 4px solid var(--scrollbar-bg);\n      border-radius: 8px;\n    }\n      ::-webkit-scrollbar-track-piece:hover {\n        background: #444;\n      }\n      ::-webkit-scrollbar-track-piece:active {\n        background: #555;\n      }\n    ::-webkit-scrollbar-thumb {\n      border: 3px solid var(--scrollbar-bg);\n      border-radius: 8px;\n      background: #555;\n    }\n      ::-webkit-scrollbar-thumb:hover {\n        background: #666;\n      }\n      ::-webkit-scrollbar-thumb:active {\n        background: #777;\n      }\n  ::-webkit-resizer {\n    background: var(--input-bg) linear-gradient(-45deg,\n      transparent 3px, #888 3px, #888 4px, transparent 4px,\n      transparent 6px, #888 6px, #888 7px, transparent 7px) no-repeat;\n    border: 2px solid transparent;\n  }\n  :-webkit-autofill {\n    box-shadow: 0 0 0 1000px var(--input-bg) inset;\n    -webkit-text-fill-color: #fff;\n  }\n}\n\n@media (min-width: 768px) {\n  .visible-sm {\n    display: none;\n  }\n}\n\n@media (max-width: 500px) { /* This value is also used in other files */\n  .hidden-sm {\n    display: none !important;\n  }\n}\n\n@media (max-width: 319px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n/* copied from codemirror.css */ /* compatible with old browsers, e.g. Maxthon 4.4, Chrome 50- */\n.editor-code.flex-auto {\n  position: relative;\n}\n.editor-code.flex-auto > div {\n    position: absolute;\n    width: 100%;\n}\n.editor-search {\n  white-space: pre;\n  flex-wrap: wrap;\n} /* wrap fields in a narrow window*/\n.editor-search > form,\n  .editor-search > div {\n    display: flex;\n    align-items: center;\n    margin-right: .5rem;\n}\n.editor-search input[type=search] {\n    min-width: 8em;\n}\n.editor-search span > input { /* a tooltip'ed input*/\n    width: 100%;\n}\n.editor-search .is-error, .editor-search .is-error:focus {\n    border-color: #e85600;\n    background: #e8560010;\n}\n.too-long-placeholder {\n  font-style: italic;\n} /* CodeMirror show-hints fix to work here */\n.CodeMirror-hints {\n  z-index: 9999;\n} /* fix contenteditable selection color bug */\n.CodeMirror .CodeMirror-line ::-moz-selection {\n    background: #d7d4f0;\n}\n.CodeMirror .CodeMirror-line ::selection {\n    background: #d7d4f0;\n} /* must be used separately otherwise the entire rule is ignored in Chrome */\n.CodeMirror .CodeMirror-line ::-moz-selection {\n    background: #d7d4f0;\n}\n.cm-matchhighlight {\n  background-color: hsla(168, 100%, 50%, 0.15);\n}\n.cm-trailingspace {\n  background: radial-gradient(cornflowerblue, transparent 1px) 0 50% / 1ch 1ch repeat-x;\n}\ndiv.CodeMirror span.CodeMirror-matchingbracket { /* the same selector used in codemirror.css */\n  color: unset;\n  background-color: hsla(102, 80%, 50%, 0.3);\n}\n.cm-s-default .cm-comment {\n    color: #918982;\n}\n.cm-s-default .cm-string-2 { /* template literal: `example`*/\n    color: #870;\n}\n.cm-s-default .cm-string-2.cm-regexp {\n    color: #d60;\n}\n@media (prefers-color-scheme: dark) {\n.cm-matchhighlight {\n    background-color: hsla(40, 100%, 50%, 0.1);\n    border-bottom-color: hsla(40, 100%, 50%, 0.25);\n}\n.CodeMirror-hints {\n    background: var(--bg);\n}\n.CodeMirror-hint {\n    color: var(--fg);\n}\nli.CodeMirror-hint-active {\n    background: var(--fg);\n    color: var(--bg);\n}\n.CodeMirror {\n    color: var(--fg);\n    background: var(--bg);\n}\n.CodeMirror .CodeMirror-scrollbar-filler,\n    .CodeMirror .CodeMirror-gutter-filler {\n      background: none;\n}\n.CodeMirror .CodeMirror-gutters {\n      border-color: var(--fill-2);\n      background-color: var(--fill-0-5);\n}\n.CodeMirror .CodeMirror-selected {\n      background: rgba(80, 75, 65, .99);\n}\n.CodeMirror .CodeMirror-line ::-moz-selection {\n        background: rgba(80, 75, 65, .99);\n}\n.CodeMirror .CodeMirror-line ::selection {\n        background: rgba(80, 75, 65, .99);\n}\n      /* must be used separately otherwise the entire rule is ignored in Chrome */\n.CodeMirror .CodeMirror-line ::-moz-selection {\n        background: rgba(80, 75, 65, .99);\n}\n.CodeMirror .CodeMirror-guttermarker {\n      color: white;\n}\n.CodeMirror .CodeMirror-guttermarker-subtle {\n        color: #d0d0d0;\n}\n.CodeMirror .CodeMirror-linenumber {\n      color: #666;\n}\n.CodeMirror .CodeMirror-cursor {\n      border-color: #f8f8f0;\n}\n.CodeMirror .CodeMirror-activeline-background {\n      background: #1a1a1a;\n}\n.CodeMirror .CodeMirror-matchingbracket {\n      outline: none;\n      background: #444;\n      color: yellow !important;\n}\n    /* mostly copied from Monokai theme*/\n.cm-s-default .cm-comment {\n      color: #75715e;\n}\n.cm-s-default .cm-atom {\n      color: #ae81ff;\n}\n.cm-s-default .cm-number {\n      color: #ae81ff;\n}\n.cm-s-default .cm-comment.cm-attribute {\n      color: #97b757;\n}\n.cm-s-default .cm-comment.cm-def {\n      color: #bc9262;\n}\n.cm-s-default .cm-comment.cm-tag {\n      color: #bc6283;\n}\n.cm-s-default .cm-comment.cm-type {\n      color: #5998a6;\n}\n.cm-s-default .cm-property,\n    .cm-s-default .cm-attribute {\n      color: #a6e22e;\n}\n.cm-s-default .cm-keyword {\n      color: #f92672;\n}\n.cm-s-default .cm-builtin {\n      color: #66d9ef;\n}\n.cm-s-default .cm-string {\n      color: #e6db74;\n}\n.cm-s-default .cm-string-2 {\n      color: #bcb149;\n}\n.cm-s-default .cm-string-2.cm-regexp {\n      color: #ff00f7;\n}\n.cm-s-default .cm-variable {\n      color: #f8f8f2;\n}\n.cm-s-default .cm-variable-2 {\n      color: #9effff;\n}\n.cm-s-default .cm-variable-3,\n    .cm-s-default .cm-type {\n      color: #66d9ef;\n}\n.cm-s-default .cm-def {\n      color: #fd971f;\n}\n.cm-s-default .cm-bracket {\n      color: #f8f8f2;\n}\n.cm-s-default .cm-tag {\n      color: #f92672;\n}\n.cm-s-default .cm-header {\n      color: #ae81ff;\n}\n.cm-s-default .cm-link {\n      color: #ae81ff;\n}\n.cm-s-default .cm-error {\n      color: #f8f8f0;\n      background: #f92672;\n}\n.cm-s-default .cm-operator {\n      color: #999\n}\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n.edit-externals {\n  --border: 6px double var(--fill-8);\n  border-top: var(--border);\n}\n.edit-externals > .select {\n    min-height: 1.25rem;\n    max-height: 15vh;\n    overflow-y: auto;\n    border-bottom: 2px solid var(--fill-3);\n    padding-bottom: 0.5rem;\n}\n.edit-externals > .select[data-has-main] dl:first-child {\n      padding-top: .5em;\n      padding-bottom: .5em;\n      border-bottom: 1px solid var(--fill-3);\n      position: sticky;\n      top: 0;\n      background: var(--bg);\n}\n.edit-externals > .select dl {\n      padding-right: 1rem;\n      align-items: center;\n      white-space: nowrap;\n}\n.edit-externals > .select dl.active {\n        font-weight: bold;\n        color: blue;\n}\n.edit-externals > .select dl.loading dd {\n        color: var(--fill-7);\n}\n.edit-externals > .select dl.error dd {\n        color: red;\n}\n.edit-externals > .select dl:not(.error) {\n        cursor: pointer;\n}\n.edit-externals > .select dl:not(.error):hover dd {\n          text-decoration: underline;\n}\n.edit-externals > .select dl:not(.error):hover dd a {\n            text-decoration: none;\n}\n.edit-externals > .select dt {\n      color: darkblue;\n      margin-left: 1rem;\n      font-family: monospace;\n}\n.edit-externals > .select a {\n      padding: 0 .5em;\n      cursor: alias;\n}\n.edit-externals > .select a:hover {\n        background: var(--fill-3);\n}\n.edit-externals > .contents > img {\n      padding: 1rem;\n      max-width: 100%;\n      max-height: 100%;\n      object-fit: contain;\n}\n@media (prefers-color-scheme: dark) {\n.edit-externals .select.error dd {\n        color: #ff4747;\n}\n.edit-externals .select dl.active {\n        color: coral;\n}\n.edit-externals .select dl.active dt {\n          color: hotpink;\n}\n.edit-externals .select dt {\n        color: #c34ec3;\n}\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n.message {\n  max-width: 50vw;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  border-bottom-left-radius: .2rem;\n  border-bottom-right-radius: .2rem;\n  box-shadow: 0 0 .2rem rgba(0,0,0,.2);\n}\n.message input {\n    width: 100%;\n}\n.message-body > p {\n      margin-bottom: 1em;\n}\n.message-body > p:first-child {\n        font-weight: bold;\n        text-decoration: underline;\n}\n.message-body > p:not(:first-child) {\n        text-align: left;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n.setting-check {\n  display: inline-flex;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ "./node_modules/css-loader/dist/runtime/noSourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n.toggle-button {\n  width: 24px;\n  height: 24px;\n  font-size: 12px;\n  line-height: 24px;\n  text-align: center;\n  color: var(--fill-12);\n  background: var(--fill-2);\n  cursor: pointer;\n}\n.toggle-button.active {\n    color: var(--bg);\n    background: var(--fill-9);\n}\n.toggle-button:focus, .toggle-button:hover {\n    filter: brightness(.8);\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!../../../vue-loader/dist/stylePostLoader.js!./style.css?vue&type=style&index=0&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css":
/*!*******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css ***!
  \*******************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!../../../vue-loader/dist/stylePostLoader.js!./style.css?vue&type=style&index=0&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!../../../vue-loader/dist/stylePostLoader.js!./style.css?vue&type=style&index=0&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/common/ui/style/style.css":
/*!***************************************!*\
  !*** ./src/common/ui/style/style.css ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./style.css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./src/common/ui/style/style.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_style_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_style_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_style_index_0_id_4dacab06_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./code.vue?vue&type=style&index=0&id=4dacab06&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_style_index_0_id_4dacab06_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_style_index_0_id_4dacab06_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_style_index_0_id_4dacab06_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_style_index_0_id_4dacab06_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_style_index_0_id_2c99f1b0_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_style_index_0_id_2c99f1b0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_style_index_0_id_2c99f1b0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_style_index_0_id_2c99f1b0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_style_index_0_id_2c99f1b0_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_style_index_0_id_e93248b2_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./message.vue?vue&type=style&index=0&id=e93248b2&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_style_index_0_id_e93248b2_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_style_index_0_id_e93248b2_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_style_index_0_id_e93248b2_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_style_index_0_id_e93248b2_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_style_index_0_id_7753c22a_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_style_index_0_id_7753c22a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_style_index_0_id_7753c22a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_style_index_0_id_7753c22a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_style_index_0_id_7753c22a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_style_index_0_id_990df92a_lang_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css */ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_style_index_0_id_990df92a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_style_index_0_id_990df92a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_style_index_0_id_990df92a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_style_index_0_id_990df92a_lang_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/svg-baker-runtime/browser-symbol.js":
/*!**********************************************************!*\
  !*** ./node_modules/svg-baker-runtime/browser-symbol.js ***!
  \**********************************************************/
/***/ (function(module) {

(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

var SpriteSymbol = function SpriteSymbol(ref) {
  var id = ref.id;
  var viewBox = ref.viewBox;
  var content = ref.content;

  this.id = id;
  this.viewBox = viewBox;
  this.content = content;
};

/**
 * @return {string}
 */
SpriteSymbol.prototype.stringify = function stringify () {
  return this.content;
};

/**
 * @return {string}
 */
SpriteSymbol.prototype.toString = function toString () {
  return this.stringify();
};

SpriteSymbol.prototype.destroy = function destroy () {
    var this$1 = this;

  ['id', 'viewBox', 'content'].forEach(function (prop) { return delete this$1[prop]; });
};

/**
 * @param {string} content
 * @return {Element}
 */
var parse = function (content) {
  var hasImportNode = !!document.importNode;
  var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;

  /**
   * Fix for browser which are throwing WrongDocumentError
   * if you insert an element which is not part of the document
   * @see http://stackoverflow.com/a/7986519/4624403
   */
  if (hasImportNode) {
    return document.importNode(doc, true);
  }

  return doc;
};

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var deepmerge = createCommonjsModule(function (module, exports) {
(function (root, factory) {
    if (false) {} else {
        module.exports = factory();
    }
}(commonjsGlobal, function () {

function isMergeableObject(val) {
    var nonNullObject = val && typeof val === 'object';

    return nonNullObject
        && Object.prototype.toString.call(val) !== '[object RegExp]'
        && Object.prototype.toString.call(val) !== '[object Date]'
}

function emptyTarget(val) {
    return Array.isArray(val) ? [] : {}
}

function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}

function defaultArrayMerge(target, source, optionsArgument) {
    var destination = target.slice();
    source.forEach(function(e, i) {
        if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument);
        } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument);
        } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument));
        }
    });
    return destination
}

function mergeObject(target, source, optionsArgument) {
    var destination = {};
    if (isMergeableObject(target)) {
        Object.keys(target).forEach(function (key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument);
        });
    }
    Object.keys(source).forEach(function (key) {
        if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument);
        } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
        }
    });
    return destination
}

function deepmerge(target, source, optionsArgument) {
    var array = Array.isArray(source);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
    var arrayMerge = options.arrayMerge || defaultArrayMerge;

    if (array) {
        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)
    } else {
        return mergeObject(target, source, optionsArgument)
    }
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
        throw new Error('first argument should be an array with at least two elements')
    }

    // we are sure there are at least 2 values, so it is safe to have no initial value
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, optionsArgument)
    })
};

return deepmerge

}));
});

var namespaces_1 = createCommonjsModule(function (module, exports) {
var namespaces = {
  svg: {
    name: 'xmlns',
    uri: 'http://www.w3.org/2000/svg'
  },
  xlink: {
    name: 'xmlns:xlink',
    uri: 'http://www.w3.org/1999/xlink'
  }
};

exports.default = namespaces;
module.exports = exports.default;
});

/**
 * @param {Object} attrs
 * @return {string}
 */
var objectToAttrsString = function (attrs) {
  return Object.keys(attrs).map(function (attr) {
    var value = attrs[attr].toString().replace(/"/g, '&quot;');
    return (attr + "=\"" + value + "\"");
  }).join(' ');
};

var svg = namespaces_1.svg;
var xlink = namespaces_1.xlink;

var defaultAttrs = {};
defaultAttrs[svg.name] = svg.uri;
defaultAttrs[xlink.name] = xlink.uri;

/**
 * @param {string} [content]
 * @param {Object} [attributes]
 * @return {string}
 */
var wrapInSvgString = function (content, attributes) {
  if ( content === void 0 ) content = '';

  var attrs = deepmerge(defaultAttrs, attributes || {});
  var attrsRendered = objectToAttrsString(attrs);
  return ("<svg " + attrsRendered + ">" + content + "</svg>");
};

var BrowserSpriteSymbol = (function (SpriteSymbol$$1) {
  function BrowserSpriteSymbol () {
    SpriteSymbol$$1.apply(this, arguments);
  }

  if ( SpriteSymbol$$1 ) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;
  BrowserSpriteSymbol.prototype = Object.create( SpriteSymbol$$1 && SpriteSymbol$$1.prototype );
  BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;

  var prototypeAccessors = { isMounted: {} };

  prototypeAccessors.isMounted.get = function () {
    return !!this.node;
  };

  /**
   * @param {Element} node
   * @return {BrowserSpriteSymbol}
   */
  BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode (node) {
    return new BrowserSpriteSymbol({
      id: node.getAttribute('id'),
      viewBox: node.getAttribute('viewBox'),
      content: node.outerHTML
    });
  };

  BrowserSpriteSymbol.prototype.destroy = function destroy () {
    if (this.isMounted) {
      this.unmount();
    }
    SpriteSymbol$$1.prototype.destroy.call(this);
  };

  /**
   * @param {Element|string} target
   * @return {Element}
   */
  BrowserSpriteSymbol.prototype.mount = function mount (target) {
    if (this.isMounted) {
      return this.node;
    }

    var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;
    var node = this.render();
    this.node = node;

    mountTarget.appendChild(node);

    return node;
  };

  /**
   * @return {Element}
   */
  BrowserSpriteSymbol.prototype.render = function render () {
    var content = this.stringify();
    return parse(wrapInSvgString(content)).childNodes[0];
  };

  BrowserSpriteSymbol.prototype.unmount = function unmount () {
    this.node.parentNode.removeChild(this.node);
  };

  Object.defineProperties( BrowserSpriteSymbol.prototype, prototypeAccessors );

  return BrowserSpriteSymbol;
}(SpriteSymbol));

return BrowserSpriteSymbol;

})));


/***/ }),

/***/ "./src/resources/svg/arrow.svg":
/*!*************************************!*\
  !*** ./src/resources/svg/arrow.svg ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "arrow",
  "use": "arrow-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"arrow\"><path d=\"M639.472 575.574c-16.41 0-32.819-6.263-45.347-18.788l-254.822-254.83c-25.054-25.038-25.054-65.654 0-90.69 25.05-25.052 65.641-25.052 90.692 0l254.826 254.83c25.054 25.036 25.054 65.652 0 90.69-12.526 12.525-28.937 18.788-45.35 18.788z\" /><path d=\"M384.648 830.39c-16.41 0-32.818-6.264-45.346-18.79-25.054-25.037-25.054-65.653 0-90.689l254.823-254.815c25.054-25.052 65.64-25.052 90.695 0 25.054 25.036 25.054 65.652 0 90.69L429.993 811.599c-12.523 12.527-28.935 18.79-45.345 18.79z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/author.svg":
/*!**************************************!*\
  !*** ./src/resources/svg/author.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "author",
  "use": "author-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"author\"><path d=\"M512 0C229.232 0 0 229.232 0 512c0 282.768 229.232 512 512 512 282.784 0 512-229.232 512-512C1024 229.232 794.784 0 512 0zm0 938.704c-103.856 0-199.52-34.992-277.328-93.456 57.712-5.424 164.32-29.744 165.328-136.56.288-31.632 21.968-46.576 0-69.008-22.432-22.944-34.752-70.208-44.8-115.008-1.872-8.304-7.472-13.664-14.08-18.784-27.552-7.808-48.112-37.68-48.112-73.568 0-18.48 5.664-35.184 14.688-48.32 1.536-7.072 2.704-13.936 2.688-20.304-.16-70.688-5.744-142.368 22.4-184 91.856-135.856 269.584-137.072 358.416 0 30.064 46.352 22.72 113.584 22.4 184-.032 6 .896 12.608 2.128 19.44 9.392 13.264 15.28 30.304 15.28 49.184 0 33.456-17.968 61.52-42.72 71.52-9.424 7.6-18.16 13.088-19.504 20.832-7.568 44.144-28.304 95.824-44.784 115.008-13.92 16.176-.32 37.376 0 69.008.976 106.816 107.6 131.136 165.312 136.56-77.776 58.464-173.504 93.456-277.312 93.456z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/code.svg":
/*!************************************!*\
  !*** ./src/resources/svg/code.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "code",
  "use": "code-usage",
  "viewBox": "0 0 1045 1024",
  "content": "<symbol viewBox=\"0 0 1045 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"code\"><path d=\"M326.857 799.429L298.286 828q-5.715 5.714-13.143 5.714T272 828L5.714 561.714Q0 556 0 548.571t5.714-13.142L272 269.143q5.714-5.714 13.143-5.714t13.143 5.714l28.571 28.571q5.714 5.715 5.714 13.143T326.857 324L102.286 548.571l224.571 224.572q5.714 5.714 5.714 13.143t-5.714 13.143zm337.714-609.715L451.43 927.43q-2.286 7.428-8.858 11.142T429.143 940l-35.429-9.714q-7.428-2.286-11.143-8.857t-1.428-14l213.143-737.715q2.285-7.428 8.857-11.143t13.428-1.428L652 166.857q7.429 2.286 11.143 8.857t1.428 14zm375.429 372L773.714 828q-5.714 5.714-13.143 5.714T747.43 828l-28.572-28.571q-5.714-5.715-5.714-13.143t5.714-13.143L943.43 548.57 718.857 324q-5.714-5.714-5.714-13.143t5.714-13.143l28.572-28.571q5.714-5.714 13.142-5.714t13.143 5.714L1040 535.429q5.714 5.714 5.714 13.142T1040 561.714z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/cog.svg":
/*!***********************************!*\
  !*** ./src/resources/svg/cog.svg ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "cog",
  "use": "cog-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"cog\"><path d=\"M1024 575.008v-128l-152.992-63.744c-4.256-12-8.736-23.616-14.24-35.008l61.76-153.76L828 104l-152.384 62.752C664 161.12 652.128 156.384 639.872 152L575.008 0h-128l-63.264 151.488c-12.736 4.512-24.992 9.248-37.12 15.008l-152.128-61.12L104 195.872l62.016 150.752c-6.016 12.384-10.88 24.992-15.52 38.016L0 448.992v128l150.624 62.752c4.64 12.992 9.632 25.632 15.616 38.016l-60.864 151.744L195.872 920l151.136-62.24c12.128 5.76 24.512 10.368 37.248 14.752L448.992 1024h128l63.36-152.256c12.128-4.512 24.128-9.248 35.616-14.752l153.504 61.504L919.968 828 856.96 675.264c5.376-11.488 9.76-23.136 14.016-35.008L1024 575.008zM511.008 704c-105.984 0-192-86.016-192-192s86.016-192 192-192 192 86.016 192 192-86.016 192-192 192z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/command.svg":
/*!***************************************!*\
  !*** ./src/resources/svg/command.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "command",
  "use": "command-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"command\"><path d=\"M768 85.34q70.676 0 120.668 49.992T938.66 256t-49.992 120.668T768 426.66h-85.34v170.66H768q70.676 0 120.668 49.991T938.66 767.98t-49.992 120.668T768 938.639t-120.668-49.991T597.34 767.98v-85.34H426.68v85.34q0 70.676-49.991 120.668T256.02 938.639t-120.668-49.991T85.361 767.98t49.991-120.669T256.02 597.32h85.34V426.66h-85.34q-70.676 0-120.668-49.992T85.361 256t49.991-120.668T256.02 85.34t120.669 49.992T426.68 256v85.34h170.66V256q0-70.676 49.992-120.668T768 85.34zM341.34 768v-85.34H256q-35.328 0-60.334 25.006T170.66 768t25.006 60.334T256 853.34t60.334-25.006T341.34 768zM256 170.66q-35.328 0-60.334 25.006T170.66 256t25.006 60.334T256 341.34h85.34V256q0-35.328-25.006-60.334T256 170.66zm341.34 426.68V426.68H426.68v170.66h170.66zM768 682.66h-85.34V768q0 35.328 25.006 60.334T768 853.34t60.334-25.006T853.34 768t-25.006-60.334T768 682.66zm0-512q-35.328 0-60.334 25.006T682.66 256v85.34H768q35.328 0 60.334-25.006T853.34 256t-25.006-60.334T768 170.66z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/filter.svg":
/*!**************************************!*\
  !*** ./src/resources/svg/filter.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "filter",
  "use": "filter-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"filter\"><path d=\"M66.857 0h890.286c53.257 0 83.215 61.252 50.52 103.292L640 576v420.386c0 12.687-13.353 20.939-24.7 15.264L401.687 904.845a32 32 0 01-17.69-28.621V576L16.34 103.292C-16.358 61.252 13.6 0 66.857 0z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/home.svg":
/*!************************************!*\
  !*** ./src/resources/svg/home.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "home",
  "use": "home-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"home\"><path d=\"M937.772 573.35H880.4c-25.349 0-45.898 20.615-45.898 46.047v310.822c0 19.075-15.413 34.534-34.423 34.534H616.488c-19.01 0-34.423-15.46-34.423-34.534V711.491H444.373V930.22c0 19.075-15.412 34.534-34.425 34.534H226.356c-19.01 0-34.42-15.46-34.42-34.534V619.396c0-25.431-20.55-46.048-45.899-46.048H88.665c-19.013 0-34.425-15.463-34.425-34.535 0-4.899 1.075-9.521 2.909-13.743a34.458 34.458 0 017.603-11.546L477.57 76.64c9.657-9.68 23.552-12.133 35.649-7.95 12.096-4.183 25.992-1.73 35.649 7.95l412.816 436.884a34.495 34.495 0 017.605 11.546c1.834 4.22 2.906 8.844 2.906 13.743 0 19.072-15.412 34.535-34.423 34.535z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/info.svg":
/*!************************************!*\
  !*** ./src/resources/svg/info.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "info",
  "use": "info-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"info\"><path d=\"M902.4 285.6c-40-68.8-95.2-124-164-164s-144.8-60-226.4-60-156.8 20-226.4 60.8-123.2 94.4-164 163.2-60 144.8-60 226.4 20 156.8 60.8 226.4 95.2 124 164 164 144.8 60.8 226.4 60.8 156.8-20 226.4-60.8 124-95.2 164-164S964 593.6 964 512c-1.6-81.6-21.6-156.8-61.6-226.4zm-331.2 480c0 31.2-23.2 56.8-51.2 56.8h-16.8c-28 0-51.2-25.6-51.2-56.8V482.4c0-31.2 23.2-56.8 51.2-56.8H520c28 0 51.2 25.6 51.2 56.8v283.2zm-60-424.8c-38.4 0-69.6-31.2-69.6-69.6s31.2-69.6 69.6-69.6c38.4 0 69.6 31.2 69.6 69.6s-31.2 69.6-69.6 69.6z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/more.svg":
/*!************************************!*\
  !*** ./src/resources/svg/more.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "more",
  "use": "more-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"more\">\n  <circle cx=\"512\" cy=\"150\" r=\"100\" />\n  <circle cx=\"512\" cy=\"512\" r=\"100\" />\n  <circle cx=\"512\" cy=\"874\" r=\"100\" />\n</symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/plus.svg":
/*!************************************!*\
  !*** ./src/resources/svg/plus.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "plus",
  "use": "plus-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"plus\"><path d=\"M899.901 600.38H600.728v299.173c0 74.383-179.503 74.383-179.503 0V600.38H122.051c-74.384 0-74.384-179.503 0-179.503h299.173V121.703c0-74.384 179.503-74.384 179.503 0v299.174H899.9c74.385 0 74.385 179.503.001 179.503z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/question.svg":
/*!****************************************!*\
  !*** ./src/resources/svg/question.svg ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "question",
  "use": "question-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"question\"><path d=\"M513.672 49.158c-256.358 0-464.178 207.819-464.178 464.176 0 256.358 207.82 464.177 464.177 464.177S977.85 769.693 977.85 513.334c0-256.357-207.82-464.176-464.177-464.176zm0 788.3c-30.94 0-56.02-25.08-56.02-56.02 0-30.94 25.081-56.021 56.02-56.021 30.94 0 56.021 25.08 56.021 56.02 0 30.94-25.081 56.021-56.02 56.021zm98.037-335.092c-55.397 37.21-54.02 117.088-54.02 117.088 0 24.31-19.657 44.087-43.967 44.087s-43.966-19.567-43.966-43.877c0-117.054 84.107-178.356 104.308-190.36 23.974-12.005 47.042-36.59 47.042-65.857 0-39.268-31.404-71.494-107.434-72.206-76.029.712-107.94 30.02-107.94 70.036 0 0-.026 1.332-.026 2.011 0 24.31-20.669 44.017-44.978 44.017s-45.004-19.707-45.004-44.017v-2.01c0-88.035 72.913-157.359 196.962-158.07 124.047.711 195.912 72.027 195.912 159.977-.001 66.673-33.364 99.666-96.89 139.18z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/refresh.svg":
/*!***************************************!*\
  !*** ./src/resources/svg/refresh.svg ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "refresh",
  "use": "refresh-usage",
  "viewBox": "0 0 200 200",
  "content": "<symbol viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\" id=\"refresh\"><path d=\"M182.924 117.857q0 .558-.112.781-7.142 29.911-29.91 48.494t-53.348 18.582q-16.295 0-31.53-6.138t-27.176-17.522L26.451 176.45q-2.12 2.12-5.022 2.12t-5.023-2.12-2.12-5.022v-50q0-2.902 2.12-5.023t5.023-2.12h50q2.901 0 5.022 2.12t2.12 5.023-2.12 5.022l-15.29 15.29q7.924 7.366 17.968 11.384T100 157.143q14.955 0 27.902-7.255t20.759-19.977q1.227-1.898 5.915-13.058.893-2.567 3.348-2.567h21.429q1.45 0 2.51 1.06t1.061 2.511zm2.79-89.286v50q0 2.902-2.12 5.023t-5.023 2.12h-50q-2.901 0-5.022-2.12t-2.12-5.023 2.12-5.022l15.402-15.402Q122.433 42.857 100 42.857q-14.955 0-27.902 7.255T51.34 70.089q-1.227 1.898-5.915 13.058-.893 2.567-3.348 2.567h-22.21q-1.45 0-2.511-1.06t-1.06-2.511v-.781Q23.55 51.451 46.43 32.868T100 14.286q16.295 0 31.696 6.194t27.344 17.466l14.51-14.397q2.12-2.12 5.021-2.12t5.023 2.12 2.12 5.022z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/search.svg":
/*!**************************************!*\
  !*** ./src/resources/svg/search.svg ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "search",
  "use": "search-usage",
  "viewBox": "0 0 200 200",
  "content": "<symbol viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\" id=\"search\"><path d=\"M195.138 171.55l-47.85-47.863c-.55-.562-1.175-.974-1.763-1.437 8.088-12.412 12.8-27.187 12.8-43.1 0-43.725-35.437-79.175-79.162-79.175C35.45-.012 0 35.438 0 79.163s35.463 79.162 79.163 79.162c15.912 0 30.7-4.725 43.125-12.812.45.587.875 1.187 1.412 1.75l47.863 47.875a16.65 16.65 0 0011.787 4.875 16.65 16.65 0 0011.788-4.875c6.487-6.513 6.487-17.075 0-23.588M79.163 133.325C49.3 133.325 25 109.025 25 79.163s24.313-54.175 54.163-54.175c29.862 0 54.162 24.312 54.162 54.175s-24.3 54.162-54.162 54.162\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/toggle-off.svg":
/*!******************************************!*\
  !*** ./src/resources/svg/toggle-off.svg ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "toggle-off",
  "use": "toggle-off-usage",
  "viewBox": "0 0 1171 1024",
  "content": "<symbol viewBox=\"0 0 1171 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"toggle-off\"><path d=\"M658.286 512q0-59.465-23.113-113.445t-62.538-93.403-93.403-62.537-113.445-23.113-113.444 23.113-93.404 62.537-62.537 93.403T73.29 512t23.113 113.445 62.537 93.403 93.404 62.537 113.444 23.113 113.445-23.113 93.403-62.537 62.538-93.403T658.286 512zm438.857 0q0-59.465-23.113-113.445t-62.537-93.403-93.404-62.537-113.444-23.113h-220.6q68.024 51.42 107.74 128t39.717 164.571-39.717 164.572-107.74 128h220.6q59.465 0 113.444-23.114t93.404-62.537 62.537-93.403 23.113-113.445zm73.143 0q0 74.313-29.111 141.97t-77.97 116.59-116.59 77.97-141.97 29.111H365.787q-74.313 0-141.97-29.11t-116.59-77.971-77.97-116.59T.147 512t29.11-141.97 77.97-116.59 116.59-77.97 141.97-29.111h438.858q74.313 0 141.97 29.11t116.59 77.971 77.97 116.59 29.11 141.97z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/toggle-on.svg":
/*!*****************************************!*\
  !*** ./src/resources/svg/toggle-on.svg ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "toggle-on",
  "use": "toggle-on-usage",
  "viewBox": "0 0 1171 1024",
  "content": "<symbol viewBox=\"0 0 1171 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"toggle-on\"><path d=\"M0 512q0-74.313 29.11-141.97t77.971-116.59 116.59-77.97 141.97-29.111h438.857q74.313 0 141.97 29.11t116.59 77.971 77.97 116.59T1170.14 512t-29.11 141.97-77.97 116.59-116.59 77.97-141.97 29.111H365.64q-74.313 0-141.97-29.11T107.08 770.56 29.11 653.97 0 512zm804.571 292.571q59.466 0 113.445-23.113t93.403-62.537 62.538-93.403 23.113-113.445-23.113-113.444-62.538-93.404-93.403-62.537-113.445-23.113-113.444 23.113-93.404 62.537-62.537 93.404-23.113 113.444 23.113 113.445 62.537 93.403 93.404 62.537 113.444 23.113z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/trash.svg":
/*!*************************************!*\
  !*** ./src/resources/svg/trash.svg ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "trash",
  "use": "trash-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"trash\"><path d=\"M960.09 224.02c0 11.455-8.916 20.364-20.372 20.364h-61.094v603.334c0 70.004-45.824 129.83-101.83 129.83H247.29c-56.007 0-101.83-57.28-101.83-127.289V244.39H84.364C72.909 244.39 64 235.482 64 224.026v-40.73c0-11.456 8.909-20.365 20.365-20.365h196.659l44.55-106.291C338.298 25.46 376.486 0 410.214 0H613.87c33.734 0 71.917 25.46 84.653 56.64l44.55 106.285h196.653c11.456 0 20.371 8.909 20.371 20.365v40.73zm-162.925 20.37h-570.24v603.335c0 30.547 17.184 48.371 20.365 48.371h529.504c3.187 0 20.37-17.818 20.37-48.371V244.39zM389.85 753.53c0 11.45-8.91 20.364-20.365 20.364h-40.73c-11.456 0-20.365-8.915-20.365-20.364V386.944c0-11.456 8.91-20.365 20.365-20.365h40.73c11.456 0 20.365 8.909 20.365 20.365V753.53zm264.755-590.605L624.058 88.46c-1.914-2.541-7.636-6.362-10.816-7.002H411.488c-3.82.64-8.909 4.455-10.816 7.002l-31.187 74.464h285.12zM552.775 753.53c0 11.45-8.916 20.364-20.372 20.364h-40.73c-11.455 0-20.364-8.915-20.364-20.364V386.944c0-11.456 8.909-20.365 20.365-20.365h40.73c11.455 0 20.37 8.909 20.37 20.365V753.53zm162.924 0c0 11.45-8.915 20.364-20.371 20.364h-40.723c-11.456 0-20.371-8.915-20.371-20.364V386.944c0-11.456 8.915-20.365 20.37-20.365h40.724c11.456 0 20.371 8.909 20.371 20.365V753.53z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./src/resources/svg/undo.svg":
/*!************************************!*\
  !*** ./src/resources/svg/undo.svg ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/svg-baker-runtime/browser-symbol.js */ "./node_modules/svg-baker-runtime/browser-symbol.js");
/* harmony import */ var _node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/svg-sprite-loader/runtime/browser-sprite.build.js */ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js");
/* harmony import */ var _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1__);


var symbol = new (_node_modules_svg_baker_runtime_browser_symbol_js__WEBPACK_IMPORTED_MODULE_0___default())({
  "id": "undo",
  "use": "undo-usage",
  "viewBox": "0 0 1024 1024",
  "content": "<symbol viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" id=\"undo\"><path d=\"M596.677 248.123c204.8 0 372.185 165.415 372.185 372.185S801.477 992.492 596.677 992.492H435.2c-15.754 0-25.6-11.815-25.6-27.569v-63.015c0-15.754 11.815-29.539 27.57-29.539h159.507c139.815 0 252.061-112.246 252.061-252.061S736.492 368.246 596.677 368.246H322.954s-15.754 0-21.662 1.97c-15.754 7.876-11.815 19.692 1.97 33.476l96.492 96.493c11.815 11.815 9.846 29.538-1.97 41.353l-43.322 43.324c-11.816 11.815-25.6 11.815-37.416 1.969l-256-256a24.96 24.96 0 010-35.446l254.03-254.031c11.816-11.816 31.509-11.816 41.355 0l41.354 41.354c11.815 11.815 11.815 31.507 0 41.354l-96.493 96.492c-11.815 11.815-11.815 25.6 7.877 25.6h13.785l273.723 1.97z\" /></symbol>"
});
var result = _node_modules_svg_sprite_loader_runtime_browser_sprite_build_js__WEBPACK_IMPORTED_MODULE_1___default().add(symbol);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (symbol);

/***/ }),

/***/ "./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js":
/*!************************************************************************!*\
  !*** ./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js ***!
  \************************************************************************/
/***/ (function(module) {

(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var deepmerge = createCommonjsModule(function (module, exports) {
(function (root, factory) {
    if (false) {} else {
        module.exports = factory();
    }
}(commonjsGlobal, function () {

function isMergeableObject(val) {
    var nonNullObject = val && typeof val === 'object';

    return nonNullObject
        && Object.prototype.toString.call(val) !== '[object RegExp]'
        && Object.prototype.toString.call(val) !== '[object Date]'
}

function emptyTarget(val) {
    return Array.isArray(val) ? [] : {}
}

function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}

function defaultArrayMerge(target, source, optionsArgument) {
    var destination = target.slice();
    source.forEach(function(e, i) {
        if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument);
        } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument);
        } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument));
        }
    });
    return destination
}

function mergeObject(target, source, optionsArgument) {
    var destination = {};
    if (isMergeableObject(target)) {
        Object.keys(target).forEach(function (key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument);
        });
    }
    Object.keys(source).forEach(function (key) {
        if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument);
        } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
        }
    });
    return destination
}

function deepmerge(target, source, optionsArgument) {
    var array = Array.isArray(source);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
    var arrayMerge = options.arrayMerge || defaultArrayMerge;

    if (array) {
        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)
    } else {
        return mergeObject(target, source, optionsArgument)
    }
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
        throw new Error('first argument should be an array with at least two elements')
    }

    // we are sure there are at least 2 values, so it is safe to have no initial value
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, optionsArgument)
    })
};

return deepmerge

}));
});

//      
// An event handler can take an optional event argument
// and should not return a value
                                          
// An array of all currently registered event handlers for a type
                                            
// A map of event types and their corresponding event handlers.
                        
                                   
  

/** Mitt: Tiny (~200b) functional event emitter / pubsub.
 *  @name mitt
 *  @returns {Mitt}
 */
function mitt(all                 ) {
	all = all || Object.create(null);

	return {
		/**
		 * Register an event handler for the given type.
		 *
		 * @param  {String} type	Type of event to listen for, or `"*"` for all events
		 * @param  {Function} handler Function to call in response to given event
		 * @memberOf mitt
		 */
		on: function on(type        , handler              ) {
			(all[type] || (all[type] = [])).push(handler);
		},

		/**
		 * Remove an event handler for the given type.
		 *
		 * @param  {String} type	Type of event to unregister `handler` from, or `"*"`
		 * @param  {Function} handler Handler function to remove
		 * @memberOf mitt
		 */
		off: function off(type        , handler              ) {
			if (all[type]) {
				all[type].splice(all[type].indexOf(handler) >>> 0, 1);
			}
		},

		/**
		 * Invoke all handlers for the given type.
		 * If present, `"*"` handlers are invoked after type-matched handlers.
		 *
		 * @param {String} type  The event type to invoke
		 * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler
		 * @memberof mitt
		 */
		emit: function emit(type        , evt     ) {
			(all[type] || []).map(function (handler) { handler(evt); });
			(all['*'] || []).map(function (handler) { handler(type, evt); });
		}
	};
}

var namespaces_1 = createCommonjsModule(function (module, exports) {
var namespaces = {
  svg: {
    name: 'xmlns',
    uri: 'http://www.w3.org/2000/svg'
  },
  xlink: {
    name: 'xmlns:xlink',
    uri: 'http://www.w3.org/1999/xlink'
  }
};

exports.default = namespaces;
module.exports = exports.default;
});

/**
 * @param {Object} attrs
 * @return {string}
 */
var objectToAttrsString = function (attrs) {
  return Object.keys(attrs).map(function (attr) {
    var value = attrs[attr].toString().replace(/"/g, '&quot;');
    return (attr + "=\"" + value + "\"");
  }).join(' ');
};

var svg = namespaces_1.svg;
var xlink = namespaces_1.xlink;

var defaultAttrs = {};
defaultAttrs[svg.name] = svg.uri;
defaultAttrs[xlink.name] = xlink.uri;

/**
 * @param {string} [content]
 * @param {Object} [attributes]
 * @return {string}
 */
var wrapInSvgString = function (content, attributes) {
  if ( content === void 0 ) content = '';

  var attrs = deepmerge(defaultAttrs, attributes || {});
  var attrsRendered = objectToAttrsString(attrs);
  return ("<svg " + attrsRendered + ">" + content + "</svg>");
};

var svg$1 = namespaces_1.svg;
var xlink$1 = namespaces_1.xlink;

var defaultConfig = {
  attrs: ( obj = {
    style: ['position: absolute', 'width: 0', 'height: 0'].join('; '),
    'aria-hidden': 'true'
  }, obj[svg$1.name] = svg$1.uri, obj[xlink$1.name] = xlink$1.uri, obj )
};
var obj;

var Sprite = function Sprite(config) {
  this.config = deepmerge(defaultConfig, config || {});
  this.symbols = [];
};

/**
 * Add new symbol. If symbol with the same id exists it will be replaced.
 * @param {SpriteSymbol} symbol
 * @return {boolean} `true` - symbol was added, `false` - replaced
 */
Sprite.prototype.add = function add (symbol) {
  var ref = this;
    var symbols = ref.symbols;
  var existing = this.find(symbol.id);

  if (existing) {
    symbols[symbols.indexOf(existing)] = symbol;
    return false;
  }

  symbols.push(symbol);
  return true;
};

/**
 * Remove symbol & destroy it
 * @param {string} id
 * @return {boolean} `true` - symbol was found & successfully destroyed, `false` - otherwise
 */
Sprite.prototype.remove = function remove (id) {
  var ref = this;
    var symbols = ref.symbols;
  var symbol = this.find(id);

  if (symbol) {
    symbols.splice(symbols.indexOf(symbol), 1);
    symbol.destroy();
    return true;
  }

  return false;
};

/**
 * @param {string} id
 * @return {SpriteSymbol|null}
 */
Sprite.prototype.find = function find (id) {
  return this.symbols.filter(function (s) { return s.id === id; })[0] || null;
};

/**
 * @param {string} id
 * @return {boolean}
 */
Sprite.prototype.has = function has (id) {
  return this.find(id) !== null;
};

/**
 * @return {string}
 */
Sprite.prototype.stringify = function stringify () {
  var ref = this.config;
    var attrs = ref.attrs;
  var stringifiedSymbols = this.symbols.map(function (s) { return s.stringify(); }).join('');
  return wrapInSvgString(stringifiedSymbols, attrs);
};

/**
 * @return {string}
 */
Sprite.prototype.toString = function toString () {
  return this.stringify();
};

Sprite.prototype.destroy = function destroy () {
  this.symbols.forEach(function (s) { return s.destroy(); });
};

var SpriteSymbol = function SpriteSymbol(ref) {
  var id = ref.id;
  var viewBox = ref.viewBox;
  var content = ref.content;

  this.id = id;
  this.viewBox = viewBox;
  this.content = content;
};

/**
 * @return {string}
 */
SpriteSymbol.prototype.stringify = function stringify () {
  return this.content;
};

/**
 * @return {string}
 */
SpriteSymbol.prototype.toString = function toString () {
  return this.stringify();
};

SpriteSymbol.prototype.destroy = function destroy () {
    var this$1 = this;

  ['id', 'viewBox', 'content'].forEach(function (prop) { return delete this$1[prop]; });
};

/**
 * @param {string} content
 * @return {Element}
 */
var parse = function (content) {
  var hasImportNode = !!document.importNode;
  var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;

  /**
   * Fix for browser which are throwing WrongDocumentError
   * if you insert an element which is not part of the document
   * @see http://stackoverflow.com/a/7986519/4624403
   */
  if (hasImportNode) {
    return document.importNode(doc, true);
  }

  return doc;
};

var BrowserSpriteSymbol = (function (SpriteSymbol$$1) {
  function BrowserSpriteSymbol () {
    SpriteSymbol$$1.apply(this, arguments);
  }

  if ( SpriteSymbol$$1 ) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;
  BrowserSpriteSymbol.prototype = Object.create( SpriteSymbol$$1 && SpriteSymbol$$1.prototype );
  BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;

  var prototypeAccessors = { isMounted: {} };

  prototypeAccessors.isMounted.get = function () {
    return !!this.node;
  };

  /**
   * @param {Element} node
   * @return {BrowserSpriteSymbol}
   */
  BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode (node) {
    return new BrowserSpriteSymbol({
      id: node.getAttribute('id'),
      viewBox: node.getAttribute('viewBox'),
      content: node.outerHTML
    });
  };

  BrowserSpriteSymbol.prototype.destroy = function destroy () {
    if (this.isMounted) {
      this.unmount();
    }
    SpriteSymbol$$1.prototype.destroy.call(this);
  };

  /**
   * @param {Element|string} target
   * @return {Element}
   */
  BrowserSpriteSymbol.prototype.mount = function mount (target) {
    if (this.isMounted) {
      return this.node;
    }

    var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;
    var node = this.render();
    this.node = node;

    mountTarget.appendChild(node);

    return node;
  };

  /**
   * @return {Element}
   */
  BrowserSpriteSymbol.prototype.render = function render () {
    var content = this.stringify();
    return parse(wrapInSvgString(content)).childNodes[0];
  };

  BrowserSpriteSymbol.prototype.unmount = function unmount () {
    this.node.parentNode.removeChild(this.node);
  };

  Object.defineProperties( BrowserSpriteSymbol.prototype, prototypeAccessors );

  return BrowserSpriteSymbol;
}(SpriteSymbol));

var defaultConfig$1 = {
  /**
   * Should following options be automatically configured:
   * - `syncUrlsWithBaseTag`
   * - `locationChangeAngularEmitter`
   * - `moveGradientsOutsideSymbol`
   * @type {boolean}
   */
  autoConfigure: true,

  /**
   * Default mounting selector
   * @type {string}
   */
  mountTo: 'body',

  /**
   * Fix disappearing SVG elements when <base href> exists.
   * Executes when sprite mounted.
   * @see http://stackoverflow.com/a/18265336/796152
   * @see https://github.com/everdimension/angular-svg-base-fix
   * @see https://github.com/angular/angular.js/issues/8934#issuecomment-56568466
   * @type {boolean}
   */
  syncUrlsWithBaseTag: false,

  /**
   * Should sprite listen custom location change event
   * @type {boolean}
   */
  listenLocationChangeEvent: true,

  /**
   * Custom window event name which should be emitted to update sprite urls
   * @type {string}
   */
  locationChangeEvent: 'locationChange',

  /**
   * Emit location change event in Angular automatically
   * @type {boolean}
   */
  locationChangeAngularEmitter: false,

  /**
   * Selector to find symbols usages when updating sprite urls
   * @type {string}
   */
  usagesToUpdate: 'use[*|href]',

  /**
   * Fix Firefox bug when gradients and patterns don't work if they are within a symbol.
   * Executes when sprite is rendered, but not mounted.
   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=306674
   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575
   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1235364
   * @type {boolean}
   */
  moveGradientsOutsideSymbol: false
};

/**
 * @param {*} arrayLike
 * @return {Array}
 */
var arrayFrom = function (arrayLike) {
  return Array.prototype.slice.call(arrayLike, 0);
};

var browser = {
  isChrome: function () { return /chrome/i.test(navigator.userAgent); },
  isFirefox: function () { return /firefox/i.test(navigator.userAgent); },

  // https://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx
  isIE: function () { return /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent); },
  isEdge: function () { return /edge/i.test(navigator.userAgent); }
};

/**
 * @param {string} name
 * @param {*} data
 */
var dispatchEvent = function (name, data) {
  var event = document.createEvent('CustomEvent');
  event.initCustomEvent(name, false, false, data);
  window.dispatchEvent(event);
};

/**
 * IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.
 * This trick will trigger IE to read and use any existing SVG <style> tags.
 * @see https://github.com/iconic/SVGInjector/issues/23
 * @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
 *
 * @param {Element} node DOM Element to search <style> tags in
 * @return {Array<HTMLStyleElement>}
 */
var evalStylesIEWorkaround = function (node) {
  var updatedNodes = [];

  arrayFrom(node.querySelectorAll('style'))
    .forEach(function (style) {
      style.textContent += '';
      updatedNodes.push(style);
    });

  return updatedNodes;
};

/**
 * @param {string} [url] If not provided - current URL will be used
 * @return {string}
 */
var getUrlWithoutFragment = function (url) {
  return (url || window.location.href).split('#')[0];
};

/* global angular */
/**
 * @param {string} eventName
 */
var locationChangeAngularEmitter = function (eventName) {
  angular.module('ng').run(['$rootScope', function ($rootScope) {
    $rootScope.$on('$locationChangeSuccess', function (e, newUrl, oldUrl) {
      dispatchEvent(eventName, { oldUrl: oldUrl, newUrl: newUrl });
    });
  }]);
};

var defaultSelector = 'linearGradient, radialGradient, pattern, mask, clipPath';

/**
 * @param {Element} svg
 * @param {string} [selector]
 * @return {Element}
 */
var moveGradientsOutsideSymbol = function (svg, selector) {
  if ( selector === void 0 ) selector = defaultSelector;

  arrayFrom(svg.querySelectorAll('symbol')).forEach(function (symbol) {
    arrayFrom(symbol.querySelectorAll(selector)).forEach(function (node) {
      symbol.parentNode.insertBefore(node, symbol);
    });
  });
  return svg;
};

/**
 * @param {NodeList} nodes
 * @param {Function} [matcher]
 * @return {Attr[]}
 */
function selectAttributes(nodes, matcher) {
  var attrs = arrayFrom(nodes).reduce(function (acc, node) {
    if (!node.attributes) {
      return acc;
    }

    var arrayfied = arrayFrom(node.attributes);
    var matched = matcher ? arrayfied.filter(matcher) : arrayfied;
    return acc.concat(matched);
  }, []);

  return attrs;
}

/**
 * @param {NodeList|Node} nodes
 * @param {boolean} [clone=true]
 * @return {string}
 */

var xLinkNS = namespaces_1.xlink.uri;
var xLinkAttrName = 'xlink:href';

// eslint-disable-next-line no-useless-escape
var specialUrlCharsPattern = /[{}|\\\^\[\]`"<>]/g;

function encoder(url) {
  return url.replace(specialUrlCharsPattern, function (match) {
    return ("%" + (match[0].charCodeAt(0).toString(16).toUpperCase()));
  });
}

function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}

/**
 * @param {NodeList} nodes
 * @param {string} startsWith
 * @param {string} replaceWith
 * @return {NodeList}
 */
function updateReferences(nodes, startsWith, replaceWith) {
  arrayFrom(nodes).forEach(function (node) {
    var href = node.getAttribute(xLinkAttrName);
    if (href && href.indexOf(startsWith) === 0) {
      var newUrl = href.replace(startsWith, replaceWith);
      node.setAttributeNS(xLinkNS, xLinkAttrName, newUrl);
    }
  });

  return nodes;
}

/**
 * List of SVG attributes to update url() target in them
 */
var attList = [
  'clipPath',
  'colorProfile',
  'src',
  'cursor',
  'fill',
  'filter',
  'marker',
  'markerStart',
  'markerMid',
  'markerEnd',
  'mask',
  'stroke',
  'style'
];

var attSelector = attList.map(function (attr) { return ("[" + attr + "]"); }).join(',');

/**
 * Update URLs in svg image (like `fill="url(...)"`) and update referencing elements
 * @param {Element} svg
 * @param {NodeList} references
 * @param {string|RegExp} startsWith
 * @param {string} replaceWith
 * @return {void}
 *
 * @example
 * const sprite = document.querySelector('svg.sprite');
 * const usages = document.querySelectorAll('use');
 * updateUrls(sprite, usages, '#', 'prefix#');
 */
var updateUrls = function (svg, references, startsWith, replaceWith) {
  var startsWithEncoded = encoder(startsWith);
  var replaceWithEncoded = encoder(replaceWith);

  var nodes = svg.querySelectorAll(attSelector);
  var attrs = selectAttributes(nodes, function (ref) {
    var localName = ref.localName;
    var value = ref.value;

    return attList.indexOf(localName) !== -1 && value.indexOf(("url(" + startsWithEncoded)) !== -1;
  });

  attrs.forEach(function (attr) { return attr.value = attr.value.replace(new RegExp(escapeRegExp(startsWithEncoded), 'g'), replaceWithEncoded); });
  updateReferences(references, startsWithEncoded, replaceWithEncoded);
};

/**
 * Internal emitter events
 * @enum
 * @private
 */
var Events = {
  MOUNT: 'mount',
  SYMBOL_MOUNT: 'symbol_mount'
};

var BrowserSprite = (function (Sprite$$1) {
  function BrowserSprite(cfg) {
    var this$1 = this;
    if ( cfg === void 0 ) cfg = {};

    Sprite$$1.call(this, deepmerge(defaultConfig$1, cfg));

    var emitter = mitt();
    this._emitter = emitter;
    this.node = null;

    var ref = this;
    var config = ref.config;

    if (config.autoConfigure) {
      this._autoConfigure(cfg);
    }

    if (config.syncUrlsWithBaseTag) {
      var baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');
      emitter.on(Events.MOUNT, function () { return this$1.updateUrls('#', baseUrl); });
    }

    var handleLocationChange = this._handleLocationChange.bind(this);
    this._handleLocationChange = handleLocationChange;

    // Provide way to update sprite urls externally via dispatching custom window event
    if (config.listenLocationChangeEvent) {
      window.addEventListener(config.locationChangeEvent, handleLocationChange);
    }

    // Emit location change event in Angular automatically
    if (config.locationChangeAngularEmitter) {
      locationChangeAngularEmitter(config.locationChangeEvent);
    }

    // After sprite mounted
    emitter.on(Events.MOUNT, function (spriteNode) {
      if (config.moveGradientsOutsideSymbol) {
        moveGradientsOutsideSymbol(spriteNode);
      }
    });

    // After symbol mounted into sprite
    emitter.on(Events.SYMBOL_MOUNT, function (symbolNode) {
      if (config.moveGradientsOutsideSymbol) {
        moveGradientsOutsideSymbol(symbolNode.parentNode);
      }

      if (browser.isIE() || browser.isEdge()) {
        evalStylesIEWorkaround(symbolNode);
      }
    });
  }

  if ( Sprite$$1 ) BrowserSprite.__proto__ = Sprite$$1;
  BrowserSprite.prototype = Object.create( Sprite$$1 && Sprite$$1.prototype );
  BrowserSprite.prototype.constructor = BrowserSprite;

  var prototypeAccessors = { isMounted: {} };

  /**
   * @return {boolean}
   */
  prototypeAccessors.isMounted.get = function () {
    return !!this.node;
  };

  /**
   * Automatically configure following options
   * - `syncUrlsWithBaseTag`
   * - `locationChangeAngularEmitter`
   * - `moveGradientsOutsideSymbol`
   * @param {Object} cfg
   * @private
   */
  BrowserSprite.prototype._autoConfigure = function _autoConfigure (cfg) {
    var ref = this;
    var config = ref.config;

    if (typeof cfg.syncUrlsWithBaseTag === 'undefined') {
      config.syncUrlsWithBaseTag = typeof document.getElementsByTagName('base')[0] !== 'undefined';
    }

    if (typeof cfg.locationChangeAngularEmitter === 'undefined') {
        config.locationChangeAngularEmitter = typeof window.angular !== 'undefined';
    }

    if (typeof cfg.moveGradientsOutsideSymbol === 'undefined') {
      config.moveGradientsOutsideSymbol = browser.isFirefox();
    }
  };

  /**
   * @param {Event} event
   * @param {Object} event.detail
   * @param {string} event.detail.oldUrl
   * @param {string} event.detail.newUrl
   * @private
   */
  BrowserSprite.prototype._handleLocationChange = function _handleLocationChange (event) {
    var ref = event.detail;
    var oldUrl = ref.oldUrl;
    var newUrl = ref.newUrl;
    this.updateUrls(oldUrl, newUrl);
  };

  /**
   * Add new symbol. If symbol with the same id exists it will be replaced.
   * If sprite already mounted - `symbol.mount(sprite.node)` will be called.
   * @fires Events#SYMBOL_MOUNT
   * @param {BrowserSpriteSymbol} symbol
   * @return {boolean} `true` - symbol was added, `false` - replaced
   */
  BrowserSprite.prototype.add = function add (symbol) {
    var sprite = this;
    var isNewSymbol = Sprite$$1.prototype.add.call(this, symbol);

    if (this.isMounted && isNewSymbol) {
      symbol.mount(sprite.node);
      this._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);
    }

    return isNewSymbol;
  };

  /**
   * Attach to existing DOM node
   * @param {string|Element} target
   * @return {Element|null} attached DOM Element. null if node to attach not found.
   */
  BrowserSprite.prototype.attach = function attach (target) {
    var this$1 = this;

    var sprite = this;

    if (sprite.isMounted) {
      return sprite.node;
    }

    /** @type Element */
    var node = typeof target === 'string' ? document.querySelector(target) : target;
    sprite.node = node;

    // Already added symbols needs to be mounted
    this.symbols.forEach(function (symbol) {
      symbol.mount(sprite.node);
      this$1._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);
    });

    // Create symbols from existing DOM nodes, add and mount them
    arrayFrom(node.querySelectorAll('symbol'))
      .forEach(function (symbolNode) {
        var symbol = BrowserSpriteSymbol.createFromExistingNode(symbolNode);
        symbol.node = symbolNode; // hack to prevent symbol mounting to sprite when adding
        sprite.add(symbol);
      });

    this._emitter.emit(Events.MOUNT, node);

    return node;
  };

  BrowserSprite.prototype.destroy = function destroy () {
    var ref = this;
    var config = ref.config;
    var symbols = ref.symbols;
    var _emitter = ref._emitter;

    symbols.forEach(function (s) { return s.destroy(); });

    _emitter.off('*');
    window.removeEventListener(config.locationChangeEvent, this._handleLocationChange);

    if (this.isMounted) {
      this.unmount();
    }
  };

  /**
   * @fires Events#MOUNT
   * @param {string|Element} [target]
   * @param {boolean} [prepend=false]
   * @return {Element|null} rendered sprite node. null if mount node not found.
   */
  BrowserSprite.prototype.mount = function mount (target, prepend) {
    if ( target === void 0 ) target = this.config.mountTo;
    if ( prepend === void 0 ) prepend = false;

    var sprite = this;

    if (sprite.isMounted) {
      return sprite.node;
    }

    var mountNode = typeof target === 'string' ? document.querySelector(target) : target;
    var node = sprite.render();
    this.node = node;

    if (prepend && mountNode.childNodes[0]) {
      mountNode.insertBefore(node, mountNode.childNodes[0]);
    } else {
      mountNode.appendChild(node);
    }

    this._emitter.emit(Events.MOUNT, node);

    return node;
  };

  /**
   * @return {Element}
   */
  BrowserSprite.prototype.render = function render () {
    return parse(this.stringify());
  };

  /**
   * Detach sprite from the DOM
   */
  BrowserSprite.prototype.unmount = function unmount () {
    this.node.parentNode.removeChild(this.node);
  };

  /**
   * Update URLs in sprite and usage elements
   * @param {string} oldUrl
   * @param {string} newUrl
   * @return {boolean} `true` - URLs was updated, `false` - sprite is not mounted
   */
  BrowserSprite.prototype.updateUrls = function updateUrls$1 (oldUrl, newUrl) {
    if (!this.isMounted) {
      return false;
    }

    var usages = document.querySelectorAll(this.config.usagesToUpdate);

    updateUrls(
      this.node,
      usages,
      ((getUrlWithoutFragment(oldUrl)) + "#"),
      ((getUrlWithoutFragment(newUrl)) + "#")
    );

    return true;
  };

  Object.defineProperties( BrowserSprite.prototype, prototypeAccessors );

  return BrowserSprite;
}(Sprite));

var ready$1 = createCommonjsModule(function (module) {
/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  { module.exports = definition(); }

}('domready', function () {

  var fns = [], listener
    , doc = document
    , hack = doc.documentElement.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState);


  if (!loaded)
  { doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener);
    loaded = 1;
    while (listener = fns.shift()) { listener(); }
  }); }

  return function (fn) {
    loaded ? setTimeout(fn, 0) : fns.push(fn);
  }

});
});

var spriteNodeId = '__SVG_SPRITE_NODE__';
var spriteGlobalVarName = '__SVG_SPRITE__';
var isSpriteExists = !!window[spriteGlobalVarName];

// eslint-disable-next-line import/no-mutable-exports
var sprite;

if (isSpriteExists) {
  sprite = window[spriteGlobalVarName];
} else {
  sprite = new BrowserSprite({
    attrs: {
      id: spriteNodeId,
      'aria-hidden': 'true'
    }
  });
  window[spriteGlobalVarName] = sprite;
}

var loadSprite = function () {
  /**
   * Check for page already contains sprite node
   * If found - attach to and reuse it's content
   * If not - render and mount the new sprite
   */
  var existing = document.getElementById(spriteNodeId);

  if (existing) {
    sprite.attach(existing);
  } else {
    sprite.mount(document.body, true);
  }
};

if (document.body) {
  loadSprite();
} else {
  ready$1(loadSprite);
}

var sprite$1 = sprite;

return sprite$1;

})));


/***/ }),

/***/ "./node_modules/vue-loader/dist/exportHelper.js":
/*!******************************************************!*\
  !*** ./node_modules/vue-loader/dist/exportHelper.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// runtime helper for setting properties on components
// in a tree-shakable way
exports["default"] = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
        target[key] = val;
    }
    return target;
};


/***/ }),

/***/ "./node_modules/vueleton/lib/dropdown/dropdown.vue":
/*!*********************************************************!*\
  !*** ./node_modules/vueleton/lib/dropdown/dropdown.vue ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dropdown_vue_vue_type_template_id_1006cbb1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dropdown.vue?vue&type=template&id=1006cbb1 */ "./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=template&id=1006cbb1");
/* harmony import */ var _dropdown_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dropdown.vue?vue&type=script&lang=js */ "./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=script&lang=js");
/* harmony import */ var _style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style.css?vue&type=style&index=0&lang=css */ "./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_dropdown_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_dropdown_vue_vue_type_template_id_1006cbb1__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"node_modules/vueleton/lib/dropdown/dropdown.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./node_modules/vueleton/lib/modal/modal.vue":
/*!***************************************************!*\
  !*** ./node_modules/vueleton/lib/modal/modal.vue ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _modal_vue_vue_type_template_id_7b1ae4a6__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal.vue?vue&type=template&id=7b1ae4a6 */ "./node_modules/vueleton/lib/modal/modal.vue?vue&type=template&id=7b1ae4a6");
/* harmony import */ var _modal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal.vue?vue&type=script&lang=js */ "./node_modules/vueleton/lib/modal/modal.vue?vue&type=script&lang=js");
/* harmony import */ var _style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style.css?vue&type=style&index=0&lang=css */ "./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_modal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_modal_vue_vue_type_template_id_7b1ae4a6__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"node_modules/vueleton/lib/modal/modal.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/tooltip-content.vue":
/*!***************************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/tooltip-content.vue ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tooltip_content_vue_vue_type_template_id_f8eacef6__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltip-content.vue?vue&type=template&id=f8eacef6 */ "./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=template&id=f8eacef6");
/* harmony import */ var _tooltip_content_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltip-content.vue?vue&type=script&lang=js */ "./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=script&lang=js");
/* harmony import */ var _style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style.css?vue&type=style&index=0&lang=css */ "./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_tooltip_content_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_tooltip_content_vue_vue_type_template_id_f8eacef6__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"node_modules/vueleton/lib/tooltip/tooltip-content.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/tooltip.vue":
/*!*******************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/tooltip.vue ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tooltip_vue_vue_type_template_id_8b21f04e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tooltip.vue?vue&type=template&id=8b21f04e */ "./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=template&id=8b21f04e");
/* harmony import */ var _tooltip_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tooltip.vue?vue&type=script&lang=js */ "./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=script&lang=js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;
const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__["default"])(_tooltip_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_tooltip_vue_vue_type_template_id_8b21f04e__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"node_modules/vueleton/lib/tooltip/tooltip.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/code.vue":
/*!********************************!*\
  !*** ./src/common/ui/code.vue ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _code_vue_vue_type_template_id_4dacab06__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./code.vue?vue&type=template&id=4dacab06 */ "./src/common/ui/code.vue?vue&type=template&id=4dacab06");
/* harmony import */ var _code_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./code.vue?vue&type=script&lang=js */ "./src/common/ui/code.vue?vue&type=script&lang=js");
/* harmony import */ var _code_vue_vue_type_style_index_0_id_4dacab06_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./code.vue?vue&type=style&index=0&id=4dacab06&lang=css */ "./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_code_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_code_vue_vue_type_template_id_4dacab06__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/code.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/externals.vue":
/*!*************************************!*\
  !*** ./src/common/ui/externals.vue ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _externals_vue_vue_type_template_id_2c99f1b0__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./externals.vue?vue&type=template&id=2c99f1b0 */ "./src/common/ui/externals.vue?vue&type=template&id=2c99f1b0");
/* harmony import */ var _externals_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./externals.vue?vue&type=script&setup=true&lang=js */ "./src/common/ui/externals.vue?vue&type=script&setup=true&lang=js");
/* harmony import */ var _externals_vue_vue_type_style_index_0_id_2c99f1b0_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css */ "./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_externals_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_externals_vue_vue_type_template_id_2c99f1b0__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/externals.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/icon.vue":
/*!********************************!*\
  !*** ./src/common/ui/icon.vue ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _icon_vue_vue_type_template_id_3e2bd9ee__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icon.vue?vue&type=template&id=3e2bd9ee */ "./src/common/ui/icon.vue?vue&type=template&id=3e2bd9ee");
/* harmony import */ var _icon_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./icon.vue?vue&type=script&lang=js */ "./src/common/ui/icon.vue?vue&type=script&lang=js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;
const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__["default"])(_icon_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_icon_vue_vue_type_template_id_3e2bd9ee__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/icon.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/locale-group.vue":
/*!****************************************!*\
  !*** ./src/common/ui/locale-group.vue ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _locale_group_vue_vue_type_template_id_3739aa5c__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locale-group.vue?vue&type=template&id=3739aa5c */ "./src/common/ui/locale-group.vue?vue&type=template&id=3739aa5c");
/* harmony import */ var _locale_group_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-group.vue?vue&type=script&lang=js */ "./src/common/ui/locale-group.vue?vue&type=script&lang=js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;
const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__["default"])(_locale_group_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_locale_group_vue_vue_type_template_id_3739aa5c__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/locale-group.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/message.vue":
/*!***********************************!*\
  !*** ./src/common/ui/message.vue ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _message_vue_vue_type_template_id_e93248b2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./message.vue?vue&type=template&id=e93248b2 */ "./src/common/ui/message.vue?vue&type=template&id=e93248b2");
/* harmony import */ var _message_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./message.vue?vue&type=script&lang=js */ "./src/common/ui/message.vue?vue&type=script&lang=js");
/* harmony import */ var _message_vue_vue_type_style_index_0_id_e93248b2_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message.vue?vue&type=style&index=0&id=e93248b2&lang=css */ "./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_message_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_message_vue_vue_type_template_id_e93248b2__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/message.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/setting-check.vue":
/*!*****************************************!*\
  !*** ./src/common/ui/setting-check.vue ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _setting_check_vue_vue_type_template_id_7753c22a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setting-check.vue?vue&type=template&id=7753c22a */ "./src/common/ui/setting-check.vue?vue&type=template&id=7753c22a");
/* harmony import */ var _setting_check_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setting-check.vue?vue&type=script&lang=js */ "./src/common/ui/setting-check.vue?vue&type=script&lang=js");
/* harmony import */ var _setting_check_vue_vue_type_style_index_0_id_7753c22a_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css */ "./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_setting_check_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_setting_check_vue_vue_type_template_id_7753c22a__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/setting-check.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/setting-text.vue":
/*!****************************************!*\
  !*** ./src/common/ui/setting-text.vue ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _setting_text_vue_vue_type_template_id_3d4b389a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setting-text.vue?vue&type=template&id=3d4b389a */ "./src/common/ui/setting-text.vue?vue&type=template&id=3d4b389a");
/* harmony import */ var _setting_text_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setting-text.vue?vue&type=script&lang=js */ "./src/common/ui/setting-text.vue?vue&type=script&lang=js");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;
const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__["default"])(_setting_text_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_setting_text_vue_vue_type_template_id_3d4b389a__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/setting-text.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./src/common/ui/toggle-button.vue":
/*!*****************************************!*\
  !*** ./src/common/ui/toggle-button.vue ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toggle_button_vue_vue_type_template_id_990df92a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toggle-button.vue?vue&type=template&id=990df92a */ "./src/common/ui/toggle-button.vue?vue&type=template&id=990df92a");
/* harmony import */ var _toggle_button_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toggle-button.vue?vue&type=script&setup=true&lang=js */ "./src/common/ui/toggle-button.vue?vue&type=script&setup=true&lang=js");
/* harmony import */ var _toggle_button_vue_vue_type_style_index_0_id_990df92a_lang_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css */ "./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css");
/* harmony import */ var _home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ "./node_modules/vue-loader/dist/exportHelper.js");




;


const __exports__ = /*#__PURE__*/(0,_home_runner_work_violentmonkey_violentmonkey_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_3__["default"])(_toggle_button_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_1__["default"], [['render',_toggle_button_vue_vue_type_template_id_990df92a__WEBPACK_IMPORTED_MODULE_0__.render],['__file',"src/common/ui/toggle-button.vue"]])
/* hot reload */
if (false) {}


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);

/***/ }),

/***/ "./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=script&lang=js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=script&lang=js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_dropdown_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_dropdown_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/index.js??ruleSet[0]!./dropdown.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./node_modules/vueleton/lib/modal/modal.vue?vue&type=script&lang=js":
/*!***************************************************************************!*\
  !*** ./node_modules/vueleton/lib/modal/modal.vue?vue&type=script&lang=js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_modal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_modal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/index.js??ruleSet[0]!./modal.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/modal/modal.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=script&lang=js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=script&lang=js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_tooltip_content_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_tooltip_content_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/index.js??ruleSet[0]!./tooltip-content.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=script&lang=js":
/*!*******************************************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=script&lang=js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_tooltip_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_index_js_ruleSet_0_tooltip_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/index.js??ruleSet[0]!./tooltip.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=template&id=1006cbb1":
/*!***************************************************************************************!*\
  !*** ./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=template&id=1006cbb1 ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_dropdown_vue_vue_type_template_id_1006cbb1__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_dropdown_vue_vue_type_template_id_1006cbb1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../vue-loader/dist/index.js??ruleSet[0]!./dropdown.vue?vue&type=template&id=1006cbb1 */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/dropdown/dropdown.vue?vue&type=template&id=1006cbb1");


/***/ }),

/***/ "./node_modules/vueleton/lib/modal/modal.vue?vue&type=template&id=7b1ae4a6":
/*!*********************************************************************************!*\
  !*** ./node_modules/vueleton/lib/modal/modal.vue?vue&type=template&id=7b1ae4a6 ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_modal_vue_vue_type_template_id_7b1ae4a6__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_modal_vue_vue_type_template_id_7b1ae4a6__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../vue-loader/dist/index.js??ruleSet[0]!./modal.vue?vue&type=template&id=7b1ae4a6 */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/modal/modal.vue?vue&type=template&id=7b1ae4a6");


/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=template&id=f8eacef6":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=template&id=f8eacef6 ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_tooltip_content_vue_vue_type_template_id_f8eacef6__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_tooltip_content_vue_vue_type_template_id_f8eacef6__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../vue-loader/dist/index.js??ruleSet[0]!./tooltip-content.vue?vue&type=template&id=f8eacef6 */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip-content.vue?vue&type=template&id=f8eacef6");


/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=template&id=8b21f04e":
/*!*************************************************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=template&id=8b21f04e ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_tooltip_vue_vue_type_template_id_8b21f04e__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _babel_loader_lib_index_js_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_vue_loader_dist_index_js_ruleSet_0_tooltip_vue_vue_type_template_id_8b21f04e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../babel-loader/lib/index.js!../../../vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../vue-loader/dist/index.js??ruleSet[0]!./tooltip.vue?vue&type=template&id=8b21f04e */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./node_modules/vueleton/lib/tooltip/tooltip.vue?vue&type=template&id=8b21f04e");


/***/ }),

/***/ "./src/common/ui/code.vue?vue&type=template&id=4dacab06":
/*!**************************************************************!*\
  !*** ./src/common/ui/code.vue?vue&type=template&id=4dacab06 ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_template_id_4dacab06__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_template_id_4dacab06__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./code.vue?vue&type=template&id=4dacab06 */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=template&id=4dacab06");


/***/ }),

/***/ "./src/common/ui/externals.vue?vue&type=template&id=2c99f1b0":
/*!*******************************************************************!*\
  !*** ./src/common/ui/externals.vue?vue&type=template&id=2c99f1b0 ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_template_id_2c99f1b0__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_template_id_2c99f1b0__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./externals.vue?vue&type=template&id=2c99f1b0 */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=template&id=2c99f1b0");


/***/ }),

/***/ "./src/common/ui/icon.vue?vue&type=template&id=3e2bd9ee":
/*!**************************************************************!*\
  !*** ./src/common/ui/icon.vue?vue&type=template&id=3e2bd9ee ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_icon_vue_vue_type_template_id_3e2bd9ee__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_icon_vue_vue_type_template_id_3e2bd9ee__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./icon.vue?vue&type=template&id=3e2bd9ee */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/icon.vue?vue&type=template&id=3e2bd9ee");


/***/ }),

/***/ "./src/common/ui/locale-group.vue?vue&type=template&id=3739aa5c":
/*!**********************************************************************!*\
  !*** ./src/common/ui/locale-group.vue?vue&type=template&id=3739aa5c ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_locale_group_vue_vue_type_template_id_3739aa5c__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_locale_group_vue_vue_type_template_id_3739aa5c__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./locale-group.vue?vue&type=template&id=3739aa5c */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/locale-group.vue?vue&type=template&id=3739aa5c");


/***/ }),

/***/ "./src/common/ui/message.vue?vue&type=template&id=e93248b2":
/*!*****************************************************************!*\
  !*** ./src/common/ui/message.vue?vue&type=template&id=e93248b2 ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_template_id_e93248b2__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_template_id_e93248b2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./message.vue?vue&type=template&id=e93248b2 */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=template&id=e93248b2");


/***/ }),

/***/ "./src/common/ui/setting-check.vue?vue&type=template&id=7753c22a":
/*!***********************************************************************!*\
  !*** ./src/common/ui/setting-check.vue?vue&type=template&id=7753c22a ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_template_id_7753c22a__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_template_id_7753c22a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./setting-check.vue?vue&type=template&id=7753c22a */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=template&id=7753c22a");


/***/ }),

/***/ "./src/common/ui/setting-text.vue?vue&type=template&id=3d4b389a":
/*!**********************************************************************!*\
  !*** ./src/common/ui/setting-text.vue?vue&type=template&id=3d4b389a ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_text_vue_vue_type_template_id_3d4b389a__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_text_vue_vue_type_template_id_3d4b389a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./setting-text.vue?vue&type=template&id=3d4b389a */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-text.vue?vue&type=template&id=3d4b389a");


/***/ }),

/***/ "./src/common/ui/toggle-button.vue?vue&type=template&id=990df92a":
/*!***********************************************************************!*\
  !*** ./src/common/ui/toggle-button.vue?vue&type=template&id=990df92a ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_template_id_990df92a__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_template_id_990df92a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./toggle-button.vue?vue&type=template&id=990df92a */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=template&id=990df92a");


/***/ }),

/***/ "./src/common/ui/code.vue?vue&type=script&lang=js":
/*!********************************************************!*\
  !*** ./src/common/ui/code.vue?vue&type=script&lang=js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./code.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./src/common/ui/externals.vue?vue&type=script&setup=true&lang=js":
/*!************************************************************************!*\
  !*** ./src/common/ui/externals.vue?vue&type=script&setup=true&lang=js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./externals.vue?vue&type=script&setup=true&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=script&setup=true&lang=js");
 

/***/ }),

/***/ "./src/common/ui/icon.vue?vue&type=script&lang=js":
/*!********************************************************!*\
  !*** ./src/common/ui/icon.vue?vue&type=script&lang=js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_icon_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_icon_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./icon.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/icon.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./src/common/ui/locale-group.vue?vue&type=script&lang=js":
/*!****************************************************************!*\
  !*** ./src/common/ui/locale-group.vue?vue&type=script&lang=js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_locale_group_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_locale_group_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./locale-group.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/locale-group.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./src/common/ui/message.vue?vue&type=script&lang=js":
/*!***********************************************************!*\
  !*** ./src/common/ui/message.vue?vue&type=script&lang=js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./message.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./src/common/ui/setting-check.vue?vue&type=script&lang=js":
/*!*****************************************************************!*\
  !*** ./src/common/ui/setting-check.vue?vue&type=script&lang=js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./setting-check.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./src/common/ui/setting-text.vue?vue&type=script&lang=js":
/*!****************************************************************!*\
  !*** ./src/common/ui/setting-text.vue?vue&type=script&lang=js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_text_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_text_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./setting-text.vue?vue&type=script&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-text.vue?vue&type=script&lang=js");
 

/***/ }),

/***/ "./src/common/ui/toggle-button.vue?vue&type=script&setup=true&lang=js":
/*!****************************************************************************!*\
  !*** ./src/common/ui/toggle-button.vue?vue&type=script&setup=true&lang=js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_scripts_fake_dep_loader_js_clonedRuleSet_10_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_script_setup_true_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./toggle-button.vue?vue&type=script&setup=true&lang=js */ "./node_modules/babel-loader/lib/index.js!./scripts/fake-dep-loader.js??clonedRuleSet-10.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=script&setup=true&lang=js");
 

/***/ }),

/***/ "./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css":
/*!**************************************************************************************!*\
  !*** ./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _style_loader_dist_cjs_js_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../style-loader/dist/cjs.js!../../../css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!../../../vue-loader/dist/stylePostLoader.js!./style.css?vue&type=style&index=0&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/dropdown/style.css?vue&type=style&index=0&lang=css");


/***/ }),

/***/ "./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css":
/*!***********************************************************************************!*\
  !*** ./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _style_loader_dist_cjs_js_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../style-loader/dist/cjs.js!../../../css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!../../../vue-loader/dist/stylePostLoader.js!./style.css?vue&type=style&index=0&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/modal/style.css?vue&type=style&index=0&lang=css");


/***/ }),

/***/ "./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css":
/*!*************************************************************************************!*\
  !*** ./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _style_loader_dist_cjs_js_css_loader_dist_cjs_js_clonedRuleSet_4_use_1_vue_loader_dist_stylePostLoader_js_style_css_vue_type_style_index_0_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../style-loader/dist/cjs.js!../../../css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!../../../vue-loader/dist/stylePostLoader.js!./style.css?vue&type=style&index=0&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vueleton/lib/tooltip/style.css?vue&type=style&index=0&lang=css");


/***/ }),

/***/ "./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css":
/*!****************************************************************************!*\
  !*** ./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_code_vue_vue_type_style_index_0_id_4dacab06_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./code.vue?vue&type=style&index=0&id=4dacab06&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/code.vue?vue&type=style&index=0&id=4dacab06&lang=css");


/***/ }),

/***/ "./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css":
/*!*********************************************************************************!*\
  !*** ./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_externals_vue_vue_type_style_index_0_id_2c99f1b0_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/externals.vue?vue&type=style&index=0&id=2c99f1b0&lang=css");


/***/ }),

/***/ "./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css":
/*!*******************************************************************************!*\
  !*** ./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_message_vue_vue_type_style_index_0_id_e93248b2_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./message.vue?vue&type=style&index=0&id=e93248b2&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/message.vue?vue&type=style&index=0&id=e93248b2&lang=css");


/***/ }),

/***/ "./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css":
/*!*************************************************************************************!*\
  !*** ./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_setting_check_vue_vue_type_style_index_0_id_7753c22a_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/setting-check.vue?vue&type=style&index=0&id=7753c22a&lang=css");


/***/ }),

/***/ "./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css":
/*!*************************************************************************************!*\
  !*** ./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_clonedRuleSet_6_use_1_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_6_use_2_node_modules_vue_loader_dist_index_js_ruleSet_0_toggle_button_vue_vue_type_style_index_0_id_990df92a_lang_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-6.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-6.use[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./src/common/ui/toggle-button.vue?vue&type=style&index=0&id=990df92a&lang=css");


/***/ }),

/***/ "./node_modules/vue/dist/vue.runtime.esm-bundler.js":
/*!**********************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm-bundler.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseTransition": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.BaseTransition),
/* harmony export */   "Comment": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Comment),
/* harmony export */   "EffectScope": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.EffectScope),
/* harmony export */   "Fragment": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Fragment),
/* harmony export */   "KeepAlive": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.KeepAlive),
/* harmony export */   "ReactiveEffect": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ReactiveEffect),
/* harmony export */   "Static": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Static),
/* harmony export */   "Suspense": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Suspense),
/* harmony export */   "Teleport": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Teleport),
/* harmony export */   "Text": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Text),
/* harmony export */   "Transition": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.Transition),
/* harmony export */   "TransitionGroup": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.TransitionGroup),
/* harmony export */   "VueElement": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.VueElement),
/* harmony export */   "callWithAsyncErrorHandling": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.callWithAsyncErrorHandling),
/* harmony export */   "callWithErrorHandling": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.callWithErrorHandling),
/* harmony export */   "camelize": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.camelize),
/* harmony export */   "capitalize": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.capitalize),
/* harmony export */   "cloneVNode": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.cloneVNode),
/* harmony export */   "compatUtils": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.compatUtils),
/* harmony export */   "compile": () => (/* binding */ compile),
/* harmony export */   "computed": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.computed),
/* harmony export */   "createApp": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createApp),
/* harmony export */   "createBlock": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createBlock),
/* harmony export */   "createCommentVNode": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode),
/* harmony export */   "createElementBlock": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createElementBlock),
/* harmony export */   "createElementVNode": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createElementVNode),
/* harmony export */   "createHydrationRenderer": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createHydrationRenderer),
/* harmony export */   "createPropsRestProxy": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createPropsRestProxy),
/* harmony export */   "createRenderer": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createRenderer),
/* harmony export */   "createSSRApp": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createSSRApp),
/* harmony export */   "createSlots": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createSlots),
/* harmony export */   "createStaticVNode": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createStaticVNode),
/* harmony export */   "createTextVNode": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createTextVNode),
/* harmony export */   "createVNode": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.createVNode),
/* harmony export */   "customRef": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.customRef),
/* harmony export */   "defineAsyncComponent": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineAsyncComponent),
/* harmony export */   "defineComponent": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineComponent),
/* harmony export */   "defineCustomElement": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineCustomElement),
/* harmony export */   "defineEmits": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineEmits),
/* harmony export */   "defineExpose": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineExpose),
/* harmony export */   "defineProps": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineProps),
/* harmony export */   "defineSSRCustomElement": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.defineSSRCustomElement),
/* harmony export */   "devtools": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.devtools),
/* harmony export */   "effect": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.effect),
/* harmony export */   "effectScope": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.effectScope),
/* harmony export */   "getCurrentInstance": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.getCurrentInstance),
/* harmony export */   "getCurrentScope": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope),
/* harmony export */   "getTransitionRawChildren": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.getTransitionRawChildren),
/* harmony export */   "guardReactiveProps": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.guardReactiveProps),
/* harmony export */   "h": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.h),
/* harmony export */   "handleError": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.handleError),
/* harmony export */   "hydrate": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.hydrate),
/* harmony export */   "initCustomFormatter": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.initCustomFormatter),
/* harmony export */   "initDirectivesForSSR": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.initDirectivesForSSR),
/* harmony export */   "inject": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.inject),
/* harmony export */   "isMemoSame": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isMemoSame),
/* harmony export */   "isProxy": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isProxy),
/* harmony export */   "isReactive": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isReactive),
/* harmony export */   "isReadonly": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isReadonly),
/* harmony export */   "isRef": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isRef),
/* harmony export */   "isRuntimeOnly": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isRuntimeOnly),
/* harmony export */   "isShallow": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isShallow),
/* harmony export */   "isVNode": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.isVNode),
/* harmony export */   "markRaw": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.markRaw),
/* harmony export */   "mergeDefaults": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.mergeDefaults),
/* harmony export */   "mergeProps": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.mergeProps),
/* harmony export */   "nextTick": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.nextTick),
/* harmony export */   "normalizeClass": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.normalizeClass),
/* harmony export */   "normalizeProps": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.normalizeProps),
/* harmony export */   "normalizeStyle": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle),
/* harmony export */   "onActivated": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onActivated),
/* harmony export */   "onBeforeMount": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount),
/* harmony export */   "onBeforeUnmount": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount),
/* harmony export */   "onBeforeUpdate": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onBeforeUpdate),
/* harmony export */   "onDeactivated": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onDeactivated),
/* harmony export */   "onErrorCaptured": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onErrorCaptured),
/* harmony export */   "onMounted": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onMounted),
/* harmony export */   "onRenderTracked": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onRenderTracked),
/* harmony export */   "onRenderTriggered": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onRenderTriggered),
/* harmony export */   "onScopeDispose": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onScopeDispose),
/* harmony export */   "onServerPrefetch": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onServerPrefetch),
/* harmony export */   "onUnmounted": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onUnmounted),
/* harmony export */   "onUpdated": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.onUpdated),
/* harmony export */   "openBlock": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.openBlock),
/* harmony export */   "popScopeId": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.popScopeId),
/* harmony export */   "provide": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.provide),
/* harmony export */   "proxyRefs": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.proxyRefs),
/* harmony export */   "pushScopeId": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.pushScopeId),
/* harmony export */   "queuePostFlushCb": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.queuePostFlushCb),
/* harmony export */   "reactive": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.reactive),
/* harmony export */   "readonly": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.readonly),
/* harmony export */   "ref": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ref),
/* harmony export */   "registerRuntimeCompiler": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.registerRuntimeCompiler),
/* harmony export */   "render": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.render),
/* harmony export */   "renderList": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.renderList),
/* harmony export */   "renderSlot": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.renderSlot),
/* harmony export */   "resolveComponent": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveComponent),
/* harmony export */   "resolveDirective": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveDirective),
/* harmony export */   "resolveDynamicComponent": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveDynamicComponent),
/* harmony export */   "resolveFilter": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveFilter),
/* harmony export */   "resolveTransitionHooks": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.resolveTransitionHooks),
/* harmony export */   "setBlockTracking": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.setBlockTracking),
/* harmony export */   "setDevtoolsHook": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.setDevtoolsHook),
/* harmony export */   "setTransitionHooks": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.setTransitionHooks),
/* harmony export */   "shallowReactive": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.shallowReactive),
/* harmony export */   "shallowReadonly": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.shallowReadonly),
/* harmony export */   "shallowRef": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.shallowRef),
/* harmony export */   "ssrContextKey": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ssrContextKey),
/* harmony export */   "ssrUtils": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.ssrUtils),
/* harmony export */   "stop": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.stop),
/* harmony export */   "toDisplayString": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toDisplayString),
/* harmony export */   "toHandlerKey": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toHandlerKey),
/* harmony export */   "toHandlers": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toHandlers),
/* harmony export */   "toRaw": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toRaw),
/* harmony export */   "toRef": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toRef),
/* harmony export */   "toRefs": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.toRefs),
/* harmony export */   "transformVNodeArgs": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.transformVNodeArgs),
/* harmony export */   "triggerRef": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.triggerRef),
/* harmony export */   "unref": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.unref),
/* harmony export */   "useAttrs": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useAttrs),
/* harmony export */   "useCssModule": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useCssModule),
/* harmony export */   "useCssVars": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useCssVars),
/* harmony export */   "useSSRContext": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useSSRContext),
/* harmony export */   "useSlots": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useSlots),
/* harmony export */   "useTransitionState": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.useTransitionState),
/* harmony export */   "vModelCheckbox": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelCheckbox),
/* harmony export */   "vModelDynamic": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelDynamic),
/* harmony export */   "vModelRadio": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelRadio),
/* harmony export */   "vModelSelect": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelSelect),
/* harmony export */   "vModelText": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vModelText),
/* harmony export */   "vShow": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.vShow),
/* harmony export */   "version": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.version),
/* harmony export */   "warn": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.warn),
/* harmony export */   "watch": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watch),
/* harmony export */   "watchEffect": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watchEffect),
/* harmony export */   "watchPostEffect": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watchPostEffect),
/* harmony export */   "watchSyncEffect": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.watchSyncEffect),
/* harmony export */   "withAsyncContext": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withAsyncContext),
/* harmony export */   "withCtx": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withCtx),
/* harmony export */   "withDefaults": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withDefaults),
/* harmony export */   "withDirectives": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withDirectives),
/* harmony export */   "withKeys": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withKeys),
/* harmony export */   "withMemo": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withMemo),
/* harmony export */   "withModifiers": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withModifiers),
/* harmony export */   "withScopeId": () => (/* reexport safe */ _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__.withScopeId)
/* harmony export */ });
/* harmony import */ var _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/runtime-dom */ "./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js");
/* harmony import */ var _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/runtime-dom */ "./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js");



function initDev() {
    {
        (0,_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_1__.initCustomFormatter)();
    }
}

// This entry exports the runtime only, and is built as
if ((true)) {
    initDev();
}
const compile = () => {
    if ((true)) {
        (0,_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_1__.warn)(`Runtime compilation is not supported in this build of Vue.` +
            (` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
                ) /* should not happen */);
    }
};




/***/ })

}]);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXVpLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxLQUFLO0FBQzVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0RBQWtEO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpQkFBaUI7QUFDekI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJLG1EQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsYUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4TUFBOE07QUFDMU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvREFBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxh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Q0E7QUFDQTtBQUNBOztBQUVtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvQHZpb2xlbnRtb25rZXkvc2hvcnRjdXQvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWNvcmUvZGlzdC9ydW50aW1lLWNvcmUuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtZG9tL2Rpc3QvcnVudGltZS1kb20uZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy9AdnVlL3NoYXJlZC9kaXN0L3NoYXJlZC5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi9kcm9wZG93bi9kcm9wZG93bi52dWUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvbW9kYWwvbW9kYWwudnVlIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvdnVlbGV0b24vbGliL3Rvb2x0aXAvdG9vbHRpcC1jb250ZW50LnZ1ZSIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi90b29sdGlwL3Rvb2x0aXAudnVlIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2NvZGUudnVlIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2V4dGVybmFscy52dWUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvaWNvbi52dWUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvbG9jYWxlLWdyb3VwLnZ1ZSIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9tZXNzYWdlLnZ1ZSIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9zZXR0aW5nLWNoZWNrLnZ1ZSIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9zZXR0aW5nLXRleHQudnVlIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL3RvZ2dsZS1idXR0b24udnVlIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvdnVlbGV0b24vbGliL2Ryb3Bkb3duL2luZGV4LmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvdnVlbGV0b24vbGliL21vZGFsL2luZGV4LmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvdnVlbGV0b24vbGliL21vZGFsL21vZGFsLXYzLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvdnVlbGV0b24vbGliL3Rvb2x0aXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi9icm93c2VyLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL2NhY2hlLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL2NvbnN0cy5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi9kYXRlLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL2Rvd25sb2FkLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL2hhbmRsZXJzLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL2hvb2stc2V0dGluZy5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi9pbmRleC5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi9rZXlib2FyZC5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi9sb2FkLXNjcmlwdC1pY29uLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL29iamVjdC5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi9vcHRpb25zLWRlZmF1bHRzLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL29wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vcm91dGVyLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VhLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2NvZGUtYXV0b2NvbXBsZXRlLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2NvZGUtanMtbWl4ZWQtbW9kZS5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9jb2RlLXRyYWlsaW5nLXNwYWNlcy5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9mYXZpY29uLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2luZGV4LmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL3N0eWxlL2luZGV4LmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3V0aWwuanMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvZHJvcGRvd24vc3R5bGUuY3NzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvdnVlbGV0b24vbGliL21vZGFsL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi90b29sdGlwL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9zdHlsZS9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvY29kZS52dWU/NWRkMyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9leHRlcm5hbHMudnVlPzU1NDAiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvbWVzc2FnZS52dWU/YzJmYyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9zZXR0aW5nLWNoZWNrLnZ1ZT9lMGVmIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL3RvZ2dsZS1idXR0b24udnVlP2NhZWUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvZHJvcGRvd24vc3R5bGUuY3NzPzI1Y2MiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvbW9kYWwvc3R5bGUuY3NzP2U4MDciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdG9vbHRpcC9zdHlsZS5jc3M/M2QwMyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9zdHlsZS9zdHlsZS5jc3M/OWI4YiIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9jb2RlLnZ1ZT81YTJiIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2V4dGVybmFscy52dWU/NzRmMSIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9tZXNzYWdlLnZ1ZT9iZTI1Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL3NldHRpbmctY2hlY2sudnVlP2U4MmIiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvdG9nZ2xlLWJ1dHRvbi52dWU/YTQ1ZSIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvcmVzb3VyY2VzL3N2Zy9hcnJvdy5zdmciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9yZXNvdXJjZXMvc3ZnL2F1dGhvci5zdmciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9yZXNvdXJjZXMvc3ZnL2NvZGUuc3ZnIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvcmVzb3VyY2VzL3N2Zy9jb2cuc3ZnIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvcmVzb3VyY2VzL3N2Zy9jb21tYW5kLnN2ZyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL3Jlc291cmNlcy9zdmcvZmlsdGVyLnN2ZyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL3Jlc291cmNlcy9zdmcvaG9tZS5zdmciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9yZXNvdXJjZXMvc3ZnL2luZm8uc3ZnIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvcmVzb3VyY2VzL3N2Zy9tb3JlLnN2ZyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL3Jlc291cmNlcy9zdmcvcGx1cy5zdmciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9yZXNvdXJjZXMvc3ZnL3F1ZXN0aW9uLnN2ZyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL3Jlc291cmNlcy9zdmcvcmVmcmVzaC5zdmciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9yZXNvdXJjZXMvc3ZnL3NlYXJjaC5zdmciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9yZXNvdXJjZXMvc3ZnL3RvZ2dsZS1vZmYuc3ZnIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvcmVzb3VyY2VzL3N2Zy90b2dnbGUtb24uc3ZnIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvcmVzb3VyY2VzL3N2Zy90cmFzaC5zdmciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9yZXNvdXJjZXMvc3ZnL3VuZG8uc3ZnIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qcyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvZHJvcGRvd24vZHJvcGRvd24udnVlPzE2MWYiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvbW9kYWwvbW9kYWwudnVlP2Q1MDYiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdG9vbHRpcC90b29sdGlwLWNvbnRlbnQudnVlP2ViYTUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdG9vbHRpcC90b29sdGlwLnZ1ZT9lMTRlIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2NvZGUudnVlPzgwMDMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvZXh0ZXJuYWxzLnZ1ZT9hOGU3Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2ljb24udnVlP2ZkMjIiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvbG9jYWxlLWdyb3VwLnZ1ZT8yZDM1Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL21lc3NhZ2UudnVlPzdiYzUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvc2V0dGluZy1jaGVjay52dWU/YjcyMiIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9zZXR0aW5nLXRleHQudnVlPzUxODciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvdG9nZ2xlLWJ1dHRvbi52dWU/MDM5MSIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi9kcm9wZG93bi9kcm9wZG93bi52dWU/YTEyMiIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi9tb2RhbC9tb2RhbC52dWU/ZTUzNiIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi90b29sdGlwL3Rvb2x0aXAtY29udGVudC52dWU/NTQ1NCIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi90b29sdGlwL3Rvb2x0aXAudnVlP2M3ZDkiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvZHJvcGRvd24vZHJvcGRvd24udnVlPzMzOTMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvbW9kYWwvbW9kYWwudnVlP2NlMmEiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdG9vbHRpcC90b29sdGlwLWNvbnRlbnQudnVlPzJmNDYiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdG9vbHRpcC90b29sdGlwLnZ1ZT83YjVjIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2NvZGUudnVlP2I2MzciLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvZXh0ZXJuYWxzLnZ1ZT8zYjk0Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2ljb24udnVlP2UzYmUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvbG9jYWxlLWdyb3VwLnZ1ZT9mMDQ5Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL21lc3NhZ2UudnVlPzY1OTAiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvc2V0dGluZy1jaGVjay52dWU/ZmMxMyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9zZXR0aW5nLXRleHQudnVlPzFjOWUiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvdG9nZ2xlLWJ1dHRvbi52dWU/OGI5NCIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9jb2RlLnZ1ZT8zYTg1Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2V4dGVybmFscy52dWU/NGMyMCIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9pY29uLnZ1ZT82M2Y0Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2xvY2FsZS1ncm91cC52dWU/MTY4MyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9tZXNzYWdlLnZ1ZT81MDkxIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL3NldHRpbmctY2hlY2sudnVlPzkyYzQiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvc2V0dGluZy10ZXh0LnZ1ZT8wNDU5Iiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL3RvZ2dsZS1idXR0b24udnVlP2FlZGEiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvZHJvcGRvd24vc3R5bGUuY3NzPzRhYjIiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvbW9kYWwvc3R5bGUuY3NzPzRmN2QiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL25vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdG9vbHRpcC9zdHlsZS5jc3M/OGM2MiIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9jb2RlLnZ1ZT9lNDRhIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL2V4dGVybmFscy52dWU/YmUwNyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vc3JjL2NvbW1vbi91aS9tZXNzYWdlLnZ1ZT9lZTNiIiwid2VicGFjazovL3Zpb2xlbnRtb25rZXkvLi9zcmMvY29tbW9uL3VpL3NldHRpbmctY2hlY2sudnVlP2RiZjMiLCJ3ZWJwYWNrOi8vdmlvbGVudG1vbmtleS8uL3NyYy9jb21tb24vdWkvdG9nZ2xlLWJ1dHRvbi52dWU/Y2MyYyIsIndlYnBhY2s6Ly92aW9sZW50bW9ua2V5Ly4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS1idW5kbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAdmlvbGVudG1vbmtleS9zaG9ydGN1dCB2MS4yLjYgfCBJU0MgTGljZW5zZSAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuY29uc3QgaXNNYWNpbnRvc2ggPSBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdNYWNpbnRvc2gnKTtcbmNvbnN0IG1vZGlmaWVycyA9IHtcbiAgYzogJ2MnLFxuICBzOiAncycsXG4gIGE6ICdhJyxcbiAgbTogJ20nLFxuICBjdHJsOiAnYycsXG4gIGNvbnRyb2w6ICdjJyxcbiAgLy8gbWFjT1NcbiAgc2hpZnQ6ICdzJyxcbiAgYWx0OiAnYScsXG4gIG1ldGE6ICdtJyxcbiAgY3RybGNtZDogaXNNYWNpbnRvc2ggPyAnbScgOiAnYydcbn07XG5jb25zdCBtb2RpZmllclN5bWJvbHMgPSB7XG4gIGM6ICdeJyxcbiAgczogJ+KHpycsXG4gIGE6ICfijKUnLFxuICBtOiAn4oyYJ1xufTtcbmNvbnN0IGFsaWFzZXMgPSB7XG4gIGFycm93dXA6ICd1cCcsXG4gIGFycm93ZG93bjogJ2Rvd24nLFxuICBhcnJvd2xlZnQ6ICdsZWZ0JyxcbiAgYXJyb3dyaWdodDogJ3JpZ2h0JyxcbiAgZW50ZXI6ICdjcicsXG4gIGVzY2FwZTogJ2VzYycsXG4gICcgJzogJ3NwYWNlJ1xufTtcbmZ1bmN0aW9uIHJlcHJLZXkoYmFzZSwgbW9kLCBjYXNlU2Vuc2l0aXZlID0gZmFsc2UpIHtcbiAgY29uc3Qge1xuICAgIGMsXG4gICAgcyxcbiAgICBhLFxuICAgIG1cbiAgfSA9IG1vZDtcbiAgaWYgKCFjYXNlU2Vuc2l0aXZlIHx8IGJhc2UubGVuZ3RoID4gMSkgYmFzZSA9IGJhc2UudG9Mb3dlckNhc2UoKTtcbiAgYmFzZSA9IGFsaWFzZXNbYmFzZV0gfHwgYmFzZTtcbiAgcmV0dXJuIFttICYmICdtJywgYyAmJiAnYycsIHMgJiYgJ3MnLCBhICYmICdhJywgYmFzZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy0nKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleShzaG9ydGN1dCwgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlKSB7XG4gIGNvbnN0IHBhcnRzID0gc2hvcnRjdXQuc3BsaXQoJy0nKTtcbiAgY29uc3QgYmFzZSA9IHBhcnRzLnBvcCgpO1xuICBjb25zdCBtb2RpZmllclN0YXRlID0ge307XG5cbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgY29uc3Qga2V5ID0gbW9kaWZpZXJzW3BhcnQudG9Mb3dlckNhc2UoKV07XG4gICAgaWYgKCFrZXkpIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtb2RpZmllciBrZXk6ICR7cGFydH1gKTtcbiAgICBtb2RpZmllclN0YXRlW2tleV0gPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlcHJLZXkoYmFzZSwgbW9kaWZpZXJTdGF0ZSwgY2FzZVNlbnNpdGl2ZSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZXF1ZW5jZShzZXF1ZW5jZSwgY2FzZVNlbnNpdGl2ZSkge1xuICByZXR1cm4gc2VxdWVuY2Uuc3BsaXQoJyAnKS5tYXAoa2V5ID0+IG5vcm1hbGl6ZUtleShrZXksIGNhc2VTZW5zaXRpdmUpKTtcbn1cbmZ1bmN0aW9uIHBhcnNlQ29uZGl0aW9uKGNvbmRpdGlvbikge1xuICByZXR1cm4gY29uZGl0aW9uLnNwbGl0KCcmJicpLm1hcChrZXkgPT4ge1xuICAgIGtleSA9IGtleS50cmltKCk7XG4gICAgaWYgKCFrZXkpIHJldHVybjtcblxuICAgIGlmIChrZXlbMF0gPT09ICchJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbm90OiB0cnVlLFxuICAgICAgICBmaWVsZDoga2V5LnNsaWNlKDEpLnRyaW0oKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbm90OiBmYWxzZSxcbiAgICAgIGZpZWxkOiBrZXlcbiAgICB9O1xuICB9KS5maWx0ZXIoQm9vbGVhbik7XG59XG5mdW5jdGlvbiByZXByU2hvcnRjdXQoc2hvcnRjdXQsIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSkge1xuICBjb25zdCBwYXJ0cyA9IG5vcm1hbGl6ZUtleShzaG9ydGN1dCwgY2FzZVNlbnNpdGl2ZSkuc3BsaXQoJy0nKTtcbiAgbGV0IGJhc2UgPSBwYXJ0cy5wb3AoKTtcbiAgYmFzZSA9IGJhc2VbMF0udG9VcHBlckNhc2UoKSArIGJhc2Uuc2xpY2UoMSk7XG4gIGNvbnN0IG1vZGlmaWVycyA9IHBhcnRzLm1hcChwID0+IG1vZGlmaWVyU3ltYm9sc1twXSkuZmlsdGVyKEJvb2xlYW4pO1xuICByZXR1cm4gWy4uLm1vZGlmaWVycywgYmFzZV0uam9pbignJyk7XG59XG5cbmNsYXNzIEtleU5vZGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuc2hvcnRjdXRzID0gbmV3IFNldCgpO1xuICB9XG5cbiAgYWRkKHNlcXVlbmNlLCBzaG9ydGN1dCkge1xuICAgIGxldCBub2RlID0gdGhpcztcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIHNlcXVlbmNlKSB7XG4gICAgICBsZXQgY2hpbGQgPSBub2RlLmNoaWxkcmVuLmdldChrZXkpO1xuXG4gICAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgIGNoaWxkID0gbmV3IEtleU5vZGUoKTtcbiAgICAgICAgbm9kZS5jaGlsZHJlbi5zZXQoa2V5LCBjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBjaGlsZDtcbiAgICB9XG5cbiAgICBub2RlLnNob3J0Y3V0cy5hZGQoc2hvcnRjdXQpO1xuICB9XG5cbiAgZ2V0KHNlcXVlbmNlKSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2Ygc2VxdWVuY2UpIHtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkcmVuLmdldChrZXkpO1xuICAgICAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJlbW92ZShzZXF1ZW5jZSwgc2hvcnRjdXQpIHtcbiAgICBsZXQgbm9kZSA9IHRoaXM7XG4gICAgY29uc3QgYW5jZXN0b3JzID0gW25vZGVdO1xuXG4gICAgZm9yIChjb25zdCBrZXkgb2Ygc2VxdWVuY2UpIHtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkcmVuLmdldChrZXkpO1xuICAgICAgaWYgKCFub2RlKSByZXR1cm47XG4gICAgICBhbmNlc3RvcnMucHVzaChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvcnRjdXQpIG5vZGUuc2hvcnRjdXRzLmRlbGV0ZShzaG9ydGN1dCk7ZWxzZSBub2RlLnNob3J0Y3V0cy5jbGVhcigpO1xuICAgIGxldCBpID0gYW5jZXN0b3JzLmxlbmd0aCAtIDE7XG5cbiAgICB3aGlsZSAoaSA+IDEpIHtcbiAgICAgIG5vZGUgPSBhbmNlc3RvcnNbaV07XG4gICAgICBpZiAobm9kZS5zaG9ydGN1dHMuc2l6ZSB8fCBub2RlLmNoaWxkcmVuLnNpemUpIGJyZWFrO1xuICAgICAgY29uc3QgbGFzdCA9IGFuY2VzdG9yc1tpIC0gMV07XG4gICAgICBsYXN0LmNoaWxkcmVuLmRlbGV0ZShzZXF1ZW5jZVtpIC0gMV0pO1xuICAgICAgaSAtPSAxO1xuICAgIH1cbiAgfVxuXG59XG5cbmNsYXNzIEtleWJvYXJkU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSB7fTtcbiAgICB0aGlzLl9jb25kaXRpb25EYXRhID0ge307XG4gICAgdGhpcy5fZGF0YUNJID0gW107XG4gICAgdGhpcy5fZGF0YUNTID0gW107XG4gICAgdGhpcy5fcm9vdENJID0gbmV3IEtleU5vZGUoKTtcbiAgICB0aGlzLl9yb290Q1MgPSBuZXcgS2V5Tm9kZSgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIHNlcXVlbmNlVGltZW91dDogNTAwXG4gICAgfTtcblxuICAgIHRoaXMuX3Jlc2V0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5fY3VyQ0kgPSBudWxsO1xuICAgICAgdGhpcy5fY3VyQ1MgPSBudWxsO1xuXG4gICAgICB0aGlzLl9yZXNldFRpbWVyKCk7XG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlS2V5ID0gZSA9PiB7XG4gICAgICAvLyBDaHJvbWUgc2VuZHMgYSB0cnVzdGVkIGtleWRvd24gZXZlbnQgd2l0aCBubyBrZXkgd2hlbiBjaG9vc2luZyBmcm9tIGF1dG9maWxsXG4gICAgICBpZiAoIWUua2V5IHx8IGUua2V5Lmxlbmd0aCA+IDEgJiYgbW9kaWZpZXJzW2Uua2V5LnRvTG93ZXJDYXNlKCldKSByZXR1cm47XG5cbiAgICAgIHRoaXMuX3Jlc2V0VGltZXIoKTtcblxuICAgICAgY29uc3Qga2V5Q1MgPSByZXByS2V5KGUua2V5LCB7XG4gICAgICAgIGM6IGUuY3RybEtleSxcbiAgICAgICAgYTogZS5hbHRLZXksXG4gICAgICAgIG06IGUubWV0YUtleVxuICAgICAgfSwgdHJ1ZSk7XG4gICAgICBjb25zdCBrZXlDSSA9IHJlcHJLZXkoZS5rZXksIHtcbiAgICAgICAgYzogZS5jdHJsS2V5LFxuICAgICAgICBzOiBlLnNoaWZ0S2V5LFxuICAgICAgICBhOiBlLmFsdEtleSxcbiAgICAgICAgbTogZS5tZXRhS2V5XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuaGFuZGxlS2V5T25jZShrZXlDUywga2V5Q0ksIGZhbHNlKSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdGhpcy5fcmVzZXQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuX3Jlc2V0LCB0aGlzLm9wdGlvbnMuc2VxdWVuY2VUaW1lb3V0KTtcbiAgICB9O1xuICB9XG5cbiAgX3Jlc2V0VGltZXIoKSB7XG4gICAgaWYgKHRoaXMuX3RpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIF9hZGRDb25kaXRpb24oY29uZGl0aW9uKSB7XG4gICAgbGV0IGNhY2hlID0gdGhpcy5fY29uZGl0aW9uRGF0YVtjb25kaXRpb25dO1xuXG4gICAgaWYgKCFjYWNoZSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUNvbmRpdGlvbihjb25kaXRpb24pO1xuICAgICAgY2FjaGUgPSB7XG4gICAgICAgIGNvdW50OiAwLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcmVzdWx0OiB0aGlzLl9ldmFsQ29uZGl0aW9uKHZhbHVlKVxuICAgICAgfTtcbiAgICAgIHRoaXMuX2NvbmRpdGlvbkRhdGFbY29uZGl0aW9uXSA9IGNhY2hlO1xuICAgIH1cblxuICAgIGNhY2hlLmNvdW50ICs9IDE7XG4gIH1cblxuICBfcmVtb3ZlQ29uZGl0aW9uKGNvbmRpdGlvbikge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY29uZGl0aW9uRGF0YVtjb25kaXRpb25dO1xuXG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICBjYWNoZS5jb3VudCAtPSAxO1xuXG4gICAgICBpZiAoIWNhY2hlLmNvdW50KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jb25kaXRpb25EYXRhW2NvbmRpdGlvbl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2V2YWxDb25kaXRpb24oY29uZGl0aW9ucykge1xuICAgIHJldHVybiBjb25kaXRpb25zLmV2ZXJ5KGNvbmQgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gdGhpcy5fY29udGV4dFtjb25kLmZpZWxkXTtcbiAgICAgIGlmIChjb25kLm5vdCkgdmFsdWUgPSAhdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICBfY2hlY2tTaG9ydGN1dChpdGVtKSB7XG4gICAgY29uc3QgY2FjaGUgPSBpdGVtLmNvbmRpdGlvbiAmJiB0aGlzLl9jb25kaXRpb25EYXRhW2l0ZW0uY29uZGl0aW9uXTtcbiAgICBjb25zdCBlbmFibGVkID0gIWNhY2hlIHx8IGNhY2hlLnJlc3VsdDtcblxuICAgIGlmIChpdGVtLmVuYWJsZWQgIT09IGVuYWJsZWQpIHtcbiAgICAgIGl0ZW0uZW5hYmxlZCA9IGVuYWJsZWQ7XG5cbiAgICAgIHRoaXMuX2VuYWJsZVNob3J0Y3V0KGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIF9lbmFibGVTaG9ydGN1dChpdGVtKSB7XG4gICAgY29uc3Qgcm9vdCA9IGl0ZW0uY2FzZVNlbnNpdGl2ZSA/IHRoaXMuX3Jvb3RDUyA6IHRoaXMuX3Jvb3RDSTtcblxuICAgIGlmIChpdGVtLmVuYWJsZWQpIHtcbiAgICAgIHJvb3QuYWRkKGl0ZW0uc2VxdWVuY2UsIGl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LnJlbW92ZShpdGVtLnNlcXVlbmNlLCBpdGVtKTtcbiAgICB9XG4gIH1cblxuICBlbmFibGUoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5KTtcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5KTtcbiAgfVxuXG4gIHJlZ2lzdGVyKGtleSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBjYXNlU2Vuc2l0aXZlLFxuICAgICAgY29uZGl0aW9uXG4gICAgfSA9IF9leHRlbmRzKHtcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICBjb25zdCBzZXF1ZW5jZSA9IG5vcm1hbGl6ZVNlcXVlbmNlKGtleSwgY2FzZVNlbnNpdGl2ZSk7XG4gICAgY29uc3QgZGF0YSA9IGNhc2VTZW5zaXRpdmUgPyB0aGlzLl9kYXRhQ1MgOiB0aGlzLl9kYXRhQ0k7XG4gICAgY29uc3QgaXRlbSA9IHtcbiAgICAgIHNlcXVlbmNlLFxuICAgICAgY29uZGl0aW9uLFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGNhc2VTZW5zaXRpdmVcbiAgICB9O1xuICAgIGlmIChjb25kaXRpb24pIHRoaXMuX2FkZENvbmRpdGlvbihjb25kaXRpb24pO1xuXG4gICAgdGhpcy5fY2hlY2tTaG9ydGN1dChpdGVtKTtcblxuICAgIGRhdGEucHVzaChpdGVtKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBkYXRhLmluZGV4T2YoaXRlbSk7XG5cbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIGRhdGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaWYgKGNvbmRpdGlvbikgdGhpcy5fcmVtb3ZlQ29uZGl0aW9uKGNvbmRpdGlvbik7XG4gICAgICAgIGl0ZW0uZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX2VuYWJsZVNob3J0Y3V0KGl0ZW0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBzZXRDb250ZXh0KGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9jb250ZXh0W2tleV0gPSB2YWx1ZTtcblxuICAgIGZvciAoY29uc3QgY2FjaGUgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLl9jb25kaXRpb25EYXRhKSkge1xuICAgICAgY2FjaGUucmVzdWx0ID0gdGhpcy5fZXZhbENvbmRpdGlvbihjYWNoZS52YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBkYXRhIG9mIFt0aGlzLl9kYXRhQ1MsIHRoaXMuX2RhdGFDSV0pIHtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrU2hvcnRjdXQoaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlS2V5T25jZShrZXlDUywga2V5Q0ksIGZyb21Sb290KSB7XG4gICAgdmFyIF9jdXJDUywgX2N1ckNJO1xuXG4gICAgbGV0IGN1ckNTID0gdGhpcy5fY3VyQ1M7XG4gICAgbGV0IGN1ckNJID0gdGhpcy5fY3VyQ0k7XG5cbiAgICBpZiAoZnJvbVJvb3QgfHwgIWN1ckNTICYmICFjdXJDSSkge1xuICAgICAgLy8gc2V0IGZyb21Sb290IHRvIHRydWUgdG8gYXZvaWQgYW5vdGhlciByZXRyeVxuICAgICAgZnJvbVJvb3QgPSB0cnVlO1xuICAgICAgY3VyQ1MgPSB0aGlzLl9yb290Q1M7XG4gICAgICBjdXJDSSA9IHRoaXMuX3Jvb3RDSTtcbiAgICB9XG5cbiAgICBpZiAoY3VyQ1MpIGN1ckNTID0gY3VyQ1MuZ2V0KFtrZXlDU10pO1xuICAgIGlmIChjdXJDSSkgY3VyQ0kgPSBjdXJDSS5nZXQoW2tleUNJXSk7XG4gICAgY29uc3Qgc2hvcnRjdXRzID0gWy4uLihjdXJDSSA/IGN1ckNJLnNob3J0Y3V0cyA6IFtdKSwgLi4uKGN1ckNTID8gY3VyQ1Muc2hvcnRjdXRzIDogW10pXS5yZXZlcnNlKCk7XG4gICAgdGhpcy5fY3VyQ1MgPSBjdXJDUztcbiAgICB0aGlzLl9jdXJDSSA9IGN1ckNJO1xuXG4gICAgaWYgKCFmcm9tUm9vdCAmJiAhc2hvcnRjdXRzLmxlbmd0aCAmJiAhKChfY3VyQ1MgPSBjdXJDUykgIT0gbnVsbCAmJiBfY3VyQ1MuY2hpbGRyZW4uc2l6ZSkgJiYgISgoX2N1ckNJID0gY3VyQ0kpICE9IG51bGwgJiYgX2N1ckNJLmNoaWxkcmVuLnNpemUpKSB7XG4gICAgICAvLyBOb3RoaW5nIGlzIG1hdGNoZWQgd2l0aCB0aGUgbGFzdCBrZXksIHJlbWF0Y2ggZnJvbSByb290XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVLZXlPbmNlKGtleUNTLCBrZXlDSSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBzaG9ydGN1dCBvZiBzaG9ydGN1dHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNob3J0Y3V0LmNhbGxiYWNrKCk7XG4gICAgICB9IGNhdGNoIChfdW51c2VkKSB7Ly8gaWdub3JlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG59XG5sZXQgc2VydmljZTtcblxuZnVuY3Rpb24gZ2V0U2VydmljZSgpIHtcbiAgaWYgKCFzZXJ2aWNlKSB7XG4gICAgc2VydmljZSA9IG5ldyBLZXlib2FyZFNlcnZpY2UoKTtcbiAgICBzZXJ2aWNlLmVuYWJsZSgpO1xuICB9XG5cbiAgcmV0dXJuIHNlcnZpY2U7XG59XG5cbmNvbnN0IHJlZ2lzdGVyID0gKC4uLmFyZ3MpID0+IGdldFNlcnZpY2UoKS5yZWdpc3RlciguLi5hcmdzKTtcbmNvbnN0IGVuYWJsZSA9ICgpID0+IGdldFNlcnZpY2UoKS5lbmFibGUoKTtcbmNvbnN0IGRpc2FibGUgPSAoKSA9PiBnZXRTZXJ2aWNlKCkuZGlzYWJsZSgpO1xuY29uc3QgaGFuZGxlS2V5ID0gKC4uLmFyZ3MpID0+IGdldFNlcnZpY2UoKS5oYW5kbGVLZXkoLi4uYXJncyk7XG5cbmV4cG9ydCB7IEtleWJvYXJkU2VydmljZSwgYWxpYXNlcywgZGlzYWJsZSwgZW5hYmxlLCBoYW5kbGVLZXksIG1vZGlmaWVyU3ltYm9scywgbW9kaWZpZXJzLCBub3JtYWxpemVLZXksIG5vcm1hbGl6ZVNlcXVlbmNlLCBwYXJzZUNvbmRpdGlvbiwgcmVnaXN0ZXIsIHJlcHJLZXksIHJlcHJTaG9ydGN1dCB9O1xuIiwiaW1wb3J0IHsgZXh0ZW5kLCBpc0FycmF5LCB0b051bWJlciwgaXNNYXAsIGlzSW50ZWdlcktleSwgaGFzT3duLCBpc1N5bWJvbCwgaXNPYmplY3QsIGhhc0NoYW5nZWQsIG1ha2VNYXAsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgZGVmLCBpc0Z1bmN0aW9uLCBOT09QIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5mdW5jdGlvbiB3YXJuKG1zZywgLi4uYXJncykge1xuICAgIGNvbnNvbGUud2FybihgW1Z1ZSB3YXJuXSAke21zZ31gLCAuLi5hcmdzKTtcbn1cblxubGV0IGFjdGl2ZUVmZmVjdFNjb3BlO1xuY2xhc3MgRWZmZWN0U2NvcGUge1xuICAgIGNvbnN0cnVjdG9yKGRldGFjaGVkID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5kZXRhY2hlZCA9IGRldGFjaGVkO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsZWFudXBzID0gW107XG4gICAgICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgICAgIGlmICghZGV0YWNoZWQgJiYgYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPVxuICAgICAgICAgICAgICAgIChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgfHwgKGFjdGl2ZUVmZmVjdFNjb3BlLnNjb3BlcyA9IFtdKSkucHVzaCh0aGlzKSAtIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcnVuKGZuKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEVmZmVjdFNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gY3VycmVudEVmZmVjdFNjb3BlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgY2Fubm90IHJ1biBhbiBpbmFjdGl2ZSBlZmZlY3Qgc2NvcGUuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG9uKCkge1xuICAgICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIG5vbi1kZXRhY2hlZCBzY29wZXNcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBvZmYoKSB7XG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcy5wYXJlbnQ7XG4gICAgfVxuICAgIHN0b3AoZnJvbVBhcmVudCkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIGxldCBpLCBsO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVmZmVjdHNbaV0uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuY2xlYW51cHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwc1tpXSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjb3Blc1tpXS5zdG9wKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5lc3RlZCBzY29wZSwgZGVyZWZlcmVuY2UgZnJvbSBwYXJlbnQgdG8gYXZvaWQgbWVtb3J5IGxlYWtzXG4gICAgICAgICAgICBpZiAoIXRoaXMuZGV0YWNoZWQgJiYgdGhpcy5wYXJlbnQgJiYgIWZyb21QYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBvcHRpbWl6ZWQgTygxKSByZW1vdmFsXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCAmJiBsYXN0ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnNjb3Blc1t0aGlzLmluZGV4XSA9IGxhc3Q7XG4gICAgICAgICAgICAgICAgICAgIGxhc3QuaW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGVmZmVjdFNjb3BlKGRldGFjaGVkKSB7XG4gICAgcmV0dXJuIG5ldyBFZmZlY3RTY29wZShkZXRhY2hlZCk7XG59XG5mdW5jdGlvbiByZWNvcmRFZmZlY3RTY29wZShlZmZlY3QsIHNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICBpZiAoc2NvcGUgJiYgc2NvcGUuYWN0aXZlKSB7XG4gICAgICAgIHNjb3BlLmVmZmVjdHMucHVzaChlZmZlY3QpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZSgpIHtcbiAgICByZXR1cm4gYWN0aXZlRWZmZWN0U2NvcGU7XG59XG5mdW5jdGlvbiBvblNjb3BlRGlzcG9zZShmbikge1xuICAgIGlmIChhY3RpdmVFZmZlY3RTY29wZSkge1xuICAgICAgICBhY3RpdmVFZmZlY3RTY29wZS5jbGVhbnVwcy5wdXNoKGZuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYG9uU2NvcGVEaXNwb3NlKCkgaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGVmZmVjdCBzY29wZWAgK1xuICAgICAgICAgICAgYCB0byBiZSBhc3NvY2lhdGVkIHdpdGguYCk7XG4gICAgfVxufVxuXG5jb25zdCBjcmVhdGVEZXAgPSAoZWZmZWN0cykgPT4ge1xuICAgIGNvbnN0IGRlcCA9IG5ldyBTZXQoZWZmZWN0cyk7XG4gICAgZGVwLncgPSAwO1xuICAgIGRlcC5uID0gMDtcbiAgICByZXR1cm4gZGVwO1xufTtcbmNvbnN0IHdhc1RyYWNrZWQgPSAoZGVwKSA9PiAoZGVwLncgJiB0cmFja09wQml0KSA+IDA7XG5jb25zdCBuZXdUcmFja2VkID0gKGRlcCkgPT4gKGRlcC5uICYgdHJhY2tPcEJpdCkgPiAwO1xuY29uc3QgaW5pdERlcE1hcmtlcnMgPSAoeyBkZXBzIH0pID0+IHtcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZXBzW2ldLncgfD0gdHJhY2tPcEJpdDsgLy8gc2V0IHdhcyB0cmFja2VkXG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgZmluYWxpemVEZXBNYXJrZXJzID0gKGVmZmVjdCkgPT4ge1xuICAgIGNvbnN0IHsgZGVwcyB9ID0gZWZmZWN0O1xuICAgIGlmIChkZXBzLmxlbmd0aCkge1xuICAgICAgICBsZXQgcHRyID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkZXAgPSBkZXBzW2ldO1xuICAgICAgICAgICAgaWYgKHdhc1RyYWNrZWQoZGVwKSAmJiAhbmV3VHJhY2tlZChkZXApKSB7XG4gICAgICAgICAgICAgICAgZGVwLmRlbGV0ZShlZmZlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVwc1twdHIrK10gPSBkZXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjbGVhciBiaXRzXG4gICAgICAgICAgICBkZXAudyAmPSB+dHJhY2tPcEJpdDtcbiAgICAgICAgICAgIGRlcC5uICY9IH50cmFja09wQml0O1xuICAgICAgICB9XG4gICAgICAgIGRlcHMubGVuZ3RoID0gcHRyO1xuICAgIH1cbn07XG5cbmNvbnN0IHRhcmdldE1hcCA9IG5ldyBXZWFrTWFwKCk7XG4vLyBUaGUgbnVtYmVyIG9mIGVmZmVjdHMgY3VycmVudGx5IGJlaW5nIHRyYWNrZWQgcmVjdXJzaXZlbHkuXG5sZXQgZWZmZWN0VHJhY2tEZXB0aCA9IDA7XG5sZXQgdHJhY2tPcEJpdCA9IDE7XG4vKipcbiAqIFRoZSBiaXR3aXNlIHRyYWNrIG1hcmtlcnMgc3VwcG9ydCBhdCBtb3N0IDMwIGxldmVscyBvZiByZWN1cnNpb24uXG4gKiBUaGlzIHZhbHVlIGlzIGNob3NlbiB0byBlbmFibGUgbW9kZXJuIEpTIGVuZ2luZXMgdG8gdXNlIGEgU01JIG9uIGFsbCBwbGF0Zm9ybXMuXG4gKiBXaGVuIHJlY3Vyc2lvbiBkZXB0aCBpcyBncmVhdGVyLCBmYWxsIGJhY2sgdG8gdXNpbmcgYSBmdWxsIGNsZWFudXAuXG4gKi9cbmNvbnN0IG1heE1hcmtlckJpdHMgPSAzMDtcbmxldCBhY3RpdmVFZmZlY3Q7XG5jb25zdCBJVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnaXRlcmF0ZScgOiAnJyk7XG5jb25zdCBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdNYXAga2V5IGl0ZXJhdGUnIDogJycpO1xuY2xhc3MgUmVhY3RpdmVFZmZlY3Qge1xuICAgIGNvbnN0cnVjdG9yKGZuLCBzY2hlZHVsZXIgPSBudWxsLCBzY29wZSkge1xuICAgICAgICB0aGlzLmZuID0gZm47XG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVwcyA9IFtdO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmVjb3JkRWZmZWN0U2NvcGUodGhpcywgc2NvcGUpO1xuICAgIH1cbiAgICBydW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcmVudCA9IGFjdGl2ZUVmZmVjdDtcbiAgICAgICAgbGV0IGxhc3RTaG91bGRUcmFjayA9IHNob3VsZFRyYWNrO1xuICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgICBpZiAocGFyZW50ID09PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBhY3RpdmVFZmZlY3Q7XG4gICAgICAgICAgICBhY3RpdmVFZmZlY3QgPSB0aGlzO1xuICAgICAgICAgICAgc2hvdWxkVHJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgdHJhY2tPcEJpdCA9IDEgPDwgKytlZmZlY3RUcmFja0RlcHRoO1xuICAgICAgICAgICAgaWYgKGVmZmVjdFRyYWNrRGVwdGggPD0gbWF4TWFya2VyQml0cykge1xuICAgICAgICAgICAgICAgIGluaXREZXBNYXJrZXJzKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cEVmZmVjdCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZuKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZWZmZWN0VHJhY2tEZXB0aCA8PSBtYXhNYXJrZXJCaXRzKSB7XG4gICAgICAgICAgICAgICAgZmluYWxpemVEZXBNYXJrZXJzKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2tPcEJpdCA9IDEgPDwgLS1lZmZlY3RUcmFja0RlcHRoO1xuICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICBzaG91bGRUcmFjayA9IGxhc3RTaG91bGRUcmFjaztcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVmZXJTdG9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgLy8gc3RvcHBlZCB3aGlsZSBydW5uaW5nIGl0c2VsZiAtIGRlZmVyIHRoZSBjbGVhbnVwXG4gICAgICAgIGlmIChhY3RpdmVFZmZlY3QgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmZXJTdG9wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgICAgICAgY2xlYW51cEVmZmVjdCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9uU3RvcCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25TdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYW51cEVmZmVjdChlZmZlY3QpIHtcbiAgICBjb25zdCB7IGRlcHMgfSA9IGVmZmVjdDtcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZXBzW2ldLmRlbGV0ZShlZmZlY3QpO1xuICAgICAgICB9XG4gICAgICAgIGRlcHMubGVuZ3RoID0gMDtcbiAgICB9XG59XG5mdW5jdGlvbiBlZmZlY3QoZm4sIG9wdGlvbnMpIHtcbiAgICBpZiAoZm4uZWZmZWN0KSB7XG4gICAgICAgIGZuID0gZm4uZWZmZWN0LmZuO1xuICAgIH1cbiAgICBjb25zdCBfZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGZuKTtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBleHRlbmQoX2VmZmVjdCwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLnNjb3BlKVxuICAgICAgICAgICAgcmVjb3JkRWZmZWN0U2NvcGUoX2VmZmVjdCwgb3B0aW9ucy5zY29wZSk7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5sYXp5KSB7XG4gICAgICAgIF9lZmZlY3QucnVuKCk7XG4gICAgfVxuICAgIGNvbnN0IHJ1bm5lciA9IF9lZmZlY3QucnVuLmJpbmQoX2VmZmVjdCk7XG4gICAgcnVubmVyLmVmZmVjdCA9IF9lZmZlY3Q7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbn1cbmZ1bmN0aW9uIHN0b3AocnVubmVyKSB7XG4gICAgcnVubmVyLmVmZmVjdC5zdG9wKCk7XG59XG5sZXQgc2hvdWxkVHJhY2sgPSB0cnVlO1xuY29uc3QgdHJhY2tTdGFjayA9IFtdO1xuZnVuY3Rpb24gcGF1c2VUcmFja2luZygpIHtcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICAgIHNob3VsZFRyYWNrID0gZmFsc2U7XG59XG5mdW5jdGlvbiBlbmFibGVUcmFja2luZygpIHtcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlc2V0VHJhY2tpbmcoKSB7XG4gICAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XG4gICAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogbGFzdDtcbn1cbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XG4gICAgaWYgKHNob3VsZFRyYWNrICYmIGFjdGl2ZUVmZmVjdCkge1xuICAgICAgICBsZXQgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgaWYgKCFkZXBzTWFwKSB7XG4gICAgICAgICAgICB0YXJnZXRNYXAuc2V0KHRhcmdldCwgKGRlcHNNYXAgPSBuZXcgTWFwKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVwID0gZGVwc01hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFkZXApIHtcbiAgICAgICAgICAgIGRlcHNNYXAuc2V0KGtleSwgKGRlcCA9IGNyZWF0ZURlcCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnRJbmZvID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgICAgICA/IHsgZWZmZWN0OiBhY3RpdmVFZmZlY3QsIHRhcmdldCwgdHlwZSwga2V5IH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICB0cmFja0VmZmVjdHMoZGVwLCBldmVudEluZm8pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYWNrRWZmZWN0cyhkZXAsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pIHtcbiAgICBsZXQgc2hvdWxkVHJhY2sgPSBmYWxzZTtcbiAgICBpZiAoZWZmZWN0VHJhY2tEZXB0aCA8PSBtYXhNYXJrZXJCaXRzKSB7XG4gICAgICAgIGlmICghbmV3VHJhY2tlZChkZXApKSB7XG4gICAgICAgICAgICBkZXAubiB8PSB0cmFja09wQml0OyAvLyBzZXQgbmV3bHkgdHJhY2tlZFxuICAgICAgICAgICAgc2hvdWxkVHJhY2sgPSAhd2FzVHJhY2tlZChkZXApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBGdWxsIGNsZWFudXAgbW9kZS5cbiAgICAgICAgc2hvdWxkVHJhY2sgPSAhZGVwLmhhcyhhY3RpdmVFZmZlY3QpO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkVHJhY2spIHtcbiAgICAgICAgZGVwLmFkZChhY3RpdmVFZmZlY3QpO1xuICAgICAgICBhY3RpdmVFZmZlY3QuZGVwcy5wdXNoKGRlcCk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYWN0aXZlRWZmZWN0Lm9uVHJhY2spIHtcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdC5vblRyYWNrKE9iamVjdC5hc3NpZ24oeyBlZmZlY3Q6IGFjdGl2ZUVmZmVjdCB9LCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyKHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCkge1xuICAgIGNvbnN0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gICAgaWYgKCFkZXBzTWFwKSB7XG4gICAgICAgIC8vIG5ldmVyIGJlZW4gdHJhY2tlZFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBkZXBzID0gW107XG4gICAgaWYgKHR5cGUgPT09IFwiY2xlYXJcIiAvKiBUcmlnZ2VyT3BUeXBlcy5DTEVBUiAqLykge1xuICAgICAgICAvLyBjb2xsZWN0aW9uIGJlaW5nIGNsZWFyZWRcbiAgICAgICAgLy8gdHJpZ2dlciBhbGwgZWZmZWN0cyBmb3IgdGFyZ2V0XG4gICAgICAgIGRlcHMgPSBbLi4uZGVwc01hcC52YWx1ZXMoKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleSA9PT0gJ2xlbmd0aCcgJiYgaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IHRvTnVtYmVyKG5ld1ZhbHVlKTtcbiAgICAgICAgZGVwc01hcC5mb3JFYWNoKChkZXAsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2xlbmd0aCcgfHwga2V5ID49IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHNjaGVkdWxlIHJ1bnMgZm9yIFNFVCB8IEFERCB8IERFTEVURVxuICAgICAgICBpZiAoa2V5ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhbHNvIHJ1biBmb3IgaXRlcmF0aW9uIGtleSBvbiBBREQgfCBERUxFVEUgfCBNYXAuU0VUXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLzpcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNJbnRlZ2VyS2V5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3IGluZGV4IGFkZGVkIHRvIGFycmF5IC0+IGxlbmd0aCBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldCgnbGVuZ3RoJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi86XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLzpcbiAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXZlbnRJbmZvID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8geyB0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQgfVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZGVwcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKGRlcHNbMF0pIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhkZXBzWzBdLCBldmVudEluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMoZGVwc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGVmZmVjdHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBkZXAgb2YgZGVwcykge1xuICAgICAgICAgICAgaWYgKGRlcCkge1xuICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaCguLi5kZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKGNyZWF0ZURlcChlZmZlY3RzKSwgZXZlbnRJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKGNyZWF0ZURlcChlZmZlY3RzKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyRWZmZWN0cyhkZXAsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pIHtcbiAgICAvLyBzcHJlYWQgaW50byBhcnJheSBmb3Igc3RhYmlsaXphdGlvblxuICAgIGNvbnN0IGVmZmVjdHMgPSBpc0FycmF5KGRlcCkgPyBkZXAgOiBbLi4uZGVwXTtcbiAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBlZmZlY3RzKSB7XG4gICAgICAgIGlmIChlZmZlY3QuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3QoZWZmZWN0LCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBlZmZlY3RzKSB7XG4gICAgICAgIGlmICghZWZmZWN0LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0KGVmZmVjdCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyRWZmZWN0KGVmZmVjdCwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykge1xuICAgIGlmIChlZmZlY3QgIT09IGFjdGl2ZUVmZmVjdCB8fCBlZmZlY3QuYWxsb3dSZWN1cnNlKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZWZmZWN0Lm9uVHJpZ2dlcikge1xuICAgICAgICAgICAgZWZmZWN0Lm9uVHJpZ2dlcihleHRlbmQoeyBlZmZlY3QgfSwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3Quc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICBlZmZlY3Quc2NoZWR1bGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlZmZlY3QucnVuKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IGlzTm9uVHJhY2thYmxlS2V5cyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgX19wcm90b19fLF9fdl9pc1JlZixfX2lzVnVlYCk7XG5jb25zdCBidWlsdEluU3ltYm9scyA9IG5ldyBTZXQoXG4vKiNfX1BVUkVfXyovXG5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpXG4gICAgLy8gaW9zMTAueCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpIGNhbiBlbnVtZXJhdGUgJ2FyZ3VtZW50cycgYW5kICdjYWxsZXInXG4gICAgLy8gYnV0IGFjY2Vzc2luZyB0aGVtIG9uIFN5bWJvbCBsZWFkcyB0byBUeXBlRXJyb3IgYmVjYXVzZSBTeW1ib2wgaXMgYSBzdHJpY3QgbW9kZVxuICAgIC8vIGZ1bmN0aW9uXG4gICAgLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnYXJndW1lbnRzJyAmJiBrZXkgIT09ICdjYWxsZXInKVxuICAgIC5tYXAoa2V5ID0+IFN5bWJvbFtrZXldKVxuICAgIC5maWx0ZXIoaXNTeW1ib2wpKTtcbmNvbnN0IGdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKCk7XG5jb25zdCBzaGFsbG93R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIoZmFsc2UsIHRydWUpO1xuY29uc3QgcmVhZG9ubHlHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcih0cnVlKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seUdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKHRydWUsIHRydWUpO1xuY29uc3QgYXJyYXlJbnN0cnVtZW50YXRpb25zID0gLyojX19QVVJFX18qLyBjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucygpIHtcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0ge307XG4gICAgWydpbmNsdWRlcycsICdpbmRleE9mJywgJ2xhc3RJbmRleE9mJ10uZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgYXJyID0gdG9SYXcodGhpcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdHJhY2soYXJyLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGkgKyAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB3ZSBydW4gdGhlIG1ldGhvZCB1c2luZyB0aGUgb3JpZ2luYWwgYXJncyBmaXJzdCAod2hpY2ggbWF5IGJlIHJlYWN0aXZlKVxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXJyW2tleV0oLi4uYXJncyk7XG4gICAgICAgICAgICBpZiAocmVzID09PSAtMSB8fCByZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhhdCBkaWRuJ3Qgd29yaywgcnVuIGl0IGFnYWluIHVzaW5nIHJhdyB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycltrZXldKC4uLmFyZ3MubWFwKHRvUmF3KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAndW5zaGlmdCcsICdzcGxpY2UnXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB0b1Jhdyh0aGlzKVtrZXldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW5zdHJ1bWVudGF0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlcihpc1JlYWRvbmx5ID0gZmFsc2UsIHNoYWxsb3cgPSBmYWxzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQUNUSVZFICovKSB7XG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqLykge1xuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBzaGFsbG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi8gJiZcbiAgICAgICAgICAgIHJlY2VpdmVyID09PVxuICAgICAgICAgICAgICAgIChpc1JlYWRvbmx5XG4gICAgICAgICAgICAgICAgICAgID8gc2hhbGxvd1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93UmVhZG9ubHlNYXBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVhZG9ubHlNYXBcbiAgICAgICAgICAgICAgICAgICAgOiBzaGFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNoYWxsb3dSZWFjdGl2ZU1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWFjdGl2ZU1hcCkuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcbiAgICAgICAgaWYgKCFpc1JlYWRvbmx5ICYmIHRhcmdldElzQXJyYXkgJiYgaGFzT3duKGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5LCByZWNlaXZlcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICAgICAgaWYgKGlzU3ltYm9sKGtleSkgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KSA6IGlzTm9uVHJhY2thYmxlS2V5cyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNSZWFkb25seSkge1xuICAgICAgICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVmKHJlcykpIHtcbiAgICAgICAgICAgIC8vIHJlZiB1bndyYXBwaW5nIC0gc2tpcCB1bndyYXAgZm9yIEFycmF5ICsgaW50ZWdlciBrZXkuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0SXNBcnJheSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IHJlcyA6IHJlcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCByZXR1cm5lZCB2YWx1ZSBpbnRvIGEgcHJveHkgYXMgd2VsbC4gd2UgZG8gdGhlIGlzT2JqZWN0IGNoZWNrXG4gICAgICAgICAgICAvLyBoZXJlIHRvIGF2b2lkIGludmFsaWQgdmFsdWUgd2FybmluZy4gQWxzbyBuZWVkIHRvIGxhenkgYWNjZXNzIHJlYWRvbmx5XG4gICAgICAgICAgICAvLyBhbmQgcmVhY3RpdmUgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHkgPyByZWFkb25seShyZXMpIDogcmVhY3RpdmUocmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG59XG5jb25zdCBzZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcigpO1xuY29uc3Qgc2hhbGxvd1NldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlU2V0dGVyKHRydWUpO1xuZnVuY3Rpb24gY3JlYXRlU2V0dGVyKHNoYWxsb3cgPSBmYWxzZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xuICAgICAgICBsZXQgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKGlzUmVhZG9ubHkob2xkVmFsdWUpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaGFsbG93KSB7XG4gICAgICAgICAgICBpZiAoIWlzU2hhbGxvdyh2YWx1ZSkgJiYgIWlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSAmJiBpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFkS2V5ID0gaXNBcnJheSh0YXJnZXQpICYmIGlzSW50ZWdlcktleShrZXkpXG4gICAgICAgICAgICA/IE51bWJlcihrZXkpIDwgdGFyZ2V0Lmxlbmd0aFxuICAgICAgICAgICAgOiBoYXNPd24odGFyZ2V0LCBrZXkpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgICAgLy8gZG9uJ3QgdHJpZ2dlciBpZiB0YXJnZXQgaXMgc29tZXRoaW5nIHVwIGluIHRoZSBwcm90b3R5cGUgY2hhaW4gb2Ygb3JpZ2luYWxcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdG9SYXcocmVjZWl2ZXIpKSB7XG4gICAgICAgICAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLywga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8sIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59XG5mdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgIGNvbnN0IGhhZEtleSA9IGhhc093bih0YXJnZXQsIGtleSk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcbiAgICBpZiAocmVzdWx0ICYmIGhhZEtleSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xuICAgICAgICB0cmFjayh0YXJnZXQsIFwiaGFzXCIgLyogVHJhY2tPcFR5cGVzLkhBUyAqLywga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XG4gICAgdHJhY2sodGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBUcmFja09wVHlwZXMuSVRFUkFURSAqLywgaXNBcnJheSh0YXJnZXQpID8gJ2xlbmd0aCcgOiBJVEVSQVRFX0tFWSk7XG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xufVxuY29uc3QgbXV0YWJsZUhhbmRsZXJzID0ge1xuICAgIGdldCxcbiAgICBzZXQsXG4gICAgZGVsZXRlUHJvcGVydHksXG4gICAgaGFzLFxuICAgIG93bktleXNcbn07XG5jb25zdCByZWFkb25seUhhbmRsZXJzID0ge1xuICAgIGdldDogcmVhZG9ubHlHZXQsXG4gICAgc2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYFNldCBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgRGVsZXRlIG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufTtcbmNvbnN0IHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzID0gLyojX19QVVJFX18qLyBleHRlbmQoe30sIG11dGFibGVIYW5kbGVycywge1xuICAgIGdldDogc2hhbGxvd0dldCxcbiAgICBzZXQ6IHNoYWxsb3dTZXRcbn0pO1xuLy8gUHJvcHMgaGFuZGxlcnMgYXJlIHNwZWNpYWwgaW4gdGhlIHNlbnNlIHRoYXQgaXQgc2hvdWxkIG5vdCB1bndyYXAgdG9wLWxldmVsXG4vLyByZWZzIChpbiBvcmRlciB0byBhbGxvdyByZWZzIHRvIGJlIGV4cGxpY2l0bHkgcGFzc2VkIGRvd24pLCBidXQgc2hvdWxkXG4vLyByZXRhaW4gdGhlIHJlYWN0aXZpdHkgb2YgdGhlIG5vcm1hbCByZWFkb25seSBvYmplY3QuXG5jb25zdCBzaGFsbG93UmVhZG9ubHlIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCByZWFkb25seUhhbmRsZXJzLCB7XG4gICAgZ2V0OiBzaGFsbG93UmVhZG9ubHlHZXRcbn0pO1xuXG5jb25zdCB0b1NoYWxsb3cgPSAodmFsdWUpID0+IHZhbHVlO1xuY29uc3QgZ2V0UHJvdG8gPSAodikgPT4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZih2KTtcbmZ1bmN0aW9uIGdldCQxKHRhcmdldCwga2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UsIGlzU2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgLy8gIzE3NzI6IHJlYWRvbmx5KHJlYWN0aXZlKE1hcCkpIHNob3VsZCByZXR1cm4gcmVhZG9ubHkgKyByZWFjdGl2ZSB2ZXJzaW9uXG4gICAgLy8gb2YgdGhlIHZhbHVlXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKCFpc1JlYWRvbmx5KSB7XG4gICAgICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIHJhd0tleSk7XG4gICAgfVxuICAgIGNvbnN0IHsgaGFzIH0gPSBnZXRQcm90byhyYXdUYXJnZXQpO1xuICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgaWYgKGhhcy5jYWxsKHJhd1RhcmdldCwga2V5KSkge1xuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KGtleSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIHJhd0tleSkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChyYXdLZXkpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGFyZ2V0ICE9PSByYXdUYXJnZXQpIHtcbiAgICAgICAgLy8gIzM2MDIgcmVhZG9ubHkocmVhY3RpdmUoTWFwKSlcbiAgICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIG5lc3RlZCByZWFjdGl2ZSBgTWFwYCBjYW4gZG8gdHJhY2tpbmcgZm9yIGl0c2VsZlxuICAgICAgICB0YXJnZXQuZ2V0KGtleSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzJDEoa2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKCFpc1JlYWRvbmx5KSB7XG4gICAgICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIFRyYWNrT3BUeXBlcy5IQVMgKi8sIHJhd0tleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXkgPT09IHJhd0tleVxuICAgICAgICA/IHRhcmdldC5oYXMoa2V5KVxuICAgICAgICA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XG59XG5mdW5jdGlvbiBzaXplKHRhcmdldCwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiAvKiBUcmFja09wVHlwZXMuSVRFUkFURSAqLywgSVRFUkFURV9LRVkpO1xuICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsICdzaXplJywgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcbiAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovLCB2YWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHNldCQxKGtleSwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xuICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgICAgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgfVxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpO1xuICAgIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGRlbGV0ZUVudHJ5KGtleSkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XG4gICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcbiAgICB9XG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQgPyBnZXQuY2FsbCh0YXJnZXQsIGtleSkgOiB1bmRlZmluZWQ7XG4gICAgLy8gZm9yd2FyZCB0aGUgb3BlcmF0aW9uIGJlZm9yZSBxdWV1ZWluZyByZWFjdGlvbnNcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuZGVsZXRlKGtleSk7XG4gICAgaWYgKGhhZEtleSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICBjb25zdCBoYWRJdGVtcyA9IHRhcmdldC5zaXplICE9PSAwO1xuICAgIGNvbnN0IG9sZFRhcmdldCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICA/IGlzTWFwKHRhcmdldClcbiAgICAgICAgICAgID8gbmV3IE1hcCh0YXJnZXQpXG4gICAgICAgICAgICA6IG5ldyBTZXQodGFyZ2V0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAvLyBmb3J3YXJkIHRoZSBvcGVyYXRpb24gYmVmb3JlIHF1ZXVlaW5nIHJlYWN0aW9uc1xuICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5jbGVhcigpO1xuICAgIGlmIChoYWRJdGVtcykge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJjbGVhclwiIC8qIFRyaWdnZXJPcFR5cGVzLkNMRUFSICovLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkVGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvckVhY2goaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZWQgPSB0aGlzO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogVHJhY2tPcFR5cGVzLklURVJBVEUgKi8sIElURVJBVEVfS0VZKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQ6IG1ha2Ugc3VyZSB0aGUgY2FsbGJhY2sgaXNcbiAgICAgICAgICAgIC8vIDEuIGludm9rZWQgd2l0aCB0aGUgcmVhY3RpdmUgbWFwIGFzIGB0aGlzYCBhbmQgM3JkIGFyZ1xuICAgICAgICAgICAgLy8gMi4gdGhlIHZhbHVlIHJlY2VpdmVkIHNob3VsZCBiZSBhIGNvcnJlc3BvbmRpbmcgcmVhY3RpdmUvcmVhZG9ubHkuXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB3cmFwKHZhbHVlKSwgd3JhcChrZXkpLCBvYnNlcnZlZCk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICAgICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICAgICAgY29uc3QgdGFyZ2V0SXNNYXAgPSBpc01hcChyYXdUYXJnZXQpO1xuICAgICAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09ICdlbnRyaWVzJyB8fCAobWV0aG9kID09PSBTeW1ib2wuaXRlcmF0b3IgJiYgdGFyZ2V0SXNNYXApO1xuICAgICAgICBjb25zdCBpc0tleU9ubHkgPSBtZXRob2QgPT09ICdrZXlzJyAmJiB0YXJnZXRJc01hcDtcbiAgICAgICAgY29uc3QgaW5uZXJJdGVyYXRvciA9IHRhcmdldFttZXRob2RdKC4uLmFyZ3MpO1xuICAgICAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICAgICAhaXNSZWFkb25seSAmJlxuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBUcmFja09wVHlwZXMuSVRFUkFURSAqLywgaXNLZXlPbmx5ID8gTUFQX0tFWV9JVEVSQVRFX0tFWSA6IElURVJBVEVfS0VZKTtcbiAgICAgICAgLy8gcmV0dXJuIGEgd3JhcHBlZCBpdGVyYXRvciB3aGljaCByZXR1cm5zIG9ic2VydmVkIHZlcnNpb25zIG9mIHRoZVxuICAgICAgICAvLyB2YWx1ZXMgZW1pdHRlZCBmcm9tIHRoZSByZWFsIGl0ZXJhdG9yXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBpdGVyYXRvciBwcm90b2NvbFxuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZVxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWUsIGRvbmUgfVxuICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpc1BhaXIgPyBbd3JhcCh2YWx1ZVswXSksIHdyYXAodmFsdWVbMV0pXSA6IHdyYXAodmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGl0ZXJhYmxlIHByb3RvY29sXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHlNZXRob2QodHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhcmdzWzBdID8gYG9uIGtleSBcIiR7YXJnc1swXX1cIiBgIDogYGA7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Y2FwaXRhbGl6ZSh0eXBlKX0gb3BlcmF0aW9uICR7a2V5fWZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRvUmF3KHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8gPyBmYWxzZSA6IHRoaXM7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKSB7XG4gICAgY29uc3QgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMgPSB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBoYXM6IGhhcyQxLFxuICAgICAgICBhZGQsXG4gICAgICAgIHNldDogc2V0JDEsXG4gICAgICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXG4gICAgICAgIGNsZWFyLFxuICAgICAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCBmYWxzZSlcbiAgICB9O1xuICAgIGNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zID0ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBzaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUodGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhczogaGFzJDEsXG4gICAgICAgIGFkZCxcbiAgICAgICAgc2V0OiBzZXQkMSxcbiAgICAgICAgZGVsZXRlOiBkZWxldGVFbnRyeSxcbiAgICAgICAgY2xlYXIsXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXG4gICAgfTtcbiAgICBjb25zdCByZWFkb25seUluc3RydW1lbnRhdGlvbnMgPSB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzJDEuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovKSxcbiAgICAgICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyksXG4gICAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8pLFxuICAgICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIFRyaWdnZXJPcFR5cGVzLkNMRUFSICovKSxcbiAgICAgICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCBmYWxzZSlcbiAgICB9O1xuICAgIGNvbnN0IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMgPSB7XG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzJDEuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogVHJpZ2dlck9wVHlwZXMuQUREICovKSxcbiAgICAgICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyksXG4gICAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8pLFxuICAgICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIFRyaWdnZXJPcFR5cGVzLkNMRUFSICovKSxcbiAgICAgICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCB0cnVlKVxuICAgIH07XG4gICAgY29uc3QgaXRlcmF0b3JNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdlbnRyaWVzJywgU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpdGVyYXRvck1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4ge1xuICAgICAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICBzaGFsbG93SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMsXG4gICAgICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyxcbiAgICAgICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMsXG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcbiAgICBdO1xufVxuY29uc3QgW211dGFibGVJbnN0cnVtZW50YXRpb25zLCByZWFkb25seUluc3RydW1lbnRhdGlvbnMsIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXSA9IC8qICNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5LCBzaGFsbG93KSB7XG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHNoYWxsb3dcbiAgICAgICAgPyBpc1JlYWRvbmx5XG4gICAgICAgICAgICA/IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcbiAgICAgICAgICAgIDogc2hhbGxvd0luc3RydW1lbnRhdGlvbnNcbiAgICAgICAgOiBpc1JlYWRvbmx5XG4gICAgICAgICAgICA/IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xuICAgICAgICAgICAgOiBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucztcbiAgICByZXR1cm4gKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xuICAgICAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFDVElWRSAqLykge1xuICAgICAgICAgICAgcmV0dXJuICFpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUmVhY3RpdmVGbGFncy5SQVcgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGhhc093bihpbnN0cnVtZW50YXRpb25zLCBrZXkpICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICAgICAgID8gaW5zdHJ1bWVudGF0aW9uc1xuICAgICAgICAgICAgOiB0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuICAgIH07XG59XG5jb25zdCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIGZhbHNlKVxufTtcbmNvbnN0IHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gICAgZ2V0OiAvKiNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgdHJ1ZSlcbn07XG5jb25zdCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIGZhbHNlKVxufTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIHRydWUpXG59O1xuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSkge1xuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhcy5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xuICAgICAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XG4gICAgICAgIGNvbnNvbGUud2FybihgUmVhY3RpdmUgJHt0eXBlfSBjb250YWlucyBib3RoIHRoZSByYXcgYW5kIHJlYWN0aXZlIGAgK1xuICAgICAgICAgICAgYHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCBgICtcbiAgICAgICAgICAgIGB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIGAgK1xuICAgICAgICAgICAgYEF2b2lkIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIGAgK1xuICAgICAgICAgICAgYG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYCk7XG4gICAgfVxufVxuXG5jb25zdCByZWFjdGl2ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBzaGFsbG93UmVhY3RpdmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgc2hhbGxvd1JlYWRvbmx5TWFwID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHRhcmdldFR5cGVNYXAocmF3VHlwZSkge1xuICAgIHN3aXRjaCAocmF3VHlwZSkge1xuICAgICAgICBjYXNlICdPYmplY3QnOlxuICAgICAgICBjYXNlICdBcnJheSc6XG4gICAgICAgICAgICByZXR1cm4gMSAvKiBUYXJnZXRUeXBlLkNPTU1PTiAqLztcbiAgICAgICAgY2FzZSAnTWFwJzpcbiAgICAgICAgY2FzZSAnU2V0JzpcbiAgICAgICAgY2FzZSAnV2Vha01hcCc6XG4gICAgICAgIGNhc2UgJ1dlYWtTZXQnOlxuICAgICAgICAgICAgcmV0dXJuIDIgLyogVGFyZ2V0VHlwZS5DT0xMRUNUSU9OICovO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIDAgLyogVGFyZ2V0VHlwZS5JTlZBTElEICovO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRhcmdldFR5cGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqL10gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpXG4gICAgICAgID8gMCAvKiBUYXJnZXRUeXBlLklOVkFMSUQgKi9cbiAgICAgICAgOiB0YXJnZXRUeXBlTWFwKHRvUmF3VHlwZSh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gcmVhY3RpdmUodGFyZ2V0KSB7XG4gICAgLy8gaWYgdHJ5aW5nIHRvIG9ic2VydmUgYSByZWFkb25seSBwcm94eSwgcmV0dXJuIHRoZSByZWFkb25seSB2ZXJzaW9uLlxuICAgIGlmIChpc1JlYWRvbmx5KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIG11dGFibGVIYW5kbGVycywgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycywgcmVhY3RpdmVNYXApO1xufVxuLyoqXG4gKiBSZXR1cm4gYSBzaGFsbG93bHktcmVhY3RpdmUgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290XG4gKiBsZXZlbCBwcm9wZXJ0aWVzIGFyZSByZWFjdGl2ZS4gSXQgYWxzbyBkb2VzIG5vdCBhdXRvLXVud3JhcCByZWZzIChldmVuIGF0IHRoZVxuICogcm9vdCBsZXZlbCkuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dSZWFjdGl2ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsIHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMsIHNoYWxsb3dSZWFjdGl2ZU1hcCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSByZWFkb25seSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QuIE5vdGUgdGhlIHJldHVybmVkIGNvcHkgaXMgbm90XG4gKiBtYWRlIHJlYWN0aXZlLCBidXQgYHJlYWRvbmx5YCBjYW4gYmUgY2FsbGVkIG9uIGFuIGFscmVhZHkgcmVhY3RpdmUgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZWFkb25seSh0YXJnZXQpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgcmVhZG9ubHlNYXApO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXG4gKiBwcm9wZXJ0aWVzIGFyZSByZWFkb25seSwgYW5kIGRvZXMgTk9UIHVud3JhcCByZWZzIG5vciByZWN1cnNpdmVseSBjb252ZXJ0XG4gKiByZXR1cm5lZCBwcm9wZXJ0aWVzLlxuICogVGhpcyBpcyB1c2VkIGZvciBjcmVhdGluZyB0aGUgcHJvcHMgcHJveHkgb2JqZWN0IGZvciBzdGF0ZWZ1bCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBzaGFsbG93UmVhZG9ubHkodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgdHJ1ZSwgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsIHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgc2hhbGxvd1JlYWRvbmx5TWFwKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgaXNSZWFkb25seSwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgdmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhY3RpdmU6ICR7U3RyaW5nKHRhcmdldCl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgLy8gdGFyZ2V0IGlzIGFscmVhZHkgYSBQcm94eSwgcmV0dXJuIGl0LlxuICAgIC8vIGV4Y2VwdGlvbjogY2FsbGluZyByZWFkb25seSgpIG9uIGEgcmVhY3RpdmUgb2JqZWN0XG4gICAgaWYgKHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL10gJiZcbiAgICAgICAgIShpc1JlYWRvbmx5ICYmIHRhcmdldFtcIl9fdl9pc1JlYWN0aXZlXCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFDVElWRSAqL10pKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIC8vIHRhcmdldCBhbHJlYWR5IGhhcyBjb3JyZXNwb25kaW5nIFByb3h5XG4gICAgY29uc3QgZXhpc3RpbmdQcm94eSA9IHByb3h5TWFwLmdldCh0YXJnZXQpO1xuICAgIGlmIChleGlzdGluZ1Byb3h5KSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1Byb3h5O1xuICAgIH1cbiAgICAvLyBvbmx5IHNwZWNpZmljIHZhbHVlIHR5cGVzIGNhbiBiZSBvYnNlcnZlZC5cbiAgICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xuICAgIGlmICh0YXJnZXRUeXBlID09PSAwIC8qIFRhcmdldFR5cGUuSU5WQUxJRCAqLykge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHRhcmdldFR5cGUgPT09IDIgLyogVGFyZ2V0VHlwZS5DT0xMRUNUSU9OICovID8gY29sbGVjdGlvbkhhbmRsZXJzIDogYmFzZUhhbmRsZXJzKTtcbiAgICBwcm94eU1hcC5zZXQodGFyZ2V0LCBwcm94eSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuZnVuY3Rpb24gaXNSZWFjdGl2ZSh2YWx1ZSkge1xuICAgIGlmIChpc1JlYWRvbmx5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZVtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL10pO1xuICAgIH1cbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBQ1RJVkUgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzUmVhZG9ubHkodmFsdWUpIHtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi9dKTtcbn1cbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xuICAgIGNvbnN0IHJhdyA9IG9ic2VydmVkICYmIG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJlYWN0aXZlRmxhZ3MuUkFXICovXTtcbiAgICByZXR1cm4gcmF3ID8gdG9SYXcocmF3KSA6IG9ic2VydmVkO1xufVxuZnVuY3Rpb24gbWFya1Jhdyh2YWx1ZSkge1xuICAgIGRlZih2YWx1ZSwgXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqLywgdHJ1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XG5jb25zdCB0b1JlYWRvbmx5ID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFkb25seSh2YWx1ZSkgOiB2YWx1ZTtcblxuZnVuY3Rpb24gdHJhY2tSZWZWYWx1ZShyZWYpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2sgJiYgYWN0aXZlRWZmZWN0KSB7XG4gICAgICAgIHJlZiA9IHRvUmF3KHJlZik7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHRyYWNrRWZmZWN0cyhyZWYuZGVwIHx8IChyZWYuZGVwID0gY3JlYXRlRGVwKCkpLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIiAvKiBUcmFja09wVHlwZXMuR0VUICovLFxuICAgICAgICAgICAgICAgIGtleTogJ3ZhbHVlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmFja0VmZmVjdHMocmVmLmRlcCB8fCAocmVmLmRlcCA9IGNyZWF0ZURlcCgpKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyUmVmVmFsdWUocmVmLCBuZXdWYWwpIHtcbiAgICByZWYgPSB0b1JhdyhyZWYpO1xuICAgIGlmIChyZWYuZGVwKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKHJlZi5kZXAsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHJlZixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyxcbiAgICAgICAgICAgICAgICBrZXk6ICd2YWx1ZScsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhyZWYuZGVwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzUmVmKHIpIHtcbiAgICByZXR1cm4gISEociAmJiByLl9fdl9pc1JlZiA9PT0gdHJ1ZSk7XG59XG5mdW5jdGlvbiByZWYodmFsdWUpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVSZWYocmF3VmFsdWUsIHNoYWxsb3cpIHtcbiAgICBpZiAoaXNSZWYocmF3VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZWZJbXBsKHJhd1ZhbHVlLCBzaGFsbG93KTtcbn1cbmNsYXNzIFJlZkltcGwge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBfX3ZfaXNTaGFsbG93KSB7XG4gICAgICAgIHRoaXMuX192X2lzU2hhbGxvdyA9IF9fdl9pc1NoYWxsb3c7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gX192X2lzU2hhbGxvdyA/IHZhbHVlIDogdG9SYXcodmFsdWUpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IF9fdl9pc1NoYWxsb3cgPyB2YWx1ZSA6IHRvUmVhY3RpdmUodmFsdWUpO1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHRyYWNrUmVmVmFsdWUodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xuICAgICAgICBjb25zdCB1c2VEaXJlY3RWYWx1ZSA9IHRoaXMuX192X2lzU2hhbGxvdyB8fCBpc1NoYWxsb3cobmV3VmFsKSB8fCBpc1JlYWRvbmx5KG5ld1ZhbCk7XG4gICAgICAgIG5ld1ZhbCA9IHVzZURpcmVjdFZhbHVlID8gbmV3VmFsIDogdG9SYXcobmV3VmFsKTtcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQobmV3VmFsLCB0aGlzLl9yYXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gbmV3VmFsO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB1c2VEaXJlY3RWYWx1ZSA/IG5ld1ZhbCA6IHRvUmVhY3RpdmUobmV3VmFsKTtcbiAgICAgICAgICAgIHRyaWdnZXJSZWZWYWx1ZSh0aGlzLCBuZXdWYWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlclJlZihyZWYpIHtcbiAgICB0cmlnZ2VyUmVmVmFsdWUocmVmLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyByZWYudmFsdWUgOiB2b2lkIDApO1xufVxuZnVuY3Rpb24gdW5yZWYocmVmKSB7XG4gICAgcmV0dXJuIGlzUmVmKHJlZikgPyByZWYudmFsdWUgOiByZWY7XG59XG5jb25zdCBzaGFsbG93VW53cmFwSGFuZGxlcnMgPSB7XG4gICAgZ2V0OiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcbiAgICBzZXQ6ICh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgICAgIGlmIChpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xuICAgICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xuICAgICAgICB9XG4gICAgfVxufTtcbmZ1bmN0aW9uIHByb3h5UmVmcyhvYmplY3RXaXRoUmVmcykge1xuICAgIHJldHVybiBpc1JlYWN0aXZlKG9iamVjdFdpdGhSZWZzKVxuICAgICAgICA/IG9iamVjdFdpdGhSZWZzXG4gICAgICAgIDogbmV3IFByb3h5KG9iamVjdFdpdGhSZWZzLCBzaGFsbG93VW53cmFwSGFuZGxlcnMpO1xufVxuY2xhc3MgQ3VzdG9tUmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xuICAgICAgICB0aGlzLmRlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IGdldCwgc2V0IH0gPSBmYWN0b3J5KCgpID0+IHRyYWNrUmVmVmFsdWUodGhpcyksICgpID0+IHRyaWdnZXJSZWZWYWx1ZSh0aGlzKSk7XG4gICAgICAgIHRoaXMuX2dldCA9IGdldDtcbiAgICAgICAgdGhpcy5fc2V0ID0gc2V0O1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoKTtcbiAgICB9XG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xuICAgICAgICB0aGlzLl9zZXQobmV3VmFsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjdXN0b21SZWYoZmFjdG9yeSkge1xuICAgIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcbn1cbmZ1bmN0aW9uIHRvUmVmcyhvYmplY3QpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1Byb3h5KG9iamVjdCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGB0b1JlZnMoKSBleHBlY3RzIGEgcmVhY3RpdmUgb2JqZWN0IGJ1dCByZWNlaXZlZCBhIHBsYWluIG9uZS5gKTtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gaXNBcnJheShvYmplY3QpID8gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpIDoge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIHJldFtrZXldID0gdG9SZWYob2JqZWN0LCBrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuY2xhc3MgT2JqZWN0UmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSwgX2RlZmF1bHRWYWx1ZSkge1xuICAgICAgICB0aGlzLl9vYmplY3QgPSBfb2JqZWN0O1xuICAgICAgICB0aGlzLl9rZXkgPSBfa2V5O1xuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBfZGVmYXVsdFZhbHVlO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5fb2JqZWN0W3RoaXMuX2tleV07XG4gICAgICAgIHJldHVybiB2YWwgPT09IHVuZGVmaW5lZCA/IHRoaXMuX2RlZmF1bHRWYWx1ZSA6IHZhbDtcbiAgICB9XG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xuICAgICAgICB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XSA9IG5ld1ZhbDtcbiAgICB9XG59XG5mdW5jdGlvbiB0b1JlZihvYmplY3QsIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgY29uc3QgdmFsID0gb2JqZWN0W2tleV07XG4gICAgcmV0dXJuIGlzUmVmKHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiBuZXcgT2JqZWN0UmVmSW1wbChvYmplY3QsIGtleSwgZGVmYXVsdFZhbHVlKTtcbn1cblxudmFyIF9hO1xuY2xhc3MgQ29tcHV0ZWRSZWZJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIsIF9zZXR0ZXIsIGlzUmVhZG9ubHksIGlzU1NSKSB7XG4gICAgICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XG4gICAgICAgIHRoaXNbX2FdID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoZ2V0dGVyLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJSZWZWYWx1ZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWZmZWN0LmNvbXB1dGVkID0gdGhpcztcbiAgICAgICAgdGhpcy5lZmZlY3QuYWN0aXZlID0gdGhpcy5fY2FjaGVhYmxlID0gIWlzU1NSO1xuICAgICAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovXSA9IGlzUmVhZG9ubHk7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgLy8gdGhlIGNvbXB1dGVkIHJlZiBtYXkgZ2V0IHdyYXBwZWQgYnkgb3RoZXIgcHJveGllcyBlLmcuIHJlYWRvbmx5KCkgIzMzNzZcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRvUmF3KHRoaXMpO1xuICAgICAgICB0cmFja1JlZlZhbHVlKHNlbGYpO1xuICAgICAgICBpZiAoc2VsZi5fZGlydHkgfHwgIXNlbGYuX2NhY2hlYWJsZSkge1xuICAgICAgICAgICAgc2VsZi5fZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYuX3ZhbHVlID0gc2VsZi5lZmZlY3QucnVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGYuX3ZhbHVlO1xuICAgIH1cbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2V0dGVyKG5ld1ZhbHVlKTtcbiAgICB9XG59XG5fYSA9IFwiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovO1xuZnVuY3Rpb24gY29tcHV0ZWQoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMsIGlzU1NSID0gZmFsc2UpIHtcbiAgICBsZXQgZ2V0dGVyO1xuICAgIGxldCBzZXR0ZXI7XG4gICAgY29uc3Qgb25seUdldHRlciA9IGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKTtcbiAgICBpZiAob25seUdldHRlcikge1xuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnM7XG4gICAgICAgIHNldHRlciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgPyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCB2YWx1ZSBpcyByZWFkb25seScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBOT09QO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLmdldDtcbiAgICAgICAgc2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLnNldDtcbiAgICB9XG4gICAgY29uc3QgY1JlZiA9IG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIG9ubHlHZXR0ZXIgfHwgIXNldHRlciwgaXNTU1IpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZGVidWdPcHRpb25zICYmICFpc1NTUikge1xuICAgICAgICBjUmVmLmVmZmVjdC5vblRyYWNrID0gZGVidWdPcHRpb25zLm9uVHJhY2s7XG4gICAgICAgIGNSZWYuZWZmZWN0Lm9uVHJpZ2dlciA9IGRlYnVnT3B0aW9ucy5vblRyaWdnZXI7XG4gICAgfVxuICAgIHJldHVybiBjUmVmO1xufVxuXG52YXIgX2EkMTtcbmNvbnN0IHRpY2sgPSAvKiNfX1BVUkVfXyovIFByb21pc2UucmVzb2x2ZSgpO1xuY29uc3QgcXVldWUgPSBbXTtcbmxldCBxdWV1ZWQgPSBmYWxzZTtcbmNvbnN0IHNjaGVkdWxlciA9IChmbikgPT4ge1xuICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgIGlmICghcXVldWVkKSB7XG4gICAgICAgIHF1ZXVlZCA9IHRydWU7XG4gICAgICAgIHRpY2sudGhlbihmbHVzaCk7XG4gICAgfVxufTtcbmNvbnN0IGZsdXNoID0gKCkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcXVldWVbaV0oKTtcbiAgICB9XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICBxdWV1ZWQgPSBmYWxzZTtcbn07XG5jbGFzcyBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZ2V0dGVyKSB7XG4gICAgICAgIHRoaXMuZGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcbiAgICAgICAgdGhpc1tfYSQxXSA9IHRydWU7XG4gICAgICAgIGxldCBjb21wYXJlVGFyZ2V0O1xuICAgICAgICBsZXQgaGFzQ29tcGFyZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICBsZXQgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlciwgKGNvbXB1dGVkVHJpZ2dlcikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXB1dGVkVHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJlVGFyZ2V0ID0gdGhpcy5fdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbXBhcmVUYXJnZXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlVG9Db21wYXJlID0gaGFzQ29tcGFyZVRhcmdldCA/IGNvbXBhcmVUYXJnZXQgOiB0aGlzLl92YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzQ29tcGFyZVRhcmdldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWZmZWN0LmFjdGl2ZSAmJiB0aGlzLl9nZXQoKSAhPT0gdmFsdWVUb0NvbXBhcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyUmVmVmFsdWUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNoYWluZWQgdXBzdHJlYW0gY29tcHV0ZWRzIGFyZSBub3RpZmllZCBzeW5jaHJvbm91c2x5IHRvIGVuc3VyZVxuICAgICAgICAgICAgICAgIC8vIHZhbHVlIGludmFsaWRhdGlvbiBpbiBjYXNlIG9mIHN5bmMgYWNjZXNzOyBub3JtYWwgZWZmZWN0cyBhcmVcbiAgICAgICAgICAgICAgICAvLyBkZWZlcnJlZCB0byBiZSB0cmlnZ2VyZWQgaW4gc2NoZWR1bGVyLlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLmRlcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5jb21wdXRlZCBpbnN0YW5jZW9mIERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNjaGVkdWxlcih0cnVlIC8qIGNvbXB1dGVkVHJpZ2dlciAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVmZmVjdC5jb21wdXRlZCA9IHRoaXM7XG4gICAgfVxuICAgIF9nZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fdmFsdWUgPSB0aGlzLmVmZmVjdC5ydW4oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHRyYWNrUmVmVmFsdWUodGhpcyk7XG4gICAgICAgIC8vIHRoZSBjb21wdXRlZCByZWYgbWF5IGdldCB3cmFwcGVkIGJ5IG90aGVyIHByb3hpZXMgZS5nLiByZWFkb25seSgpICMzMzc2XG4gICAgICAgIHJldHVybiB0b1Jhdyh0aGlzKS5fZ2V0KCk7XG4gICAgfVxufVxuX2EkMSA9IFwiX192X2lzUmVhZG9ubHlcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1JFQURPTkxZICovO1xuZnVuY3Rpb24gZGVmZXJyZWRDb21wdXRlZChnZXR0ZXIpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsKGdldHRlcik7XG59XG5cbmV4cG9ydCB7IEVmZmVjdFNjb3BlLCBJVEVSQVRFX0tFWSwgUmVhY3RpdmVFZmZlY3QsIGNvbXB1dGVkLCBjdXN0b21SZWYsIGRlZmVycmVkQ29tcHV0ZWQsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGVuYWJsZVRyYWNraW5nLCBnZXRDdXJyZW50U2NvcGUsIGlzUHJveHksIGlzUmVhY3RpdmUsIGlzUmVhZG9ubHksIGlzUmVmLCBpc1NoYWxsb3csIG1hcmtSYXcsIG9uU2NvcGVEaXNwb3NlLCBwYXVzZVRyYWNraW5nLCBwcm94eVJlZnMsIHJlYWN0aXZlLCByZWFkb25seSwgcmVmLCByZXNldFRyYWNraW5nLCBzaGFsbG93UmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgc2hhbGxvd1JlZiwgc3RvcCwgdG9SYXcsIHRvUmVmLCB0b1JlZnMsIHRyYWNrLCB0cmlnZ2VyLCB0cmlnZ2VyUmVmLCB1bnJlZiB9O1xuIiwiaW1wb3J0IHsgcGF1c2VUcmFja2luZywgcmVzZXRUcmFja2luZywgaXNSZWYsIHRvUmF3LCBpc1NoYWxsb3cgYXMgaXNTaGFsbG93JDEsIGlzUmVhY3RpdmUsIFJlYWN0aXZlRWZmZWN0LCByZWYsIHNoYWxsb3dSZWFkb25seSwgdHJhY2ssIHJlYWN0aXZlLCBzaGFsbG93UmVhY3RpdmUsIHRyaWdnZXIsIGlzUHJveHksIEVmZmVjdFNjb3BlLCBtYXJrUmF3LCBwcm94eVJlZnMsIGNvbXB1dGVkIGFzIGNvbXB1dGVkJDEsIGlzUmVhZG9ubHkgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuZXhwb3J0IHsgRWZmZWN0U2NvcGUsIFJlYWN0aXZlRWZmZWN0LCBjdXN0b21SZWYsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGdldEN1cnJlbnRTY29wZSwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzU2hhbGxvdywgbWFya1Jhdywgb25TY29wZURpc3Bvc2UsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZSwgaXNBcnJheSwgTk9PUCwgZ2V0R2xvYmFsVGhpcywgZXh0ZW5kLCBFTVBUWV9PQkosIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIGh5cGhlbmF0ZSwgY2FtZWxpemUsIGlzT2JqZWN0LCBpc09uLCBoYXNPd24sIGlzTW9kZWxMaXN0ZW5lciwgaGFzQ2hhbmdlZCwgcmVtb3ZlLCBpc1NldCwgaXNNYXAsIGlzUGxhaW5PYmplY3QsIGludm9rZUFycmF5Rm5zLCBpc0J1aWx0SW5EaXJlY3RpdmUsIGNhcGl0YWxpemUsIGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCwgZGVmLCBpc1Jlc2VydmVkUHJvcCwgRU1QVFlfQVJSLCB0b1Jhd1R5cGUsIG1ha2VNYXAsIE5PLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5leHBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN0YWNrID0gW107XG5mdW5jdGlvbiBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpIHtcbiAgICBzdGFjay5wdXNoKHZub2RlKTtcbn1cbmZ1bmN0aW9uIHBvcFdhcm5pbmdDb250ZXh0KCkge1xuICAgIHN0YWNrLnBvcCgpO1xufVxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcbiAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIGF2b2lkIHByb3BzIGZvcm1hdHRpbmcgb3Igd2FybiBoYW5kbGVyIHRyYWNraW5nIGRlcHMgdGhhdCBtaWdodCBiZSBtdXRhdGVkXG4gICAgLy8gZHVyaW5nIHBhdGNoLCBsZWFkaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBzdGFjay5sZW5ndGggPyBzdGFja1tzdGFjay5sZW5ndGggLSAxXS5jb21wb25lbnQgOiBudWxsO1xuICAgIGNvbnN0IGFwcFdhcm5IYW5kbGVyID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXI7XG4gICAgY29uc3QgdHJhY2UgPSBnZXRDb21wb25lbnRUcmFjZSgpO1xuICAgIGlmIChhcHBXYXJuSGFuZGxlcikge1xuICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoYXBwV2FybkhhbmRsZXIsIGluc3RhbmNlLCAxMSAvKiBFcnJvckNvZGVzLkFQUF9XQVJOX0hBTkRMRVIgKi8sIFtcbiAgICAgICAgICAgIG1zZyArIGFyZ3Muam9pbignJyksXG4gICAgICAgICAgICBpbnN0YW5jZSAmJiBpbnN0YW5jZS5wcm94eSxcbiAgICAgICAgICAgIHRyYWNlXG4gICAgICAgICAgICAgICAgLm1hcCgoeyB2bm9kZSB9KSA9PiBgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgdm5vZGUudHlwZSl9PmApXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgdHJhY2VcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB3YXJuQXJncyA9IFtgW1Z1ZSB3YXJuXTogJHttc2d9YCwgLi4uYXJnc107XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAodHJhY2UubGVuZ3RoICYmXG4gICAgICAgICAgICAvLyBhdm9pZCBzcGFtbWluZyBjb25zb2xlIGR1cmluZyB0ZXN0c1xuICAgICAgICAgICAgIWZhbHNlKSB7XG4gICAgICAgICAgICB3YXJuQXJncy5wdXNoKGBcXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUud2FybiguLi53YXJuQXJncyk7XG4gICAgfVxuICAgIHJlc2V0VHJhY2tpbmcoKTtcbn1cbmZ1bmN0aW9uIGdldENvbXBvbmVudFRyYWNlKCkge1xuICAgIGxldCBjdXJyZW50Vk5vZGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICBpZiAoIWN1cnJlbnRWTm9kZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIC8vIHdlIGNhbid0IGp1c3QgdXNlIHRoZSBzdGFjayBiZWNhdXNlIGl0IHdpbGwgYmUgaW5jb21wbGV0ZSBkdXJpbmcgdXBkYXRlc1xuICAgIC8vIHRoYXQgZGlkIG5vdCBzdGFydCBmcm9tIHRoZSByb290LiBSZS1jb25zdHJ1Y3QgdGhlIHBhcmVudCBjaGFpbiB1c2luZ1xuICAgIC8vIGluc3RhbmNlIHBhcmVudCBwb2ludGVycy5cbiAgICBjb25zdCBub3JtYWxpemVkU3RhY2sgPSBbXTtcbiAgICB3aGlsZSAoY3VycmVudFZOb2RlKSB7XG4gICAgICAgIGNvbnN0IGxhc3QgPSBub3JtYWxpemVkU3RhY2tbMF07XG4gICAgICAgIGlmIChsYXN0ICYmIGxhc3Qudm5vZGUgPT09IGN1cnJlbnRWTm9kZSkge1xuICAgICAgICAgICAgbGFzdC5yZWN1cnNlQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRTdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICB2bm9kZTogY3VycmVudFZOb2RlLFxuICAgICAgICAgICAgICAgIHJlY3Vyc2VDb3VudDogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50SW5zdGFuY2UgPSBjdXJyZW50Vk5vZGUuY29tcG9uZW50ICYmIGN1cnJlbnRWTm9kZS5jb21wb25lbnQucGFyZW50O1xuICAgICAgICBjdXJyZW50Vk5vZGUgPSBwYXJlbnRJbnN0YW5jZSAmJiBwYXJlbnRJbnN0YW5jZS52bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRTdGFjaztcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBmb3JtYXRUcmFjZSh0cmFjZSkge1xuICAgIGNvbnN0IGxvZ3MgPSBbXTtcbiAgICB0cmFjZS5mb3JFYWNoKChlbnRyeSwgaSkgPT4ge1xuICAgICAgICBsb2dzLnB1c2goLi4uKGkgPT09IDAgPyBbXSA6IFtgXFxuYF0pLCAuLi5mb3JtYXRUcmFjZUVudHJ5KGVudHJ5KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGxvZ3M7XG59XG5mdW5jdGlvbiBmb3JtYXRUcmFjZUVudHJ5KHsgdm5vZGUsIHJlY3Vyc2VDb3VudCB9KSB7XG4gICAgY29uc3QgcG9zdGZpeCA9IHJlY3Vyc2VDb3VudCA+IDAgPyBgLi4uICgke3JlY3Vyc2VDb3VudH0gcmVjdXJzaXZlIGNhbGxzKWAgOiBgYDtcbiAgICBjb25zdCBpc1Jvb3QgPSB2bm9kZS5jb21wb25lbnQgPyB2bm9kZS5jb21wb25lbnQucGFyZW50ID09IG51bGwgOiBmYWxzZTtcbiAgICBjb25zdCBvcGVuID0gYCBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKHZub2RlLmNvbXBvbmVudCwgdm5vZGUudHlwZSwgaXNSb290KX1gO1xuICAgIGNvbnN0IGNsb3NlID0gYD5gICsgcG9zdGZpeDtcbiAgICByZXR1cm4gdm5vZGUucHJvcHNcbiAgICAgICAgPyBbb3BlbiwgLi4uZm9ybWF0UHJvcHModm5vZGUucHJvcHMpLCBjbG9zZV1cbiAgICAgICAgOiBbb3BlbiArIGNsb3NlXTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBmb3JtYXRQcm9wcyhwcm9wcykge1xuICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XG4gICAga2V5cy5zbGljZSgwLCAzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHJlcy5wdXNoKC4uLmZvcm1hdFByb3Aoa2V5LCBwcm9wc1trZXldKSk7XG4gICAgfSk7XG4gICAgaWYgKGtleXMubGVuZ3RoID4gMykge1xuICAgICAgICByZXMucHVzaChgIC4uLmApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGZvcm1hdFByb3Aoa2V5LCB2YWx1ZSwgcmF3KSB7XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fFxuICAgICAgICB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUmVmKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IGZvcm1hdFByb3Aoa2V5LCB0b1Jhdyh2YWx1ZS52YWx1ZSksIHRydWUpO1xuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT1SZWY8YCwgdmFsdWUsIGA+YF07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBbYCR7a2V5fT1mbiR7dmFsdWUubmFtZSA/IGA8JHt2YWx1ZS5uYW1lfT5gIDogYGB9YF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09YCwgdmFsdWVdO1xuICAgIH1cbn1cblxuY29uc3QgRXJyb3JUeXBlU3RyaW5ncyA9IHtcbiAgICBbXCJzcFwiIC8qIExpZmVjeWNsZUhvb2tzLlNFUlZFUl9QUkVGRVRDSCAqL106ICdzZXJ2ZXJQcmVmZXRjaCBob29rJyxcbiAgICBbXCJiY1wiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9DUkVBVEUgKi9dOiAnYmVmb3JlQ3JlYXRlIGhvb2snLFxuICAgIFtcImNcIiAvKiBMaWZlY3ljbGVIb29rcy5DUkVBVEVEICovXTogJ2NyZWF0ZWQgaG9vaycsXG4gICAgW1wiYm1cIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfTU9VTlQgKi9dOiAnYmVmb3JlTW91bnQgaG9vaycsXG4gICAgW1wibVwiIC8qIExpZmVjeWNsZUhvb2tzLk1PVU5URUQgKi9dOiAnbW91bnRlZCBob29rJyxcbiAgICBbXCJidVwiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9VUERBVEUgKi9dOiAnYmVmb3JlVXBkYXRlIGhvb2snLFxuICAgIFtcInVcIiAvKiBMaWZlY3ljbGVIb29rcy5VUERBVEVEICovXTogJ3VwZGF0ZWQnLFxuICAgIFtcImJ1bVwiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9VTk1PVU5UICovXTogJ2JlZm9yZVVubW91bnQgaG9vaycsXG4gICAgW1widW1cIiAvKiBMaWZlY3ljbGVIb29rcy5VTk1PVU5URUQgKi9dOiAndW5tb3VudGVkIGhvb2snLFxuICAgIFtcImFcIiAvKiBMaWZlY3ljbGVIb29rcy5BQ1RJVkFURUQgKi9dOiAnYWN0aXZhdGVkIGhvb2snLFxuICAgIFtcImRhXCIgLyogTGlmZWN5Y2xlSG9va3MuREVBQ1RJVkFURUQgKi9dOiAnZGVhY3RpdmF0ZWQgaG9vaycsXG4gICAgW1wiZWNcIiAvKiBMaWZlY3ljbGVIb29rcy5FUlJPUl9DQVBUVVJFRCAqL106ICdlcnJvckNhcHR1cmVkIGhvb2snLFxuICAgIFtcInJ0Y1wiIC8qIExpZmVjeWNsZUhvb2tzLlJFTkRFUl9UUkFDS0VEICovXTogJ3JlbmRlclRyYWNrZWQgaG9vaycsXG4gICAgW1wicnRnXCIgLyogTGlmZWN5Y2xlSG9va3MuUkVOREVSX1RSSUdHRVJFRCAqL106ICdyZW5kZXJUcmlnZ2VyZWQgaG9vaycsXG4gICAgWzAgLyogRXJyb3JDb2Rlcy5TRVRVUF9GVU5DVElPTiAqL106ICdzZXR1cCBmdW5jdGlvbicsXG4gICAgWzEgLyogRXJyb3JDb2Rlcy5SRU5ERVJfRlVOQ1RJT04gKi9dOiAncmVuZGVyIGZ1bmN0aW9uJyxcbiAgICBbMiAvKiBFcnJvckNvZGVzLldBVENIX0dFVFRFUiAqL106ICd3YXRjaGVyIGdldHRlcicsXG4gICAgWzMgLyogRXJyb3JDb2Rlcy5XQVRDSF9DQUxMQkFDSyAqL106ICd3YXRjaGVyIGNhbGxiYWNrJyxcbiAgICBbNCAvKiBFcnJvckNvZGVzLldBVENIX0NMRUFOVVAgKi9dOiAnd2F0Y2hlciBjbGVhbnVwIGZ1bmN0aW9uJyxcbiAgICBbNSAvKiBFcnJvckNvZGVzLk5BVElWRV9FVkVOVF9IQU5ETEVSICovXTogJ25hdGl2ZSBldmVudCBoYW5kbGVyJyxcbiAgICBbNiAvKiBFcnJvckNvZGVzLkNPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovXTogJ2NvbXBvbmVudCBldmVudCBoYW5kbGVyJyxcbiAgICBbNyAvKiBFcnJvckNvZGVzLlZOT0RFX0hPT0sgKi9dOiAndm5vZGUgaG9vaycsXG4gICAgWzggLyogRXJyb3JDb2Rlcy5ESVJFQ1RJVkVfSE9PSyAqL106ICdkaXJlY3RpdmUgaG9vaycsXG4gICAgWzkgLyogRXJyb3JDb2Rlcy5UUkFOU0lUSU9OX0hPT0sgKi9dOiAndHJhbnNpdGlvbiBob29rJyxcbiAgICBbMTAgLyogRXJyb3JDb2Rlcy5BUFBfRVJST1JfSEFORExFUiAqL106ICdhcHAgZXJyb3JIYW5kbGVyJyxcbiAgICBbMTEgLyogRXJyb3JDb2Rlcy5BUFBfV0FSTl9IQU5ETEVSICovXTogJ2FwcCB3YXJuSGFuZGxlcicsXG4gICAgWzEyIC8qIEVycm9yQ29kZXMuRlVOQ1RJT05fUkVGICovXTogJ3JlZiBmdW5jdGlvbicsXG4gICAgWzEzIC8qIEVycm9yQ29kZXMuQVNZTkNfQ09NUE9ORU5UX0xPQURFUiAqL106ICdhc3luYyBjb21wb25lbnQgbG9hZGVyJyxcbiAgICBbMTQgLyogRXJyb3JDb2Rlcy5TQ0hFRFVMRVIgKi9dOiAnc2NoZWR1bGVyIGZsdXNoLiBUaGlzIGlzIGxpa2VseSBhIFZ1ZSBpbnRlcm5hbHMgYnVnLiAnICtcbiAgICAgICAgJ1BsZWFzZSBvcGVuIGFuIGlzc3VlIGF0IGh0dHBzOi8vbmV3LWlzc3VlLnZ1ZWpzLm9yZy8/cmVwbz12dWVqcy9jb3JlJ1xufTtcbmZ1bmN0aW9uIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcbiAgICBsZXQgcmVzO1xuICAgIHRyeSB7XG4gICAgICAgIHJlcyA9IGFyZ3MgPyBmbiguLi5hcmdzKSA6IGZuKCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICAgICAgY29uc3QgcmVzID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncyk7XG4gICAgICAgIGlmIChyZXMgJiYgaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgICAgIHJlcy5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbltpXSwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XG4gICAgY29uc3QgY29udGV4dFZOb2RlID0gaW5zdGFuY2UgPyBpbnN0YW5jZS52bm9kZSA6IG51bGw7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGxldCBjdXIgPSBpbnN0YW5jZS5wYXJlbnQ7XG4gICAgICAgIC8vIHRoZSBleHBvc2VkIGluc3RhbmNlIGlzIHRoZSByZW5kZXIgcHJveHkgdG8ga2VlcCBpdCBjb25zaXN0ZW50IHdpdGggMi54XG4gICAgICAgIGNvbnN0IGV4cG9zZWRJbnN0YW5jZSA9IGluc3RhbmNlLnByb3h5O1xuICAgICAgICAvLyBpbiBwcm9kdWN0aW9uIHRoZSBob29rIHJlY2VpdmVzIG9ubHkgdGhlIGVycm9yIGNvZGVcbiAgICAgICAgY29uc3QgZXJyb3JJbmZvID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gRXJyb3JUeXBlU3RyaW5nc1t0eXBlXSA6IHR5cGU7XG4gICAgICAgIHdoaWxlIChjdXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ2FwdHVyZWRIb29rcyA9IGN1ci5lYztcbiAgICAgICAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVycm9yQ2FwdHVyZWRIb29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzW2ldKGVyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm8pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VyID0gY3VyLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyBhcHAtbGV2ZWwgaGFuZGxpbmdcbiAgICAgICAgY29uc3QgYXBwRXJyb3JIYW5kbGVyID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcuZXJyb3JIYW5kbGVyO1xuICAgICAgICBpZiAoYXBwRXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoYXBwRXJyb3JIYW5kbGVyLCBudWxsLCAxMCAvKiBFcnJvckNvZGVzLkFQUF9FUlJPUl9IQU5ETEVSICovLCBbZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mb10pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2KTtcbn1cbmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY29uc3QgaW5mbyA9IEVycm9yVHlwZVN0cmluZ3NbdHlwZV07XG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcbiAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChjb250ZXh0Vk5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHdhcm4oYFVuaGFuZGxlZCBlcnJvciR7aW5mbyA/IGAgZHVyaW5nIGV4ZWN1dGlvbiBvZiAke2luZm99YCA6IGBgfWApO1xuICAgICAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNyYXNoIGluIGRldiBieSBkZWZhdWx0IHNvIGl0J3MgbW9yZSBub3RpY2VhYmxlXG4gICAgICAgIGlmICh0aHJvd0luRGV2KSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHJlY292ZXIgaW4gcHJvZCB0byByZWR1Y2UgdGhlIGltcGFjdCBvbiBlbmQtdXNlclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxufVxuXG5sZXQgaXNGbHVzaGluZyA9IGZhbHNlO1xubGV0IGlzRmx1c2hQZW5kaW5nID0gZmFsc2U7XG5jb25zdCBxdWV1ZSA9IFtdO1xubGV0IGZsdXNoSW5kZXggPSAwO1xuY29uc3QgcGVuZGluZ1Bvc3RGbHVzaENicyA9IFtdO1xubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XG5sZXQgcG9zdEZsdXNoSW5kZXggPSAwO1xuY29uc3QgcmVzb2x2ZWRQcm9taXNlID0gLyojX19QVVJFX18qLyBQcm9taXNlLnJlc29sdmUoKTtcbmxldCBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcbmNvbnN0IFJFQ1VSU0lPTl9MSU1JVCA9IDEwMDtcbmZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgY29uc3QgcCA9IGN1cnJlbnRGbHVzaFByb21pc2UgfHwgcmVzb2x2ZWRQcm9taXNlO1xuICAgIHJldHVybiBmbiA/IHAudGhlbih0aGlzID8gZm4uYmluZCh0aGlzKSA6IGZuKSA6IHA7XG59XG4vLyAjMjc2OFxuLy8gVXNlIGJpbmFyeS1zZWFyY2ggdG8gZmluZCBhIHN1aXRhYmxlIHBvc2l0aW9uIGluIHRoZSBxdWV1ZSxcbi8vIHNvIHRoYXQgdGhlIHF1ZXVlIG1haW50YWlucyB0aGUgaW5jcmVhc2luZyBvcmRlciBvZiBqb2IncyBpZCxcbi8vIHdoaWNoIGNhbiBwcmV2ZW50IHRoZSBqb2IgZnJvbSBiZWluZyBza2lwcGVkIGFuZCBhbHNvIGNhbiBhdm9pZCByZXBlYXRlZCBwYXRjaGluZy5cbmZ1bmN0aW9uIGZpbmRJbnNlcnRpb25JbmRleChpZCkge1xuICAgIC8vIHRoZSBzdGFydCBpbmRleCBzaG91bGQgYmUgYGZsdXNoSW5kZXggKyAxYFxuICAgIGxldCBzdGFydCA9IGZsdXNoSW5kZXggKyAxO1xuICAgIGxldCBlbmQgPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGNvbnN0IG1pZGRsZSA9IChzdGFydCArIGVuZCkgPj4+IDE7XG4gICAgICAgIGNvbnN0IG1pZGRsZUpvYklkID0gZ2V0SWQocXVldWVbbWlkZGxlXSk7XG4gICAgICAgIG1pZGRsZUpvYklkIDwgaWQgPyAoc3RhcnQgPSBtaWRkbGUgKyAxKSA6IChlbmQgPSBtaWRkbGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnQ7XG59XG5mdW5jdGlvbiBxdWV1ZUpvYihqb2IpIHtcbiAgICAvLyB0aGUgZGVkdXBlIHNlYXJjaCB1c2VzIHRoZSBzdGFydEluZGV4IGFyZ3VtZW50IG9mIEFycmF5LmluY2x1ZGVzKClcbiAgICAvLyBieSBkZWZhdWx0IHRoZSBzZWFyY2ggaW5kZXggaW5jbHVkZXMgdGhlIGN1cnJlbnQgam9iIHRoYXQgaXMgYmVpbmcgcnVuXG4gICAgLy8gc28gaXQgY2Fubm90IHJlY3Vyc2l2ZWx5IHRyaWdnZXIgaXRzZWxmIGFnYWluLlxuICAgIC8vIGlmIHRoZSBqb2IgaXMgYSB3YXRjaCgpIGNhbGxiYWNrLCB0aGUgc2VhcmNoIHdpbGwgc3RhcnQgd2l0aCBhICsxIGluZGV4IHRvXG4gICAgLy8gYWxsb3cgaXQgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgLSBpdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvXG4gICAgLy8gZW5zdXJlIGl0IGRvZXNuJ3QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AuXG4gICAgaWYgKCFxdWV1ZS5sZW5ndGggfHxcbiAgICAgICAgIXF1ZXVlLmluY2x1ZGVzKGpvYiwgaXNGbHVzaGluZyAmJiBqb2IuYWxsb3dSZWN1cnNlID8gZmx1c2hJbmRleCArIDEgOiBmbHVzaEluZGV4KSkge1xuICAgICAgICBpZiAoam9iLmlkID09IG51bGwpIHtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goam9iKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShmaW5kSW5zZXJ0aW9uSW5kZXgoam9iLmlkKSwgMCwgam9iKTtcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUZsdXNoKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcXVldWVGbHVzaCgpIHtcbiAgICBpZiAoIWlzRmx1c2hpbmcgJiYgIWlzRmx1c2hQZW5kaW5nKSB7XG4gICAgICAgIGlzRmx1c2hQZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IHJlc29sdmVkUHJvbWlzZS50aGVuKGZsdXNoSm9icyk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW52YWxpZGF0ZUpvYihqb2IpIHtcbiAgICBjb25zdCBpID0gcXVldWUuaW5kZXhPZihqb2IpO1xuICAgIGlmIChpID4gZmx1c2hJbmRleCkge1xuICAgICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcXVldWVQb3N0Rmx1c2hDYihjYikge1xuICAgIGlmICghaXNBcnJheShjYikpIHtcbiAgICAgICAgaWYgKCFhY3RpdmVQb3N0Rmx1c2hDYnMgfHxcbiAgICAgICAgICAgICFhY3RpdmVQb3N0Rmx1c2hDYnMuaW5jbHVkZXMoY2IsIGNiLmFsbG93UmVjdXJzZSA/IHBvc3RGbHVzaEluZGV4ICsgMSA6IHBvc3RGbHVzaEluZGV4KSkge1xuICAgICAgICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5wdXNoKGNiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gaWYgY2IgaXMgYW4gYXJyYXksIGl0IGlzIGEgY29tcG9uZW50IGxpZmVjeWNsZSBob29rIHdoaWNoIGNhbiBvbmx5IGJlXG4gICAgICAgIC8vIHRyaWdnZXJlZCBieSBhIGpvYiwgd2hpY2ggaXMgYWxyZWFkeSBkZWR1cGVkIGluIHRoZSBtYWluIHF1ZXVlLCBzb1xuICAgICAgICAvLyB3ZSBjYW4gc2tpcCBkdXBsaWNhdGUgY2hlY2sgaGVyZSB0byBpbXByb3ZlIHBlcmZcbiAgICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5wdXNoKC4uLmNiKTtcbiAgICB9XG4gICAgcXVldWVGbHVzaCgpO1xufVxuZnVuY3Rpb24gZmx1c2hQcmVGbHVzaENicyhzZWVuLCBcbi8vIGlmIGN1cnJlbnRseSBmbHVzaGluZywgc2tpcCB0aGUgY3VycmVudCBqb2IgaXRzZWxmXG5pID0gaXNGbHVzaGluZyA/IGZsdXNoSW5kZXggKyAxIDogMCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNiID0gcXVldWVbaV07XG4gICAgICAgIGlmIChjYiAmJiBjYi5wcmUpIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGNiKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVldWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pIHtcbiAgICBpZiAocGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGVkdXBlZCA9IFsuLi5uZXcgU2V0KHBlbmRpbmdQb3N0Rmx1c2hDYnMpXTtcbiAgICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGggPSAwO1xuICAgICAgICAvLyAjMTk0NyBhbHJlYWR5IGhhcyBhY3RpdmUgcXVldWUsIG5lc3RlZCBmbHVzaFBvc3RGbHVzaENicyBjYWxsXG4gICAgICAgIGlmIChhY3RpdmVQb3N0Rmx1c2hDYnMpIHtcbiAgICAgICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5wdXNoKC4uLmRlZHVwZWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IGRlZHVwZWQ7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMuc29ydCgoYSwgYikgPT4gZ2V0SWQoYSkgLSBnZXRJZChiKSk7XG4gICAgICAgIGZvciAocG9zdEZsdXNoSW5kZXggPSAwOyBwb3N0Rmx1c2hJbmRleCA8IGFjdGl2ZVBvc3RGbHVzaENicy5sZW5ndGg7IHBvc3RGbHVzaEluZGV4KyspIHtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgYWN0aXZlUG9zdEZsdXNoQ2JzW3Bvc3RGbHVzaEluZGV4XSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0oKTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xuICAgICAgICBwb3N0Rmx1c2hJbmRleCA9IDA7XG4gICAgfVxufVxuY29uc3QgZ2V0SWQgPSAoam9iKSA9PiBqb2IuaWQgPT0gbnVsbCA/IEluZmluaXR5IDogam9iLmlkO1xuY29uc3QgY29tcGFyYXRvciA9IChhLCBiKSA9PiB7XG4gICAgY29uc3QgZGlmZiA9IGdldElkKGEpIC0gZ2V0SWQoYik7XG4gICAgaWYgKGRpZmYgPT09IDApIHtcbiAgICAgICAgaWYgKGEucHJlICYmICFiLnByZSlcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGIucHJlICYmICFhLnByZSlcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZjtcbn07XG5mdW5jdGlvbiBmbHVzaEpvYnMoc2Vlbikge1xuICAgIGlzRmx1c2hQZW5kaW5nID0gZmFsc2U7XG4gICAgaXNGbHVzaGluZyA9IHRydWU7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQgc28gaXRzIHJlbmRlciBlZmZlY3Qgd2lsbCBoYXZlIHNtYWxsZXJcbiAgICAvLyAgICBwcmlvcml0eSBudW1iZXIpXG4gICAgLy8gMi4gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB1cGRhdGUsXG4gICAgLy8gICAgaXRzIHVwZGF0ZSBjYW4gYmUgc2tpcHBlZC5cbiAgICBxdWV1ZS5zb3J0KGNvbXBhcmF0b3IpO1xuICAgIC8vIGNvbmRpdGlvbmFsIHVzYWdlIG9mIGNoZWNrUmVjdXJzaXZlVXBkYXRlIG11c3QgYmUgZGV0ZXJtaW5lZCBvdXQgb2ZcbiAgICAvLyB0cnkgLi4uIGNhdGNoIGJsb2NrIHNpbmNlIFJvbGx1cCBieSBkZWZhdWx0IGRlLW9wdGltaXplcyB0cmVlc2hha2luZ1xuICAgIC8vIGluc2lkZSB0cnktY2F0Y2guIFRoaXMgY2FuIGxlYXZlIGFsbCB3YXJuaW5nIGNvZGUgdW5zaGFrZWQuIEFsdGhvdWdoXG4gICAgLy8gdGhleSB3b3VsZCBnZXQgZXZlbnR1YWxseSBzaGFrZW4gYnkgYSBtaW5pZmllciBsaWtlIHRlcnNlciwgc29tZSBtaW5pZmllcnNcbiAgICAvLyB3b3VsZCBmYWlsIHRvIGRvIHRoYXQgKGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL2V2YW53L2VzYnVpbGQvaXNzdWVzLzE2MTApXG4gICAgY29uc3QgY2hlY2sgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgPyAoam9iKSA9PiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKVxuICAgICAgICA6IE5PT1A7XG4gICAgdHJ5IHtcbiAgICAgICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcbiAgICAgICAgICAgIGlmIChqb2IgJiYgam9iLmFjdGl2ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoZWNrKGpvYikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBydW5uaW5nOmAsIGpvYi5pZClcbiAgICAgICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoam9iLCBudWxsLCAxNCAvKiBFcnJvckNvZGVzLlNDSEVEVUxFUiAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGZsdXNoSW5kZXggPSAwO1xuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICBmbHVzaFBvc3RGbHVzaENicyhzZWVuKTtcbiAgICAgICAgaXNGbHVzaGluZyA9IGZhbHNlO1xuICAgICAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcbiAgICAgICAgLy8gc29tZSBwb3N0Rmx1c2hDYiBxdWV1ZWQgam9icyFcbiAgICAgICAgLy8ga2VlcCBmbHVzaGluZyB1bnRpbCBpdCBkcmFpbnMuXG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggfHwgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZsdXNoSm9icyhzZWVuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBmbikge1xuICAgIGlmICghc2Vlbi5oYXMoZm4pKSB7XG4gICAgICAgIHNlZW4uc2V0KGZuLCAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2Vlbi5nZXQoZm4pO1xuICAgICAgICBpZiAoY291bnQgPiBSRUNVUlNJT05fTElNSVQpIHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gZm4ub3duZXJJbnN0YW5jZTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBpbnN0YW5jZSAmJiBnZXRDb21wb25lbnROYW1lKGluc3RhbmNlLnR5cGUpO1xuICAgICAgICAgICAgd2FybihgTWF4aW11bSByZWN1cnNpdmUgdXBkYXRlcyBleGNlZWRlZCR7Y29tcG9uZW50TmFtZSA/IGAgaW4gY29tcG9uZW50IDwke2NvbXBvbmVudE5hbWV9PmAgOiBgYH0uIGAgK1xuICAgICAgICAgICAgICAgIGBUaGlzIG1lYW5zIHlvdSBoYXZlIGEgcmVhY3RpdmUgZWZmZWN0IHRoYXQgaXMgbXV0YXRpbmcgaXRzIG93biBgICtcbiAgICAgICAgICAgICAgICBgZGVwZW5kZW5jaWVzIGFuZCB0aHVzIHJlY3Vyc2l2ZWx5IHRyaWdnZXJpbmcgaXRzZWxmLiBQb3NzaWJsZSBzb3VyY2VzIGAgK1xuICAgICAgICAgICAgICAgIGBpbmNsdWRlIGNvbXBvbmVudCB0ZW1wbGF0ZSwgcmVuZGVyIGZ1bmN0aW9uLCB1cGRhdGVkIGhvb2sgb3IgYCArXG4gICAgICAgICAgICAgICAgYHdhdGNoZXIgc291cmNlIGZ1bmN0aW9uLmApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWVuLnNldChmbiwgY291bnQgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG5sZXQgaXNIbXJVcGRhdGluZyA9IGZhbHNlO1xuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gbmV3IFNldCgpO1xuLy8gRXhwb3NlIHRoZSBITVIgcnVudGltZSBvbiB0aGUgZ2xvYmFsIG9iamVjdFxuLy8gVGhpcyBtYWtlcyBpdCBlbnRpcmVseSB0cmVlLXNoYWthYmxlIHdpdGhvdXQgcG9sbHV0aW5nIHRoZSBleHBvcnRzIGFuZCBtYWtlc1xuLy8gaXQgZWFzaWVyIHRvIGJlIHVzZWQgaW4gdG9vbGluZ3MgbGlrZSB2dWUtbG9hZGVyXG4vLyBOb3RlOiBmb3IgYSBjb21wb25lbnQgdG8gYmUgZWxpZ2libGUgZm9yIEhNUiBpdCBhbHNvIG5lZWRzIHRoZSBfX2htcklkIG9wdGlvblxuLy8gdG8gYmUgc2V0IHNvIHRoYXQgaXRzIGluc3RhbmNlcyBjYW4gYmUgcmVnaXN0ZXJlZCAvIHJlbW92ZWQuXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX0hNUl9SVU5USU1FX18gPSB7XG4gICAgICAgIGNyZWF0ZVJlY29yZDogdHJ5V3JhcChjcmVhdGVSZWNvcmQpLFxuICAgICAgICByZXJlbmRlcjogdHJ5V3JhcChyZXJlbmRlciksXG4gICAgICAgIHJlbG9hZDogdHJ5V3JhcChyZWxvYWQpXG4gICAgfTtcbn1cbmNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gICAgY29uc3QgaWQgPSBpbnN0YW5jZS50eXBlLl9faG1ySWQ7XG4gICAgbGV0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICAgIGlmICghcmVjb3JkKSB7XG4gICAgICAgIGNyZWF0ZVJlY29yZChpZCwgaW5zdGFuY2UudHlwZSk7XG4gICAgICAgIHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICAgIH1cbiAgICByZWNvcmQuaW5zdGFuY2VzLmFkZChpbnN0YW5jZSk7XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gICAgbWFwLmdldChpbnN0YW5jZS50eXBlLl9faG1ySWQpLmluc3RhbmNlcy5kZWxldGUoaW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVjb3JkKGlkLCBpbml0aWFsRGVmKSB7XG4gICAgaWYgKG1hcC5oYXMoaWQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbWFwLnNldChpZCwge1xuICAgICAgICBpbml0aWFsRGVmOiBub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbml0aWFsRGVmKSxcbiAgICAgICAgaW5zdGFuY2VzOiBuZXcgU2V0KClcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIHJldHVybiBpc0NsYXNzQ29tcG9uZW50KGNvbXBvbmVudCkgPyBjb21wb25lbnQuX192Y2NPcHRzIDogY29tcG9uZW50O1xufVxuZnVuY3Rpb24gcmVyZW5kZXIoaWQsIG5ld1JlbmRlcikge1xuICAgIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICAgIGlmICghcmVjb3JkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gdXBkYXRlIGluaXRpYWwgcmVjb3JkIChmb3Igbm90LXlldC1yZW5kZXJlZCBjb21wb25lbnQpXG4gICAgcmVjb3JkLmluaXRpYWxEZWYucmVuZGVyID0gbmV3UmVuZGVyO1xuICAgIFsuLi5yZWNvcmQuaW5zdGFuY2VzXS5mb3JFYWNoKGluc3RhbmNlID0+IHtcbiAgICAgICAgaWYgKG5ld1JlbmRlcikge1xuICAgICAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gbmV3UmVuZGVyO1xuICAgICAgICAgICAgbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSkucmVuZGVyID0gbmV3UmVuZGVyO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLnJlbmRlckNhY2hlID0gW107XG4gICAgICAgIC8vIHRoaXMgZmxhZyBmb3JjZXMgY2hpbGQgY29tcG9uZW50cyB3aXRoIHNsb3QgY29udGVudCB0byB1cGRhdGVcbiAgICAgICAgaXNIbXJVcGRhdGluZyA9IHRydWU7XG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gICAgfSk7XG59XG5mdW5jdGlvbiByZWxvYWQoaWQsIG5ld0NvbXApIHtcbiAgICBjb25zdCByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgICBpZiAoIXJlY29yZClcbiAgICAgICAgcmV0dXJuO1xuICAgIG5ld0NvbXAgPSBub3JtYWxpemVDbGFzc0NvbXBvbmVudChuZXdDb21wKTtcbiAgICAvLyB1cGRhdGUgaW5pdGlhbCBkZWYgKGZvciBub3QteWV0LXJlbmRlcmVkIGNvbXBvbmVudHMpXG4gICAgdXBkYXRlQ29tcG9uZW50RGVmKHJlY29yZC5pbml0aWFsRGVmLCBuZXdDb21wKTtcbiAgICAvLyBjcmVhdGUgYSBzbmFwc2hvdCB3aGljaCBhdm9pZHMgdGhlIHNldCBiZWluZyBtdXRhdGVkIGR1cmluZyB1cGRhdGVzXG4gICAgY29uc3QgaW5zdGFuY2VzID0gWy4uLnJlY29yZC5pbnN0YW5jZXNdO1xuICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgaW5zdGFuY2VzKSB7XG4gICAgICAgIGNvbnN0IG9sZENvbXAgPSBub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbnN0YW5jZS50eXBlKTtcbiAgICAgICAgaWYgKCFobXJEaXJ0eUNvbXBvbmVudHMuaGFzKG9sZENvbXApKSB7XG4gICAgICAgICAgICAvLyAxLiBVcGRhdGUgZXhpc3RpbmcgY29tcCBkZWZpbml0aW9uIHRvIG1hdGNoIG5ldyBvbmVcbiAgICAgICAgICAgIGlmIChvbGRDb21wICE9PSByZWNvcmQuaW5pdGlhbERlZikge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDIuIG1hcmsgZGVmaW5pdGlvbiBkaXJ0eS4gVGhpcyBmb3JjZXMgdGhlIHJlbmRlcmVyIHRvIHJlcGxhY2UgdGhlXG4gICAgICAgICAgICAvLyBjb21wb25lbnQgb24gcGF0Y2guXG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuYWRkKG9sZENvbXApO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuIGludmFsaWRhdGUgb3B0aW9ucyByZXNvbHV0aW9uIGNhY2hlXG4gICAgICAgIGluc3RhbmNlLmFwcENvbnRleHQub3B0aW9uc0NhY2hlLmRlbGV0ZShpbnN0YW5jZS50eXBlKTtcbiAgICAgICAgLy8gNC4gYWN0dWFsbHkgdXBkYXRlXG4gICAgICAgIGlmIChpbnN0YW5jZS5jZVJlbG9hZCkge1xuICAgICAgICAgICAgLy8gY3VzdG9tIGVsZW1lbnRcbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5hZGQob2xkQ29tcCk7XG4gICAgICAgICAgICBpbnN0YW5jZS5jZVJlbG9hZChuZXdDb21wLnN0eWxlcyk7XG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuZGVsZXRlKG9sZENvbXApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLnBhcmVudCkge1xuICAgICAgICAgICAgLy8gNC4gRm9yY2UgdGhlIHBhcmVudCBpbnN0YW5jZSB0byByZS1yZW5kZXIuIFRoaXMgd2lsbCBjYXVzZSBhbGwgdXBkYXRlZFxuICAgICAgICAgICAgLy8gY29tcG9uZW50cyB0byBiZSB1bm1vdW50ZWQgYW5kIHJlLW1vdW50ZWQuIFF1ZXVlIHRoZSB1cGRhdGUgc28gdGhhdCB3ZVxuICAgICAgICAgICAgLy8gZG9uJ3QgZW5kIHVwIGZvcmNpbmcgdGhlIHNhbWUgcGFyZW50IHRvIHJlLXJlbmRlciBtdWx0aXBsZSB0aW1lcy5cbiAgICAgICAgICAgIHF1ZXVlSm9iKGluc3RhbmNlLnBhcmVudC51cGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKSB7XG4gICAgICAgICAgICAvLyByb290IGluc3RhbmNlIG1vdW50ZWQgdmlhIGNyZWF0ZUFwcCgpIGhhcyBhIHJlbG9hZCBtZXRob2RcbiAgICAgICAgICAgIGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIHJvb3QgaW5zdGFuY2UgaW5zaWRlIHRyZWUgY3JlYXRlZCB2aWEgcmF3IHJlbmRlcigpLiBGb3JjZSByZWxvYWQuXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tITVJdIFJvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gNS4gbWFrZSBzdXJlIHRvIGNsZWFudXAgZGlydHkgaG1yIGNvbXBvbmVudHMgYWZ0ZXIgdXBkYXRlXG4gICAgcXVldWVQb3N0Rmx1c2hDYigoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuZGVsZXRlKG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50RGVmKG9sZENvbXAsIG5ld0NvbXApIHtcbiAgICBleHRlbmQob2xkQ29tcCwgbmV3Q29tcCk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2xkQ29tcCkge1xuICAgICAgICBpZiAoa2V5ICE9PSAnX19maWxlJyAmJiAhKGtleSBpbiBuZXdDb21wKSkge1xuICAgICAgICAgICAgZGVsZXRlIG9sZENvbXBba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcbiAgICByZXR1cm4gKGlkLCBhcmcpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbihpZCwgYXJnKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW0hNUl0gU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIFZ1ZSBjb21wb25lbnQgaG90LXJlbG9hZC4gYCArXG4gICAgICAgICAgICAgICAgYEZ1bGwgcmVsb2FkIHJlcXVpcmVkLmApO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxubGV0IGRldnRvb2xzO1xubGV0IGJ1ZmZlciA9IFtdO1xubGV0IGRldnRvb2xzTm90SW5zdGFsbGVkID0gZmFsc2U7XG5mdW5jdGlvbiBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBlbHNlIGlmICghZGV2dG9vbHNOb3RJbnN0YWxsZWQpIHtcbiAgICAgICAgYnVmZmVyLnB1c2goeyBldmVudCwgYXJncyB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXREZXZ0b29sc0hvb2soaG9vaywgdGFyZ2V0KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBkZXZ0b29scyA9IGhvb2s7XG4gICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBidWZmZXIuZm9yRWFjaCgoeyBldmVudCwgYXJncyB9KSA9PiBkZXZ0b29scy5lbWl0KGV2ZW50LCAuLi5hcmdzKSk7XG4gICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAvLyBoYW5kbGUgbGF0ZSBkZXZ0b29scyBpbmplY3Rpb24gLSBvbmx5IGRvIHRoaXMgaWYgd2UgYXJlIGluIGFuIGFjdHVhbFxuICAgIC8vIGJyb3dzZXIgZW52aXJvbm1lbnQgdG8gYXZvaWQgdGhlIHRpbWVyIGhhbmRsZSBzdGFsbGluZyB0ZXN0IHJ1bm5lciBleGl0XG4gICAgLy8gKCM0ODE1KVxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIC8vIHNvbWUgZW52cyBtb2NrIHdpbmRvdyBidXQgbm90IGZ1bGx5XG4gICAgICAgIHdpbmRvdy5IVE1MRWxlbWVudCAmJlxuICAgICAgICAvLyBhbHNvIGV4Y2x1ZGUganNkb21cbiAgICAgICAgISgoX2IgPSAoX2EgPSB3aW5kb3cubmF2aWdhdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXNlckFnZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaW5jbHVkZXMoJ2pzZG9tJykpKSB7XG4gICAgICAgIGNvbnN0IHJlcGxheSA9ICh0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9XG4gICAgICAgICAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyB8fCBbXSk7XG4gICAgICAgIHJlcGxheS5wdXNoKChuZXdIb29rKSA9PiB7XG4gICAgICAgICAgICBzZXREZXZ0b29sc0hvb2sobmV3SG9vaywgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNsZWFyIGJ1ZmZlciBhZnRlciAzcyAtIHRoZSB1c2VyIHByb2JhYmx5IGRvZXNuJ3QgaGF2ZSBkZXZ0b29scyBpbnN0YWxsZWRcbiAgICAgICAgLy8gYXQgYWxsLCBhbmQga2VlcGluZyB0aGUgYnVmZmVyIHdpbGwgY2F1c2UgbWVtb3J5IGxlYWtzICgjNDczOClcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRldnRvb2xzKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPSBudWxsO1xuICAgICAgICAgICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMzAwMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBub24tYnJvd3NlciBlbnYsIGFzc3VtZSBub3QgaW5zdGFsbGVkXG4gICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbikge1xuICAgIGVtaXQoXCJhcHA6aW5pdFwiIC8qIERldnRvb2xzSG9va3MuQVBQX0lOSVQgKi8sIGFwcCwgdmVyc2lvbiwge1xuICAgICAgICBGcmFnbWVudCxcbiAgICAgICAgVGV4dCxcbiAgICAgICAgQ29tbWVudCxcbiAgICAgICAgU3RhdGljXG4gICAgfSk7XG59XG5mdW5jdGlvbiBkZXZ0b29sc1VubW91bnRBcHAoYXBwKSB7XG4gICAgZW1pdChcImFwcDp1bm1vdW50XCIgLyogRGV2dG9vbHNIb29rcy5BUFBfVU5NT1VOVCAqLywgYXBwKTtcbn1cbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDphZGRlZFwiIC8qIERldnRvb2xzSG9va3MuQ09NUE9ORU5UX0FEREVEICovKTtcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IFxuLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6dXBkYXRlZFwiIC8qIERldnRvb2xzSG9va3MuQ09NUE9ORU5UX1VQREFURUQgKi8pO1xuY29uc3QgX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnJlbW92ZWRcIiAvKiBEZXZ0b29sc0hvb2tzLkNPTVBPTkVOVF9SRU1PVkVEICovKTtcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCA9IChjb21wb25lbnQpID0+IHtcbiAgICBpZiAoZGV2dG9vbHMgJiZcbiAgICAgICAgdHlwZW9mIGRldnRvb2xzLmNsZWFudXBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBjb21wb25lbnQgaWYgaXQgd2Fzbid0IGJ1ZmZlcmVkXG4gICAgICAgICFkZXZ0b29scy5jbGVhbnVwQnVmZmVyKGNvbXBvbmVudCkpIHtcbiAgICAgICAgX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChjb21wb25lbnQpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soaG9vaykge1xuICAgIHJldHVybiAoY29tcG9uZW50KSA9PiB7XG4gICAgICAgIGVtaXQoaG9vaywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQudWlkLCBjb21wb25lbnQucGFyZW50ID8gY29tcG9uZW50LnBhcmVudC51aWQgOiB1bmRlZmluZWQsIGNvbXBvbmVudCk7XG4gICAgfTtcbn1cbmNvbnN0IGRldnRvb2xzUGVyZlN0YXJ0ID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6c3RhcnRcIiAvKiBEZXZ0b29sc0hvb2tzLlBFUkZPUk1BTkNFX1NUQVJUICovKTtcbmNvbnN0IGRldnRvb2xzUGVyZkVuZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXCJwZXJmOmVuZFwiIC8qIERldnRvb2xzSG9va3MuUEVSRk9STUFOQ0VfRU5EICovKTtcbmZ1bmN0aW9uIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKGhvb2spIHtcbiAgICByZXR1cm4gKGNvbXBvbmVudCwgdHlwZSwgdGltZSkgPT4ge1xuICAgICAgICBlbWl0KGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LCB0eXBlLCB0aW1lKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gZGV2dG9vbHNDb21wb25lbnRFbWl0KGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcykge1xuICAgIGVtaXQoXCJjb21wb25lbnQ6ZW1pdFwiIC8qIERldnRvb2xzSG9va3MuQ09NUE9ORU5UX0VNSVQgKi8sIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LCBldmVudCwgcGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gZW1pdCQxKGluc3RhbmNlLCBldmVudCwgLi4ucmF3QXJncykge1xuICAgIGlmIChpbnN0YW5jZS5pc1VubW91bnRlZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHMgfHwgRU1QVFlfT0JKO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY29uc3QgeyBlbWl0c09wdGlvbnMsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10gfSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAoZW1pdHNPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIShldmVudCBpbiBlbWl0c09wdGlvbnMpICYmXG4gICAgICAgICAgICAgICAgIShmYWxzZSApKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wc09wdGlvbnMgfHwgISh0b0hhbmRsZXJLZXkoZXZlbnQpIGluIHByb3BzT3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGVtaXR0ZWQgZXZlbnQgXCIke2V2ZW50fVwiIGJ1dCBpdCBpcyBuZWl0aGVyIGRlY2xhcmVkIGluIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHRoZSBlbWl0cyBvcHRpb24gbm9yIGFzIGFuIFwiJHt0b0hhbmRsZXJLZXkoZXZlbnQpfVwiIHByb3AuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZW1pdHNPcHRpb25zW2V2ZW50XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IoLi4ucmF3QXJncyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCBldmVudCBhcmd1bWVudHM6IGV2ZW50IHZhbGlkYXRpb24gZmFpbGVkIGZvciBldmVudCBcIiR7ZXZlbnR9XCIuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGFyZ3MgPSByYXdBcmdzO1xuICAgIGNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IGV2ZW50LnN0YXJ0c1dpdGgoJ3VwZGF0ZTonKTtcbiAgICAvLyBmb3Igdi1tb2RlbCB1cGRhdGU6eHh4IGV2ZW50cywgYXBwbHkgbW9kaWZpZXJzIG9uIGFyZ3NcbiAgICBjb25zdCBtb2RlbEFyZyA9IGlzTW9kZWxMaXN0ZW5lciAmJiBldmVudC5zbGljZSg3KTtcbiAgICBpZiAobW9kZWxBcmcgJiYgbW9kZWxBcmcgaW4gcHJvcHMpIHtcbiAgICAgICAgY29uc3QgbW9kaWZpZXJzS2V5ID0gYCR7bW9kZWxBcmcgPT09ICdtb2RlbFZhbHVlJyA/ICdtb2RlbCcgOiBtb2RlbEFyZ31Nb2RpZmllcnNgO1xuICAgICAgICBjb25zdCB7IG51bWJlciwgdHJpbSB9ID0gcHJvcHNbbW9kaWZpZXJzS2V5XSB8fCBFTVBUWV9PQko7XG4gICAgICAgIGlmICh0cmltKSB7XG4gICAgICAgICAgICBhcmdzID0gcmF3QXJncy5tYXAoYSA9PiAoaXNTdHJpbmcoYSkgPyBhLnRyaW0oKSA6IGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyKSB7XG4gICAgICAgICAgICBhcmdzID0gcmF3QXJncy5tYXAodG9OdW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xuICAgIH1cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiBwcm9wc1t0b0hhbmRsZXJLZXkobG93ZXJDYXNlRXZlbnQpXSkge1xuICAgICAgICAgICAgd2FybihgRXZlbnQgXCIke2xvd2VyQ2FzZUV2ZW50fVwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IGAgK1xuICAgICAgICAgICAgICAgIGAke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBgICtcbiAgICAgICAgICAgICAgICBgTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgYCArXG4gICAgICAgICAgICAgICAgYHYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBgICtcbiAgICAgICAgICAgICAgICBgWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShldmVudCl9XCIgaW5zdGVhZCBvZiBcIiR7ZXZlbnR9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGhhbmRsZXJOYW1lO1xuICAgIGxldCBoYW5kbGVyID0gcHJvcHNbKGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGV2ZW50KSldIHx8XG4gICAgICAgIC8vIGFsc28gdHJ5IGNhbWVsQ2FzZSBldmVudCBoYW5kbGVyICgjMjI0OSlcbiAgICAgICAgcHJvcHNbKGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGNhbWVsaXplKGV2ZW50KSkpXTtcbiAgICAvLyBmb3Igdi1tb2RlbCB1cGRhdGU6eHh4IGV2ZW50cywgYWxzbyB0cmlnZ2VyIGtlYmFiLWNhc2UgZXF1aXZhbGVudFxuICAgIC8vIGZvciBwcm9wcyBwYXNzZWQgdmlhIGtlYmFiLWNhc2VcbiAgICBpZiAoIWhhbmRsZXIgJiYgaXNNb2RlbExpc3RlbmVyKSB7XG4gICAgICAgIGhhbmRsZXIgPSBwcm9wc1soaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoaHlwaGVuYXRlKGV2ZW50KSkpXTtcbiAgICB9XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaGFuZGxlciwgaW5zdGFuY2UsIDYgLyogRXJyb3JDb2Rlcy5DT01QT05FTlRfRVZFTlRfSEFORExFUiAqLywgYXJncyk7XG4gICAgfVxuICAgIGNvbnN0IG9uY2VIYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWUgKyBgT25jZWBdO1xuICAgIGlmIChvbmNlSGFuZGxlcikge1xuICAgICAgICBpZiAoIWluc3RhbmNlLmVtaXR0ZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmVtaXR0ZWQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLmVtaXR0ZWRbaGFuZGxlck5hbWVdID0gdHJ1ZTtcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcob25jZUhhbmRsZXIsIGluc3RhbmNlLCA2IC8qIEVycm9yQ29kZXMuQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi8sIGFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcbiAgICBjb25zdCBjYWNoZSA9IGFwcENvbnRleHQuZW1pdHNDYWNoZTtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XG4gICAgaWYgKGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJhdyA9IGNvbXAuZW1pdHM7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXG4gICAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xuICAgICAgICBjb25zdCBleHRlbmRFbWl0cyA9IChyYXcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGcm9tRXh0ZW5kID0gbm9ybWFsaXplRW1pdHNPcHRpb25zKHJhdywgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZEZyb21FeHRlbmQpIHtcbiAgICAgICAgICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgbm9ybWFsaXplZEZyb21FeHRlbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcC5leHRlbmRzKSB7XG4gICAgICAgICAgICBleHRlbmRFbWl0cyhjb21wLmV4dGVuZHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wLm1peGlucykge1xuICAgICAgICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICAgICAgICBjYWNoZS5zZXQoY29tcCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICAgICAgcmF3LmZvckVhY2goa2V5ID0+IChub3JtYWxpemVkW2tleV0gPSBudWxsKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcmF3KTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICAgIGNhY2hlLnNldChjb21wLCBub3JtYWxpemVkKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG4vLyBDaGVjayBpZiBhbiBpbmNvbWluZyBwcm9wIGtleSBpcyBhIGRlY2xhcmVkIGVtaXQgZXZlbnQgbGlzdGVuZXIuXG4vLyBlLmcuIFdpdGggYGVtaXRzOiB7IGNsaWNrOiBudWxsIH1gLCBwcm9wcyBuYW1lZCBgb25DbGlja2AgYW5kIGBvbmNsaWNrYCBhcmVcbi8vIGJvdGggY29uc2lkZXJlZCBtYXRjaGVkIGxpc3RlbmVycy5cbmZ1bmN0aW9uIGlzRW1pdExpc3RlbmVyKG9wdGlvbnMsIGtleSkge1xuICAgIGlmICghb3B0aW9ucyB8fCAhaXNPbihrZXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAga2V5ID0ga2V5LnNsaWNlKDIpLnJlcGxhY2UoL09uY2UkLywgJycpO1xuICAgIHJldHVybiAoaGFzT3duKG9wdGlvbnMsIGtleVswXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDEpKSB8fFxuICAgICAgICBoYXNPd24ob3B0aW9ucywgaHlwaGVuYXRlKGtleSkpIHx8XG4gICAgICAgIGhhc093bihvcHRpb25zLCBrZXkpKTtcbn1cblxuLyoqXG4gKiBtYXJrIHRoZSBjdXJyZW50IHJlbmRlcmluZyBpbnN0YW5jZSBmb3IgYXNzZXQgcmVzb2x1dGlvbiAoZS5nLlxuICogcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSkgZHVyaW5nIHJlbmRlclxuICovXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG4vKipcbiAqIE5vdGU6IHJlbmRlcmluZyBjYWxscyBtYXliZSBuZXN0ZWQuIFRoZSBmdW5jdGlvbiByZXR1cm5zIHRoZSBwYXJlbnQgcmVuZGVyaW5nXG4gKiBpbnN0YW5jZSBpZiBwcmVzZW50LCB3aGljaCBzaG91bGQgYmUgcmVzdG9yZWQgYWZ0ZXIgdGhlIHJlbmRlciBpcyBkb25lOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwcmV2ID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGkpXG4gKiAvLyAuLi5yZW5kZXJcbiAqIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IHByZXYgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgY3VycmVudFNjb3BlSWQgPSAoaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWQpIHx8IG51bGw7XG4gICAgcmV0dXJuIHByZXY7XG59XG4vKipcbiAqIFNldCBzY29wZSBpZCB3aGVuIGNyZWF0aW5nIGhvaXN0ZWQgdm5vZGVzLlxuICogQHByaXZhdGUgY29tcGlsZXIgaGVscGVyXG4gKi9cbmZ1bmN0aW9uIHB1c2hTY29wZUlkKGlkKSB7XG4gICAgY3VycmVudFNjb3BlSWQgPSBpZDtcbn1cbi8qKlxuICogVGVjaG5pY2FsbHkgd2Ugbm8gbG9uZ2VyIG5lZWQgdGhpcyBhZnRlciAzLjAuOCBidXQgd2UgbmVlZCB0byBrZWVwIHRoZSBzYW1lXG4gKiBBUEkgZm9yIGJhY2t3YXJkcyBjb21wYXQgdy8gY29kZSBnZW5lcmF0ZWQgYnkgY29tcGlsZXJzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcbiAgICBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG59XG4vKipcbiAqIE9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHdpdGhTY29wZUlkID0gKF9pZCkgPT4gd2l0aEN0eDtcbi8qKlxuICogV3JhcCBhIHNsb3QgZnVuY3Rpb24gdG8gbWVtb2l6ZSBjdXJyZW50IHJlbmRlcmluZyBpbnN0YW5jZVxuICogQHByaXZhdGUgY29tcGlsZXIgaGVscGVyXG4gKi9cbmZ1bmN0aW9uIHdpdGhDdHgoZm4sIGN0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgaXNOb25TY29wZWRTbG90IC8vIGZhbHNlIG9ubHlcbikge1xuICAgIGlmICghY3R4KVxuICAgICAgICByZXR1cm4gZm47XG4gICAgLy8gYWxyZWFkeSBub3JtYWxpemVkXG4gICAgaWYgKGZuLl9uKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyRm5XaXRoQ29udGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIC8vIElmIGEgdXNlciBjYWxscyBhIGNvbXBpbGVkIHNsb3QgaW5zaWRlIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoIzE3NDUpLCBpdFxuICAgICAgICAvLyBjYW4gbWVzcyB1cCBibG9jayB0cmFja2luZywgc28gYnkgZGVmYXVsdCB3ZSBkaXNhYmxlIGJsb2NrIHRyYWNraW5nIGFuZFxuICAgICAgICAvLyBmb3JjZSBiYWlsIG91dCB3aGVuIGludm9raW5nIGEgY29tcGlsZWQgc2xvdCAoaW5kaWNhdGVkIGJ5IHRoZSAuX2QgZmxhZykuXG4gICAgICAgIC8vIFRoaXMgaXNuJ3QgbmVjZXNzYXJ5IGlmIHJlbmRlcmluZyBhIGNvbXBpbGVkIGA8c2xvdD5gLCBzbyB3ZSBmbGlwIHRoZVxuICAgICAgICAvLyAuX2QgZmxhZyBvZmYgd2hlbiBpbnZva2luZyB0aGUgd3JhcHBlZCBmbiBpbnNpZGUgYHJlbmRlclNsb3RgLlxuICAgICAgICBpZiAocmVuZGVyRm5XaXRoQ29udGV4dC5fZCkge1xuICAgICAgICAgICAgc2V0QmxvY2tUcmFja2luZygtMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldkluc3RhbmNlID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGN0eCk7XG4gICAgICAgIGxldCByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXMgPSBmbiguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2SW5zdGFuY2UpO1xuICAgICAgICAgICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgICAgICAgICAgICBzZXRCbG9ja1RyYWNraW5nKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoY3R4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgLy8gbWFyayBub3JtYWxpemVkIHRvIGF2b2lkIGR1cGxpY2F0ZWQgd3JhcHBpbmdcbiAgICByZW5kZXJGbldpdGhDb250ZXh0Ll9uID0gdHJ1ZTtcbiAgICAvLyBtYXJrIHRoaXMgYXMgY29tcGlsZWQgYnkgZGVmYXVsdFxuICAgIC8vIHRoaXMgaXMgdXNlZCBpbiB2bm9kZS50cyAtPiBub3JtYWxpemVDaGlsZHJlbigpIHRvIHNldCB0aGUgc2xvdFxuICAgIC8vIHJlbmRlcmluZyBmbGFnLlxuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX2MgPSB0cnVlO1xuICAgIC8vIGRpc2FibGUgYmxvY2sgdHJhY2tpbmcgYnkgZGVmYXVsdFxuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX2QgPSB0cnVlO1xuICAgIHJldHVybiByZW5kZXJGbldpdGhDb250ZXh0O1xufVxuXG4vKipcbiAqIGRldiBvbmx5IGZsYWcgdG8gdHJhY2sgd2hldGhlciAkYXR0cnMgd2FzIHVzZWQgZHVyaW5nIHJlbmRlci5cbiAqIElmICRhdHRycyB3YXMgdXNlZCBkdXJpbmcgcmVuZGVyIHRoZW4gdGhlIHdhcm5pbmcgZm9yIGZhaWxlZCBhdHRyc1xuICogZmFsbHRocm91Z2ggY2FuIGJlIHN1cHByZXNzZWQuXG4gKi9cbmxldCBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XG5mdW5jdGlvbiBtYXJrQXR0cnNBY2Nlc3NlZCgpIHtcbiAgICBhY2Nlc3NlZEF0dHJzID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpIHtcbiAgICBjb25zdCB7IHR5cGU6IENvbXBvbmVudCwgdm5vZGUsIHByb3h5LCB3aXRoUHJveHksIHByb3BzLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdLCBzbG90cywgYXR0cnMsIGVtaXQsIHJlbmRlciwgcmVuZGVyQ2FjaGUsIGRhdGEsIHNldHVwU3RhdGUsIGN0eCwgaW5oZXJpdEF0dHJzIH0gPSBpbnN0YW5jZTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCBmYWxsdGhyb3VnaEF0dHJzO1xuICAgIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgLy8gd2l0aFByb3h5IGlzIGEgcHJveHkgd2l0aCBhIGRpZmZlcmVudCBgaGFzYCB0cmFwIG9ubHkgZm9yXG4gICAgICAgICAgICAvLyBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrLlxuICAgICAgICAgICAgY29uc3QgcHJveHlUb1VzZSA9IHdpdGhQcm94eSB8fCBwcm94eTtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5jYWxsKHByb3h5VG9Vc2UsIHByb3h5VG9Vc2UsIHJlbmRlckNhY2hlLCBwcm9wcywgc2V0dXBTdGF0ZSwgZGF0YSwgY3R4KSk7XG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gYXR0cnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsXG4gICAgICAgICAgICBjb25zdCByZW5kZXIgPSBDb21wb25lbnQ7XG4gICAgICAgICAgICAvLyBpbiBkZXYsIG1hcmsgYXR0cnMgYWNjZXNzZWQgaWYgb3B0aW9uYWwgcHJvcHMgKGF0dHJzID09PSBwcm9wcylcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYXR0cnMgPT09IHByb3BzKSB7XG4gICAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgPyByZW5kZXIocHJvcHMsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzbG90cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgYXR0cnMsIHNsb3RzLCBlbWl0IH0pXG4gICAgICAgICAgICAgICAgOiByZW5kZXIocHJvcHMsIG51bGwgLyogd2Uga25vdyBpdCBkb2Vzbid0IG5lZWQgaXQgKi8pKTtcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBDb21wb25lbnQucHJvcHNcbiAgICAgICAgICAgICAgICA/IGF0dHJzXG4gICAgICAgICAgICAgICAgOiBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2goYXR0cnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgYmxvY2tTdGFjay5sZW5ndGggPSAwO1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxIC8qIEVycm9yQ29kZXMuUkVOREVSX0ZVTkNUSU9OICovKTtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gICAgfVxuICAgIC8vIGF0dHIgbWVyZ2luZ1xuICAgIC8vIGluIGRldiBtb2RlLCBjb21tZW50cyBhcmUgcHJlc2VydmVkLCBhbmQgaXQncyBwb3NzaWJsZSBmb3IgYSB0ZW1wbGF0ZVxuICAgIC8vIHRvIGhhdmUgY29tbWVudHMgYWxvbmcgc2lkZSB0aGUgcm9vdCBlbGVtZW50IHdoaWNoIG1ha2VzIGl0IGEgZnJhZ21lbnRcbiAgICBsZXQgcm9vdCA9IHJlc3VsdDtcbiAgICBsZXQgc2V0Um9vdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgIHJlc3VsdC5wYXRjaEZsYWcgPiAwICYmXG4gICAgICAgIHJlc3VsdC5wYXRjaEZsYWcgJiAyMDQ4IC8qIFBhdGNoRmxhZ3MuREVWX1JPT1RfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgW3Jvb3QsIHNldFJvb3RdID0gZ2V0Q2hpbGRSb290KHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChmYWxsdGhyb3VnaEF0dHJzICYmIGluaGVyaXRBdHRycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZhbGx0aHJvdWdoQXR0cnMpO1xuICAgICAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gcm9vdDtcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgKDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovIHwgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNPcHRpb25zICYmIGtleXMuc29tZShpc01vZGVsTGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGEgdi1tb2RlbCBsaXN0ZW5lciAob25VcGRhdGU6eHh4KSBoYXMgYSBjb3JyZXNwb25kaW5nIGRlY2xhcmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb3AsIGl0IGluZGljYXRlcyB0aGlzIGNvbXBvbmVudCBleHBlY3RzIHRvIGhhbmRsZSB2LW1vZGVsIGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgbm90IGZhbGx0aHJvdWdoLlxuICAgICAgICAgICAgICAgICAgICAvLyByZWxhdGVkOiAjMTU0MywgIzE2NDMsICMxOTg5XG4gICAgICAgICAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBmaWx0ZXJNb2RlbExpc3RlbmVycyhmYWxsdGhyb3VnaEF0dHJzLCBwcm9wc09wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBmYWxsdGhyb3VnaEF0dHJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhYWNjZXNzZWRBdHRycyAmJiByb290LnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudEF0dHJzID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgZXh0cmFBdHRycyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGFsbEF0dHJzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdi1tb2RlbCBoYW5kbGVycyB3aGVuIHRoZXkgZmFpbCB0byBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBgb25gLCBsb3dlcmNhc2UgZmlyc3QgbGV0dGVyIHRvIHJlZmxlY3QgZXZlbnQgY2FzaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWNjdXJhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50QXR0cnMucHVzaChrZXlbMl0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXh0cmFBdHRycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tcHJvcHMgYXR0cmlidXRlcyAoYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtleHRyYUF0dHJzLmpvaW4oJywgJyl9KSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEV4dHJhbmVvdXMgbm9uLWVtaXRzIGV2ZW50IGxpc3RlbmVycyAoYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtldmVudEF0dHJzLmpvaW4oJywgJyl9KSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgdGhlIGxpc3RlbmVyIGlzIGludGVuZGVkIHRvIGJlIGEgY29tcG9uZW50IGN1c3RvbSBldmVudCBsaXN0ZW5lciBvbmx5LCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBpbmhlcml0IGRpcmVjdGl2ZXNcbiAgICBpZiAodm5vZGUuZGlycykge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XG4gICAgICAgICAgICB3YXJuKGBSdW50aW1lIGRpcmVjdGl2ZSB1c2VkIG9uIGNvbXBvbmVudCB3aXRoIG5vbi1lbGVtZW50IHJvb3Qgbm9kZS4gYCArXG4gICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmVzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGludGVuZGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNsb25lIGJlZm9yZSBtdXRhdGluZyBzaW5jZSB0aGUgcm9vdCBtYXkgYmUgYSBob2lzdGVkIHZub2RlXG4gICAgICAgIHJvb3QgPSBjbG9uZVZOb2RlKHJvb3QpO1xuICAgICAgICByb290LmRpcnMgPSByb290LmRpcnMgPyByb290LmRpcnMuY29uY2F0KHZub2RlLmRpcnMpIDogdm5vZGUuZGlycztcbiAgICB9XG4gICAgLy8gaW5oZXJpdCB0cmFuc2l0aW9uIGRhdGFcbiAgICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgaW5zaWRlIDxUcmFuc2l0aW9uPiByZW5kZXJzIG5vbi1lbGVtZW50IHJvb3Qgbm9kZSBgICtcbiAgICAgICAgICAgICAgICBgdGhhdCBjYW5ub3QgYmUgYW5pbWF0ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdC50cmFuc2l0aW9uID0gdm5vZGUudHJhbnNpdGlvbjtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzZXRSb290KSB7XG4gICAgICAgIHNldFJvb3Qocm9vdCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSByb290O1xuICAgIH1cbiAgICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqIEluIGRldiBtb2RlLCB0ZW1wbGF0ZSByb290IGxldmVsIGNvbW1lbnRzIGFyZSByZW5kZXJlZCwgd2hpY2ggdHVybnMgdGhlXG4gKiB0ZW1wbGF0ZSBpbnRvIGEgZnJhZ21lbnQgcm9vdCwgYnV0IHdlIG5lZWQgdG8gbG9jYXRlIHRoZSBzaW5nbGUgZWxlbWVudFxuICogcm9vdCBmb3IgYXR0cnMgYW5kIHNjb3BlIGlkIHByb2Nlc3NpbmcuXG4gKi9cbmNvbnN0IGdldENoaWxkUm9vdCA9ICh2bm9kZSkgPT4ge1xuICAgIGNvbnN0IHJhd0NoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XG4gICAgY29uc3QgZHluYW1pY0NoaWxkcmVuID0gdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgIGNvbnN0IGNoaWxkUm9vdCA9IGZpbHRlclNpbmdsZVJvb3QocmF3Q2hpbGRyZW4pO1xuICAgIGlmICghY2hpbGRSb290KSB7XG4gICAgICAgIHJldHVybiBbdm5vZGUsIHVuZGVmaW5lZF07XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gcmF3Q2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpO1xuICAgIGNvbnN0IGR5bmFtaWNJbmRleCA9IGR5bmFtaWNDaGlsZHJlbiA/IGR5bmFtaWNDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCkgOiAtMTtcbiAgICBjb25zdCBzZXRSb290ID0gKHVwZGF0ZWRSb290KSA9PiB7XG4gICAgICAgIHJhd0NoaWxkcmVuW2luZGV4XSA9IHVwZGF0ZWRSb290O1xuICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoZHluYW1pY0luZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW5bZHluYW1pY0luZGV4XSA9IHVwZGF0ZWRSb290O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodXBkYXRlZFJvb3QucGF0Y2hGbGFnID4gMCkge1xuICAgICAgICAgICAgICAgIHZub2RlLmR5bmFtaWNDaGlsZHJlbiA9IFsuLi5keW5hbWljQ2hpbGRyZW4sIHVwZGF0ZWRSb290XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFtub3JtYWxpemVWTm9kZShjaGlsZFJvb3QpLCBzZXRSb290XTtcbn07XG5mdW5jdGlvbiBmaWx0ZXJTaW5nbGVSb290KGNoaWxkcmVuKSB7XG4gICAgbGV0IHNpbmdsZVJvb3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoaXNWTm9kZShjaGlsZCkpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSB1c2VyIGNvbW1lbnRcbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlICE9PSBDb21tZW50IHx8IGNoaWxkLmNoaWxkcmVuID09PSAndi1pZicpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlUm9vdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgbW9yZSB0aGFuIDEgbm9uLWNvbW1lbnQgY2hpbGQsIHJldHVybiBub3dcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2luZ2xlUm9vdCA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2luZ2xlUm9vdDtcbn1cbmNvbnN0IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCA9IChhdHRycykgPT4ge1xuICAgIGxldCByZXM7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJyB8fCBrZXkgPT09ICdzdHlsZScgfHwgaXNPbihrZXkpKSB7XG4gICAgICAgICAgICAocmVzIHx8IChyZXMgPSB7fSkpW2tleV0gPSBhdHRyc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuY29uc3QgZmlsdGVyTW9kZWxMaXN0ZW5lcnMgPSAoYXR0cnMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcbiAgICAgICAgICAgIHJlc1trZXldID0gYXR0cnNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGlzRWxlbWVudFJvb3QgPSAodm5vZGUpID0+IHtcbiAgICByZXR1cm4gKHZub2RlLnNoYXBlRmxhZyAmICg2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovIHwgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8pIHx8XG4gICAgICAgIHZub2RlLnR5cGUgPT09IENvbW1lbnQgLy8gcG90ZW50aWFsIHYtaWYgYnJhbmNoIHN3aXRjaFxuICAgICk7XG59O1xuZnVuY3Rpb24gc2hvdWxkVXBkYXRlQ29tcG9uZW50KHByZXZWTm9kZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpIHtcbiAgICBjb25zdCB7IHByb3BzOiBwcmV2UHJvcHMsIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sIGNvbXBvbmVudCB9ID0gcHJldlZOb2RlO1xuICAgIGNvbnN0IHsgcHJvcHM6IG5leHRQcm9wcywgY2hpbGRyZW46IG5leHRDaGlsZHJlbiwgcGF0Y2hGbGFnIH0gPSBuZXh0Vk5vZGU7XG4gICAgY29uc3QgZW1pdHMgPSBjb21wb25lbnQuZW1pdHNPcHRpb25zO1xuICAgIC8vIFBhcmVudCBjb21wb25lbnQncyByZW5kZXIgZnVuY3Rpb24gd2FzIGhvdC11cGRhdGVkLiBTaW5jZSB0aGlzIG1heSBoYXZlXG4gICAgLy8gY2F1c2VkIHRoZSBjaGlsZCBjb21wb25lbnQncyBzbG90cyBjb250ZW50IHRvIGhhdmUgY2hhbmdlZCwgd2UgbmVlZCB0b1xuICAgIC8vIGZvcmNlIHRoZSBjaGlsZCB0byB1cGRhdGUgYXMgd2VsbC5cbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSAmJiBpc0htclVwZGF0aW5nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBmb3JjZSBjaGlsZCB1cGRhdGUgZm9yIHJ1bnRpbWUgZGlyZWN0aXZlIG9yIHRyYW5zaXRpb24gb24gY29tcG9uZW50IHZub2RlLlxuICAgIGlmIChuZXh0Vk5vZGUuZGlycyB8fCBuZXh0Vk5vZGUudHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9wdGltaXplZCAmJiBwYXRjaEZsYWcgPj0gMCkge1xuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTAyNCAvKiBQYXRjaEZsYWdzLkRZTkFNSUNfU0xPVFMgKi8pIHtcbiAgICAgICAgICAgIC8vIHNsb3QgY29udGVudCB0aGF0IHJlZmVyZW5jZXMgdmFsdWVzIHRoYXQgbWlnaHQgaGF2ZSBjaGFuZ2VkLFxuICAgICAgICAgICAgLy8gZS5nLiBpbiBhIHYtZm9yXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovKSB7XG4gICAgICAgICAgICBpZiAoIXByZXZQcm9wcykge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIHRoaXMgZmxhZyBpbmRpY2F0ZXMgcHJvcHMgYXJlIGFsd2F5cyBub24tbnVsbFxuICAgICAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhdGNoRmxhZyAmIDggLyogUGF0Y2hGbGFncy5QUk9QUyAqLykge1xuICAgICAgICAgICAgY29uc3QgZHluYW1pY1Byb3BzID0gbmV4dFZOb2RlLmR5bmFtaWNQcm9wcztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Byb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZHluYW1pY1Byb3BzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiZcbiAgICAgICAgICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gdGhpcyBwYXRoIGlzIG9ubHkgdGFrZW4gYnkgbWFudWFsbHkgd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zXG4gICAgICAgIC8vIHNvIHByZXNlbmNlIG9mIGFueSBjaGlsZHJlbiBsZWFkcyB0byBhIGZvcmNlZCB1cGRhdGVcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmICghbmV4dENoaWxkcmVuIHx8ICFuZXh0Q2hpbGRyZW4uJHN0YWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2UHJvcHMgPT09IG5leHRQcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHJldlByb3BzKSB7XG4gICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0c09wdGlvbnMpIHtcbiAgICBjb25zdCBuZXh0S2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XG4gICAgaWYgKG5leHRLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJldlByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gbmV4dEtleXNbaV07XG4gICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiZcbiAgICAgICAgICAgICFpc0VtaXRMaXN0ZW5lcihlbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUhPQ0hvc3RFbCh7IHZub2RlLCBwYXJlbnQgfSwgZWwgLy8gSG9zdE5vZGVcbikge1xuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XG4gICAgICAgICh2bm9kZSA9IHBhcmVudC52bm9kZSkuZWwgPSBlbDtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG59XG5cbmNvbnN0IGlzU3VzcGVuc2UgPSAodHlwZSkgPT4gdHlwZS5fX2lzU3VzcGVuc2U7XG4vLyBTdXNwZW5zZSBleHBvc2VzIGEgY29tcG9uZW50LWxpa2UgQVBJLCBhbmQgaXMgdHJlYXRlZCBsaWtlIGEgY29tcG9uZW50XG4vLyBpbiB0aGUgY29tcGlsZXIsIGJ1dCBpbnRlcm5hbGx5IGl0J3MgYSBzcGVjaWFsIGJ1aWx0LWluIHR5cGUgdGhhdCBob29rc1xuLy8gZGlyZWN0bHkgaW50byB0aGUgcmVuZGVyZXIuXG5jb25zdCBTdXNwZW5zZUltcGwgPSB7XG4gICAgbmFtZTogJ1N1c3BlbnNlJyxcbiAgICAvLyBJbiBvcmRlciB0byBtYWtlIFN1c3BlbnNlIHRyZWUtc2hha2FibGUsIHdlIG5lZWQgdG8gYXZvaWQgaW1wb3J0aW5nIGl0XG4gICAgLy8gZGlyZWN0bHkgaW4gdGhlIHJlbmRlcmVyLiBUaGUgcmVuZGVyZXIgY2hlY2tzIGZvciB0aGUgX19pc1N1c3BlbnNlIGZsYWdcbiAgICAvLyBvbiBhIHZub2RlJ3MgdHlwZSBhbmQgY2FsbHMgdGhlIGBwcm9jZXNzYCBtZXRob2QsIHBhc3NpbmcgaW4gcmVuZGVyZXJcbiAgICAvLyBpbnRlcm5hbHMuXG4gICAgX19pc1N1c3BlbnNlOiB0cnVlLFxuICAgIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBcbiAgICAvLyBwbGF0Zm9ybS1zcGVjaWZpYyBpbXBsIHBhc3NlZCBmcm9tIHJlbmRlcmVyXG4gICAgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIG1vdW50U3VzcGVuc2UobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaHlkcmF0ZTogaHlkcmF0ZVN1c3BlbnNlLFxuICAgIGNyZWF0ZTogY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW5cbn07XG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxuY29uc3QgU3VzcGVuc2UgPSAoU3VzcGVuc2VJbXBsXG4gICAgKTtcbmZ1bmN0aW9uIHRyaWdnZXJFdmVudCh2bm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wc1tuYW1lXTtcbiAgICBpZiAoaXNGdW5jdGlvbihldmVudExpc3RlbmVyKSkge1xuICAgICAgICBldmVudExpc3RlbmVyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICBjb25zdCB7IHA6IHBhdGNoLCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gICAgY29uc3QgaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSk7XG4gICAgLy8gc3RhcnQgbW91bnRpbmcgdGhlIGNvbnRlbnQgc3VidHJlZSBpbiBhbiBvZmYtZG9tIGNvbnRhaW5lclxuICAgIHBhdGNoKG51bGwsIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50KSwgaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAvLyBub3cgY2hlY2sgaWYgd2UgaGF2ZSBlbmNvdW50ZXJlZCBhbnkgYXN5bmMgZGVwc1xuICAgIGlmIChzdXNwZW5zZS5kZXBzID4gMCkge1xuICAgICAgICAvLyBoYXMgYXN5bmNcbiAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxuICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvblBlbmRpbmcnKTtcbiAgICAgICAgdHJpZ2dlckV2ZW50KHZub2RlLCAnb25GYWxsYmFjaycpO1xuICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxuICAgICAgICBwYXRjaChudWxsLCB2bm9kZS5zc0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzKTtcbiAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCB2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFN1c3BlbnNlIGhhcyBubyBhc3luYyBkZXBzLiBKdXN0IHJlc29sdmUuXG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7IHA6IHBhdGNoLCB1bTogdW5tb3VudCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSkge1xuICAgIGNvbnN0IHN1c3BlbnNlID0gKG4yLnN1c3BlbnNlID0gbjEuc3VzcGVuc2UpO1xuICAgIHN1c3BlbnNlLnZub2RlID0gbjI7XG4gICAgbjIuZWwgPSBuMS5lbDtcbiAgICBjb25zdCBuZXdCcmFuY2ggPSBuMi5zc0NvbnRlbnQ7XG4gICAgY29uc3QgbmV3RmFsbGJhY2sgPSBuMi5zc0ZhbGxiYWNrO1xuICAgIGNvbnN0IHsgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBpc0luRmFsbGJhY2ssIGlzSHlkcmF0aW5nIH0gPSBzdXNwZW5zZTtcbiAgICBpZiAocGVuZGluZ0JyYW5jaCkge1xuICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xuICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgcGVuZGluZ0JyYW5jaCkpIHtcbiAgICAgICAgICAgIC8vIHNhbWUgcm9vdCB0eXBlIGJ1dCBjb250ZW50IG1heSBoYXZlIGNoYW5nZWQuXG4gICAgICAgICAgICBwYXRjaChwZW5kaW5nQnJhbmNoLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0luRmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB0b2dnbGVkIGJlZm9yZSBwZW5kaW5nIHRyZWUgaXMgcmVzb2x2ZWRcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCsrO1xuICAgICAgICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdG9nZ2xlZCBiZWZvcmUgaHlkcmF0aW9uIGlzIGZpbmlzaGVkLCB0aGUgY3VycmVudCBET00gdHJlZSBpc1xuICAgICAgICAgICAgICAgIC8vIG5vIGxvbmdlciB2YWxpZC4gc2V0IGl0IGFzIHRoZSBhY3RpdmUgYnJhbmNoIHNvIGl0IHdpbGwgYmUgdW5tb3VudGVkXG4gICAgICAgICAgICAgICAgLy8gd2hlbiByZXNvbHZlZFxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gcGVuZGluZ0JyYW5jaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVubW91bnQocGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgcGVuZGluZyBJRC4gdGhpcyBpcyB1c2VkIHRvIGludmFsaWRhdGUgYXN5bmMgY2FsbGJhY2tzXG4gICAgICAgICAgICAvLyByZXNldCBzdXNwZW5zZSBzdGF0ZVxuICAgICAgICAgICAgc3VzcGVuc2UuZGVwcyA9IDA7XG4gICAgICAgICAgICAvLyBkaXNjYXJkIGVmZmVjdHMgZnJvbSBwZW5kaW5nIGJyYW5jaFxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgLy8gZGlzY2FyZCBwcmV2aW91cyBjb250YWluZXJcbiAgICAgICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaWYgKGlzSW5GYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgaW4gZmFsbGJhY2sgc3RhdGVcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3RmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XG4gICAgICAgICAgICAgICAgLy8gdG9nZ2xlZCBcImJhY2tcIiB0byBjdXJyZW50IGFjdGl2ZSBicmFuY2hcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgcmVzb2x2ZVxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2hlZCB0byBhIDNyZCBicmFuY2hcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgYWN0aXZlQnJhbmNoKSkge1xuICAgICAgICAgICAgLy8gcm9vdCBkaWQgbm90IGNoYW5nZSwganVzdCBub3JtYWwgcGF0Y2hcbiAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3QnJhbmNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJvb3Qgbm9kZSB0b2dnbGVkXG4gICAgICAgICAgICAvLyBpbnZva2UgQHBlbmRpbmcgZXZlbnRcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChuMiwgJ29uUGVuZGluZycpO1xuICAgICAgICAgICAgLy8gbW91bnQgcGVuZGluZyBicmFuY2ggaW4gb2ZmLWRvbSBjb250YWluZXJcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgICAgICAgIC8vIGluY29taW5nIGJyYW5jaCBoYXMgbm8gYXN5bmMgZGVwcywgcmVzb2x2ZSBub3cuXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0aW1lb3V0LCBwZW5kaW5nSWQgfSA9IHN1c3BlbnNlO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nSWQgPT09IHBlbmRpbmdJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudCwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBpc0h5ZHJhdGluZyA9IGZhbHNlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZmFsc2UgJiYgIWhhc1dhcm5lZCkge1xuICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgICAvLyBAdHMtaWdub3JlIGBjb25zb2xlLmluZm9gIGNhbm5vdCBiZSBudWxsIGVycm9yXG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKGA8U3VzcGVuc2U+IGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIGFuZCBpdHMgQVBJIHdpbGwgbGlrZWx5IGNoYW5nZS5gKTtcbiAgICB9XG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IHVubW91bnQsIG46IG5leHQsIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICAgIGNvbnN0IHRpbWVvdXQgPSB0b051bWJlcih2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50aW1lb3V0KTtcbiAgICBjb25zdCBzdXNwZW5zZSA9IHtcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBpc1NWRyxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBoaWRkZW5Db250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgZGVwczogMCxcbiAgICAgICAgcGVuZGluZ0lkOiAwLFxuICAgICAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogLTEsXG4gICAgICAgIGFjdGl2ZUJyYW5jaDogbnVsbCxcbiAgICAgICAgcGVuZGluZ0JyYW5jaDogbnVsbCxcbiAgICAgICAgaXNJbkZhbGxiYWNrOiB0cnVlLFxuICAgICAgICBpc0h5ZHJhdGluZyxcbiAgICAgICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgcmVzb2x2ZShyZXN1bWUgPSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCB3aXRob3V0IGEgcGVuZGluZyBicmFuY2guYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgb24gYW4gYWxyZWFkeSB1bm1vdW50ZWQgc3VzcGVuc2UgYm91bmRhcnkuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBwZW5kaW5nSWQsIGVmZmVjdHMsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyIH0gPSBzdXNwZW5zZTtcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghcmVzdW1lKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJlxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uLm1vZGUgPT09ICdvdXQtaW4nO1xuICAgICAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ0lkID09PSBzdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIE1vdmVUeXBlLkVOVEVSICovKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBpbml0aWFsIGFuY2hvciBvbiBtb3VudFxuICAgICAgICAgICAgICAgIGxldCB7IGFuY2hvciB9ID0gc3VzcGVuc2U7XG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSB0cmVlXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmFsbGJhY2sgdHJlZSB3YXMgbW91bnRlZCwgaXQgbWF5IGhhdmUgYmVlbiBtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBwYXJ0IG9mIGEgcGFyZW50IHN1c3BlbnNlLiBnZXQgdGhlIGxhdGVzdCBhbmNob3IgZm9yIGluc2VydGlvblxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgY29udGVudCBmcm9tIG9mZi1kb20gY29udGFpbmVyIHRvIGFjdHVhbCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBNb3ZlVHlwZS5FTlRFUiAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBudWxsO1xuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBmbHVzaCBidWZmZXJlZCBlZmZlY3RzXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gc3VzcGVuc2UucGFyZW50O1xuICAgICAgICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xuICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBtZXJnZSBidWZmZXJlZCBwb3N0IGpvYnNcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50byB0aGF0IHBhcmVudFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZWZmZWN0cy5wdXNoKC4uLmVmZmVjdHMpO1xuICAgICAgICAgICAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG5vIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBmbHVzaCBhbGwgam9ic1xuICAgICAgICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xuICAgICAgICAgICAgLy8gaW52b2tlIEByZXNvbHZlIGV2ZW50XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvblJlc29sdmUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xuICAgICAgICAgICAgaWYgKCFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyB2bm9kZSwgYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaXNTVkcgfSA9IHN1c3BlbnNlO1xuICAgICAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KHZub2RlLCAnb25GYWxsYmFjaycpO1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXN1c3BlbnNlLmlzSW5GYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG1vdW50IHRoZSBmYWxsYmFjayB0cmVlXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgZmFsbGJhY2tWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgZmFsbGJhY2tWTm9kZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbiAmJiBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24ubW9kZSA9PT0gJ291dC1pbic7XG4gICAgICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSBtb3VudEZhbGxiYWNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHVubW91bnQgY3VycmVudCBhY3RpdmUgYnJhbmNoXG4gICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBubyBzdXNwZW5zZSBzbyB1bm1vdW50IGhvb2tzIGZpcmUgbm93XG4gICAgICAgICAgICB0cnVlIC8vIHNob3VsZFJlbW92ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghZGVsYXlFbnRlcikge1xuICAgICAgICAgICAgICAgIG1vdW50RmFsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW92ZShjb250YWluZXIsIGFuY2hvciwgdHlwZSkge1xuICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmXG4gICAgICAgICAgICAgICAgbW92ZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKTtcbiAgICAgICAgICAgIHN1c3BlbnNlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbmV4dChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpO1xuICAgICAgICB9LFxuICAgICAgICByZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzSW5QZW5kaW5nU3VzcGVuc2UgPSAhIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2g7XG4gICAgICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSkge1xuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVkRWwgPSBpbnN0YW5jZS52bm9kZS5lbDtcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgLmFzeW5jRGVwLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMCAvKiBFcnJvckNvZGVzLlNFVFVQX0ZVTkNUSU9OICovKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmNTZXR1cFJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgd2hlbiB0aGUgc2V0dXAoKSBwcm9taXNlIHJlc29sdmVzLlxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIHVubW91bnRlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkICE9PSBpbnN0YW5jZS5zdXNwZW5zZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgZnJvbSB0aGlzIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIGFzeW5jU2V0dXBSZXN1bHQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAoaHlkcmF0ZWRFbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBtYXkgaGF2ZSBiZWVuIHJlcGxhY2VkIGlmIGFuIHVwZGF0ZSBoYXBwZW5lZCBiZWZvcmUgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzeW5jIGRlcCBpcyByZXNvbHZlZC5cbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBoeWRyYXRlZEVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9ICFoeWRyYXRlZEVsICYmIGluc3RhbmNlLnN1YlRyZWUuZWw7XG4gICAgICAgICAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIHZub2RlLCBcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiBtb3ZlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGh5ZHJhdGlvbiwgaW5zdGFuY2Uuc3ViVHJlZSB3aWxsIGJlIHRoZSBjb21tZW50XG4gICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZShoeWRyYXRlZEVsIHx8IGluc3RhbmNlLnN1YlRyZWUuZWwpLCBcbiAgICAgICAgICAgICAgICAvLyBhbmNob3Igd2lsbCBub3QgYmUgdXNlZCBpZiB0aGlzIGlzIGh5ZHJhdGlvbiwgc28gb25seSBuZWVkIHRvXG4gICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgdGhlIGNvbW1lbnQgcGxhY2Vob2xkZXIgY2FzZS5cbiAgICAgICAgICAgICAgICBoeWRyYXRlZEVsID8gbnVsbCA6IG5leHQoaW5zdGFuY2Uuc3ViVHJlZSksIHN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZS5lbCk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvbmx5IGRlY3JlYXNlIGRlcHMgY291bnQgaWYgc3VzcGVuc2UgaXMgbm90IGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSAmJiAtLXN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB1bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkge1xuICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3VzcGVuc2U7XG59XG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBub2RlLnBhcmVudE5vZGUsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBudWxsLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCB0cnVlIC8qIGh5ZHJhdGluZyAqLykpO1xuICAgIC8vIHRoZXJlIGFyZSB0d28gcG9zc2libGUgc2NlbmFyaW9zIGZvciBzZXJ2ZXItcmVuZGVyZWQgc3VzcGVuc2U6XG4gICAgLy8gLSBzdWNjZXNzOiBzc3IgY29udGVudCBzaG91bGQgYmUgZnVsbHkgcmVzb2x2ZWRcbiAgICAvLyAtIGZhaWx1cmU6IHNzciBjb250ZW50IHNob3VsZCBiZSB0aGUgZmFsbGJhY2sgYnJhbmNoLlxuICAgIC8vIGhvd2V2ZXIsIG9uIHRoZSBjbGllbnQgd2UgZG9uJ3QgcmVhbGx5IGtub3cgaWYgaXQgaGFzIGZhaWxlZCBvciBub3RcbiAgICAvLyBhdHRlbXB0IHRvIGh5ZHJhdGUgdGhlIERPTSBhc3N1bWluZyBpdCBoYXMgc3VjY2VlZGVkLCBidXQgd2Ugc3RpbGxcbiAgICAvLyBuZWVkIHRvIGNvbnN0cnVjdCBhIHN1c3BlbnNlIGJvdW5kYXJ5IGZpcnN0XG4gICAgY29uc3QgcmVzdWx0ID0gaHlkcmF0ZU5vZGUobm9kZSwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgaWYgKHN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuKHZub2RlKSB7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgICBjb25zdCBpc1Nsb3RDaGlsZHJlbiA9IHNoYXBlRmxhZyAmIDMyIC8qIFNoYXBlRmxhZ3MuU0xPVFNfQ0hJTERSRU4gKi87XG4gICAgdm5vZGUuc3NDb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KGlzU2xvdENoaWxkcmVuID8gY2hpbGRyZW4uZGVmYXVsdCA6IGNoaWxkcmVuKTtcbiAgICB2bm9kZS5zc0ZhbGxiYWNrID0gaXNTbG90Q2hpbGRyZW5cbiAgICAgICAgPyBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZmFsbGJhY2spXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZVNsb3Qocykge1xuICAgIGxldCBibG9jaztcbiAgICBpZiAoaXNGdW5jdGlvbihzKSkge1xuICAgICAgICBjb25zdCB0cmFja0Jsb2NrID0gaXNCbG9ja1RyZWVFbmFibGVkICYmIHMuX2M7XG4gICAgICAgIGlmICh0cmFja0Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkaXNhYmxlVHJhY2tpbmc6IGZhbHNlXG4gICAgICAgICAgICAvLyBhbGxvdyBibG9jayB0cmFja2luZyBmb3IgY29tcGlsZWQgc2xvdHNcbiAgICAgICAgICAgIC8vIChzZWUgLi9jb21wb25lbnRSZW5kZXJDb250ZXh0LnRzKVxuICAgICAgICAgICAgcy5fZCA9IGZhbHNlO1xuICAgICAgICAgICAgb3BlbkJsb2NrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IHMoKTtcbiAgICAgICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgICAgICAgIHMuX2QgPSB0cnVlO1xuICAgICAgICAgICAgYmxvY2sgPSBjdXJyZW50QmxvY2s7XG4gICAgICAgICAgICBjbG9zZUJsb2NrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQXJyYXkocykpIHtcbiAgICAgICAgY29uc3Qgc2luZ2xlQ2hpbGQgPSBmaWx0ZXJTaW5nbGVSb290KHMpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzaW5nbGVDaGlsZCkge1xuICAgICAgICAgICAgd2FybihgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBzaW5nbGVDaGlsZDtcbiAgICB9XG4gICAgcyA9IG5vcm1hbGl6ZVZOb2RlKHMpO1xuICAgIGlmIChibG9jayAmJiAhcy5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgcy5keW5hbWljQ2hpbGRyZW4gPSBibG9jay5maWx0ZXIoYyA9PiBjICE9PSBzKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcbiAgICBpZiAoc3VzcGVuc2UgJiYgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICBpZiAoaXNBcnJheShmbikpIHtcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGJyYW5jaCkge1xuICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IGJyYW5jaDtcbiAgICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xuICAgIGNvbnN0IGVsID0gKHZub2RlLmVsID0gYnJhbmNoLmVsKTtcbiAgICAvLyBpbiBjYXNlIHN1c3BlbnNlIGlzIHRoZSByb290IG5vZGUgb2YgYSBjb21wb25lbnQsXG4gICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRoZSBIT0MgZWxcbiAgICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xuICAgICAgICBwYXJlbnRDb21wb25lbnQudm5vZGUuZWwgPSBlbDtcbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvdmlkZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybihgcHJvdmlkZSgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcbiAgICAgICAgLy8gYnkgZGVmYXVsdCBhbiBpbnN0YW5jZSBpbmhlcml0cyBpdHMgcGFyZW50J3MgcHJvdmlkZXMgb2JqZWN0XG4gICAgICAgIC8vIGJ1dCB3aGVuIGl0IG5lZWRzIHRvIHByb3ZpZGUgdmFsdWVzIG9mIGl0cyBvd24sIGl0IGNyZWF0ZXMgaXRzXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXG4gICAgICAgIC8vIHRoaXMgd2F5IGluIGBpbmplY3RgIHdlIGNhbiBzaW1wbHkgbG9vayB1cCBpbmplY3Rpb25zIGZyb20gZGlyZWN0XG4gICAgICAgIC8vIHBhcmVudCBhbmQgbGV0IHRoZSBwcm90b3R5cGUgY2hhaW4gZG8gdGhlIHdvcmsuXG4gICAgICAgIGNvbnN0IHBhcmVudFByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnBhcmVudCAmJiBjdXJyZW50SW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xuICAgICAgICBpZiAocGFyZW50UHJvdmlkZXMgPT09IHByb3ZpZGVzKSB7XG4gICAgICAgICAgICBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRTIGRvZXNuJ3QgYWxsb3cgc3ltYm9sIGFzIGluZGV4IHR5cGVcbiAgICAgICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2UpIHtcbiAgICAvLyBmYWxsYmFjayB0byBgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlYCBzbyB0aGF0IHRoaXMgY2FuIGJlIGNhbGxlZCBpblxuICAgIC8vIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIC8vICMyNDAwXG4gICAgICAgIC8vIHRvIHN1cHBvcnQgYGFwcC51c2VgIHBsdWdpbnMsXG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcENvbnRleHQncyBgcHJvdmlkZXNgIGlmIHRoZSBpbnN0YW5jZSBpcyBhdCByb290XG4gICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaW5zdGFuY2UucGFyZW50ID09IG51bGxcbiAgICAgICAgICAgID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzXG4gICAgICAgICAgICA6IGluc3RhbmNlLnBhcmVudC5wcm92aWRlcztcbiAgICAgICAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xuICAgICAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmVhdERlZmF1bHRBc0ZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWUuY2FsbChpbnN0YW5jZS5wcm94eSlcbiAgICAgICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYGluamVjdGlvbiBcIiR7U3RyaW5nKGtleSl9XCIgbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuKGBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cy5gKTtcbiAgICB9XG59XG5cbi8vIFNpbXBsZSBlZmZlY3QuXG5mdW5jdGlvbiB3YXRjaEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gd2F0Y2hQb3N0RWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICAgIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgZmx1c2g6ICdwb3N0JyB9KSA6IHsgZmx1c2g6ICdwb3N0JyB9KSk7XG59XG5mdW5jdGlvbiB3YXRjaFN5bmNFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgID8gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBmbHVzaDogJ3N5bmMnIH0pIDogeyBmbHVzaDogJ3N5bmMnIH0pKTtcbn1cbi8vIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzIHRvIHRyaWdnZXIgb24gdW5kZWZpbmVkIGluaXRpYWwgdmFsdWVzXG5jb25zdCBJTklUSUFMX1dBVENIRVJfVkFMVUUgPSB7fTtcbi8vIGltcGxlbWVudGF0aW9uXG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNGdW5jdGlvbihjYikpIHtcbiAgICAgICAgd2FybihgXFxgd2F0Y2goZm4sIG9wdGlvbnM/KVxcYCBzaWduYXR1cmUgaGFzIGJlZW4gbW92ZWQgdG8gYSBzZXBhcmF0ZSBBUEkuIGAgK1xuICAgICAgICAgICAgYFVzZSBcXGB3YXRjaEVmZmVjdChmbiwgb3B0aW9ucz8pXFxgIGluc3RlYWQuIFxcYHdhdGNoXFxgIG5vdyBvbmx5IGAgK1xuICAgICAgICAgICAgYHN1cHBvcnRzIFxcYHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XG4gICAgfVxuICAgIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZG9XYXRjaChzb3VyY2UsIGNiLCB7IGltbWVkaWF0ZSwgZGVlcCwgZmx1c2gsIG9uVHJhY2ssIG9uVHJpZ2dlciB9ID0gRU1QVFlfT0JKKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY2IpIHtcbiAgICAgICAgaWYgKGltbWVkaWF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3YXJuKGB3YXRjaCgpIFwiaW1tZWRpYXRlXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIGAgK1xuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWVwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJkZWVwXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIGAgK1xuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcbiAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBzb3VyY2U6IGAsIHMsIGBBIHdhdGNoIHNvdXJjZSBjYW4gb25seSBiZSBhIGdldHRlci9lZmZlY3QgZnVuY3Rpb24sIGEgcmVmLCBgICtcbiAgICAgICAgICAgIGBhIHJlYWN0aXZlIG9iamVjdCwgb3IgYW4gYXJyYXkgb2YgdGhlc2UgdHlwZXMuYCk7XG4gICAgfTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICBsZXQgZ2V0dGVyO1xuICAgIGxldCBmb3JjZVRyaWdnZXIgPSBmYWxzZTtcbiAgICBsZXQgaXNNdWx0aVNvdXJjZSA9IGZhbHNlO1xuICAgIGlmIChpc1JlZihzb3VyY2UpKSB7XG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS52YWx1ZTtcbiAgICAgICAgZm9yY2VUcmlnZ2VyID0gaXNTaGFsbG93JDEoc291cmNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShzb3VyY2UpKSB7XG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZTtcbiAgICAgICAgZGVlcCA9IHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBpc011bHRpU291cmNlID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VUcmlnZ2VyID0gc291cmNlLnNvbWUocyA9PiBpc1JlYWN0aXZlKHMpIHx8IGlzU2hhbGxvdyQxKHMpKTtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLm1hcChzID0+IHtcbiAgICAgICAgICAgIGlmIChpc1JlZihzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzZShzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHMsIGluc3RhbmNlLCAyIC8qIEVycm9yQ29kZXMuV0FUQ0hfR0VUVEVSICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIC8vIGdldHRlciB3aXRoIGNiXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMiAvKiBFcnJvckNvZGVzLldBVENIX0dFVFRFUiAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBubyBjYiAtPiBzaW1wbGUgZWZmZWN0XG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNsZWFudXApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMyAvKiBFcnJvckNvZGVzLldBVENIX0NBTExCQUNLICovLCBbb25DbGVhbnVwXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZXR0ZXIgPSBOT09QO1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcbiAgICB9XG4gICAgaWYgKGNiICYmIGRlZXApIHtcbiAgICAgICAgY29uc3QgYmFzZUdldHRlciA9IGdldHRlcjtcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gdHJhdmVyc2UoYmFzZUdldHRlcigpKTtcbiAgICB9XG4gICAgbGV0IGNsZWFudXA7XG4gICAgbGV0IG9uQ2xlYW51cCA9IChmbikgPT4ge1xuICAgICAgICBjbGVhbnVwID0gZWZmZWN0Lm9uU3RvcCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIDQgLyogRXJyb3JDb2Rlcy5XQVRDSF9DTEVBTlVQICovKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8vIGluIFNTUiB0aGVyZSBpcyBubyBuZWVkIHRvIHNldHVwIGFuIGFjdHVhbCBlZmZlY3QsIGFuZCBpdCBzaG91bGQgYmUgbm9vcFxuICAgIC8vIHVubGVzcyBpdCdzIGVhZ2VyIG9yIHN5bmMgZmx1c2hcbiAgICBsZXQgc3NyQ2xlYW51cDtcbiAgICBpZiAoaXNJblNTUkNvbXBvbmVudFNldHVwKSB7XG4gICAgICAgIC8vIHdlIHdpbGwgYWxzbyBub3QgY2FsbCB0aGUgaW52YWxpZGF0ZSBjYWxsYmFjayAoKyBydW5uZXIgaXMgbm90IHNldCB1cClcbiAgICAgICAgb25DbGVhbnVwID0gTk9PUDtcbiAgICAgICAgaWYgKCFjYikge1xuICAgICAgICAgICAgZ2V0dGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhjYiwgaW5zdGFuY2UsIDMgLyogRXJyb3JDb2Rlcy5XQVRDSF9DQUxMQkFDSyAqLywgW1xuICAgICAgICAgICAgICAgIGdldHRlcigpLFxuICAgICAgICAgICAgICAgIGlzTXVsdGlTb3VyY2UgPyBbXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBvbkNsZWFudXBcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbHVzaCA9PT0gJ3N5bmMnKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB1c2VTU1JDb250ZXh0KCk7XG4gICAgICAgICAgICBzc3JDbGVhbnVwID0gY3R4Ll9fd2F0Y2hlckhhbmRsZXMgfHwgKGN0eC5fX3dhdGNoZXJIYW5kbGVzID0gW10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE5PT1A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IG9sZFZhbHVlID0gaXNNdWx0aVNvdXJjZVxuICAgICAgICA/IG5ldyBBcnJheShzb3VyY2UubGVuZ3RoKS5maWxsKElOSVRJQUxfV0FUQ0hFUl9WQUxVRSlcbiAgICAgICAgOiBJTklUSUFMX1dBVENIRVJfVkFMVUU7XG4gICAgY29uc3Qgam9iID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWVmZmVjdC5hY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIC8vIHdhdGNoKHNvdXJjZSwgY2IpXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGVmZmVjdC5ydW4oKTtcbiAgICAgICAgICAgIGlmIChkZWVwIHx8XG4gICAgICAgICAgICAgICAgZm9yY2VUcmlnZ2VyIHx8XG4gICAgICAgICAgICAgICAgKGlzTXVsdGlTb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgPyBuZXdWYWx1ZS5zb21lKCh2LCBpKSA9PiBoYXNDaGFuZ2VkKHYsIG9sZFZhbHVlW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgOiBoYXNDaGFuZ2VkKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHx8XG4gICAgICAgICAgICAgICAgKGZhbHNlICApKSB7XG4gICAgICAgICAgICAgICAgLy8gY2xlYW51cCBiZWZvcmUgcnVubmluZyBjYiBhZ2FpblxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoY2IsIGluc3RhbmNlLCAzIC8qIEVycm9yQ29kZXMuV0FUQ0hfQ0FMTEJBQ0sgKi8sIFtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID09PSBJTklUSUFMX1dBVENIRVJfVkFMVUVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChpc011bHRpU291cmNlICYmIG9sZFZhbHVlWzBdID09PSBJTklUSUFMX1dBVENIRVJfVkFMVUUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xlYW51cFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB3YXRjaEVmZmVjdFxuICAgICAgICAgICAgZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBpbXBvcnRhbnQ6IG1hcmsgdGhlIGpvYiBhcyBhIHdhdGNoZXIgY2FsbGJhY2sgc28gdGhhdCBzY2hlZHVsZXIga25vd3NcbiAgICAvLyBpdCBpcyBhbGxvd2VkIHRvIHNlbGYtdHJpZ2dlciAoIzE3MjcpXG4gICAgam9iLmFsbG93UmVjdXJzZSA9ICEhY2I7XG4gICAgbGV0IHNjaGVkdWxlcjtcbiAgICBpZiAoZmx1c2ggPT09ICdzeW5jJykge1xuICAgICAgICBzY2hlZHVsZXIgPSBqb2I7IC8vIHRoZSBzY2hlZHVsZXIgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZGlyZWN0bHlcbiAgICB9XG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3Qoam9iLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0OiAncHJlJ1xuICAgICAgICBqb2IucHJlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluc3RhbmNlKVxuICAgICAgICAgICAgam9iLmlkID0gaW5zdGFuY2UudWlkO1xuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZUpvYihqb2IpO1xuICAgIH1cbiAgICBjb25zdCBlZmZlY3QgPSBuZXcgUmVhY3RpdmVFZmZlY3QoZ2V0dGVyLCBzY2hlZHVsZXIpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgZWZmZWN0Lm9uVHJhY2sgPSBvblRyYWNrO1xuICAgICAgICBlZmZlY3Qub25UcmlnZ2VyID0gb25UcmlnZ2VyO1xuICAgIH1cbiAgICAvLyBpbml0aWFsIHJ1blxuICAgIGlmIChjYikge1xuICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICBqb2IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9sZFZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGVmZmVjdC5ydW4uYmluZChlZmZlY3QpLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlZmZlY3QucnVuKCk7XG4gICAgfVxuICAgIGNvbnN0IHVud2F0Y2ggPSAoKSA9PiB7XG4gICAgICAgIGVmZmVjdC5zdG9wKCk7XG4gICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5zY29wZSkge1xuICAgICAgICAgICAgcmVtb3ZlKGluc3RhbmNlLnNjb3BlLmVmZmVjdHMsIGVmZmVjdCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChzc3JDbGVhbnVwKVxuICAgICAgICBzc3JDbGVhbnVwLnB1c2godW53YXRjaCk7XG4gICAgcmV0dXJuIHVud2F0Y2g7XG59XG4vLyB0aGlzLiR3YXRjaFxuZnVuY3Rpb24gaW5zdGFuY2VXYXRjaChzb3VyY2UsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHVibGljVGhpcyA9IHRoaXMucHJveHk7XG4gICAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKVxuICAgICAgICA/IHNvdXJjZS5pbmNsdWRlcygnLicpXG4gICAgICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywgc291cmNlKVxuICAgICAgICAgICAgOiAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV1cbiAgICAgICAgOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcbiAgICBsZXQgY2I7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGNiID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYiA9IHZhbHVlLmhhbmRsZXI7XG4gICAgICAgIG9wdGlvbnMgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgY3VyID0gY3VycmVudEluc3RhbmNlO1xuICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0aGlzKTtcbiAgICBjb25zdCByZXMgPSBkb1dhdGNoKGdldHRlciwgY2IuYmluZChwdWJsaWNUaGlzKSwgb3B0aW9ucyk7XG4gICAgaWYgKGN1cikge1xuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoR2V0dGVyKGN0eCwgcGF0aCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxldCBjdXIgPSBjdHg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoICYmIGN1cjsgaSsrKSB7XG4gICAgICAgICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXI7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlLCBzZWVuKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqL10pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzZWVuID0gc2VlbiB8fCBuZXcgU2V0KCk7XG4gICAgaWYgKHNlZW4uaGFzKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHNlZW4uYWRkKHZhbHVlKTtcbiAgICBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgICAgIHRyYXZlcnNlKHZhbHVlLnZhbHVlLCBzZWVuKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVbaV0sIHNlZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICAgICAgdHJhdmVyc2Uodiwgc2Vlbik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgc2Vlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uU3RhdGUoKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgICAgIGlzTGVhdmluZzogZmFsc2UsXG4gICAgICAgIGlzVW5tb3VudGluZzogZmFsc2UsXG4gICAgICAgIGxlYXZpbmdWTm9kZXM6IG5ldyBNYXAoKVxuICAgIH07XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgICBzdGF0ZS5pc1VubW91bnRpbmcgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBzdGF0ZTtcbn1cbmNvbnN0IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yID0gW0Z1bmN0aW9uLCBBcnJheV07XG5jb25zdCBCYXNlVHJhbnNpdGlvbkltcGwgPSB7XG4gICAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgICBwcm9wczoge1xuICAgICAgICBtb2RlOiBTdHJpbmcsXG4gICAgICAgIGFwcGVhcjogQm9vbGVhbixcbiAgICAgICAgcGVyc2lzdGVkOiBCb29sZWFuLFxuICAgICAgICAvLyBlbnRlclxuICAgICAgICBvbkJlZm9yZUVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25FbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICAvLyBsZWF2ZVxuICAgICAgICBvbkJlZm9yZUxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgICAgICAgb25MZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICAvLyBhcHBlYXJcbiAgICAgICAgb25CZWZvcmVBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gICAgICAgIG9uQWZ0ZXJBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICAgICAgICBvbkFwcGVhckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3JcbiAgICB9LFxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcbiAgICAgICAgbGV0IHByZXZUcmFuc2l0aW9uS2V5O1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCksIHRydWUpO1xuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBoYXNGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGxvY2F0ZSBmaXJzdCBub24tY29tbWVudCBjaGlsZFxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYyBvZiBjaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYy50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGhhc0ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FybiBtb3JlIHRoYW4gb25lIG5vbi1jb21tZW50IGNoaWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybignPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlIDx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGM7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byB0cmFjayByZWFjdGl2aXR5IGZvciB0aGVzZSBwcm9wcyBzbyB1c2UgdGhlIHJhd1xuICAgICAgICAgICAgLy8gcHJvcHMgZm9yIGEgYml0IGJldHRlciBwZXJmXG4gICAgICAgICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbW9kZSB9ID0gcmF3UHJvcHM7XG4gICAgICAgICAgICAvLyBjaGVjayBtb2RlXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgbW9kZSAmJlxuICAgICAgICAgICAgICAgIG1vZGUgIT09ICdpbi1vdXQnICYmXG4gICAgICAgICAgICAgICAgbW9kZSAhPT0gJ291dC1pbicgJiZcbiAgICAgICAgICAgICAgICBtb2RlICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAke21vZGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNMZWF2aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgPHRyYW5zaXRpb24+PGtlZXAtYWxpdmUvPjwvdHJhbnNpdGlvbj4sIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhlIHR5cGUgb2YgdGhlIGtlcHQtYWxpdmUgY2hpbGRyZW4uXG4gICAgICAgICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0S2VlcEFsaXZlQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKCFpbm5lckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZW50ZXJIb29rcyA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgcmF3UHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XG4gICAgICAgICAgICBjb25zdCBvbGRDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWU7XG4gICAgICAgICAgICBjb25zdCBvbGRJbm5lckNoaWxkID0gb2xkQ2hpbGQgJiYgZ2V0S2VlcEFsaXZlQ2hpbGQob2xkQ2hpbGQpO1xuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25LZXlDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCB7IGdldFRyYW5zaXRpb25LZXkgfSA9IGlubmVyQ2hpbGQudHlwZTtcbiAgICAgICAgICAgIGlmIChnZXRUcmFuc2l0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZ2V0VHJhbnNpdGlvbktleSgpO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2VHJhbnNpdGlvbktleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUcmFuc2l0aW9uS2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09IHByZXZUcmFuc2l0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUcmFuc2l0aW9uS2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaGFuZGxlIG1vZGVcbiAgICAgICAgICAgIGlmIChvbGRJbm5lckNoaWxkICYmXG4gICAgICAgICAgICAgICAgb2xkSW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50ICYmXG4gICAgICAgICAgICAgICAgKCFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgfHwgdHJhbnNpdGlvbktleUNoYW5nZWQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ0hvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgb2xkIHRyZWUncyBob29rcyBpbiBjYXNlIG9mIGR5bmFtaWMgdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGluZyBiZXR3ZWVuIGRpZmZlcmVudCB2aWV3c1xuICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0hvb2tzLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICM2ODM1XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCBhbHNvIG5lZWRzIHRvIGJlIHVwZGF0ZWQgd2hlbiBhY3RpdmUgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UudXBkYXRlLmFjdGl2ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0JyAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmluZ0hvb2tzLmRlbGF5TGVhdmUgPSAoZWwsIGVhcmx5UmVtb3ZlLCBkZWxheWVkTGVhdmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIG9sZElubmVyQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW1N0cmluZyhvbGRJbm5lckNoaWxkLmtleSldID0gb2xkSW5uZXJDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVhcmx5IHJlbW92YWwgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVudGVySG9va3MuZGVsYXllZExlYXZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGVySG9va3MuZGVsYXllZExlYXZlID0gZGVsYXllZExlYXZlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xuICAgIGNvbnN0IHsgbGVhdmluZ1ZOb2RlcyB9ID0gc3RhdGU7XG4gICAgbGV0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGxlYXZpbmdWTm9kZXMuZ2V0KHZub2RlLnR5cGUpO1xuICAgIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XG4gICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxlYXZpbmdWTm9kZXMuc2V0KHZub2RlLnR5cGUsIGxlYXZpbmdWTm9kZXNDYWNoZSk7XG4gICAgfVxuICAgIHJldHVybiBsZWF2aW5nVk5vZGVzQ2FjaGU7XG59XG4vLyBUaGUgdHJhbnNpdGlvbiBob29rcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHZub2RlIGFzIHZub2RlLnRyYW5zaXRpb25cbi8vIGFuZCB3aWxsIGJlIGNhbGxlZCBhdCBhcHByb3ByaWF0ZSB0aW1pbmcgaW4gdGhlIHJlbmRlcmVyLlxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgYXBwZWFyLCBtb2RlLCBwZXJzaXN0ZWQgPSBmYWxzZSwgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25BZnRlckVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkJlZm9yZUxlYXZlLCBvbkxlYXZlLCBvbkFmdGVyTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyLCBvbkFwcGVhciwgb25BZnRlckFwcGVhciwgb25BcHBlYXJDYW5jZWxsZWQgfSA9IHByb3BzO1xuICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xuICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcbiAgICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgICAgIGhvb2sgJiZcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA5IC8qIEVycm9yQ29kZXMuVFJBTlNJVElPTl9IT09LICovLCBhcmdzKTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbGxBc3luY0hvb2sgPSAoaG9vaywgYXJncykgPT4ge1xuICAgICAgICBjb25zdCBkb25lID0gYXJnc1sxXTtcbiAgICAgICAgY2FsbEhvb2soaG9vaywgYXJncyk7XG4gICAgICAgIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgICAgICAgICBpZiAoaG9vay5ldmVyeShob29rID0+IGhvb2subGVuZ3RoIDw9IDEpKVxuICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhvb2tzID0ge1xuICAgICAgICBtb2RlLFxuICAgICAgICBwZXJzaXN0ZWQsXG4gICAgICAgIGJlZm9yZUVudGVyKGVsKSB7XG4gICAgICAgICAgICBsZXQgaG9vayA9IG9uQmVmb3JlRW50ZXI7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9vayA9IG9uQmVmb3JlQXBwZWFyIHx8IG9uQmVmb3JlRW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yIHNhbWUgZWxlbWVudCAodi1zaG93KVxuICAgICAgICAgICAgaWYgKGVsLl9sZWF2ZUNiKSB7XG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yIHRvZ2dsZWQgZWxlbWVudCB3aXRoIHNhbWUga2V5ICh2LWlmKVxuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2RlID0gbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XG4gICAgICAgICAgICBpZiAobGVhdmluZ1ZOb2RlICYmXG4gICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgZWFybHkgcmVtb3ZhbCAobm90IGNhbmNlbGxlZClcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxIb29rKGhvb2ssIFtlbF0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnRlcihlbCkge1xuICAgICAgICAgICAgbGV0IGhvb2sgPSBvbkVudGVyO1xuICAgICAgICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcbiAgICAgICAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICAgICAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJIb29rID0gb25BZnRlckFwcGVhciB8fCBvbkFmdGVyRW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEhvb2sgPSBvbkFwcGVhckNhbmNlbGxlZCB8fCBvbkVudGVyQ2FuY2VsbGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2VudGVyQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKGFmdGVySG9vaywgW2VsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChob29rcy5kZWxheWVkTGVhdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsLl9lbnRlckNiID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaG9vaykge1xuICAgICAgICAgICAgICAgIGNhbGxBc3luY0hvb2soaG9vaywgW2VsLCBkb25lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxlYXZlKGVsLCByZW1vdmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xuICAgICAgICAgICAgaWYgKGVsLl9lbnRlckNiKSB7XG4gICAgICAgICAgICAgICAgZWwuX2VudGVyQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzVW5tb3VudGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xuICAgICAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fbGVhdmVDYiA9IChjYW5jZWxsZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2sob25BZnRlckxlYXZlLCBbZWxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID09PSB2bm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICAgICAgaWYgKG9uTGVhdmUpIHtcbiAgICAgICAgICAgICAgICBjYWxsQXN5bmNIb29rKG9uTGVhdmUsIFtlbCwgZG9uZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbG9uZSh2bm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gaG9va3M7XG59XG4vLyB0aGUgcGxhY2Vob2xkZXIgcmVhbGx5IG9ubHkgaGFuZGxlcyBvbmUgc3BlY2lhbCBjYXNlOiBLZWVwQWxpdmVcbi8vIGluIHRoZSBjYXNlIG9mIGEgS2VlcEFsaXZlIGluIGEgbGVhdmUgcGhhc2Ugd2UgbmVlZCB0byByZXR1cm4gYSBLZWVwQWxpdmVcbi8vIHBsYWNlaG9sZGVyIHdpdGggZW1wdHkgY29udGVudCB0byBhdm9pZCB0aGUgS2VlcEFsaXZlIGluc3RhbmNlIGZyb20gYmVpbmdcbi8vIHVubW91bnRlZC5cbmZ1bmN0aW9uIGVtcHR5UGxhY2Vob2xkZXIodm5vZGUpIHtcbiAgICBpZiAoaXNLZWVwQWxpdmUodm5vZGUpKSB7XG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEtlZXBBbGl2ZUNoaWxkKHZub2RlKSB7XG4gICAgcmV0dXJuIGlzS2VlcEFsaXZlKHZub2RlKVxuICAgICAgICA/IHZub2RlLmNoaWxkcmVuXG4gICAgICAgICAgICA/IHZub2RlLmNoaWxkcmVuWzBdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICA6IHZub2RlO1xufVxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCBob29rcykge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgdm5vZGUuc3NDb250ZW50LnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0NvbnRlbnQpO1xuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UsIHBhcmVudEtleSkge1xuICAgIGxldCByZXQgPSBbXTtcbiAgICBsZXQga2V5ZWRGcmFnbWVudENvdW50ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAvLyAjNTM2MCBpbmhlcml0IHBhcmVudCBrZXkgaW4gY2FzZSBvZiA8dGVtcGxhdGUgdi1mb3I+XG4gICAgICAgIGNvbnN0IGtleSA9IHBhcmVudEtleSA9PSBudWxsXG4gICAgICAgICAgICA/IGNoaWxkLmtleVxuICAgICAgICAgICAgOiBTdHJpbmcocGFyZW50S2V5KSArIFN0cmluZyhjaGlsZC5rZXkgIT0gbnVsbCA/IGNoaWxkLmtleSA6IGkpO1xuICAgICAgICAvLyBoYW5kbGUgZnJhZ21lbnQgY2hpbGRyZW4gY2FzZSwgZS5nLiB2LWZvclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXRjaEZsYWcgJiAxMjggLyogUGF0Y2hGbGFncy5LRVlFRF9GUkFHTUVOVCAqLylcbiAgICAgICAgICAgICAgICBrZXllZEZyYWdtZW50Q291bnQrKztcbiAgICAgICAgICAgIHJldCA9IHJldC5jb25jYXQoZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKGNoaWxkLmNoaWxkcmVuLCBrZWVwQ29tbWVudCwga2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29tbWVudCBwbGFjZWhvbGRlcnMgc2hvdWxkIGJlIHNraXBwZWQsIGUuZy4gdi1pZlxuICAgICAgICBlbHNlIGlmIChrZWVwQ29tbWVudCB8fCBjaGlsZC50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgICAgICByZXQucHVzaChrZXkgIT0gbnVsbCA/IGNsb25lVk5vZGUoY2hpbGQsIHsga2V5IH0pIDogY2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vICMxMTI2IGlmIGEgdHJhbnNpdGlvbiBjaGlsZHJlbiBsaXN0IGNvbnRhaW5zIG11bHRpcGxlIHN1YiBmcmFnbWVudHMsIHRoZXNlXG4gICAgLy8gZnJhZ21lbnRzIHdpbGwgYmUgbWVyZ2VkIGludG8gYSBmbGF0IGNoaWxkcmVuIGFycmF5LiBTaW5jZSBlYWNoIHYtZm9yXG4gICAgLy8gZnJhZ21lbnQgbWF5IGNvbnRhaW4gZGlmZmVyZW50IHN0YXRpYyBiaW5kaW5ncyBpbnNpZGUsIHdlIG5lZWQgdG8gZGUtb3BcbiAgICAvLyB0aGVzZSBjaGlsZHJlbiB0byBmb3JjZSBmdWxsIGRpZmZzIHRvIGVuc3VyZSBjb3JyZWN0IGJlaGF2aW9yLlxuICAgIGlmIChrZXllZEZyYWdtZW50Q291bnQgPiAxKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXRbaV0ucGF0Y2hGbGFnID0gLTIgLyogUGF0Y2hGbGFncy5CQUlMICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbi8vIGltcGxlbWVudGF0aW9uLCBjbG9zZSB0byBuby1vcFxuZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvcHRpb25zKSA/IHsgc2V0dXA6IG9wdGlvbnMsIG5hbWU6IG9wdGlvbnMubmFtZSB9IDogb3B0aW9ucztcbn1cblxuY29uc3QgaXNBc3luY1dyYXBwZXIgPSAoaSkgPT4gISFpLnR5cGUuX19hc3luY0xvYWRlcjtcbmZ1bmN0aW9uIGRlZmluZUFzeW5jQ29tcG9uZW50KHNvdXJjZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xuICAgIH1cbiAgICBjb25zdCB7IGxvYWRlciwgbG9hZGluZ0NvbXBvbmVudCwgZXJyb3JDb21wb25lbnQsIGRlbGF5ID0gMjAwLCB0aW1lb3V0LCAvLyB1bmRlZmluZWQgPSBuZXZlciB0aW1lcyBvdXRcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsIG9uRXJyb3I6IHVzZXJPbkVycm9yIH0gPSBzb3VyY2U7XG4gICAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICBsZXQgcmVzb2x2ZWRDb21wO1xuICAgIGxldCByZXRyaWVzID0gMDtcbiAgICBjb25zdCByZXRyeSA9ICgpID0+IHtcbiAgICAgICAgcmV0cmllcysrO1xuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfTtcbiAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xuICAgICAgICBsZXQgdGhpc1JlcXVlc3Q7XG4gICAgICAgIHJldHVybiAocGVuZGluZ1JlcXVlc3QgfHxcbiAgICAgICAgICAgICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID1cbiAgICAgICAgICAgICAgICBsb2FkZXIoKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlck9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VyRmFpbCA9ICgpID0+IHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoY29tcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlcXVlc3QgIT09IHBlbmRpbmdSZXF1ZXN0ICYmIHBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY29tcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRlcm9wIG1vZHVsZSBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoY29tcC5fX2VzTW9kdWxlIHx8IGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29tcCAmJiAhaXNPYmplY3QoY29tcCkgJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhc3luYyBjb21wb25lbnQgbG9hZCByZXN1bHQ6ICR7Y29tcH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZENvbXAgPSBjb21wO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgIH07XG4gICAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgICAgIG5hbWU6ICdBc3luY0NvbXBvbmVudFdyYXBwZXInLFxuICAgICAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxuICAgICAgICBnZXQgX19hc3luY1Jlc29sdmVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkQ29tcDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0dXAoKSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICAgICAgICAgIC8vIGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMTMgLyogRXJyb3JDb2Rlcy5BU1lOQ19DT01QT05FTlRfTE9BREVSICovLCAhZXJyb3JDb21wb25lbnQgLyogZG8gbm90IHRocm93IGluIGRldiBpZiB1c2VyIHByb3ZpZGVkIGVycm9yIGNvbXBvbmVudCAqLyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gc3VzcGVuc2UtY29udHJvbGxlZCBvciBTU1IuXG4gICAgICAgICAgICBpZiAoKHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlKSB8fFxuICAgICAgICAgICAgICAgIChpc0luU1NSQ29tcG9uZW50U2V0dXApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWQoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihjb21wID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChjb21wLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGVycm9yQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xuICAgICAgICAgICAgY29uc3QgZGVsYXllZCA9IHJlZighIWRlbGF5KTtcbiAgICAgICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkZWxheWVkLnZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZC52YWx1ZSAmJiAhZXJyb3IudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihgQXN5bmMgY29tcG9uZW50IHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9bXMuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9hZCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnBhcmVudCAmJiBpc0tlZXBBbGl2ZShpbnN0YW5jZS5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcmVudCBpcyBrZWVwLWFsaXZlLCBmb3JjZSB1cGRhdGUgc28gdGhlIGxvYWRlZCBjb21wb25lbnQnc1xuICAgICAgICAgICAgICAgICAgICAvLyBuYW1lIGlzIHRha2VuIGludG8gYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICBxdWV1ZUpvYihpbnN0YW5jZS5wYXJlbnQudXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobG9hZGVkLnZhbHVlICYmIHJlc29sdmVkQ29tcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvci52YWx1ZSAmJiBlcnJvckNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobG9hZGluZ0NvbXBvbmVudCAmJiAhZGVsYXllZC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUobG9hZGluZ0NvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5uZXJDb21wKGNvbXAsIHBhcmVudCkge1xuICAgIGNvbnN0IHsgcmVmLCBwcm9wcywgY2hpbGRyZW4sIGNlIH0gPSBwYXJlbnQudm5vZGU7XG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xuICAgIC8vIGVuc3VyZSBpbm5lciBjb21wb25lbnQgaW5oZXJpdHMgdGhlIGFzeW5jIHdyYXBwZXIncyByZWYgb3duZXJcbiAgICB2bm9kZS5yZWYgPSByZWY7XG4gICAgLy8gcGFzcyB0aGUgY3VzdG9tIGVsZW1lbnQgY2FsbGJhY2sgb24gdG8gdGhlIGlubmVyIGNvbXBcbiAgICAvLyBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIGFzeW5jIHdyYXBwZXJcbiAgICB2bm9kZS5jZSA9IGNlO1xuICAgIGRlbGV0ZSBwYXJlbnQudm5vZGUuY2U7XG4gICAgcmV0dXJuIHZub2RlO1xufVxuXG5jb25zdCBpc0tlZXBBbGl2ZSA9ICh2bm9kZSkgPT4gdm5vZGUudHlwZS5fX2lzS2VlcEFsaXZlO1xuY29uc3QgS2VlcEFsaXZlSW1wbCA9IHtcbiAgICBuYW1lOiBgS2VlcEFsaXZlYCxcbiAgICAvLyBNYXJrZXIgZm9yIHNwZWNpYWwgaGFuZGxpbmcgaW5zaWRlIHRoZSByZW5kZXJlci4gV2UgYXJlIG5vdCB1c2luZyBhID09PVxuICAgIC8vIGNoZWNrIGRpcmVjdGx5IG9uIEtlZXBBbGl2ZSBpbiB0aGUgcmVuZGVyZXIsIGJlY2F1c2UgaW1wb3J0aW5nIGl0IGRpcmVjdGx5XG4gICAgLy8gd291bGQgcHJldmVudCBpdCBmcm9tIGJlaW5nIHRyZWUtc2hha2VuLlxuICAgIF9faXNLZWVwQWxpdmU6IHRydWUsXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaW5jbHVkZTogW1N0cmluZywgUmVnRXhwLCBBcnJheV0sXG4gICAgICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgICB9LFxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgLy8gS2VlcEFsaXZlIGNvbW11bmljYXRlcyB3aXRoIHRoZSBpbnN0YW50aWF0ZWQgcmVuZGVyZXIgdmlhIHRoZVxuICAgICAgICAvLyBjdHggd2hlcmUgdGhlIHJlbmRlcmVyIHBhc3NlcyBpbiBpdHMgaW50ZXJuYWxzLFxuICAgICAgICAvLyBhbmQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBleHBvc2VzIGFjdGl2YXRlL2RlYWN0aXZhdGUgaW1wbGVtZW50YXRpb25zLlxuICAgICAgICAvLyBUaGUgd2hvbGUgcG9pbnQgb2YgdGhpcyBpcyB0byBhdm9pZCBpbXBvcnRpbmcgS2VlcEFsaXZlIGRpcmVjdGx5IGluIHRoZVxuICAgICAgICAvLyByZW5kZXJlciB0byBmYWNpbGl0YXRlIHRyZWUtc2hha2luZy5cbiAgICAgICAgY29uc3Qgc2hhcmVkQ29udGV4dCA9IGluc3RhbmNlLmN0eDtcbiAgICAgICAgLy8gaWYgdGhlIGludGVybmFsIHJlbmRlcmVyIGlzIG5vdCByZWdpc3RlcmVkLCBpdCBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHNlcnZlci1zaWRlIHJlbmRlcmluZyxcbiAgICAgICAgLy8gZm9yIEtlZXBBbGl2ZSwgd2UganVzdCBuZWVkIHRvIHJlbmRlciBpdHMgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFzaGFyZWRDb250ZXh0LnJlbmRlcmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgY3VycmVudCA9IG51bGw7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5fX3ZfY2FjaGUgPSBjYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRTdXNwZW5zZSA9IGluc3RhbmNlLnN1c3BlbnNlO1xuICAgICAgICBjb25zdCB7IHJlbmRlcmVyOiB7IHA6IHBhdGNoLCBtOiBtb3ZlLCB1bTogX3VubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gfSA9IHNoYXJlZENvbnRleHQ7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc2hhcmVkQ29udGV4dC5hY3RpdmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgbW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIDAgLyogTW92ZVR5cGUuRU5URVIgKi8sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIC8vIGluIGNhc2UgcHJvcHMgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICAgICBwYXRjaChpbnN0YW5jZS52bm9kZSwgdm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCB2bm9kZS5zbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuYSkge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5hKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHZub2RlSG9vaykge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjb21wb25lbnRzIHRyZWVcbiAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2hhcmVkQ29udGV4dC5kZWFjdGl2YXRlID0gKHZub2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIHN0b3JhZ2VDb250YWluZXIsIG51bGwsIDEgLyogTW92ZVR5cGUuTEVBVkUgKi8sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIGluc3RhbmNlLnBhcmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbXBvbmVudHMgdHJlZVxuICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiB1bm1vdW50KHZub2RlKSB7XG4gICAgICAgICAgICAvLyByZXNldCB0aGUgc2hhcGVGbGFnIHNvIGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWRcbiAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcbiAgICAgICAgICAgIF91bm1vdW50KHZub2RlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGUoZmlsdGVyKSB7XG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKCh2bm9kZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUodm5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgJiYgKCFmaWx0ZXIgfHwgIWZpbHRlcihuYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQgfHwgY2FjaGVkLnR5cGUgIT09IGN1cnJlbnQudHlwZSkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGFjdGl2ZSBpbnN0YW5jZSBzaG91bGQgbm8gbG9uZ2VyIGJlIGtlcHQtYWxpdmUuXG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdW5tb3VudCBpdCBub3cgYnV0IGl0IG1pZ2h0IGJlIGxhdGVyLCBzbyByZXNldCBpdHMgZmxhZyBub3cuXG4gICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcoY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJ1bmUgY2FjaGUgb24gaW5jbHVkZS9leGNsdWRlIHByb3AgY2hhbmdlXG4gICAgICAgIHdhdGNoKCgpID0+IFtwcm9wcy5pbmNsdWRlLCBwcm9wcy5leGNsdWRlXSwgKFtpbmNsdWRlLCBleGNsdWRlXSkgPT4ge1xuICAgICAgICAgICAgaW5jbHVkZSAmJiBwcnVuZUNhY2hlKG5hbWUgPT4gbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSk7XG4gICAgICAgICAgICBleGNsdWRlICYmIHBydW5lQ2FjaGUobmFtZSA9PiAhbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSk7XG4gICAgICAgIH0sIFxuICAgICAgICAvLyBwcnVuZSBwb3N0LXJlbmRlciBhZnRlciBgY3VycmVudGAgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICB7IGZsdXNoOiAncG9zdCcsIGRlZXA6IHRydWUgfSk7XG4gICAgICAgIC8vIGNhY2hlIHN1YiB0cmVlIGFmdGVyIHJlbmRlclxuICAgICAgICBsZXQgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcbiAgICAgICAgY29uc3QgY2FjaGVTdWJ0cmVlID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gZml4ICMxNjIxLCB0aGUgcGVuZGluZ0NhY2hlS2V5IGNvdWxkIGJlIDBcbiAgICAgICAgICAgIGlmIChwZW5kaW5nQ2FjaGVLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNhY2hlLnNldChwZW5kaW5nQ2FjaGVLZXksIGdldElubmVyQ2hpbGQoaW5zdGFuY2Uuc3ViVHJlZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBvbk1vdW50ZWQoY2FjaGVTdWJ0cmVlKTtcbiAgICAgICAgb25VcGRhdGVkKGNhY2hlU3VidHJlZSk7XG4gICAgICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKGNhY2hlZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdWJUcmVlLCBzdXNwZW5zZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHN1YlRyZWUpO1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZWQudHlwZSA9PT0gdm5vZGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGluc3RhbmNlIHdpbGwgYmUgdW5tb3VudGVkIGFzIHBhcnQgb2Yga2VlcC1hbGl2ZSdzIHVubW91bnRcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaW52b2tlIGl0cyBkZWFjdGl2YXRlZCBob29rIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGEgPSB2bm9kZS5jb21wb25lbnQuZGE7XG4gICAgICAgICAgICAgICAgICAgIGRhICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkYSwgc3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIXNsb3RzLmRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgcmF3Vk5vZGUgPSBjaGlsZHJlblswXTtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBLZWVwQWxpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgY29tcG9uZW50IGNoaWxkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNWTm9kZShyYXdWTm9kZSkgfHxcbiAgICAgICAgICAgICAgICAoIShyYXdWTm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovKSAmJlxuICAgICAgICAgICAgICAgICAgICAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHJhd1ZOb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xuICAgICAgICAgICAgLy8gZm9yIGFzeW5jIGNvbXBvbmVudHMsIG5hbWUgY2hlY2sgc2hvdWxkIGJlIGJhc2VkIGluIGl0cyBsb2FkZWRcbiAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGlzQXN5bmNXcmFwcGVyKHZub2RlKVxuICAgICAgICAgICAgICAgID8gdm5vZGUudHlwZS5fX2FzeW5jUmVzb2x2ZWQgfHwge31cbiAgICAgICAgICAgICAgICA6IGNvbXApO1xuICAgICAgICAgICAgY29uc3QgeyBpbmNsdWRlLCBleGNsdWRlLCBtYXggfSA9IHByb3BzO1xuICAgICAgICAgICAgaWYgKChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgICAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XG4gICAgICAgICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICAgICAgLy8gY2xvbmUgdm5vZGUgaWYgaXQncyByZXVzZWQgYmVjYXVzZSB3ZSBhcmUgZ29pbmcgdG8gbXV0YXRlIGl0XG4gICAgICAgICAgICBpZiAodm5vZGUuZWwpIHtcbiAgICAgICAgICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLykge1xuICAgICAgICAgICAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAjMTUxMyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgcmV0dXJuZWQgdm5vZGUgdG8gYmUgY2xvbmVkIGR1ZSB0byBhdHRyXG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaCBvciBzY29wZUlkLCBzbyB0aGUgdm5vZGUgaGVyZSBtYXkgbm90IGJlIHRoZSBmaW5hbCB2bm9kZVxuICAgICAgICAgICAgLy8gdGhhdCBpcyBtb3VudGVkLiBJbnN0ZWFkIG9mIGNhY2hpbmcgaXQgZGlyZWN0bHksIHdlIHN0b3JlIHRoZSBwZW5kaW5nXG4gICAgICAgICAgICAvLyBrZXkgYW5kIGNhY2hlIGBpbnN0YW5jZS5zdWJUcmVlYCAodGhlIG5vcm1hbGl6ZWQgdm5vZGUpIGluXG4gICAgICAgICAgICAvLyBiZWZvcmVNb3VudC9iZWZvcmVVcGRhdGUgaG9va3MuXG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBrZXk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkVk5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb3B5IG92ZXIgbW91bnRlZCBzdGF0ZVxuICAgICAgICAgICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XG4gICAgICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50ID0gY2FjaGVkVk5vZGUuY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHVwZGF0ZSB0cmFuc2l0aW9uIGhvb2tzIG9uIHN1YlRyZWVcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCB2bm9kZS50cmFuc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgdm5vZGUgYmVpbmcgbW91bnRlZCBhcyBmcmVzaFxuICAgICAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLztcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMga2V5IHRoZSBmcmVzaGVzdFxuICAgICAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgICAgICAgICAgaWYgKG1heCAmJiBrZXlzLnNpemUgPiBwYXJzZUludChtYXgsIDEwKSkge1xuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5cy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIHVubW91bnRlZFxuICAgICAgICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgICAgIHJldHVybiBpc1N1c3BlbnNlKHJhd1ZOb2RlLnR5cGUpID8gcmF3Vk5vZGUgOiB2bm9kZTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xuICAgIGlmIChpc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluY2x1ZGVzKG5hbWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChwYXR0ZXJuLnRlc3QpIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBvbkFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcbiAgICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJhXCIgLyogTGlmZWN5Y2xlSG9va3MuQUNUSVZBVEVEICovLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gb25EZWFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcbiAgICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJkYVwiIC8qIExpZmVjeWNsZUhvb2tzLkRFQUNUSVZBVEVEICovLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIHR5cGUsIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICAgIC8vIGNhY2hlIHRoZSBkZWFjdGl2YXRlIGJyYW5jaCBjaGVjayB3cmFwcGVyIGZvciBpbmplY3RlZCBob29rcyBzbyB0aGUgc2FtZVxuICAgIC8vIGhvb2sgY2FuIGJlIHByb3Blcmx5IGRlZHVwZWQgYnkgdGhlIHNjaGVkdWxlci4gXCJfX3dkY1wiIHN0YW5kcyBmb3IgXCJ3aXRoXG4gICAgLy8gZGVhY3RpdmF0aW9uIGNoZWNrXCIuXG4gICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2RjIHx8XG4gICAgICAgIChob29rLl9fd2RjID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gb25seSBmaXJlIHRoZSBob29rIGlmIHRoZSB0YXJnZXQgaW5zdGFuY2UgaXMgTk9UIGluIGEgZGVhY3RpdmF0ZWQgYnJhbmNoLlxuICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmlzRGVhY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG9vaygpO1xuICAgICAgICB9KTtcbiAgICBpbmplY3RIb29rKHR5cGUsIHdyYXBwZWRIb29rLCB0YXJnZXQpO1xuICAgIC8vIEluIGFkZGl0aW9uIHRvIHJlZ2lzdGVyaW5nIGl0IG9uIHRoZSB0YXJnZXQgaW5zdGFuY2UsIHdlIHdhbGsgdXAgdGhlIHBhcmVudFxuICAgIC8vIGNoYWluIGFuZCByZWdpc3RlciBpdCBvbiBhbGwgYW5jZXN0b3IgaW5zdGFuY2VzIHRoYXQgYXJlIGtlZXAtYWxpdmUgcm9vdHMuXG4gICAgLy8gVGhpcyBhdm9pZHMgdGhlIG5lZWQgdG8gd2FsayB0aGUgZW50aXJlIGNvbXBvbmVudCB0cmVlIHdoZW4gaW52b2tpbmcgdGhlc2VcbiAgICAvLyBob29rcywgYW5kIG1vcmUgaW1wb3J0YW50bHksIGF2b2lkcyB0aGUgbmVlZCB0byB0cmFjayBjaGlsZCBjb21wb25lbnRzIGluXG4gICAgLy8gYXJyYXlzLlxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQucGFyZW50O1xuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudCkge1xuICAgICAgICAgICAgaWYgKGlzS2VlcEFsaXZlKGN1cnJlbnQucGFyZW50LnZub2RlKSkge1xuICAgICAgICAgICAgICAgIGluamVjdFRvS2VlcEFsaXZlUm9vdCh3cmFwcGVkSG9vaywgdHlwZSwgdGFyZ2V0LCBjdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGluamVjdFRvS2VlcEFsaXZlUm9vdChob29rLCB0eXBlLCB0YXJnZXQsIGtlZXBBbGl2ZVJvb3QpIHtcbiAgICAvLyBpbmplY3RIb29rIHdyYXBzIHRoZSBvcmlnaW5hbCBmb3IgZXJyb3IgaGFuZGxpbmcsIHNvIG1ha2Ugc3VyZSB0byByZW1vdmVcbiAgICAvLyB0aGUgd3JhcHBlZCB2ZXJzaW9uLlxuICAgIGNvbnN0IGluamVjdGVkID0gaW5qZWN0SG9vayh0eXBlLCBob29rLCBrZWVwQWxpdmVSb290LCB0cnVlIC8qIHByZXBlbmQgKi8pO1xuICAgIG9uVW5tb3VudGVkKCgpID0+IHtcbiAgICAgICAgcmVtb3ZlKGtlZXBBbGl2ZVJvb3RbdHlwZV0sIGluamVjdGVkKTtcbiAgICB9LCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVzZXRTaGFwZUZsYWcodm5vZGUpIHtcbiAgICAvLyBiaXR3aXNlIG9wZXJhdGlvbnMgdG8gcmVtb3ZlIGtlZXAgYWxpdmUgZmxhZ3NcbiAgICB2bm9kZS5zaGFwZUZsYWcgJj0gfjI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcbiAgICB2bm9kZS5zaGFwZUZsYWcgJj0gfjUxMiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9LRVBUX0FMSVZFICovO1xufVxuZnVuY3Rpb24gZ2V0SW5uZXJDaGlsZCh2bm9kZSkge1xuICAgIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqLyA/IHZub2RlLnNzQ29udGVudCA6IHZub2RlO1xufVxuXG5mdW5jdGlvbiBpbmplY3RIb29rKHR5cGUsIGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSwgcHJlcGVuZCA9IGZhbHNlKSB7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICBjb25zdCBob29rcyA9IHRhcmdldFt0eXBlXSB8fCAodGFyZ2V0W3R5cGVdID0gW10pO1xuICAgICAgICAvLyBjYWNoZSB0aGUgZXJyb3IgaGFuZGxpbmcgd3JhcHBlciBmb3IgaW5qZWN0ZWQgaG9va3Mgc28gdGhlIHNhbWUgaG9va1xuICAgICAgICAvLyBjYW4gYmUgcHJvcGVybHkgZGVkdXBlZCBieSB0aGUgc2NoZWR1bGVyLiBcIl9fd2VoXCIgc3RhbmRzIGZvciBcIndpdGggZXJyb3JcbiAgICAgICAgLy8gaGFuZGxpbmdcIi5cbiAgICAgICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2VoIHx8XG4gICAgICAgICAgICAoaG9vay5fX3dlaCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pc1VubW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgdHJhY2tpbmcgaW5zaWRlIGFsbCBsaWZlY3ljbGUgaG9va3NcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGNhbiBwb3RlbnRpYWxseSBiZSBjYWxsZWQgaW5zaWRlIGVmZmVjdHMuXG4gICAgICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJyZW50SW5zdGFuY2UgZHVyaW5nIGhvb2sgaW52b2NhdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGFzc3VtZXMgdGhlIGhvb2sgZG9lcyBub3Qgc3luY2hyb25vdXNseSB0cmlnZ2VyIG90aGVyIGhvb2tzLCB3aGljaFxuICAgICAgICAgICAgICAgIC8vIGNhbiBvbmx5IGJlIGZhbHNlIHdoZW4gdGhlIHVzZXIgZG9lcyBzb21ldGhpbmcgcmVhbGx5IGZ1bmt5LlxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIHRhcmdldCwgdHlwZSwgYXJncyk7XG4gICAgICAgICAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAocHJlcGVuZCkge1xuICAgICAgICAgICAgaG9va3MudW5zaGlmdCh3cmFwcGVkSG9vayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBob29rcy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlZEhvb2s7XG4gICAgfVxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBjb25zdCBhcGlOYW1lID0gdG9IYW5kbGVyS2V5KEVycm9yVHlwZVN0cmluZ3NbdHlwZV0ucmVwbGFjZSgvIGhvb2skLywgJycpKTtcbiAgICAgICAgd2FybihgJHthcGlOYW1lfSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGAgK1xuICAgICAgICAgICAgYGFzc29jaWF0ZWQgd2l0aC4gYCArXG4gICAgICAgICAgICBgTGlmZWN5Y2xlIGluamVjdGlvbiBBUElzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGV4ZWN1dGlvbiBvZiBzZXR1cCgpLmAgK1xuICAgICAgICAgICAgKGAgSWYgeW91IGFyZSB1c2luZyBhc3luYyBzZXR1cCgpLCBtYWtlIHN1cmUgdG8gcmVnaXN0ZXIgbGlmZWN5Y2xlIGAgK1xuICAgICAgICAgICAgICAgICAgICBgaG9va3MgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdCBzdGF0ZW1lbnQuYFxuICAgICAgICAgICAgICAgICkpO1xuICAgIH1cbn1cbmNvbnN0IGNyZWF0ZUhvb2sgPSAobGlmZWN5Y2xlKSA9PiAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiBcbi8vIHBvc3QtY3JlYXRlIGxpZmVjeWNsZSByZWdpc3RyYXRpb25zIGFyZSBub29wcyBkdXJpbmcgU1NSIChleGNlcHQgZm9yIHNlcnZlclByZWZldGNoKVxuKCFpc0luU1NSQ29tcG9uZW50U2V0dXAgfHwgbGlmZWN5Y2xlID09PSBcInNwXCIgLyogTGlmZWN5Y2xlSG9va3MuU0VSVkVSX1BSRUZFVENIICovKSAmJlxuICAgIGluamVjdEhvb2sobGlmZWN5Y2xlLCAoLi4uYXJncykgPT4gaG9vayguLi5hcmdzKSwgdGFyZ2V0KTtcbmNvbnN0IG9uQmVmb3JlTW91bnQgPSBjcmVhdGVIb29rKFwiYm1cIiAvKiBMaWZlY3ljbGVIb29rcy5CRUZPUkVfTU9VTlQgKi8pO1xuY29uc3Qgb25Nb3VudGVkID0gY3JlYXRlSG9vayhcIm1cIiAvKiBMaWZlY3ljbGVIb29rcy5NT1VOVEVEICovKTtcbmNvbnN0IG9uQmVmb3JlVXBkYXRlID0gY3JlYXRlSG9vayhcImJ1XCIgLyogTGlmZWN5Y2xlSG9va3MuQkVGT1JFX1VQREFURSAqLyk7XG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiIC8qIExpZmVjeWNsZUhvb2tzLlVQREFURUQgKi8pO1xuY29uc3Qgb25CZWZvcmVVbm1vdW50ID0gY3JlYXRlSG9vayhcImJ1bVwiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9VTk1PVU5UICovKTtcbmNvbnN0IG9uVW5tb3VudGVkID0gY3JlYXRlSG9vayhcInVtXCIgLyogTGlmZWN5Y2xlSG9va3MuVU5NT1VOVEVEICovKTtcbmNvbnN0IG9uU2VydmVyUHJlZmV0Y2ggPSBjcmVhdGVIb29rKFwic3BcIiAvKiBMaWZlY3ljbGVIb29rcy5TRVJWRVJfUFJFRkVUQ0ggKi8pO1xuY29uc3Qgb25SZW5kZXJUcmlnZ2VyZWQgPSBjcmVhdGVIb29rKFwicnRnXCIgLyogTGlmZWN5Y2xlSG9va3MuUkVOREVSX1RSSUdHRVJFRCAqLyk7XG5jb25zdCBvblJlbmRlclRyYWNrZWQgPSBjcmVhdGVIb29rKFwicnRjXCIgLyogTGlmZWN5Y2xlSG9va3MuUkVOREVSX1RSQUNLRUQgKi8pO1xuZnVuY3Rpb24gb25FcnJvckNhcHR1cmVkKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICAgIGluamVjdEhvb2soXCJlY1wiIC8qIExpZmVjeWNsZUhvb2tzLkVSUk9SX0NBUFRVUkVEICovLCBob29rLCB0YXJnZXQpO1xufVxuXG4vKipcblJ1bnRpbWUgaGVscGVyIGZvciBhcHBseWluZyBkaXJlY3RpdmVzIHRvIGEgdm5vZGUuIEV4YW1wbGUgdXNhZ2U6XG5cbmNvbnN0IGNvbXAgPSByZXNvbHZlQ29tcG9uZW50KCdjb21wJylcbmNvbnN0IGZvbyA9IHJlc29sdmVEaXJlY3RpdmUoJ2ZvbycpXG5jb25zdCBiYXIgPSByZXNvbHZlRGlyZWN0aXZlKCdiYXInKVxuXG5yZXR1cm4gd2l0aERpcmVjdGl2ZXMoaChjb21wKSwgW1xuICBbZm9vLCB0aGlzLnhdLFxuICBbYmFyLCB0aGlzLnldXG5dKVxuKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgaWYgKGlzQnVpbHRJbkRpcmVjdGl2ZShuYW1lKSkge1xuICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIGRpcmVjdGl2ZSBpZHMgYXMgY3VzdG9tIGRpcmVjdGl2ZSBpZDogJyArIG5hbWUpO1xuICAgIH1cbn1cbi8qKlxuICogQWRkcyBkaXJlY3RpdmVzIHRvIGEgVk5vZGUuXG4gKi9cbmZ1bmN0aW9uIHdpdGhEaXJlY3RpdmVzKHZub2RlLCBkaXJlY3RpdmVzKSB7XG4gICAgY29uc3QgaW50ZXJuYWxJbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybihgd2l0aERpcmVjdGl2ZXMgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgcmVuZGVyIGZ1bmN0aW9ucy5gKTtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgIH1cbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEV4cG9zZVByb3h5KGludGVybmFsSW5zdGFuY2UpIHx8XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UucHJveHk7XG4gICAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzIHx8ICh2bm9kZS5kaXJzID0gW10pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyZWN0aXZlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgW2RpciwgdmFsdWUsIGFyZywgbW9kaWZpZXJzID0gRU1QVFlfT0JKXSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcikpIHtcbiAgICAgICAgICAgICAgICBkaXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50ZWQ6IGRpcixcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZDogZGlyXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaXIuZGVlcCkge1xuICAgICAgICAgICAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpbmRpbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRpcixcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdm9pZCAwLFxuICAgICAgICAgICAgICAgIGFyZyxcbiAgICAgICAgICAgICAgICBtb2RpZmllcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIHByZXZWTm9kZSwgaW5zdGFuY2UsIG5hbWUpIHtcbiAgICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnM7XG4gICAgY29uc3Qgb2xkQmluZGluZ3MgPSBwcmV2Vk5vZGUgJiYgcHJldlZOb2RlLmRpcnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgICAgIGlmIChvbGRCaW5kaW5ncykge1xuICAgICAgICAgICAgYmluZGluZy5vbGRWYWx1ZSA9IG9sZEJpbmRpbmdzW2ldLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XG4gICAgICAgIGlmIChob29rKSB7XG4gICAgICAgICAgICAvLyBkaXNhYmxlIHRyYWNraW5nIGluc2lkZSBhbGwgbGlmZWN5Y2xlIGhvb2tzXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGNhbiBwb3RlbnRpYWxseSBiZSBjYWxsZWQgaW5zaWRlIGVmZmVjdHMuXG4gICAgICAgICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOCAvKiBFcnJvckNvZGVzLkRJUkVDVElWRV9IT09LICovLCBbXG4gICAgICAgICAgICAgICAgdm5vZGUuZWwsXG4gICAgICAgICAgICAgICAgYmluZGluZyxcbiAgICAgICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgICAgICBwcmV2Vk5vZGVcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBDT01QT05FTlRTID0gJ2NvbXBvbmVudHMnO1xuY29uc3QgRElSRUNUSVZFUyA9ICdkaXJlY3RpdmVzJztcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lLCBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIG5hbWUsIHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSkgfHwgbmFtZTtcbn1cbmNvbnN0IE5VTExfRFlOQU1JQ19DT01QT05FTlQgPSBTeW1ib2woKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgaWYgKGlzU3RyaW5nKGNvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBjb21wb25lbnQsIGZhbHNlKSB8fCBjb21wb25lbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBpbnZhbGlkIHR5cGVzIHdpbGwgZmFsbHRocm91Z2ggdG8gY3JlYXRlVk5vZGUgYW5kIHJhaXNlIHdhcm5pbmdcbiAgICAgICAgcmV0dXJuIChjb21wb25lbnQgfHwgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlRGlyZWN0aXZlKG5hbWUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KERJUkVDVElWRVMsIG5hbWUpO1xufVxuLy8gaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfHwgY3VycmVudEluc3RhbmNlO1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICAgICAgICAvLyBleHBsaWNpdCBzZWxmIG5hbWUgaGFzIGhpZ2hlc3QgcHJpb3JpdHlcbiAgICAgICAgaWYgKHR5cGUgPT09IENPTVBPTkVOVFMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGZOYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQsIGZhbHNlIC8qIGRvIG5vdCBpbmNsdWRlIGluZmVycmVkIG5hbWUgdG8gYXZvaWQgYnJlYWtpbmcgZXhpc3RpbmcgY29kZSAqLyk7XG4gICAgICAgICAgICBpZiAoc2VsZk5hbWUgJiZcbiAgICAgICAgICAgICAgICAoc2VsZk5hbWUgPT09IG5hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZk5hbWUgPT09IGNhbWVsaXplKG5hbWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGZOYW1lID09PSBjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IFxuICAgICAgICAvLyBsb2NhbCByZWdpc3RyYXRpb25cbiAgICAgICAgLy8gY2hlY2sgaW5zdGFuY2VbdHlwZV0gZmlyc3Qgd2hpY2ggaXMgcmVzb2x2ZWQgZm9yIG9wdGlvbnMgQVBJXG4gICAgICAgIHJlc29sdmUoaW5zdGFuY2VbdHlwZV0gfHwgQ29tcG9uZW50W3R5cGVdLCBuYW1lKSB8fFxuICAgICAgICAgICAgLy8gZ2xvYmFsIHJlZ2lzdHJhdGlvblxuICAgICAgICAgICAgcmVzb2x2ZShpbnN0YW5jZS5hcHBDb250ZXh0W3R5cGVdLCBuYW1lKTtcbiAgICAgICAgaWYgKCFyZXMgJiYgbWF5YmVTZWxmUmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0byBpbXBsaWNpdCBzZWxmLXJlZmVyZW5jZVxuICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhID0gdHlwZSA9PT0gQ09NUE9ORU5UU1xuICAgICAgICAgICAgICAgID8gYFxcbklmIHRoaXMgaXMgYSBuYXRpdmUgY3VzdG9tIGVsZW1lbnQsIG1ha2Ugc3VyZSB0byBleGNsdWRlIGl0IGZyb20gYCArXG4gICAgICAgICAgICAgICAgICAgIGBjb21wb25lbnQgcmVzb2x1dGlvbiB2aWEgY29tcGlsZXJPcHRpb25zLmlzQ3VzdG9tRWxlbWVudC5gXG4gICAgICAgICAgICAgICAgOiBgYDtcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byByZXNvbHZlICR7dHlwZS5zbGljZSgwLCAtMSl9OiAke25hbWV9JHtleHRyYX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FybihgcmVzb2x2ZSR7Y2FwaXRhbGl6ZSh0eXBlLnNsaWNlKDAsIC0xKSl9IGAgK1xuICAgICAgICAgICAgYGNhbiBvbmx5IGJlIHVzZWQgaW4gcmVuZGVyKCkgb3Igc2V0dXAoKS5gKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXNvbHZlKHJlZ2lzdHJ5LCBuYW1lKSB7XG4gICAgcmV0dXJuIChyZWdpc3RyeSAmJlxuICAgICAgICAocmVnaXN0cnlbbmFtZV0gfHxcbiAgICAgICAgICAgIHJlZ2lzdHJ5W2NhbWVsaXplKG5hbWUpXSB8fFxuICAgICAgICAgICAgcmVnaXN0cnlbY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSldKSk7XG59XG5cbi8qKlxuICogQWN0dWFsIGltcGxlbWVudGF0aW9uXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3Qoc291cmNlLCByZW5kZXJJdGVtLCBjYWNoZSwgaW5kZXgpIHtcbiAgICBsZXQgcmV0O1xuICAgIGNvbnN0IGNhY2hlZCA9IChjYWNoZSAmJiBjYWNoZVtpbmRleF0pO1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkgfHwgaXNTdHJpbmcoc291cmNlKSkge1xuICAgICAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gc291cmNlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2VbaV0sIGksIHVuZGVmaW5lZCwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhTnVtYmVyLmlzSW50ZWdlcihzb3VyY2UpKSB7XG4gICAgICAgICAgICB3YXJuKGBUaGUgdi1mb3IgcmFuZ2UgZXhwZWN0IGFuIGludGVnZXIgdmFsdWUgYnV0IGdvdCAke3NvdXJjZX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlOyBpKyspIHtcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oaSArIDEsIGksIHVuZGVmaW5lZCwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgICBpZiAoc291cmNlW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgICAgIHJldCA9IEFycmF5LmZyb20oc291cmNlLCAoaXRlbSwgaSkgPT4gcmVuZGVySXRlbShpdGVtLCBpLCB1bmRlZmluZWQsIGNhY2hlZCAmJiBjYWNoZWRbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2tleV0sIGtleSwgaSwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldCA9IFtdO1xuICAgIH1cbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGVbaW5kZXhdID0gcmV0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIENvbXBpbGVyIHJ1bnRpbWUgaGVscGVyIGZvciBjcmVhdGluZyBkeW5hbWljIHNsb3RzIG9iamVjdFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2xvdHMoc2xvdHMsIGR5bmFtaWNTbG90cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSBkeW5hbWljU2xvdHNbaV07XG4gICAgICAgIC8vIGFycmF5IG9mIGR5bmFtaWMgc2xvdCBnZW5lcmF0ZWQgYnkgPHRlbXBsYXRlIHYtZm9yPVwiLi4uXCIgI1suLi5dPlxuICAgICAgICBpZiAoaXNBcnJheShzbG90KSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgc2xvdHNbc2xvdFtqXS5uYW1lXSA9IHNsb3Rbal0uZm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2xvdCkge1xuICAgICAgICAgICAgLy8gY29uZGl0aW9uYWwgc2luZ2xlIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWlmPVwiLi4uXCIgI2Zvbz5cbiAgICAgICAgICAgIHNsb3RzW3Nsb3QubmFtZV0gPSBzbG90LmtleVxuICAgICAgICAgICAgICAgID8gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gc2xvdC5mbiguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoIGJyYW5jaCBrZXkgc28gZWFjaCBjb25kaXRpb25hbCBicmFuY2ggaXMgY29uc2lkZXJlZCBhXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpZmZlcmVudCBmcmFnbWVudFxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmtleSA9IHNsb3Qua2V5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHNsb3QuZm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNsb3RzO1xufVxuXG4vKipcbiAqIENvbXBpbGVyIHJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgYDxzbG90Lz5gXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90KHNsb3RzLCBuYW1lLCBwcm9wcyA9IHt9LCBcbi8vIHRoaXMgaXMgbm90IGEgdXNlci1mYWNpbmcgZnVuY3Rpb24sIHNvIHRoZSBmYWxsYmFjayBpcyBhbHdheXMgZ2VuZXJhdGVkIGJ5XG4vLyB0aGUgY29tcGlsZXIgYW5kIGd1YXJhbnRlZWQgdG8gYmUgYSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gYXJyYXlcbmZhbGxiYWNrLCBub1Nsb3R0ZWQpIHtcbiAgICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLmlzQ0UgfHxcbiAgICAgICAgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQgJiZcbiAgICAgICAgICAgIGlzQXN5bmNXcmFwcGVyKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQpICYmXG4gICAgICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UucGFyZW50LmlzQ0UpKSB7XG4gICAgICAgIGlmIChuYW1lICE9PSAnZGVmYXVsdCcpXG4gICAgICAgICAgICBwcm9wcy5uYW1lID0gbmFtZTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKCdzbG90JywgcHJvcHMsIGZhbGxiYWNrICYmIGZhbGxiYWNrKCkpO1xuICAgIH1cbiAgICBsZXQgc2xvdCA9IHNsb3RzW25hbWVdO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2xvdCAmJiBzbG90Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgd2FybihgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGAgK1xuICAgICAgICAgICAgYGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIGAgK1xuICAgICAgICAgICAgYHBhcmVudCB0ZW1wbGF0ZS5gKTtcbiAgICAgICAgc2xvdCA9ICgpID0+IFtdO1xuICAgIH1cbiAgICAvLyBhIGNvbXBpbGVkIHNsb3QgZGlzYWJsZXMgYmxvY2sgdHJhY2tpbmcgYnkgZGVmYXVsdCB0byBhdm9pZCBtYW51YWxcbiAgICAvLyBpbnZvY2F0aW9uIGludGVyZmVyaW5nIHdpdGggdGVtcGxhdGUtYmFzZWQgYmxvY2sgdHJhY2tpbmcsIGJ1dCBpblxuICAgIC8vIGByZW5kZXJTbG90YCB3ZSBjYW4gYmUgc3VyZSB0aGF0IGl0J3MgdGVtcGxhdGUtYmFzZWQgc28gd2UgY2FuIGZvcmNlXG4gICAgLy8gZW5hYmxlIGl0LlxuICAgIGlmIChzbG90ICYmIHNsb3QuX2MpIHtcbiAgICAgICAgc2xvdC5fZCA9IGZhbHNlO1xuICAgIH1cbiAgICBvcGVuQmxvY2soKTtcbiAgICBjb25zdCB2YWxpZFNsb3RDb250ZW50ID0gc2xvdCAmJiBlbnN1cmVWYWxpZFZOb2RlKHNsb3QocHJvcHMpKTtcbiAgICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKEZyYWdtZW50LCB7XG4gICAgICAgIGtleTogcHJvcHMua2V5IHx8XG4gICAgICAgICAgICAvLyBzbG90IGNvbnRlbnQgYXJyYXkgb2YgYSBkeW5hbWljIGNvbmRpdGlvbmFsIHNsb3QgbWF5IGhhdmUgYSBicmFuY2hcbiAgICAgICAgICAgIC8vIGtleSBhdHRhY2hlZCBpbiB0aGUgYGNyZWF0ZVNsb3RzYCBoZWxwZXIsIHJlc3BlY3QgdGhhdFxuICAgICAgICAgICAgKHZhbGlkU2xvdENvbnRlbnQgJiYgdmFsaWRTbG90Q29udGVudC5rZXkpIHx8XG4gICAgICAgICAgICBgXyR7bmFtZX1gXG4gICAgfSwgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLCB2YWxpZFNsb3RDb250ZW50ICYmIHNsb3RzLl8gPT09IDEgLyogU2xvdEZsYWdzLlNUQUJMRSAqL1xuICAgICAgICA/IDY0IC8qIFBhdGNoRmxhZ3MuU1RBQkxFX0ZSQUdNRU5UICovXG4gICAgICAgIDogLTIgLyogUGF0Y2hGbGFncy5CQUlMICovKTtcbiAgICBpZiAoIW5vU2xvdHRlZCAmJiByZW5kZXJlZC5zY29wZUlkKSB7XG4gICAgICAgIHJlbmRlcmVkLnNsb3RTY29wZUlkcyA9IFtyZW5kZXJlZC5zY29wZUlkICsgJy1zJ107XG4gICAgfVxuICAgIGlmIChzbG90ICYmIHNsb3QuX2MpIHtcbiAgICAgICAgc2xvdC5fZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJlZDtcbn1cbmZ1bmN0aW9uIGVuc3VyZVZhbGlkVk5vZGUodm5vZGVzKSB7XG4gICAgcmV0dXJuIHZub2Rlcy5zb21lKGNoaWxkID0+IHtcbiAgICAgICAgaWYgKCFpc1ZOb2RlKGNoaWxkKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50ICYmXG4gICAgICAgICAgICAhZW5zdXJlVmFsaWRWTm9kZShjaGlsZC5jaGlsZHJlbikpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pXG4gICAgICAgID8gdm5vZGVzXG4gICAgICAgIDogbnVsbDtcbn1cblxuLyoqXG4gKiBGb3IgcHJlZml4aW5nIGtleXMgaW4gdi1vbj1cIm9ialwiIHdpdGggXCJvblwiXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0b0hhbmRsZXJzKG9iaiwgcHJlc2VydmVDYXNlSWZOZWNlc3NhcnkpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChvYmopKSB7XG4gICAgICAgIHdhcm4oYHYtb24gd2l0aCBubyBhcmd1bWVudCBleHBlY3RzIGFuIG9iamVjdCB2YWx1ZS5gKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIHJldFtwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSAmJiAvW0EtWl0vLnRlc3Qoa2V5KVxuICAgICAgICAgICAgPyBgb246JHtrZXl9YFxuICAgICAgICAgICAgOiB0b0hhbmRsZXJLZXkoa2V5KV0gPSBvYmpba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiAjMjQzNyBJbiBWdWUgMywgZnVuY3Rpb25hbCBjb21wb25lbnRzIGRvIG5vdCBoYXZlIGEgcHVibGljIGluc3RhbmNlIHByb3h5IGJ1dFxuICogdGhleSBleGlzdCBpbiB0aGUgaW50ZXJuYWwgcGFyZW50IGNoYWluLiBGb3IgY29kZSB0aGF0IHJlbGllcyBvbiB0cmF2ZXJzaW5nXG4gKiBwdWJsaWMgJHBhcmVudCBjaGFpbnMsIHNraXAgZnVuY3Rpb25hbCBvbmVzIGFuZCBnbyB0byB0aGUgcGFyZW50IGluc3RlYWQuXG4gKi9cbmNvbnN0IGdldFB1YmxpY0luc3RhbmNlID0gKGkpID0+IHtcbiAgICBpZiAoIWkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChpc1N0YXRlZnVsQ29tcG9uZW50KGkpKVxuICAgICAgICByZXR1cm4gZ2V0RXhwb3NlUHJveHkoaSkgfHwgaS5wcm94eTtcbiAgICByZXR1cm4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpO1xufTtcbmNvbnN0IHB1YmxpY1Byb3BlcnRpZXNNYXAgPSBcbi8vIE1vdmUgUFVSRSBtYXJrZXIgdG8gbmV3IGxpbmUgdG8gd29ya2Fyb3VuZCBjb21waWxlciBkaXNjYXJkaW5nIGl0XG4vLyBkdWUgdG8gdHlwZSBhbm5vdGF0aW9uXG4vKiNfX1BVUkVfXyovIGV4dGVuZChPYmplY3QuY3JlYXRlKG51bGwpLCB7XG4gICAgJDogaSA9PiBpLFxuICAgICRlbDogaSA9PiBpLnZub2RlLmVsLFxuICAgICRkYXRhOiBpID0+IGkuZGF0YSxcbiAgICAkcHJvcHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnByb3BzKSA6IGkucHJvcHMpLFxuICAgICRhdHRyczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkuYXR0cnMpIDogaS5hdHRycyksXG4gICAgJHNsb3RzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5zbG90cykgOiBpLnNsb3RzKSxcbiAgICAkcmVmczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucmVmcykgOiBpLnJlZnMpLFxuICAgICRwYXJlbnQ6IGkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpLFxuICAgICRyb290OiBpID0+IGdldFB1YmxpY0luc3RhbmNlKGkucm9vdCksXG4gICAgJGVtaXQ6IGkgPT4gaS5lbWl0LFxuICAgICRvcHRpb25zOiBpID0+IChfX1ZVRV9PUFRJT05TX0FQSV9fID8gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaSkgOiBpLnR5cGUpLFxuICAgICRmb3JjZVVwZGF0ZTogaSA9PiBpLmYgfHwgKGkuZiA9ICgpID0+IHF1ZXVlSm9iKGkudXBkYXRlKSksXG4gICAgJG5leHRUaWNrOiBpID0+IGkubiB8fCAoaS5uID0gbmV4dFRpY2suYmluZChpLnByb3h5KSksXG4gICAgJHdhdGNoOiBpID0+IChfX1ZVRV9PUFRJT05TX0FQSV9fID8gaW5zdGFuY2VXYXRjaC5iaW5kKGkpIDogTk9PUClcbn0pO1xuY29uc3QgaXNSZXNlcnZlZFByZWZpeCA9IChrZXkpID0+IGtleSA9PT0gJ18nIHx8IGtleSA9PT0gJyQnO1xuY29uc3QgaGFzU2V0dXBCaW5kaW5nID0gKHN0YXRlLCBrZXkpID0+IHN0YXRlICE9PSBFTVBUWV9PQkogJiYgIXN0YXRlLl9faXNTY3JpcHRTZXR1cCAmJiBoYXNPd24oc3RhdGUsIGtleSk7XG5jb25zdCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSB7XG4gICAgZ2V0KHsgXzogaW5zdGFuY2UgfSwga2V5KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4LCBzZXR1cFN0YXRlLCBkYXRhLCBwcm9wcywgYWNjZXNzQ2FjaGUsIHR5cGUsIGFwcENvbnRleHQgfSA9IGluc3RhbmNlO1xuICAgICAgICAvLyBmb3IgaW50ZXJuYWwgZm9ybWF0dGVycyB0byBrbm93IHRoYXQgdGhpcyBpcyBhIFZ1ZSBpbnN0YW5jZVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSA9PT0gJ19faXNWdWUnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkYXRhIC8gcHJvcHMgLyBjdHhcbiAgICAgICAgLy8gVGhpcyBnZXR0ZXIgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IHByb3BlcnR5IGFjY2VzcyBvbiB0aGUgcmVuZGVyIGNvbnRleHRcbiAgICAgICAgLy8gZHVyaW5nIHJlbmRlciBhbmQgaXMgYSBtYWpvciBob3RzcG90LiBUaGUgbW9zdCBleHBlbnNpdmUgcGFydCBvZiB0aGlzXG4gICAgICAgIC8vIGlzIHRoZSBtdWx0aXBsZSBoYXNPd24oKSBjYWxscy4gSXQncyBtdWNoIGZhc3RlciB0byBkbyBhIHNpbXBsZSBwcm9wZXJ0eVxuICAgICAgICAvLyBhY2Nlc3Mgb24gYSBwbGFpbiBvYmplY3QsIHNvIHdlIHVzZSBhbiBhY2Nlc3NDYWNoZSBvYmplY3QgKHdpdGggbnVsbFxuICAgICAgICAvLyBwcm90b3R5cGUpIHRvIG1lbW9pemUgd2hhdCBhY2Nlc3MgdHlwZSBhIGtleSBjb3JyZXNwb25kcyB0by5cbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcbiAgICAgICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gYWNjZXNzQ2FjaGVba2V5XTtcbiAgICAgICAgICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxIC8qIEFjY2Vzc1R5cGVzLlNFVFVQICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyIC8qIEFjY2Vzc1R5cGVzLkRBVEEgKi86XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQgLyogQWNjZXNzVHlwZXMuQ09OVEVYVCAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzIC8qIEFjY2Vzc1R5cGVzLlBST1BTICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IGp1c3QgZmFsbHRocm91Z2hcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNTZXR1cEJpbmRpbmcoc2V0dXBTdGF0ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIEFjY2Vzc1R5cGVzLlNFVFVQICovO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMiAvKiBBY2Nlc3NUeXBlcy5EQVRBICovO1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIC8vIG9ubHkgY2FjaGUgb3RoZXIgcHJvcGVydGllcyB3aGVuIGluc3RhbmNlIGhhcyBkZWNsYXJlZCAodGh1cyBzdGFibGUpXG4gICAgICAgICAgICAvLyBwcm9wc1xuICAgICAgICAgICAgKG5vcm1hbGl6ZWRQcm9wcyA9IGluc3RhbmNlLnByb3BzT3B0aW9uc1swXSkgJiZcbiAgICAgICAgICAgICAgICBoYXNPd24obm9ybWFsaXplZFByb3BzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogQWNjZXNzVHlwZXMuUFJPUFMgKi87XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogQWNjZXNzVHlwZXMuQ09OVEVYVCAqLztcbiAgICAgICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghX19WVUVfT1BUSU9OU19BUElfXyB8fCBzaG91bGRDYWNoZUFjY2Vzcykge1xuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAwIC8qIEFjY2Vzc1R5cGVzLk9USEVSICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB1YmxpY0dldHRlciA9IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XTtcbiAgICAgICAgbGV0IGNzc01vZHVsZSwgZ2xvYmFsUHJvcGVydGllcztcbiAgICAgICAgLy8gcHVibGljICR4eHggcHJvcGVydGllc1xuICAgICAgICBpZiAocHVibGljR2V0dGVyKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnJGF0dHJzJykge1xuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sIGtleSk7XG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHVibGljR2V0dGVyKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgLy8gY3NzIG1vZHVsZSAoaW5qZWN0ZWQgYnkgdnVlLWxvYWRlcilcbiAgICAgICAgKGNzc01vZHVsZSA9IHR5cGUuX19jc3NNb2R1bGVzKSAmJlxuICAgICAgICAgICAgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc01vZHVsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICAgICAgICAvLyB1c2VyIG1heSBzZXQgY3VzdG9tIHByb3BlcnRpZXMgdG8gYHRoaXNgIHRoYXQgc3RhcnQgd2l0aCBgJGBcbiAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIEFjY2Vzc1R5cGVzLkNPTlRFWFQgKi87XG4gICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXG4gICAgICAgICgoZ2xvYmFsUHJvcGVydGllcyA9IGFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMpLFxuICAgICAgICAgICAgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSkpKSB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFByb3BlcnRpZXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSAmJlxuICAgICAgICAgICAgKCFpc1N0cmluZyhrZXkpIHx8XG4gICAgICAgICAgICAgICAgLy8gIzEwOTEgYXZvaWQgaW50ZXJuYWwgaXNSZWYvaXNWTm9kZSBjaGVja3Mgb24gY29tcG9uZW50IGluc3RhbmNlIGxlYWRpbmdcbiAgICAgICAgICAgICAgICAvLyB0byBpbmZpbml0ZSB3YXJuaW5nIGxvb3BcbiAgICAgICAgICAgICAgICBrZXkuaW5kZXhPZignX192JykgIT09IDApKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gbXVzdCBiZSBhY2Nlc3NlZCB2aWEgJGRhdGEgYmVjYXVzZSBpdCBzdGFydHMgd2l0aCBhIHJlc2VydmVkIGAgK1xuICAgICAgICAgICAgICAgICAgICBgY2hhcmFjdGVyIChcIiRcIiBvciBcIl9cIikgYW5kIGlzIG5vdCBwcm94aWVkIG9uIHRoZSByZW5kZXIgY29udGV4dC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluc3RhbmNlID09PSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHdhcyBhY2Nlc3NlZCBkdXJpbmcgcmVuZGVyIGAgK1xuICAgICAgICAgICAgICAgICAgICBgYnV0IGlzIG5vdCBkZWZpbmVkIG9uIGluc3RhbmNlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgc2V0dXBTdGF0ZSwgY3R4IH0gPSBpbnN0YW5jZTtcbiAgICAgICAgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgICAgICBzZXR1cFN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiZcbiAgICAgICAgICAgIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICAgICAgICB3YXJuKGBDYW5ub3QgbXV0YXRlIDxzY3JpcHQgc2V0dXA+IGJpbmRpbmcgXCIke2tleX1cIiBmcm9tIE9wdGlvbnMgQVBJLmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNPd24oaW5zdGFuY2UucHJvcHMsIGtleSkpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwcm9wIFwiJHtrZXl9XCIuIFByb3BzIGFyZSByZWFkb25seS5gKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5WzBdID09PSAnJCcgJiYga2V5LnNsaWNlKDEpIGluIGluc3RhbmNlKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBQcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggJCBhcmUgcmVzZXJ2ZWQgYW5kIHJlYWRvbmx5LmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgaW4gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHsgXzogeyBkYXRhLCBzZXR1cFN0YXRlLCBhY2Nlc3NDYWNoZSwgY3R4LCBhcHBDb250ZXh0LCBwcm9wc09wdGlvbnMgfSB9LCBrZXkpIHtcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcbiAgICAgICAgcmV0dXJuICghIWFjY2Vzc0NhY2hlW2tleV0gfHxcbiAgICAgICAgICAgIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHx8XG4gICAgICAgICAgICBoYXNTZXR1cEJpbmRpbmcoc2V0dXBTdGF0ZSwga2V5KSB8fFxuICAgICAgICAgICAgKChub3JtYWxpemVkUHJvcHMgPSBwcm9wc09wdGlvbnNbMF0pICYmIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkpIHx8XG4gICAgICAgICAgICBoYXNPd24oY3R4LCBrZXkpIHx8XG4gICAgICAgICAgICBoYXNPd24ocHVibGljUHJvcGVydGllc01hcCwga2V5KSB8fFxuICAgICAgICAgICAgaGFzT3duKGFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsIGtleSkpO1xuICAgIH0sXG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgaWYgKGRlc2NyaXB0b3IuZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGludmFsaWRhdGUga2V5IGNhY2hlIG9mIGEgZ2V0dGVyIGJhc2VkIHByb3BlcnR5ICM1NDE3XG4gICAgICAgICAgICB0YXJnZXQuXy5hY2Nlc3NDYWNoZVtrZXldID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNPd24oZGVzY3JpcHRvciwgJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yLnZhbHVlLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxufTtcbmlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZhbHNlKSB7XG4gICAgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLm93bktleXMgPSAodGFyZ2V0KSA9PiB7XG4gICAgICAgIHdhcm4oYEF2b2lkIGFwcCBsb2dpYyB0aGF0IHJlbGllcyBvbiBlbnVtZXJhdGluZyBrZXlzIG9uIGEgY29tcG9uZW50IGluc3RhbmNlLiBgICtcbiAgICAgICAgICAgIGBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gKTtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xuICAgIH07XG59XG5jb25zdCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLCB7XG4gICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgIC8vIGZhc3QgcGF0aCBmb3IgdW5zY29wYWJsZXMgd2hlbiB1c2luZyBgd2l0aGAgYmxvY2tcbiAgICAgICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5nZXQodGFyZ2V0LCBrZXksIHRhcmdldCk7XG4gICAgfSxcbiAgICBoYXMoXywga2V5KSB7XG4gICAgICAgIGNvbnN0IGhhcyA9IGtleVswXSAhPT0gJ18nICYmICFpc0dsb2JhbGx5V2hpdGVsaXN0ZWQoa2V5KTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzICYmIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5oYXMoXywga2V5KSkge1xuICAgICAgICAgICAgd2FybihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXyB3aGljaCBpcyBhIHJlc2VydmVkIHByZWZpeCBmb3IgVnVlIGludGVybmFscy5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzO1xuICAgIH1cbn0pO1xuLy8gZGV2IG9ubHlcbi8vIEluIGRldiBtb2RlLCB0aGUgcHJveHkgdGFyZ2V0IGV4cG9zZXMgdGhlIHNhbWUgcHJvcGVydGllcyBhcyBzZWVuIG9uIGB0aGlzYFxuLy8gZm9yIGVhc2llciBjb25zb2xlIGluc3BlY3Rpb24uIEluIHByb2QgbW9kZSBpdCB3aWxsIGJlIGFuIGVtcHR5IG9iamVjdCBzb1xuLy8gdGhlc2UgcHJvcGVydGllcyBkZWZpbml0aW9ucyBjYW4gYmUgc2tpcHBlZC5cbmZ1bmN0aW9uIGNyZWF0ZURldlJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICAvLyBleHBvc2UgaW50ZXJuYWwgaW5zdGFuY2UgZm9yIHByb3h5IGhhbmRsZXJzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgYF9gLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGdldDogKCkgPT4gaW5zdGFuY2VcbiAgICB9KTtcbiAgICAvLyBleHBvc2UgcHVibGljIHByb3BlcnRpZXNcbiAgICBPYmplY3Qua2V5cyhwdWJsaWNQcm9wZXJ0aWVzTWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSksXG4gICAgICAgICAgICAvLyBpbnRlcmNlcHRlZCBieSB0aGUgcHJveHkgc28gbm8gbmVlZCBmb3IgaW1wbGVtZW50YXRpb24sXG4gICAgICAgICAgICAvLyBidXQgbmVlZGVkIHRvIHByZXZlbnQgc2V0IGVycm9yc1xuICAgICAgICAgICAgc2V0OiBOT09QXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vLyBkZXYgb25seVxuZnVuY3Rpb24gZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgICBjb25zdCB7IGN0eCwgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKHByb3BzT3B0aW9ucykge1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wc09wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gaW5zdGFuY2UucHJvcHNba2V5XSxcbiAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyBkZXYgb25seVxuZnVuY3Rpb24gZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgY3R4LCBzZXR1cFN0YXRlIH0gPSBpbnN0YW5jZTtcbiAgICBPYmplY3Qua2V5cyh0b1JhdyhzZXR1cFN0YXRlKSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoIXNldHVwU3RhdGUuX19pc1NjcmlwdFNldHVwKSB7XG4gICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pKSB7XG4gICAgICAgICAgICAgICAgd2Fybihgc2V0dXAoKSByZXR1cm4gcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXCIkXCIgb3IgXCJfXCIgYCArXG4gICAgICAgICAgICAgICAgICAgIGB3aGljaCBhcmUgcmVzZXJ2ZWQgcHJlZml4ZXMgZm9yIFZ1ZSBpbnRlcm5hbHMuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBzZXR1cFN0YXRlW2tleV0sXG4gICAgICAgICAgICAgICAgc2V0OiBOT09QXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEdXBsaWNhdGVDaGVja2VyKCkge1xuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZXR1cm4gKHR5cGUsIGtleSkgPT4ge1xuICAgICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICAgICAgd2FybihgJHt0eXBlfSBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiAke2NhY2hlW2tleV19LmApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHR5cGU7XG4gICAgICAgIH1cbiAgICB9O1xufVxubGV0IHNob3VsZENhY2hlQWNjZXNzID0gdHJ1ZTtcbmZ1bmN0aW9uIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSk7XG4gICAgY29uc3QgcHVibGljVGhpcyA9IGluc3RhbmNlLnByb3h5O1xuICAgIGNvbnN0IGN0eCA9IGluc3RhbmNlLmN0eDtcbiAgICAvLyBkbyBub3QgY2FjaGUgcHJvcGVydHkgYWNjZXNzIG9uIHB1YmxpYyBwcm94eSBkdXJpbmcgc3RhdGUgaW5pdGlhbGl6YXRpb25cbiAgICBzaG91bGRDYWNoZUFjY2VzcyA9IGZhbHNlO1xuICAgIC8vIGNhbGwgYmVmb3JlQ3JlYXRlIGZpcnN0IGJlZm9yZSBhY2Nlc3Npbmcgb3RoZXIgb3B0aW9ucyBzaW5jZVxuICAgIC8vIHRoZSBob29rIG1heSBtdXRhdGUgcmVzb2x2ZWQgb3B0aW9ucyAoIzI3OTEpXG4gICAgaWYgKG9wdGlvbnMuYmVmb3JlQ3JlYXRlKSB7XG4gICAgICAgIGNhbGxIb29rKG9wdGlvbnMuYmVmb3JlQ3JlYXRlLCBpbnN0YW5jZSwgXCJiY1wiIC8qIExpZmVjeWNsZUhvb2tzLkJFRk9SRV9DUkVBVEUgKi8pO1xuICAgIH1cbiAgICBjb25zdCB7IFxuICAgIC8vIHN0YXRlXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsIGNvbXB1dGVkOiBjb21wdXRlZE9wdGlvbnMsIG1ldGhvZHMsIHdhdGNoOiB3YXRjaE9wdGlvbnMsIHByb3ZpZGU6IHByb3ZpZGVPcHRpb25zLCBpbmplY3Q6IGluamVjdE9wdGlvbnMsIFxuICAgIC8vIGxpZmVjeWNsZVxuICAgIGNyZWF0ZWQsIGJlZm9yZU1vdW50LCBtb3VudGVkLCBiZWZvcmVVcGRhdGUsIHVwZGF0ZWQsIGFjdGl2YXRlZCwgZGVhY3RpdmF0ZWQsIGJlZm9yZURlc3Ryb3ksIGJlZm9yZVVubW91bnQsIGRlc3Ryb3llZCwgdW5tb3VudGVkLCByZW5kZXIsIHJlbmRlclRyYWNrZWQsIHJlbmRlclRyaWdnZXJlZCwgZXJyb3JDYXB0dXJlZCwgc2VydmVyUHJlZmV0Y2gsIFxuICAgIC8vIHB1YmxpYyBBUElcbiAgICBleHBvc2UsIGluaGVyaXRBdHRycywgXG4gICAgLy8gYXNzZXRzXG4gICAgY29tcG9uZW50cywgZGlyZWN0aXZlcywgZmlsdGVycyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjcmVhdGVEdXBsaWNhdGVDaGVja2VyKCkgOiBudWxsO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgY29uc3QgW3Byb3BzT3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gICAgICAgIGlmIChwcm9wc09wdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIlByb3BzXCIgLyogT3B0aW9uVHlwZXMuUFJPUFMgKi8sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gb3B0aW9ucyBpbml0aWFsaXphdGlvbiBvcmRlciAodG8gYmUgY29uc2lzdGVudCB3aXRoIFZ1ZSAyKTpcbiAgICAvLyAtIHByb3BzIChhbHJlYWR5IGRvbmUgb3V0c2lkZSBvZiB0aGlzIGZ1bmN0aW9uKVxuICAgIC8vIC0gaW5qZWN0XG4gICAgLy8gLSBtZXRob2RzXG4gICAgLy8gLSBkYXRhIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcbiAgICAvLyAtIGNvbXB1dGVkXG4gICAgLy8gLSB3YXRjaCAoZGVmZXJyZWQgc2luY2UgaXQgcmVsaWVzIG9uIGB0aGlzYCBhY2Nlc3MpXG4gICAgaWYgKGluamVjdE9wdGlvbnMpIHtcbiAgICAgICAgcmVzb2x2ZUluamVjdGlvbnMoaW5qZWN0T3B0aW9ucywgY3R4LCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMsIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnVud3JhcEluamVjdGVkUmVmKTtcbiAgICB9XG4gICAgaWYgKG1ldGhvZHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbWV0aG9kcykge1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kSGFuZGxlciA9IG1ldGhvZHNba2V5XTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG1ldGhvZEhhbmRsZXIpKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gZGV2IG1vZGUsIHdlIHVzZSB0aGUgYGNyZWF0ZVJlbmRlckNvbnRleHRgIGZ1bmN0aW9uIHRvIGRlZmluZVxuICAgICAgICAgICAgICAgIC8vIG1ldGhvZHMgdG8gdGhlIHByb3h5IHRhcmdldCwgYW5kIHRob3NlIGFyZSByZWFkLW9ubHkgYnV0XG4gICAgICAgICAgICAgICAgLy8gcmVjb25maWd1cmFibGUsIHNvIGl0IG5lZWRzIHRvIGJlIHJlZGVmaW5lZCBoZXJlXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZXRob2RIYW5kbGVyLmJpbmQocHVibGljVGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHhba2V5XSA9IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogT3B0aW9uVHlwZXMuTUVUSE9EUyAqLywga2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBNZXRob2QgXCIke2tleX1cIiBoYXMgdHlwZSBcIiR7dHlwZW9mIG1ldGhvZEhhbmRsZXJ9XCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYERpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRhdGFPcHRpb25zKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRnVuY3Rpb24oZGF0YU9wdGlvbnMpKSB7XG4gICAgICAgICAgICB3YXJuKGBUaGUgZGF0YSBvcHRpb24gbXVzdCBiZSBhIGZ1bmN0aW9uLiBgICtcbiAgICAgICAgICAgICAgICBgUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFPcHRpb25zLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNQcm9taXNlKGRhdGEpKSB7XG4gICAgICAgICAgICB3YXJuKGBkYXRhKCkgcmV0dXJuZWQgYSBQcm9taXNlIC0gbm90ZSBkYXRhKCkgY2Fubm90IGJlIGFzeW5jOyBJZiB5b3UgYCArXG4gICAgICAgICAgICAgICAgYGludGVuZCB0byBwZXJmb3JtIGRhdGEgZmV0Y2hpbmcgYmVmb3JlIGNvbXBvbmVudCByZW5kZXJzLCB1c2UgYCArXG4gICAgICAgICAgICAgICAgYGFzeW5jIHNldHVwKCkgKyA8U3VzcGVuc2U+LmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBkYXRhKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5kYXRhID0gcmVhY3RpdmUoZGF0YSk7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJEYXRhXCIgLyogT3B0aW9uVHlwZXMuREFUQSAqLywga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXhwb3NlIGRhdGEgb24gY3R4IGR1cmluZyBkZXZcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJlZml4KGtleVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gZGF0YVtrZXldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogTk9PUFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc3RhdGUgaW5pdGlhbGl6YXRpb24gY29tcGxldGUgYXQgdGhpcyBwb2ludCAtIHN0YXJ0IGNhY2hpbmcgYWNjZXNzXG4gICAgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xuICAgIGlmIChjb21wdXRlZE9wdGlvbnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBvcHQgPSBjb21wdXRlZE9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGNvbnN0IGdldCA9IGlzRnVuY3Rpb24ob3B0KVxuICAgICAgICAgICAgICAgID8gb3B0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcylcbiAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24ob3B0LmdldClcbiAgICAgICAgICAgICAgICAgICAgPyBvcHQuZ2V0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcylcbiAgICAgICAgICAgICAgICAgICAgOiBOT09QO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBnZXQgPT09IE5PT1ApIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBDb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGhhcyBubyBnZXR0ZXIuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZXQgPSAhaXNGdW5jdGlvbihvcHQpICYmIGlzRnVuY3Rpb24ob3B0LnNldClcbiAgICAgICAgICAgICAgICA/IG9wdC5zZXQuYmluZChwdWJsaWNUaGlzKVxuICAgICAgICAgICAgICAgIDogKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXG4gICAgICAgICAgICAgICAgICAgID8gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBpcyByZWFkb25seS5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IE5PT1A7XG4gICAgICAgICAgICBjb25zdCBjID0gY29tcHV0ZWQoe1xuICAgICAgICAgICAgICAgIGdldCxcbiAgICAgICAgICAgICAgICBzZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBjLnZhbHVlLFxuICAgICAgICAgICAgICAgIHNldDogdiA9PiAoYy52YWx1ZSA9IHYpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJDb21wdXRlZFwiIC8qIE9wdGlvblR5cGVzLkNPTVBVVEVEICovLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh3YXRjaE9wdGlvbnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gd2F0Y2hPcHRpb25zKSB7XG4gICAgICAgICAgICBjcmVhdGVXYXRjaGVyKHdhdGNoT3B0aW9uc1trZXldLCBjdHgsIHB1YmxpY1RoaXMsIGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3ZpZGVPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaXNGdW5jdGlvbihwcm92aWRlT3B0aW9ucylcbiAgICAgICAgICAgID8gcHJvdmlkZU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzKVxuICAgICAgICAgICAgOiBwcm92aWRlT3B0aW9ucztcbiAgICAgICAgUmVmbGVjdC5vd25LZXlzKHByb3ZpZGVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoY3JlYXRlZCkge1xuICAgICAgICBjYWxsSG9vayhjcmVhdGVkLCBpbnN0YW5jZSwgXCJjXCIgLyogTGlmZWN5Y2xlSG9va3MuQ1JFQVRFRCAqLyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhyZWdpc3RlciwgaG9vaykge1xuICAgICAgICBpZiAoaXNBcnJheShob29rKSkge1xuICAgICAgICAgICAgaG9vay5mb3JFYWNoKF9ob29rID0+IHJlZ2lzdGVyKF9ob29rLmJpbmQocHVibGljVGhpcykpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChob29rKSB7XG4gICAgICAgICAgICByZWdpc3Rlcihob29rLmJpbmQocHVibGljVGhpcykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZU1vdW50LCBiZWZvcmVNb3VudCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uTW91bnRlZCwgbW91bnRlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlVXBkYXRlLCBiZWZvcmVVcGRhdGUpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVwZGF0ZWQsIHVwZGF0ZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkFjdGl2YXRlZCwgYWN0aXZhdGVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25EZWFjdGl2YXRlZCwgZGVhY3RpdmF0ZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkVycm9yQ2FwdHVyZWQsIGVycm9yQ2FwdHVyZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblJlbmRlclRyYWNrZWQsIHJlbmRlclRyYWNrZWQpO1xuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblJlbmRlclRyaWdnZXJlZCwgcmVuZGVyVHJpZ2dlcmVkKTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVbm1vdW50LCBiZWZvcmVVbm1vdW50KTtcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Vbm1vdW50ZWQsIHVubW91bnRlZCk7XG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uU2VydmVyUHJlZmV0Y2gsIHNlcnZlclByZWZldGNoKTtcbiAgICBpZiAoaXNBcnJheShleHBvc2UpKSB7XG4gICAgICAgIGlmIChleHBvc2UubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBleHBvc2VkID0gaW5zdGFuY2UuZXhwb3NlZCB8fCAoaW5zdGFuY2UuZXhwb3NlZCA9IHt9KTtcbiAgICAgICAgICAgIGV4cG9zZS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9zZWQsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHB1YmxpY1RoaXNba2V5XSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiB2YWwgPT4gKHB1YmxpY1RoaXNba2V5XSA9IHZhbClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5leHBvc2VkID0ge307XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gb3B0aW9ucyB0aGF0IGFyZSBoYW5kbGVkIHdoZW4gY3JlYXRpbmcgdGhlIGluc3RhbmNlIGJ1dCBhbHNvIG5lZWQgdG8gYmVcbiAgICAvLyBhcHBsaWVkIGZyb20gbWl4aW5zXG4gICAgaWYgKHJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1ApIHtcbiAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gcmVuZGVyO1xuICAgIH1cbiAgICBpZiAoaW5oZXJpdEF0dHJzICE9IG51bGwpIHtcbiAgICAgICAgaW5zdGFuY2UuaW5oZXJpdEF0dHJzID0gaW5oZXJpdEF0dHJzO1xuICAgIH1cbiAgICAvLyBhc3NldCBvcHRpb25zLlxuICAgIGlmIChjb21wb25lbnRzKVxuICAgICAgICBpbnN0YW5jZS5jb21wb25lbnRzID0gY29tcG9uZW50cztcbiAgICBpZiAoZGlyZWN0aXZlcylcbiAgICAgICAgaW5zdGFuY2UuZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXM7XG59XG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IE5PT1AsIHVud3JhcFJlZiA9IGZhbHNlKSB7XG4gICAgaWYgKGlzQXJyYXkoaW5qZWN0T3B0aW9ucykpIHtcbiAgICAgICAgaW5qZWN0T3B0aW9ucyA9IG5vcm1hbGl6ZUluamVjdChpbmplY3RPcHRpb25zKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5qZWN0T3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHQgPSBpbmplY3RPcHRpb25zW2tleV07XG4gICAgICAgIGxldCBpbmplY3RlZDtcbiAgICAgICAgaWYgKGlzT2JqZWN0KG9wdCkpIHtcbiAgICAgICAgICAgIGlmICgnZGVmYXVsdCcgaW4gb3B0KSB7XG4gICAgICAgICAgICAgICAgaW5qZWN0ZWQgPSBpbmplY3Qob3B0LmZyb20gfHwga2V5LCBvcHQuZGVmYXVsdCwgdHJ1ZSAvKiB0cmVhdCBkZWZhdWx0IGZ1bmN0aW9uIGFzIGZhY3RvcnkgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5qZWN0ZWQgPSBpbmplY3Qob3B0LmZyb20gfHwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluamVjdGVkID0gaW5qZWN0KG9wdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVmKGluamVjdGVkKSkge1xuICAgICAgICAgICAgLy8gVE9ETyByZW1vdmUgdGhlIGNoZWNrIGluIDMuM1xuICAgICAgICAgICAgaWYgKHVud3JhcFJlZikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gaW5qZWN0ZWQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHNldDogdiA9PiAoaW5qZWN0ZWQudmFsdWUgPSB2KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBpbmplY3RlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGEgcmVmIGFuZCB3aWxsIGJlIGF1dG8tdW53cmFwcGVkIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGFuZCBubyBsb25nZXIgbmVlZHMgXFxgLnZhbHVlXFxgIGluIHRoZSBuZXh0IG1pbm9yIHJlbGVhc2UuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYFRvIG9wdC1pbiB0byB0aGUgbmV3IGJlaGF2aW9yIG5vdywgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgc2V0IFxcYGFwcC5jb25maWcudW53cmFwSW5qZWN0ZWRSZWYgPSB0cnVlXFxgICh0aGlzIGNvbmZpZyBpcyBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGB0ZW1wb3JhcnkgYW5kIHdpbGwgbm90IGJlIG5lZWRlZCBpbiB0aGUgZnV0dXJlLilgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3RlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiSW5qZWN0XCIgLyogT3B0aW9uVHlwZXMuSU5KRUNUICovLCBrZXkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2FsbEhvb2soaG9vaywgaW5zdGFuY2UsIHR5cGUpIHtcbiAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhpc0FycmF5KGhvb2spXG4gICAgICAgID8gaG9vay5tYXAoaCA9PiBoLmJpbmQoaW5zdGFuY2UucHJveHkpKVxuICAgICAgICA6IGhvb2suYmluZChpbnN0YW5jZS5wcm94eSksIGluc3RhbmNlLCB0eXBlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xuICAgIGNvbnN0IGdldHRlciA9IGtleS5pbmNsdWRlcygnLicpXG4gICAgICAgID8gY3JlYXRlUGF0aEdldHRlcihwdWJsaWNUaGlzLCBrZXkpXG4gICAgICAgIDogKCkgPT4gcHVibGljVGhpc1trZXldO1xuICAgIGlmIChpc1N0cmluZyhyYXcpKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBjdHhbcmF3XTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3fVwiYCwgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihyYXcpKSB7XG4gICAgICAgIHdhdGNoKGdldHRlciwgcmF3LmJpbmQocHVibGljVGhpcykpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdChyYXcpKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICAgICAgICAgIHJhdy5mb3JFYWNoKHIgPT4gY3JlYXRlV2F0Y2hlcihyLCBjdHgsIHB1YmxpY1RoaXMsIGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpXG4gICAgICAgICAgICAgICAgPyByYXcuaGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpXG4gICAgICAgICAgICAgICAgOiBjdHhbcmF3LmhhbmRsZXJdO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIsIHJhdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3LmhhbmRsZXJ9XCJgLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBvcHRpb246IFwiJHtrZXl9XCJgLCByYXcpO1xuICAgIH1cbn1cbi8qKlxuICogUmVzb2x2ZSBtZXJnZWQgb3B0aW9ucyBhbmQgY2FjaGUgaXQgb24gdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgaXMgZG9uZSBvbmx5IG9uY2UgcGVyLWNvbXBvbmVudCBzaW5jZSB0aGUgbWVyZ2luZyBkb2VzIG5vdCBpbnZvbHZlXG4gKiBpbnN0YW5jZXMuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVNZXJnZWRPcHRpb25zKGluc3RhbmNlKSB7XG4gICAgY29uc3QgYmFzZSA9IGluc3RhbmNlLnR5cGU7XG4gICAgY29uc3QgeyBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSBiYXNlO1xuICAgIGNvbnN0IHsgbWl4aW5zOiBnbG9iYWxNaXhpbnMsIG9wdGlvbnNDYWNoZTogY2FjaGUsIGNvbmZpZzogeyBvcHRpb25NZXJnZVN0cmF0ZWdpZXMgfSB9ID0gaW5zdGFuY2UuYXBwQ29udGV4dDtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoYmFzZSk7XG4gICAgbGV0IHJlc29sdmVkO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgcmVzb2x2ZWQgPSBjYWNoZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFnbG9iYWxNaXhpbnMubGVuZ3RoICYmICFtaXhpbnMgJiYgIWV4dGVuZHNPcHRpb25zKSB7XG4gICAgICAgIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gYmFzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZWQgPSB7fTtcbiAgICAgICAgaWYgKGdsb2JhbE1peGlucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdsb2JhbE1peGlucy5mb3JFYWNoKG0gPT4gbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBtLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtZXJnZU9wdGlvbnMocmVzb2x2ZWQsIGJhc2UsIG9wdGlvbk1lcmdlU3RyYXRlZ2llcyk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChiYXNlKSkge1xuICAgICAgICBjYWNoZS5zZXQoYmFzZSwgcmVzb2x2ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG59XG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModG8sIGZyb20sIHN0cmF0cywgYXNNaXhpbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgeyBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSBmcm9tO1xuICAgIGlmIChleHRlbmRzT3B0aW9ucykge1xuICAgICAgICBtZXJnZU9wdGlvbnModG8sIGV4dGVuZHNPcHRpb25zLCBzdHJhdHMsIHRydWUpO1xuICAgIH1cbiAgICBpZiAobWl4aW5zKSB7XG4gICAgICAgIG1peGlucy5mb3JFYWNoKChtKSA9PiBtZXJnZU9wdGlvbnModG8sIG0sIHN0cmF0cywgdHJ1ZSkpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XG4gICAgICAgIGlmIChhc01peGluICYmIGtleSA9PT0gJ2V4cG9zZScpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYFwiZXhwb3NlXCIgb3B0aW9uIGlzIGlnbm9yZWQgd2hlbiBkZWNsYXJlZCBpbiBtaXhpbnMgb3IgZXh0ZW5kcy4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBJdCBzaG91bGQgb25seSBiZSBkZWNsYXJlZCBpbiB0aGUgYmFzZSBjb21wb25lbnQgaXRzZWxmLmApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc3RyYXQgPSBpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzW2tleV0gfHwgKHN0cmF0cyAmJiBzdHJhdHNba2V5XSk7XG4gICAgICAgICAgICB0b1trZXldID0gc3RyYXQgPyBzdHJhdCh0b1trZXldLCBmcm9tW2tleV0pIDogZnJvbVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0bztcbn1cbmNvbnN0IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHMgPSB7XG4gICAgZGF0YTogbWVyZ2VEYXRhRm4sXG4gICAgcHJvcHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICBlbWl0czogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIC8vIG9iamVjdHNcbiAgICBtZXRob2RzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgY29tcHV0ZWQ6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgICAvLyBsaWZlY3ljbGVcbiAgICBiZWZvcmVDcmVhdGU6IG1lcmdlQXNBcnJheSxcbiAgICBjcmVhdGVkOiBtZXJnZUFzQXJyYXksXG4gICAgYmVmb3JlTW91bnQ6IG1lcmdlQXNBcnJheSxcbiAgICBtb3VudGVkOiBtZXJnZUFzQXJyYXksXG4gICAgYmVmb3JlVXBkYXRlOiBtZXJnZUFzQXJyYXksXG4gICAgdXBkYXRlZDogbWVyZ2VBc0FycmF5LFxuICAgIGJlZm9yZURlc3Ryb3k6IG1lcmdlQXNBcnJheSxcbiAgICBiZWZvcmVVbm1vdW50OiBtZXJnZUFzQXJyYXksXG4gICAgZGVzdHJveWVkOiBtZXJnZUFzQXJyYXksXG4gICAgdW5tb3VudGVkOiBtZXJnZUFzQXJyYXksXG4gICAgYWN0aXZhdGVkOiBtZXJnZUFzQXJyYXksXG4gICAgZGVhY3RpdmF0ZWQ6IG1lcmdlQXNBcnJheSxcbiAgICBlcnJvckNhcHR1cmVkOiBtZXJnZUFzQXJyYXksXG4gICAgc2VydmVyUHJlZmV0Y2g6IG1lcmdlQXNBcnJheSxcbiAgICAvLyBhc3NldHNcbiAgICBjb21wb25lbnRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gICAgZGlyZWN0aXZlczogbWVyZ2VPYmplY3RPcHRpb25zLFxuICAgIC8vIHdhdGNoXG4gICAgd2F0Y2g6IG1lcmdlV2F0Y2hPcHRpb25zLFxuICAgIC8vIHByb3ZpZGUgLyBpbmplY3RcbiAgICBwcm92aWRlOiBtZXJnZURhdGFGbixcbiAgICBpbmplY3Q6IG1lcmdlSW5qZWN0XG59O1xuZnVuY3Rpb24gbWVyZ2VEYXRhRm4odG8sIGZyb20pIHtcbiAgICBpZiAoIWZyb20pIHtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbiAgICBpZiAoIXRvKSB7XG4gICAgICAgIHJldHVybiBmcm9tO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuKCkge1xuICAgICAgICByZXR1cm4gKGV4dGVuZCkoaXNGdW5jdGlvbih0bykgPyB0by5jYWxsKHRoaXMsIHRoaXMpIDogdG8sIGlzRnVuY3Rpb24oZnJvbSkgPyBmcm9tLmNhbGwodGhpcywgdGhpcykgOiBmcm9tKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VJbmplY3QodG8sIGZyb20pIHtcbiAgICByZXR1cm4gbWVyZ2VPYmplY3RPcHRpb25zKG5vcm1hbGl6ZUluamVjdCh0byksIG5vcm1hbGl6ZUluamVjdChmcm9tKSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QocmF3KSB7XG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgICBjb25zdCByZXMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc1tyYXdbaV1dID0gcmF3W2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHJldHVybiByYXc7XG59XG5mdW5jdGlvbiBtZXJnZUFzQXJyYXkodG8sIGZyb20pIHtcbiAgICByZXR1cm4gdG8gPyBbLi4ubmV3IFNldChbXS5jb25jYXQodG8sIGZyb20pKV0gOiBmcm9tO1xufVxuZnVuY3Rpb24gbWVyZ2VPYmplY3RPcHRpb25zKHRvLCBmcm9tKSB7XG4gICAgcmV0dXJuIHRvID8gZXh0ZW5kKGV4dGVuZChPYmplY3QuY3JlYXRlKG51bGwpLCB0byksIGZyb20pIDogZnJvbTtcbn1cbmZ1bmN0aW9uIG1lcmdlV2F0Y2hPcHRpb25zKHRvLCBmcm9tKSB7XG4gICAgaWYgKCF0bylcbiAgICAgICAgcmV0dXJuIGZyb207XG4gICAgaWYgKCFmcm9tKVxuICAgICAgICByZXR1cm4gdG87XG4gICAgY29uc3QgbWVyZ2VkID0gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHRvKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XG4gICAgICAgIG1lcmdlZFtrZXldID0gbWVyZ2VBc0FycmF5KHRvW2tleV0sIGZyb21ba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWQ7XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIGlzU3RhdGVmdWwsIC8vIHJlc3VsdCBvZiBiaXR3aXNlIGZsYWcgY29tcGFyaXNvblxuaXNTU1IgPSBmYWxzZSkge1xuICAgIGNvbnN0IHByb3BzID0ge307XG4gICAgY29uc3QgYXR0cnMgPSB7fTtcbiAgICBkZWYoYXR0cnMsIEludGVybmFsT2JqZWN0S2V5LCAxKTtcbiAgICBpbnN0YW5jZS5wcm9wc0RlZmF1bHRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xuICAgIC8vIGVuc3VyZSBhbGwgZGVjbGFyZWQgcHJvcCBrZXlzIGFyZSBwcmVzZW50XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gdmFsaWRhdGlvblxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhyYXdQcm9wcyB8fCB7fSwgcHJvcHMsIGluc3RhbmNlKTtcbiAgICB9XG4gICAgaWYgKGlzU3RhdGVmdWwpIHtcbiAgICAgICAgLy8gc3RhdGVmdWxcbiAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBpc1NTUiA/IHByb3BzIDogc2hhbGxvd1JlYWN0aXZlKHByb3BzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UudHlwZS5wcm9wcykge1xuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbCB3LyBvcHRpb25hbCBwcm9wcywgcHJvcHMgPT09IGF0dHJzXG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGF0dHJzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbCB3LyBkZWNsYXJlZCBwcm9wc1xuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBwcm9wcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZS5hdHRycyA9IGF0dHJzO1xufVxuZnVuY3Rpb24gaXNJbkhtckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgICB3aGlsZSAoaW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUuX19obXJJZClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpbnN0YW5jZSA9IGluc3RhbmNlLnBhcmVudDtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHJhd1ByZXZQcm9wcywgb3B0aW1pemVkKSB7XG4gICAgY29uc3QgeyBwcm9wcywgYXR0cnMsIHZub2RlOiB7IHBhdGNoRmxhZyB9IH0gPSBpbnN0YW5jZTtcbiAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgY29uc3QgW29wdGlvbnNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xuICAgIGxldCBoYXNBdHRyc0NoYW5nZWQgPSBmYWxzZTtcbiAgICBpZiAoXG4gICAgLy8gYWx3YXlzIGZvcmNlIGZ1bGwgZGlmZiBpbiBkZXZcbiAgICAvLyAtICMxOTQyIGlmIGhtciBpcyBlbmFibGVkIHdpdGggc2ZjIGNvbXBvbmVudFxuICAgIC8vIC0gdml0ZSM4NzIgbm9uLXNmYyBjb21wb25lbnQgdXNlZCBieSBzZmMgY29tcG9uZW50XG4gICAgISgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNJbkhtckNvbnRleHQoaW5zdGFuY2UpKSAmJlxuICAgICAgICAob3B0aW1pemVkIHx8IHBhdGNoRmxhZyA+IDApICYmXG4gICAgICAgICEocGF0Y2hGbGFnICYgMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovKSkge1xuICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCAvKiBQYXRjaEZsYWdzLlBST1BTICovKSB7XG4gICAgICAgICAgICAvLyBDb21waWxlci1nZW5lcmF0ZWQgcHJvcHMgJiBubyBrZXlzIGNoYW5nZSwganVzdCBzZXQgdGhlIHVwZGF0ZWRcbiAgICAgICAgICAgIC8vIHRoZSBwcm9wcy5cbiAgICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBpbnN0YW5jZS52bm9kZS5keW5hbWljUHJvcHM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzVG9VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcbiAgICAgICAgICAgICAgICAvLyBza2lwIGlmIHRoZSBwcm9wIGtleSBpcyBhIGRlY2xhcmVkIGVtaXQgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICBpZiAoaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQUk9QUyBmbGFnIGd1YXJhbnRlZXMgcmF3UHJvcHMgdG8gYmUgbm9uLW51bGxcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0ciAvIHByb3BzIHNlcGFyYXRpb24gd2FzIGRvbmUgb24gaW5pdCBhbmQgd2lsbCBiZSBjb25zaXN0ZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY29kZSBwYXRoLCBzbyBqdXN0IGNoZWNrIGlmIGF0dHJzIGhhdmUgaXQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd24oYXR0cnMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW2NhbWVsaXplZEtleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywgY2FtZWxpemVkS2V5LCB2YWx1ZSwgaW5zdGFuY2UsIGZhbHNlIC8qIGlzQWJzZW50ICovKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBhdHRyc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBmdWxsIHByb3BzIHVwZGF0ZS5cbiAgICAgICAgaWYgKHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykpIHtcbiAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW4gY2FzZSBvZiBkeW5hbWljIHByb3BzLCBjaGVjayBpZiB3ZSBuZWVkIHRvIGRlbGV0ZSBrZXlzIGZyb21cbiAgICAgICAgLy8gdGhlIHByb3BzIG9iamVjdFxuICAgICAgICBsZXQga2ViYWJLZXk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhd0N1cnJlbnRQcm9wcykge1xuICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fFxuICAgICAgICAgICAgICAgIC8vIGZvciBjYW1lbENhc2VcbiAgICAgICAgICAgICAgICAoIWhhc093bihyYXdQcm9wcywga2V5KSAmJlxuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGNvbnZlcnRlZCB0byBjYW1lbENhc2UgKCM5NTUpXG4gICAgICAgICAgICAgICAgICAgICgoa2ViYWJLZXkgPSBoeXBoZW5hdGUoa2V5KSkgPT09IGtleSB8fCAhaGFzT3duKHJhd1Byb3BzLCBrZWJhYktleSkpKSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdQcmV2UHJvcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBjYW1lbENhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIChyYXdQcmV2UHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGtlYmFiLWNhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdQcmV2UHJvcHNba2ViYWJLZXldICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdDdXJyZW50UHJvcHMsIGtleSwgdW5kZWZpbmVkLCBpbnN0YW5jZSwgdHJ1ZSAvKiBpc0Fic2VudCAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiBmdW5jdGlvbmFsIGNvbXBvbmVudCB3L28gcHJvcHMgZGVjbGFyYXRpb24sIHByb3BzIGFuZFxuICAgICAgICAvLyBhdHRycyBwb2ludCB0byB0aGUgc2FtZSBvYmplY3Qgc28gaXQgc2hvdWxkIGFscmVhZHkgaGF2ZSBiZWVuIHVwZGF0ZWQuXG4gICAgICAgIGlmIChhdHRycyAhPT0gcmF3Q3VycmVudFByb3BzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAgICAgICAgICAgIGlmICghcmF3UHJvcHMgfHxcbiAgICAgICAgICAgICAgICAgICAgKCFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghZmFsc2UgKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHRyaWdnZXIgdXBkYXRlcyBmb3IgJGF0dHJzIGluIGNhc2UgaXQncyB1c2VkIGluIGNvbXBvbmVudCBzbG90c1xuICAgIGlmIChoYXNBdHRyc0NoYW5nZWQpIHtcbiAgICAgICAgdHJpZ2dlcihpbnN0YW5jZSwgXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8sICckYXR0cnMnKTtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzIHx8IHt9LCBwcm9wcywgaW5zdGFuY2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykge1xuICAgIGNvbnN0IFtvcHRpb25zLCBuZWVkQ2FzdEtleXNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xuICAgIGxldCBoYXNBdHRyc0NoYW5nZWQgPSBmYWxzZTtcbiAgICBsZXQgcmF3Q2FzdFZhbHVlcztcbiAgICBpZiAocmF3UHJvcHMpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHJhd1Byb3BzKSB7XG4gICAgICAgICAgICAvLyBrZXksIHJlZiBhcmUgcmVzZXJ2ZWQgYW5kIG5ldmVyIHBhc3NlZCBkb3duXG4gICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xuICAgICAgICAgICAgLy8gcHJvcCBvcHRpb24gbmFtZXMgYXJlIGNhbWVsaXplZCBkdXJpbmcgbm9ybWFsaXphdGlvbiwgc28gdG8gc3VwcG9ydFxuICAgICAgICAgICAgLy8ga2ViYWIgLT4gY2FtZWwgY29udmVyc2lvbiBoZXJlIHdlIG5lZWQgdG8gY2FtZWxpemUgdGhlIGtleS5cbiAgICAgICAgICAgIGxldCBjYW1lbEtleTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAoY2FtZWxLZXkgPSBjYW1lbGl6ZShrZXkpKSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW5lZWRDYXN0S2V5cyB8fCAhbmVlZENhc3RLZXlzLmluY2x1ZGVzKGNhbWVsS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wc1tjYW1lbEtleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIChyYXdDYXN0VmFsdWVzIHx8IChyYXdDYXN0VmFsdWVzID0ge30pKVtjYW1lbEtleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIGF0dHJzKSB8fCB2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChuZWVkQ2FzdEtleXMpIHtcbiAgICAgICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgICBjb25zdCBjYXN0VmFsdWVzID0gcmF3Q2FzdFZhbHVlcyB8fCBFTVBUWV9PQko7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZENhc3RLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBuZWVkQ2FzdEtleXNbaV07XG4gICAgICAgICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdDdXJyZW50UHJvcHMsIGtleSwgY2FzdFZhbHVlc1trZXldLCBpbnN0YW5jZSwgIWhhc093bihjYXN0VmFsdWVzLCBrZXkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFzQXR0cnNDaGFuZ2VkO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCBwcm9wcywga2V5LCB2YWx1ZSwgaW5zdGFuY2UsIGlzQWJzZW50KSB7XG4gICAgY29uc3Qgb3B0ID0gb3B0aW9uc1trZXldO1xuICAgIGlmIChvcHQgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBoYXNEZWZhdWx0ID0gaGFzT3duKG9wdCwgJ2RlZmF1bHQnKTtcbiAgICAgICAgLy8gZGVmYXVsdCB2YWx1ZXNcbiAgICAgICAgaWYgKGhhc0RlZmF1bHQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0LmRlZmF1bHQ7XG4gICAgICAgICAgICBpZiAob3B0LnR5cGUgIT09IEZ1bmN0aW9uICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvcHNEZWZhdWx0cyB9ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBwcm9wc0RlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcHJvcHNEZWZhdWx0c1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV0gPSBkZWZhdWx0VmFsdWUuY2FsbChudWxsLCBwcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gICAgICAgIGlmIChvcHRbMCAvKiBCb29sZWFuRmxhZ3Muc2hvdWxkQ2FzdCAqL10pIHtcbiAgICAgICAgICAgIGlmIChpc0Fic2VudCAmJiAhaGFzRGVmYXVsdCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRbMSAvKiBCb29sZWFuRmxhZ3Muc2hvdWxkQ2FzdFRydWUgKi9dICYmXG4gICAgICAgICAgICAgICAgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcbiAgICBjb25zdCBjYWNoZSA9IGFwcENvbnRleHQucHJvcHNDYWNoZTtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBjb25zdCByYXcgPSBjb21wLnByb3BzO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgICBjb25zdCBuZWVkQ2FzdEtleXMgPSBbXTtcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXG4gICAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xuICAgICAgICBjb25zdCBleHRlbmRQcm9wcyA9IChyYXcpID0+IHtcbiAgICAgICAgICAgIGhhc0V4dGVuZHMgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgW3Byb3BzLCBrZXlzXSA9IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhyYXcsIGFwcENvbnRleHQsIHRydWUpO1xuICAgICAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHByb3BzKTtcbiAgICAgICAgICAgIGlmIChrZXlzKVxuICAgICAgICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKC4uLmtleXMpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcC5leHRlbmRzKSB7XG4gICAgICAgICAgICBleHRlbmRQcm9wcyhjb21wLmV4dGVuZHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wLm1peGlucykge1xuICAgICAgICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICAgICAgICBjYWNoZS5zZXQoY29tcCwgRU1QVFlfQVJSKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRU1QVFlfQVJSO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1N0cmluZyhyYXdbaV0pKSB7XG4gICAgICAgICAgICAgICAgd2FybihgcHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LmAsIHJhd1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUocmF3W2ldKTtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IEVNUFRZX09CSjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChyYXcpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNPYmplY3QocmF3KSkge1xuICAgICAgICAgICAgd2FybihgaW52YWxpZCBwcm9wcyBvcHRpb25zYCwgcmF3KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHQgPSByYXdba2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gKG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPVxuICAgICAgICAgICAgICAgICAgICBpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpID8geyB0eXBlOiBvcHQgfSA6IE9iamVjdC5hc3NpZ24oe30sIG9wdCkpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHByb3BbMCAvKiBCb29sZWFuRmxhZ3Muc2hvdWxkQ2FzdCAqL10gPSBib29sZWFuSW5kZXggPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFsxIC8qIEJvb2xlYW5GbGFncy5zaG91bGRDYXN0VHJ1ZSAqL10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcHJvcCBuZWVkcyBib29sZWFuIGNhc3Rpbmcgb3IgZGVmYXVsdCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9vbGVhbkluZGV4ID4gLTEgfHwgaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKG5vcm1hbGl6ZWRLZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdO1xuICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgICBjYWNoZS5zZXQoY29tcCwgcmVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcE5hbWUoa2V5KSB7XG4gICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FybihgSW52YWxpZCBwcm9wIG5hbWU6IFwiJHtrZXl9XCIgaXMgYSByZXNlcnZlZCBwcm9wZXJ0eS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8gdXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIHR5cGUgY29uc3RydWN0b3JzXG4vLyBzbyB0aGF0IGl0IHdvcmtzIGFjcm9zcyB2bXMgLyBpZnJhbWVzLlxuZnVuY3Rpb24gZ2V0VHlwZShjdG9yKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBjdG9yICYmIGN0b3IudG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IGN0b3IgPT09IG51bGwgPyAnbnVsbCcgOiAnJztcbn1cbmZ1bmN0aW9uIGlzU2FtZVR5cGUoYSwgYikge1xuICAgIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpO1xufVxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4KHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICBpZiAoaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgICAgICByZXR1cm4gZXhwZWN0ZWRUeXBlcy5maW5kSW5kZXgodCA9PiBpc1NhbWVUeXBlKHQsIHR5cGUpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihleHBlY3RlZFR5cGVzKSkge1xuICAgICAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzLCBwcm9wcywgaW5zdGFuY2UpIHtcbiAgICBjb25zdCByZXNvbHZlZFZhbHVlcyA9IHRvUmF3KHByb3BzKTtcbiAgICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgaWYgKG9wdCA9PSBudWxsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHZhbGlkYXRlUHJvcChrZXksIHJlc29sdmVkVmFsdWVzW2tleV0sIG9wdCwgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAhaGFzT3duKHJhd1Byb3BzLCBoeXBoZW5hdGUoa2V5KSkpO1xuICAgIH1cbn1cbi8qKlxuICogZGV2IG9ubHlcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wKG5hbWUsIHZhbHVlLCBwcm9wLCBpc0Fic2VudCkge1xuICAgIGNvbnN0IHsgdHlwZSwgcmVxdWlyZWQsIHZhbGlkYXRvciB9ID0gcHJvcDtcbiAgICAvLyByZXF1aXJlZCFcbiAgICBpZiAocmVxdWlyZWQgJiYgaXNBYnNlbnQpIHtcbiAgICAgICAgd2FybignTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gbWlzc2luZyBidXQgb3B0aW9uYWxcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHR5cGUgY2hlY2tcbiAgICBpZiAodHlwZSAhPSBudWxsICYmIHR5cGUgIT09IHRydWUpIHtcbiAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdHlwZXMgPSBpc0FycmF5KHR5cGUpID8gdHlwZSA6IFt0eXBlXTtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICAgICAgICAvLyB2YWx1ZSBpcyB2YWxpZCBhcyBsb25nIGFzIG9uZSBvZiB0aGUgc3BlY2lmaWVkIHR5cGVzIG1hdGNoXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoICYmICFpc1ZhbGlkOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsaWQsIGV4cGVjdGVkVHlwZSB9ID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZXNbaV0pO1xuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICAgICAgICBpc1ZhbGlkID0gdmFsaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICB3YXJuKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGN1c3RvbSB2YWxpZGF0b3JcbiAgICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICAgIHdhcm4oJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nKTtcbiAgICB9XG59XG5jb25zdCBpc1NpbXBsZVR5cGUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ1N0cmluZyxOdW1iZXIsQm9vbGVhbixGdW5jdGlvbixTeW1ib2wsQmlnSW50Jyk7XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIGFzc2VydFR5cGUodmFsdWUsIHR5cGUpIHtcbiAgICBsZXQgdmFsaWQ7XG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgICBpZiAoaXNTaW1wbGVUeXBlKGV4cGVjdGVkVHlwZSkpIHtcbiAgICAgICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgICAgICB2YWxpZCA9IGlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgICAgIHZhbGlkID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ251bGwnKSB7XG4gICAgICAgIHZhbGlkID0gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsaWQsXG4gICAgICAgIGV4cGVjdGVkVHlwZVxuICAgIH07XG59XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICAgIGxldCBtZXNzYWdlID0gYEludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCIke25hbWV9XCIuYCArXG4gICAgICAgIGAgRXhwZWN0ZWQgJHtleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcgfCAnKX1gO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gICAgY29uc3QgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgICBjb25zdCBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgICBjb25zdCByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICAgICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XG4gICAgfVxuICAgIG1lc3NhZ2UgKz0gYCwgZ290ICR7cmVjZWl2ZWRUeXBlfSBgO1xuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICAgIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgICAgICBtZXNzYWdlICs9IGB3aXRoIHZhbHVlICR7cmVjZWl2ZWRWYWx1ZX0uYDtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59XG4vKipcbiAqIGRldiBvbmx5XG4gKi9cbmZ1bmN0aW9uIHN0eWxlVmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGBcIiR7dmFsdWV9XCJgO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgICAgICByZXR1cm4gYCR7TnVtYmVyKHZhbHVlKX1gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlfWA7XG4gICAgfVxufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUodHlwZSkge1xuICAgIGNvbnN0IGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICAgIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZWxlbSA9PiB0eXBlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW0pO1xufVxuLyoqXG4gKiBkZXYgb25seVxuICovXG5mdW5jdGlvbiBpc0Jvb2xlYW4oLi4uYXJncykge1xuICAgIHJldHVybiBhcmdzLnNvbWUoZWxlbSA9PiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJyk7XG59XG5cbmNvbnN0IGlzSW50ZXJuYWxLZXkgPSAoa2V5KSA9PiBrZXlbMF0gPT09ICdfJyB8fCBrZXkgPT09ICckc3RhYmxlJztcbmNvbnN0IG5vcm1hbGl6ZVNsb3RWYWx1ZSA9ICh2YWx1ZSkgPT4gaXNBcnJheSh2YWx1ZSlcbiAgICA/IHZhbHVlLm1hcChub3JtYWxpemVWTm9kZSlcbiAgICA6IFtub3JtYWxpemVWTm9kZSh2YWx1ZSldO1xuY29uc3Qgbm9ybWFsaXplU2xvdCA9IChrZXksIHJhd1Nsb3QsIGN0eCkgPT4ge1xuICAgIGlmIChyYXdTbG90Ll9uKSB7XG4gICAgICAgIC8vIGFscmVhZHkgbm9ybWFsaXplZCAtICM1MzUzXG4gICAgICAgIHJldHVybiByYXdTbG90O1xuICAgIH1cbiAgICBjb25zdCBub3JtYWxpemVkID0gd2l0aEN0eCgoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGN1cnJlbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgd2FybihgU2xvdCBcIiR7a2V5fVwiIGludm9rZWQgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIGZ1bmN0aW9uOiBgICtcbiAgICAgICAgICAgICAgICBgdGhpcyB3aWxsIG5vdCB0cmFjayBkZXBlbmRlbmNpZXMgdXNlZCBpbiB0aGUgc2xvdC4gYCArXG4gICAgICAgICAgICAgICAgYEludm9rZSB0aGUgc2xvdCBmdW5jdGlvbiBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3JtYWxpemVTbG90VmFsdWUocmF3U2xvdCguLi5hcmdzKSk7XG4gICAgfSwgY3R4KTtcbiAgICBub3JtYWxpemVkLl9jID0gZmFsc2U7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59O1xuY29uc3Qgbm9ybWFsaXplT2JqZWN0U2xvdHMgPSAocmF3U2xvdHMsIHNsb3RzLCBpbnN0YW5jZSkgPT4ge1xuICAgIGNvbnN0IGN0eCA9IHJhd1Nsb3RzLl9jdHg7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3U2xvdHMpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJuYWxLZXkoa2V5KSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Nsb3RzW2tleV07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgc2xvdHNba2V5XSA9IG5vcm1hbGl6ZVNsb3Qoa2V5LCB2YWx1ZSwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgIShmYWxzZSApKSB7XG4gICAgICAgICAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSAoKSA9PiBub3JtYWxpemVkO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IG5vcm1hbGl6ZVZOb2RlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAhaXNLZWVwQWxpdmUoaW5zdGFuY2Uudm5vZGUpICYmXG4gICAgICAgICEoZmFsc2UgKSkge1xuICAgICAgICB3YXJuKGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIGRlZmF1bHQgc2xvdC4gYCArXG4gICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XG4gICAgfVxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUoY2hpbGRyZW4pO1xuICAgIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQgPSAoKSA9PiBub3JtYWxpemVkO1xufTtcbmNvbnN0IGluaXRTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcbiAgICBpZiAoaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU2hhcGVGbGFncy5TTE9UU19DSElMRFJFTiAqLykge1xuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIHVzZXJzIGNhbiBnZXQgdGhlIHNoYWxsb3cgcmVhZG9ubHkgdmVyc2lvbiBvZiB0aGUgc2xvdHMgb2JqZWN0IHRocm91Z2ggYHRoaXMuJHNsb3RzYCxcbiAgICAgICAgICAgIC8vIHdlIHNob3VsZCBhdm9pZCB0aGUgcHJveHkgb2JqZWN0IHBvbGx1dGluZyB0aGUgc2xvdHMgb2YgdGhlIGludGVybmFsIGluc3RhbmNlXG4gICAgICAgICAgICBpbnN0YW5jZS5zbG90cyA9IHRvUmF3KGNoaWxkcmVuKTtcbiAgICAgICAgICAgIC8vIG1ha2UgY29tcGlsZXIgbWFya2VyIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgICAgICBkZWYoY2hpbGRyZW4sICdfJywgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgKGluc3RhbmNlLnNsb3RzID0ge30pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2Uuc2xvdHMgPSB7fTtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVmKGluc3RhbmNlLnNsb3RzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XG59O1xuY29uc3QgdXBkYXRlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCB7IHZub2RlLCBzbG90cyB9ID0gaW5zdGFuY2U7XG4gICAgbGV0IG5lZWREZWxldGlvbkNoZWNrID0gdHJ1ZTtcbiAgICBsZXQgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gRU1QVFlfT0JKO1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAzMiAvKiBTaGFwZUZsYWdzLlNMT1RTX0NISUxEUkVOICovKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgLy8gY29tcGlsZWQgc2xvdHMuXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBQYXJlbnQgd2FzIEhNUiB1cGRhdGVkIHNvIHNsb3QgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHVwZGF0ZSBzbG90cyBhbmQgbWFyayBpbnN0YW5jZSBmb3IgaG1yIGFzIHdlbGxcbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGltaXplZCAmJiB0eXBlID09PSAxIC8qIFNsb3RGbGFncy5TVEFCTEUgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBBTkQgc3RhYmxlLlxuICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gdXBkYXRlLCBhbmQgc2tpcCBzdGFsZSBzbG90cyByZW1vdmFsLlxuICAgICAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBidXQgZHluYW1pYyAodi1pZi92LWZvciBvbiBzbG90cykgLSB1cGRhdGUgc2xvdHMsIGJ1dCBza2lwXG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsaXphdGlvbi5cbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAvLyAjMjg5M1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gcmVuZGVyaW5nIHRoZSBvcHRpbWl6ZWQgc2xvdHMgYnkgbWFudWFsbHkgd3JpdHRlbiByZW5kZXIgZnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBkZWxldGUgdGhlIGBzbG90cy5fYCBmbGFnIGlmIG5lY2Vzc2FyeSB0byBtYWtlIHN1YnNlcXVlbnQgdXBkYXRlcyByZWxpYWJsZSxcbiAgICAgICAgICAgICAgICAvLyBpLmUuIGxldCB0aGUgYHJlbmRlclNsb3RgIGNyZWF0ZSB0aGUgYmFpbGVkIEZyYWdtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpbWl6ZWQgJiYgdHlwZSA9PT0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzbG90cy5fO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gIWNoaWxkcmVuLiRzdGFibGU7XG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgc2xvdHMpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgICAgICAvLyBub24gc2xvdCBvYmplY3QgY2hpbGRyZW4gKGRpcmVjdCB2YWx1ZSkgcGFzc2VkIHRvIGEgY29tcG9uZW50XG4gICAgICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgICAgICAgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0geyBkZWZhdWx0OiAxIH07XG4gICAgfVxuICAgIC8vIGRlbGV0ZSBzdGFsZSBzbG90c1xuICAgIGlmIChuZWVkRGVsZXRpb25DaGVjaykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuICAgICAgICAgICAgaWYgKCFpc0ludGVybmFsS2V5KGtleSkgJiYgIShrZXkgaW4gZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzbG90c1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcHA6IG51bGwsXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgaXNOYXRpdmVUYWc6IE5PLFxuICAgICAgICAgICAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuICAgICAgICAgICAgZ2xvYmFsUHJvcGVydGllczoge30sXG4gICAgICAgICAgICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IHt9LFxuICAgICAgICAgICAgZXJyb3JIYW5kbGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB3YXJuSGFuZGxlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7fVxuICAgICAgICB9LFxuICAgICAgICBtaXhpbnM6IFtdLFxuICAgICAgICBjb21wb25lbnRzOiB7fSxcbiAgICAgICAgZGlyZWN0aXZlczoge30sXG4gICAgICAgIHByb3ZpZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgICBvcHRpb25zQ2FjaGU6IG5ldyBXZWFrTWFwKCksXG4gICAgICAgIHByb3BzQ2FjaGU6IG5ldyBXZWFrTWFwKCksXG4gICAgICAgIGVtaXRzQ2FjaGU6IG5ldyBXZWFrTWFwKClcbiAgICB9O1xufVxubGV0IHVpZCA9IDA7XG5mdW5jdGlvbiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUFwcChyb290Q29tcG9uZW50LCByb290UHJvcHMgPSBudWxsKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihyb290Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgcm9vdENvbXBvbmVudCA9IE9iamVjdC5hc3NpZ24oe30sIHJvb3RDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb290UHJvcHMgIT0gbnVsbCAmJiAhaXNPYmplY3Qocm9vdFByb3BzKSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHJvb3QgcHJvcHMgcGFzc2VkIHRvIGFwcC5tb3VudCgpIG11c3QgYmUgYW4gb2JqZWN0LmApO1xuICAgICAgICAgICAgcm9vdFByb3BzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xuICAgICAgICBjb25zdCBpbnN0YWxsZWRQbHVnaW5zID0gbmV3IFNldCgpO1xuICAgICAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGFwcCA9IChjb250ZXh0LmFwcCA9IHtcbiAgICAgICAgICAgIF91aWQ6IHVpZCsrLFxuICAgICAgICAgICAgX2NvbXBvbmVudDogcm9vdENvbXBvbmVudCxcbiAgICAgICAgICAgIF9wcm9wczogcm9vdFByb3BzLFxuICAgICAgICAgICAgX2NvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgX2luc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgIGdldCBjb25maWcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBjb25maWcodikge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgYXBwLmNvbmZpZyBjYW5ub3QgYmUgcmVwbGFjZWQuIE1vZGlmeSBpbmRpdmlkdWFsIG9wdGlvbnMgaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXNlKHBsdWdpbiwgLi4ub3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmhhcyhwbHVnaW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsdWdpbiAmJiBpc0Z1bmN0aW9uKHBsdWdpbi5pbnN0YWxsKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW4uaW5zdGFsbChhcHAsIC4uLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHBsdWdpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luKGFwcCwgLi4ub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBIHBsdWdpbiBtdXN0IGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCB3aXRoIGFuIFwiaW5zdGFsbFwiIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGZ1bmN0aW9uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1peGluKG1peGluKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Lm1peGlucy5pbmNsdWRlcyhtaXhpbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubWl4aW5zLnB1c2gobWl4aW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWl4aW4ubmFtZSA/IGA6ICR7bWl4aW4ubmFtZX1gIDogJycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW5zIGFyZSBvbmx5IGF2YWlsYWJsZSBpbiBidWlsZHMgc3VwcG9ydGluZyBPcHRpb25zIEFQSScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29udGV4dC5jb21wb25lbnRzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5kaXJlY3RpdmVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBEaXJlY3RpdmUgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdW50KHJvb3RDb250YWluZXIsIGlzSHlkcmF0ZSwgaXNTVkcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAjNTU3MVxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHJvb3RDb250YWluZXIuX192dWVfYXBwX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYFRoZXJlIGlzIGFscmVhZHkgYW4gYXBwIGluc3RhbmNlIG1vdW50ZWQgb24gdGhlIGhvc3QgY29udGFpbmVyLlxcbmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAgSWYgeW91IHdhbnQgdG8gbW91bnQgYW5vdGhlciBhcHAgb24gdGhlIHNhbWUgaG9zdCBjb250YWluZXIsYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCB5b3UgbmVlZCB0byB1bm1vdW50IHRoZSBwcmV2aW91cyBhcHAgYnkgY2FsbGluZyBcXGBhcHAudW5tb3VudCgpXFxgIGZpcnN0LmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUocm9vdENvbXBvbmVudCwgcm9vdFByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgYXBwIGNvbnRleHQgb24gdGhlIHJvb3QgVk5vZGUuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBiZSBzZXQgb24gdGhlIHJvb3QgaW5zdGFuY2Ugb24gaW5pdGlhbCBtb3VudC5cbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuYXBwQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhNUiByb290IHJlbG9hZFxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIoY2xvbmVWTm9kZSh2bm9kZSksIHJvb3RDb250YWluZXIsIGlzU1ZHKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSHlkcmF0ZSAmJiBoeWRyYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcih2bm9kZSwgcm9vdENvbnRhaW5lciwgaXNTVkcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGFwcC5fY29udGFpbmVyID0gcm9vdENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgcm9vdENvbnRhaW5lci5fX3Z1ZV9hcHBfXyA9IGFwcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXhwb3NlUHJveHkodm5vZGUuY29tcG9uZW50KSB8fCB2bm9kZS5jb21wb25lbnQucHJveHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBcHAgaGFzIGFscmVhZHkgYmVlbiBtb3VudGVkLlxcbmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYElmIHlvdSB3YW50IHRvIHJlbW91bnQgdGhlIHNhbWUgYXBwLCBtb3ZlIHlvdXIgYXBwIGNyZWF0aW9uIGxvZ2ljIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGludG8gYSBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBjcmVhdGUgZnJlc2ggYXBwIGluc3RhbmNlcyBmb3IgZWFjaCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtb3VudCAtIGUuZy4gXFxgY29uc3QgY3JlYXRlTXlBcHAgPSAoKSA9PiBjcmVhdGVBcHAoQXBwKVxcYGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bm1vdW50KCkge1xuICAgICAgICAgICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKG51bGwsIGFwcC5fY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNVbm1vdW50QXBwKGFwcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGFwcC5fY29udGFpbmVyLl9fdnVlX2FwcF9fO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ2Fubm90IHVubW91bnQgYW4gYXBwIHRoYXQgaXMgbm90IG1vdW50ZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5IGluIGNvbnRleHQucHJvdmlkZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGFscmVhZHkgcHJvdmlkZXMgcHJvcGVydHkgd2l0aCBrZXkgXCIke1N0cmluZyhrZXkpfVwiLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJdCB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggdGhlIG5ldyB2YWx1ZS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBmb3IgaGFuZGxpbmcgYSB0ZW1wbGF0ZSByZWZcbiAqL1xuZnVuY3Rpb24gc2V0UmVmKHJhd1JlZiwgb2xkUmF3UmVmLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIGlzVW5tb3VudCA9IGZhbHNlKSB7XG4gICAgaWYgKGlzQXJyYXkocmF3UmVmKSkge1xuICAgICAgICByYXdSZWYuZm9yRWFjaCgociwgaSkgPT4gc2V0UmVmKHIsIG9sZFJhd1JlZiAmJiAoaXNBcnJheShvbGRSYXdSZWYpID8gb2xkUmF3UmVmW2ldIDogb2xkUmF3UmVmKSwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCBpc1VubW91bnQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpICYmICFpc1VubW91bnQpIHtcbiAgICAgICAgLy8gd2hlbiBtb3VudGluZyBhc3luYyBjb21wb25lbnRzLCBub3RoaW5nIG5lZWRzIHRvIGJlIGRvbmUsXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIHRlbXBsYXRlIHJlZiBpcyBmb3J3YXJkZWQgdG8gaW5uZXIgY29tcG9uZW50XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVmVmFsdWUgPSB2bm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovXG4gICAgICAgID8gZ2V0RXhwb3NlUHJveHkodm5vZGUuY29tcG9uZW50KSB8fCB2bm9kZS5jb21wb25lbnQucHJveHlcbiAgICAgICAgOiB2bm9kZS5lbDtcbiAgICBjb25zdCB2YWx1ZSA9IGlzVW5tb3VudCA/IG51bGwgOiByZWZWYWx1ZTtcbiAgICBjb25zdCB7IGk6IG93bmVyLCByOiByZWYgfSA9IHJhd1JlZjtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFvd25lcikge1xuICAgICAgICB3YXJuKGBNaXNzaW5nIHJlZiBvd25lciBjb250ZXh0LiByZWYgY2Fubm90IGJlIHVzZWQgb24gaG9pc3RlZCB2bm9kZXMuIGAgK1xuICAgICAgICAgICAgYEEgdm5vZGUgd2l0aCByZWYgbXVzdCBiZSBjcmVhdGVkIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9sZFJlZiA9IG9sZFJhd1JlZiAmJiBvbGRSYXdSZWYucjtcbiAgICBjb25zdCByZWZzID0gb3duZXIucmVmcyA9PT0gRU1QVFlfT0JKID8gKG93bmVyLnJlZnMgPSB7fSkgOiBvd25lci5yZWZzO1xuICAgIGNvbnN0IHNldHVwU3RhdGUgPSBvd25lci5zZXR1cFN0YXRlO1xuICAgIC8vIGR5bmFtaWMgcmVmIGNoYW5nZWQuIHVuc2V0IG9sZCByZWZcbiAgICBpZiAob2xkUmVmICE9IG51bGwgJiYgb2xkUmVmICE9PSByZWYpIHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG9sZFJlZikpIHtcbiAgICAgICAgICAgIHJlZnNbb2xkUmVmXSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIG9sZFJlZikpIHtcbiAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW29sZFJlZl0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUmVmKG9sZFJlZikpIHtcbiAgICAgICAgICAgIG9sZFJlZi52YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVmKSkge1xuICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcocmVmLCBvd25lciwgMTIgLyogRXJyb3JDb2Rlcy5GVU5DVElPTl9SRUYgKi8sIFt2YWx1ZSwgcmVmc10pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgX2lzU3RyaW5nID0gaXNTdHJpbmcocmVmKTtcbiAgICAgICAgY29uc3QgX2lzUmVmID0gaXNSZWYocmVmKTtcbiAgICAgICAgaWYgKF9pc1N0cmluZyB8fCBfaXNSZWYpIHtcbiAgICAgICAgICAgIGNvbnN0IGRvU2V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuZikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IF9pc1N0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc2V0dXBTdGF0ZVtyZWZdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiByZWZzW3JlZl1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVmLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbm1vdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5KGV4aXN0aW5nKSAmJiByZW1vdmUoZXhpc3RpbmcsIHJlZlZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBcnJheShleGlzdGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnNbcmVmXSA9IFtyZWZWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gcmVmc1tyZWZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYudmFsdWUgPSBbcmVmVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3UmVmLmspXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZzW3Jhd1JlZi5rXSA9IHJlZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghZXhpc3RpbmcuaW5jbHVkZXMocmVmVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcucHVzaChyZWZWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoX2lzU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZnNbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKF9pc1JlZikge1xuICAgICAgICAgICAgICAgICAgICByZWYudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1JlZi5rKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmc1tyYXdSZWYua10gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6JywgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGRvU2V0LmlkID0gLTE7XG4gICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRvU2V0LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb1NldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgd2FybignSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTonLCByZWYsIGAoJHt0eXBlb2YgcmVmfSlgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubGV0IGhhc01pc21hdGNoID0gZmFsc2U7XG5jb25zdCBpc1NWR0NvbnRhaW5lciA9IChjb250YWluZXIpID0+IC9zdmcvLnRlc3QoY29udGFpbmVyLm5hbWVzcGFjZVVSSSkgJiYgY29udGFpbmVyLnRhZ05hbWUgIT09ICdmb3JlaWduT2JqZWN0JztcbmNvbnN0IGlzQ29tbWVudCA9IChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSA4IC8qIERPTU5vZGVUeXBlcy5DT01NRU5UICovO1xuLy8gTm90ZTogaHlkcmF0aW9uIGlzIERPTS1zcGVjaWZpY1xuLy8gQnV0IHdlIGhhdmUgdG8gcGxhY2UgaXQgaW4gY29yZSBkdWUgdG8gdGlnaHQgY291cGxpbmcgd2l0aCBjb3JlIC0gc3BsaXR0aW5nXG4vLyBpdCBvdXQgY3JlYXRlcyBhIHRvbiBvZiB1bm5lY2Vzc2FyeSBjb21wbGV4aXR5LlxuLy8gSHlkcmF0aW9uIGFsc28gZGVwZW5kcyBvbiBzb21lIHJlbmRlcmVyIGludGVybmFsIGxvZ2ljIHdoaWNoIG5lZWRzIHRvIGJlXG4vLyBwYXNzZWQgaW4gdmlhIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xuICAgIGNvbnN0IHsgbXQ6IG1vdW50Q29tcG9uZW50LCBwOiBwYXRjaCwgbzogeyBwYXRjaFByb3AsIGNyZWF0ZVRleHQsIG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCByZW1vdmUsIGluc2VydCwgY3JlYXRlQ29tbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcbiAgICBjb25zdCBoeWRyYXRlID0gKHZub2RlLCBjb250YWluZXIpID0+IHtcbiAgICAgICAgaWYgKCFjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIGh5ZHJhdGUgZXhpc3RpbmcgbWFya3VwIGJ1dCBjb250YWluZXIgaXMgZW1wdHkuIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUGVyZm9ybWluZyBmdWxsIG1vdW50IGluc3RlYWQuYCk7XG4gICAgICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyKTtcbiAgICAgICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgICAgICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgaHlkcmF0ZU5vZGUoY29udGFpbmVyLmZpcnN0Q2hpbGQsIHZub2RlLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgICAgICBpZiAoaGFzTWlzbWF0Y2ggJiYgIWZhbHNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGVycm9yIHNob3VsZCBzaG93IHVwIGluIHByb2R1Y3Rpb25cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEh5ZHJhdGlvbiBjb21wbGV0ZWQgYnV0IGNvbnRhaW5zIG1pc21hdGNoZXMuYCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGh5ZHJhdGVOb2RlID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzRnJhZ21lbnRTdGFydCA9IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJztcbiAgICAgICAgY29uc3Qgb25NaXNtYXRjaCA9ICgpID0+IGhhbmRsZU1pc21hdGNoKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIGlzRnJhZ21lbnRTdGFydCk7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcmVmLCBzaGFwZUZsYWcsIHBhdGNoRmxhZyB9ID0gdm5vZGU7XG4gICAgICAgIGxldCBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgdm5vZGUuZWwgPSBub2RlO1xuICAgICAgICBpZiAocGF0Y2hGbGFnID09PSAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi8pIHtcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV4dE5vZGUgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMyAvKiBET01Ob2RlVHlwZXMuVEVYVCAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyAjNTcyOCBlbXB0eSB0ZXh0IG5vZGUgaW5zaWRlIGEgc2xvdCBjYW4gY2F1c2UgaHlkcmF0aW9uIGZhaWx1cmVcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGUgc2VydmVyIHJlbmRlcmVkIEhUTUwgd29uJ3QgY29udGFpbiBhIHRleHQgbm9kZVxuICAgICAgICAgICAgICAgICAgICBpZiAodm5vZGUuY2hpbGRyZW4gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQoKHZub2RlLmVsID0gY3JlYXRlVGV4dCgnJykpLCBwYXJlbnROb2RlKG5vZGUpLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhICE9PSB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgbWlzbWF0Y2g6YCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIENsaWVudDogJHtKU09OLnN0cmluZ2lmeShub2RlLmRhdGEpfWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXFxuLSBTZXJ2ZXI6ICR7SlNPTi5zdHJpbmdpZnkodm5vZGUuY2hpbGRyZW4pfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbW1lbnQ6XG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogRE9NTm9kZVR5cGVzLkNPTU1FTlQgKi8gfHwgaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0YXRpYzpcbiAgICAgICAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVudGlyZSB0ZW1wbGF0ZSBpcyBzdGF0aWMgYnV0IFNTUmVkIGFzIGEgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgPT09IDEgLyogRE9NTm9kZVR5cGVzLkVMRU1FTlQgKi8gfHwgZG9tVHlwZSA9PT0gMyAvKiBET01Ob2RlVHlwZXMuVEVYVCAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgYW5jaG9yLCBhZG9wdCBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN0YXRpYyB2bm9kZSBoYXMgaXRzIGNvbnRlbnQgc3RyaXBwZWQgZHVyaW5nIGJ1aWxkLFxuICAgICAgICAgICAgICAgICAgICAvLyBhZG9wdCBpdCBmcm9tIHRoZSBzZXJ2ZXItcmVuZGVyZWQgSFRNTC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2bm9kZS5zdGF0aWNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZFRvQWRvcHRDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlLm5vZGVUeXBlID09PSAxIC8qIERPTU5vZGVUeXBlcy5FTEVNRU5UICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5leHROb2RlLm91dGVySFRNTFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXh0Tm9kZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHZub2RlLnN0YXRpY0NvdW50IC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IG5leHROb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzRnJhZ21lbnRTdGFydCA/IG5leHRTaWJsaW5nKG5leHROb2RlKSA6IG5leHROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgICAgICAgICAgaWYgKCFpc0ZyYWdtZW50U3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVGcmFnbWVudChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAxIC8qIERPTU5vZGVUeXBlcy5FTEVNRU5UICovIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS50eXBlLnRvTG93ZXJDYXNlKCkgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRWxlbWVudChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBzZXR0aW5nIHVwIHRoZSByZW5kZXIgZWZmZWN0LCBpZiB0aGUgaW5pdGlhbCB2bm9kZSBhbHJlYWR5XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyAuZWwgc2V0LCB0aGUgY29tcG9uZW50IHdpbGwgcGVyZm9ybSBoeWRyYXRpb24gaW5zdGVhZCBvZiBtb3VudFxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBpdHMgc3ViLXRyZWUuXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLnNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDb21wb25lbnQodm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBiZSBhc3luYywgc28gaW4gdGhlIGNhc2Ugb2YgZnJhZ21lbnRzIHdlIGNhbm5vdCByZWx5XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIGNvbXBvbmVudCdzIHJlbmRlcmVkIG91dHB1dCB0byBkZXRlcm1pbmUgdGhlIGVuZCBvZiB0aGUgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCwgd2UgZG8gYSBsb29rYWhlYWQgdG8gZmluZCB0aGUgZW5kIGFuY2hvciBub2RlLlxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGlzRnJhZ21lbnRTdGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3Iobm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vICM0MjkzIHRlbGVwb3J0IGFzIGNvbXBvbmVudCByb290XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Tm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21tZW50KG5leHROb2RlKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUuZGF0YSA9PT0gJ3RlbGVwb3J0IGVuZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobmV4dE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICMzNzg3XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGNvbXBvbmVudCBpcyBhc3luYywgaXQgbWF5IGdldCBtb3ZlZCAvIHVubW91bnRlZCBiZWZvcmUgaXRzXG4gICAgICAgICAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpcyBsb2FkZWQsIHNvIHdlIG5lZWQgdG8gZ2l2ZSBpdCBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIHRoYXQgbWF0Y2hlcyBpdHMgYWRvcHRlZCBET00uXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FzeW5jV3JhcHBlcih2bm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWJUcmVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnJhZ21lbnRTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRyZWUgPSBjcmVhdGVWTm9kZShGcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZS5hbmNob3IgPSBuZXh0Tm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5leHROb2RlLnByZXZpb3VzU2libGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNvbnRhaW5lci5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gMyA/IGNyZWF0ZVRleHRWTm9kZSgnJykgOiBjcmVhdGVWTm9kZSgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlLmVsID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlID0gc3ViVHJlZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIERPTU5vZGVUeXBlcy5DT01NRU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKHBhcmVudE5vZGUobm9kZSkpLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgSG9zdFZOb2RlIHR5cGU6JywgdHlwZSwgYCgke3R5cGVvZiB0eXBlfSlgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0Tm9kZTtcbiAgICB9O1xuICAgIGNvbnN0IGh5ZHJhdGVFbGVtZW50ID0gKGVsLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCBwYXRjaEZsYWcsIHNoYXBlRmxhZywgZGlycyB9ID0gdm5vZGU7XG4gICAgICAgIC8vICM0MDA2IGZvciBmb3JtIGVsZW1lbnRzIHdpdGggbm9uLXN0cmluZyB2LW1vZGVsIHZhbHVlIGJpbmRpbmdzXG4gICAgICAgIC8vIGUuZy4gPG9wdGlvbiA6dmFsdWU9XCJvYmpcIj4sIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiA6dHJ1ZS12YWx1ZT1cIjFcIj5cbiAgICAgICAgY29uc3QgZm9yY2VQYXRjaFZhbHVlID0gKHR5cGUgPT09ICdpbnB1dCcgJiYgZGlycykgfHwgdHlwZSA9PT0gJ29wdGlvbic7XG4gICAgICAgIC8vIHNraXAgcHJvcHMgJiBjaGlsZHJlbiBpZiB0aGlzIGlzIGhvaXN0ZWQgc3RhdGljIG5vZGVzXG4gICAgICAgIC8vICM1NDA1IGluIGRldiwgYWx3YXlzIGh5ZHJhdGUgY2hpbGRyZW4gZm9yIEhNUlxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IGZvcmNlUGF0Y2hWYWx1ZSB8fCBwYXRjaEZsYWcgIT09IC0xIC8qIFBhdGNoRmxhZ3MuSE9JU1RFRCAqLykge1xuICAgICAgICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdjcmVhdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwcm9wc1xuICAgICAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlUGF0Y2hWYWx1ZSB8fFxuICAgICAgICAgICAgICAgICAgICAhb3B0aW1pemVkIHx8XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmICgxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi8gfCAzMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmb3JjZVBhdGNoVmFsdWUgJiYga2V5LmVuZHNXaXRoKCd2YWx1ZScpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpc09uKGtleSkgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0sIGZhbHNlLCB1bmRlZmluZWQsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgICAgICAgICAvLyBGYXN0IHBhdGggZm9yIGNsaWNrIGxpc3RlbmVycyAod2hpY2ggaXMgbW9zdCBvZnRlbikgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW5nIHRocm91Z2ggcHJvcHMuXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoUHJvcChlbCwgJ29uQ2xpY2snLCBudWxsLCBwcm9wcy5vbkNsaWNrLCBmYWxzZSwgdW5kZWZpbmVkLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZub2RlIC8gZGlyZWN0aXZlIGhvb2tzXG4gICAgICAgICAgICBsZXQgdm5vZGVIb29rcztcbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlycykge1xuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZU1vdW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHwgZGlycykge1xuICAgICAgICAgICAgICAgIHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdm5vZGVIb29rcyAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xuICAgICAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNoaWxkcmVuXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLyAmJlxuICAgICAgICAgICAgICAgIC8vIHNraXAgaWYgZWxlbWVudCBoYXMgaW5uZXJIVE1MIC8gdGV4dENvbnRlbnRcbiAgICAgICAgICAgICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKGVsLmZpcnN0Q2hpbGQsIHZub2RlLCBlbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhc1dhcm5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9PjogYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIG1vcmUgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIFNTUmVkIERPTSBjb250YWlucyBtb3JlIG5vZGVzIHRoYW4gaXQgc2hvdWxkLiBSZW1vdmUgdGhlbS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VyID0gbmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShjdXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgY29udGVudCBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46XFxuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYC0gQ2xpZW50OiAke2VsLnRleHRDb250ZW50fVxcbmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtIFNlcnZlcjogJHt2bm9kZS5jaGlsZHJlbn1gKTtcbiAgICAgICAgICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsLm5leHRTaWJsaW5nO1xuICAgIH07XG4gICAgY29uc3QgaHlkcmF0ZUNoaWxkcmVuID0gKG5vZGUsIHBhcmVudFZOb2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXBhcmVudFZOb2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnRWTm9kZS5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgbCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuW2ldXG4gICAgICAgICAgICAgICAgOiAoY2hpbGRyZW5baV0gPSBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSkpO1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gaHlkcmF0ZU5vZGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IFRleHQgJiYgIXZub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHtjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpfT46IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYCk7XG4gICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRoZSBTU1JlZCBET00gZGlkbid0IGNvbnRhaW4gZW5vdWdoIG5vZGVzLiBNb3VudCB0aGUgbWlzc2luZyBvbmVzLlxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIHNsb3RTY29wZUlkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfTtcbiAgICBjb25zdCBoeWRyYXRlRnJhZ21lbnQgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgc2xvdFNjb3BlSWRzOiBmcmFnbWVudFNsb3RTY29wZUlkcyB9ID0gdm5vZGU7XG4gICAgICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzXG4gICAgICAgICAgICAgICAgPyBzbG90U2NvcGVJZHMuY29uY2F0KGZyYWdtZW50U2xvdFNjb3BlSWRzKVxuICAgICAgICAgICAgICAgIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICBpZiAobmV4dCAmJiBpc0NvbW1lbnQobmV4dCkgJiYgbmV4dC5kYXRhID09PSAnXScpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZygodm5vZGUuYW5jaG9yID0gbmV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZnJhZ21lbnQgZGlkbid0IGh5ZHJhdGUgc3VjY2Vzc2Z1bGx5LCBzaW5jZSB3ZSBkaWRuJ3QgZ2V0IGEgZW5kIGFuY2hvclxuICAgICAgICAgICAgLy8gYmFjay4gVGhpcyBzaG91bGQgaGF2ZSBsZWQgdG8gbm9kZS9jaGlsZHJlbiBtaXNtYXRjaCB3YXJuaW5ncy5cbiAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBhbmNob3IgaXMgbWlzc2luZywgd2UgbmVlZCB0byBjcmVhdGUgb25lIGFuZCBpbnNlcnQgaXRcbiAgICAgICAgICAgIGluc2VydCgodm5vZGUuYW5jaG9yID0gY3JlYXRlQ29tbWVudChgXWApKSwgY29udGFpbmVyLCBuZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVNaXNtYXRjaCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBpc0ZyYWdtZW50KSA9PiB7XG4gICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gbm9kZSBtaXNtYXRjaDpcXG4tIENsaWVudCB2bm9kZTpgLCB2bm9kZS50eXBlLCBgXFxuLSBTZXJ2ZXIgcmVuZGVyZWQgRE9NOmAsIG5vZGUsIG5vZGUubm9kZVR5cGUgPT09IDMgLyogRE9NTm9kZVR5cGVzLlRFWFQgKi9cbiAgICAgICAgICAgICAgICA/IGAodGV4dClgXG4gICAgICAgICAgICAgICAgOiBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSAnWydcbiAgICAgICAgICAgICAgICAgICAgPyBgKHN0YXJ0IG9mIGZyYWdtZW50KWBcbiAgICAgICAgICAgICAgICAgICAgOiBgYCk7XG4gICAgICAgIHZub2RlLmVsID0gbnVsbDtcbiAgICAgICAgaWYgKGlzRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGNlc3NpdmUgZnJhZ21lbnQgbm9kZXNcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvcihub2RlKTtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUobmV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xuICAgICAgICByZW1vdmUobm9kZSk7XG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG5leHQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIHNsb3RTY29wZUlkcyk7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gICAgY29uc3QgbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yID0gKG5vZGUpID0+IHtcbiAgICAgICAgbGV0IG1hdGNoID0gMDtcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgICAgIGlmIChub2RlICYmIGlzQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09ICdbJylcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2grKztcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSAnXScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgcmV0dXJuIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV07XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xubGV0IHN1cHBvcnRlZDtcbmxldCBwZXJmO1xuZnVuY3Rpb24gc3RhcnRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgcGVyZi5tYXJrKGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gKTtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgZGV2dG9vbHNQZXJmU3RhcnQoaW5zdGFuY2UsIHR5cGUsIGlzU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZW5kTWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xuICAgIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGFnID0gYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWA7XG4gICAgICAgIGNvbnN0IGVuZFRhZyA9IHN0YXJ0VGFnICsgYDplbmRgO1xuICAgICAgICBwZXJmLm1hcmsoZW5kVGFnKTtcbiAgICAgICAgcGVyZi5tZWFzdXJlKGA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBpbnN0YW5jZS50eXBlKX0+ICR7dHlwZX1gLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgfVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgIGRldnRvb2xzUGVyZkVuZChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbi8qKlxuICogVGhpcyBpcyBvbmx5IGNhbGxlZCBpbiBlc20tYnVuZGxlciBidWlsZHMuXG4gKiBJdCBpcyBjYWxsZWQgd2hlbiBhIHJlbmRlcmVyIGlzIGNyZWF0ZWQsIGluIGBiYXNlQ3JlYXRlUmVuZGVyZXJgIHNvIHRoYXRcbiAqIGltcG9ydGluZyBydW50aW1lLWNvcmUgaXMgc2lkZS1lZmZlY3RzIGZyZWUuXG4gKlxuICogaXN0YW5idWwtaWdub3JlLW5leHRcbiAqL1xuZnVuY3Rpb24gaW5pdEZlYXR1cmVGbGFncygpIHtcbiAgICBjb25zdCBuZWVkV2FybiA9IFtdO1xuICAgIGlmICh0eXBlb2YgX19WVUVfT1BUSU9OU19BUElfXyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9PUFRJT05TX0FQSV9fYCk7XG4gICAgICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9PUFRJT05TX0FQSV9fID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18gIT09ICdib29sZWFuJykge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbmVlZFdhcm4ucHVzaChgX19WVUVfUFJPRF9ERVZUT09MU19fYCk7XG4gICAgICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9QUk9EX0RFVlRPT0xTX18gPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybi5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbXVsdGkgPSBuZWVkV2Fybi5sZW5ndGggPiAxO1xuICAgICAgICBjb25zb2xlLndhcm4oYEZlYXR1cmUgZmxhZyR7bXVsdGkgPyBgc2AgOiBgYH0gJHtuZWVkV2Fybi5qb2luKCcsICcpfSAke211bHRpID8gYGFyZWAgOiBgaXNgfSBub3QgZXhwbGljaXRseSBkZWZpbmVkLiBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZSwgYCArXG4gICAgICAgICAgICBgd2hpY2ggZXhwZWN0cyB0aGVzZSBjb21waWxlLXRpbWUgZmVhdHVyZSBmbGFncyB0byBiZSBnbG9iYWxseSBpbmplY3RlZCBgICtcbiAgICAgICAgICAgIGB2aWEgdGhlIGJ1bmRsZXIgY29uZmlnIGluIG9yZGVyIHRvIGdldCBiZXR0ZXIgdHJlZS1zaGFraW5nIGluIHRoZSBgICtcbiAgICAgICAgICAgIGBwcm9kdWN0aW9uIGJ1bmRsZS5cXG5cXG5gICtcbiAgICAgICAgICAgIGBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9saW5rLnZ1ZWpzLm9yZy9mZWF0dXJlLWZsYWdzLmApO1xuICAgIH1cbn1cblxuY29uc3QgcXVldWVQb3N0UmVuZGVyRWZmZWN0ID0gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2VcbiAgICA7XG4vKipcbiAqIFRoZSBjcmVhdGVSZW5kZXJlciBmdW5jdGlvbiBhY2NlcHRzIHR3byBnZW5lcmljIGFyZ3VtZW50czpcbiAqIEhvc3ROb2RlIGFuZCBIb3N0RWxlbWVudCwgY29ycmVzcG9uZGluZyB0byBOb2RlIGFuZCBFbGVtZW50IHR5cGVzIGluIHRoZVxuICogaG9zdCBlbnZpcm9ubWVudC4gRm9yIGV4YW1wbGUsIGZvciBydW50aW1lLWRvbSwgSG9zdE5vZGUgd291bGQgYmUgdGhlIERPTVxuICogYE5vZGVgIGludGVyZmFjZSBhbmQgSG9zdEVsZW1lbnQgd291bGQgYmUgdGhlIERPTSBgRWxlbWVudGAgaW50ZXJmYWNlLlxuICpcbiAqIEN1c3RvbSByZW5kZXJlcnMgY2FuIHBhc3MgaW4gdGhlIHBsYXRmb3JtIHNwZWNpZmljIHR5cGVzIGxpa2UgdGhpczpcbiAqXG4gKiBgYGAganNcbiAqIGNvbnN0IHsgcmVuZGVyLCBjcmVhdGVBcHAgfSA9IGNyZWF0ZVJlbmRlcmVyPE5vZGUsIEVsZW1lbnQ+KHtcbiAqICAgcGF0Y2hQcm9wLFxuICogICAuLi5ub2RlT3BzXG4gKiB9KVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpO1xufVxuLy8gU2VwYXJhdGUgQVBJIGZvciBjcmVhdGluZyBoeWRyYXRpb24tZW5hYmxlZCByZW5kZXJlci5cbi8vIEh5ZHJhdGlvbiBsb2dpYyBpcyBvbmx5IHVzZWQgd2hlbiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIG1ha2luZyBpdFxuLy8gdHJlZS1zaGFrYWJsZS5cbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyk7XG59XG4vLyBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZucykge1xuICAgIC8vIGNvbXBpbGUtdGltZSBmZWF0dXJlIGZsYWdzIGNoZWNrXG4gICAge1xuICAgICAgICBpbml0RmVhdHVyZUZsYWdzKCk7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IGdldEdsb2JhbFRoaXMoKTtcbiAgICB0YXJnZXQuX19WVUVfXyA9IHRydWU7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgc2V0RGV2dG9vbHNIb29rKHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fLCB0YXJnZXQpO1xuICAgIH1cbiAgICBjb25zdCB7IGluc2VydDogaG9zdEluc2VydCwgcmVtb3ZlOiBob3N0UmVtb3ZlLCBwYXRjaFByb3A6IGhvc3RQYXRjaFByb3AsIGNyZWF0ZUVsZW1lbnQ6IGhvc3RDcmVhdGVFbGVtZW50LCBjcmVhdGVUZXh0OiBob3N0Q3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudDogaG9zdENyZWF0ZUNvbW1lbnQsIHNldFRleHQ6IGhvc3RTZXRUZXh0LCBzZXRFbGVtZW50VGV4dDogaG9zdFNldEVsZW1lbnRUZXh0LCBwYXJlbnROb2RlOiBob3N0UGFyZW50Tm9kZSwgbmV4dFNpYmxpbmc6IGhvc3ROZXh0U2libGluZywgc2V0U2NvcGVJZDogaG9zdFNldFNjb3BlSWQgPSBOT09QLCBpbnNlcnRTdGF0aWNDb250ZW50OiBob3N0SW5zZXJ0U3RhdGljQ29udGVudCB9ID0gb3B0aW9ucztcbiAgICAvLyBOb3RlOiBmdW5jdGlvbnMgaW5zaWRlIHRoaXMgY2xvc3VyZSBzaG91bGQgdXNlIGBjb25zdCB4eHggPSAoKSA9PiB7fWBcbiAgICAvLyBzdHlsZSBpbiBvcmRlciB0byBwcmV2ZW50IGJlaW5nIGlubGluZWQgYnkgbWluaWZpZXJzLlxuICAgIGNvbnN0IHBhdGNoID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IgPSBudWxsLCBwYXJlbnRDb21wb25lbnQgPSBudWxsLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwsIGlzU1ZHID0gZmFsc2UsIHNsb3RTY29wZUlkcyA9IG51bGwsIG9wdGltaXplZCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nID8gZmFsc2UgOiAhIW4yLmR5bmFtaWNDaGlsZHJlbikgPT4ge1xuICAgICAgICBpZiAobjEgPT09IG4yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcGF0Y2hpbmcgJiBub3Qgc2FtZSB0eXBlLCB1bm1vdW50IG9sZCB0cmVlXG4gICAgICAgIGlmIChuMSAmJiAhaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgICAgIGFuY2hvciA9IGdldE5leHRIb3N0Tm9kZShuMSk7XG4gICAgICAgICAgICB1bm1vdW50KG4xLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgIG4xID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi8pIHtcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgbjIuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFRleHQ6XG4gICAgICAgICAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbW1lbnQ6XG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdGF0aWM6XG4gICAgICAgICAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRTdGF0aWNOb2RlKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hTdGF0aWNOb2RlKG4xLCBuMiwgY29udGFpbmVyLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGcmFnbWVudDpcbiAgICAgICAgICAgICAgICBwcm9jZXNzRnJhZ21lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFbGVtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0NvbXBvbmVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIFZOb2RlIHR5cGU6JywgdHlwZSwgYCgke3R5cGVvZiB0eXBlfSlgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IHJlZlxuICAgICAgICBpZiAocmVmICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50KSB7XG4gICAgICAgICAgICBzZXRSZWYocmVmLCBuMSAmJiBuMS5yZWYsIHBhcmVudFN1c3BlbnNlLCBuMiB8fCBuMSwgIW4yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcHJvY2Vzc1RleHQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlVGV4dChuMi5jaGlsZHJlbikpLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcbiAgICAgICAgICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBob3N0U2V0VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzQ29tbWVudE5vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlQ29tbWVudChuMi5jaGlsZHJlbiB8fCAnJykpLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIHN1cHBvcnQgZm9yIGR5bmFtaWMgY29tbWVudHNcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdW50U3RhdGljTm9kZSA9IChuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKSA9PiB7XG4gICAgICAgIFtuMi5lbCwgbjIuYW5jaG9yXSA9IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50KG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcsIG4yLmVsLCBuMi5hbmNob3IpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGV2IC8gSE1SIG9ubHlcbiAgICAgKi9cbiAgICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKSA9PiB7XG4gICAgICAgIC8vIHN0YXRpYyBub2RlcyBhcmUgb25seSBwYXRjaGVkIGR1cmluZyBkZXYgZm9yIEhNUlxuICAgICAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBob3N0TmV4dFNpYmxpbmcobjEuYW5jaG9yKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGlzdGluZ1xuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZShuMSk7XG4gICAgICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgICAgICBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdmVTdGF0aWNOb2RlID0gKHsgZWwsIGFuY2hvciB9LCBjb250YWluZXIsIG5leHRTaWJsaW5nKSA9PiB7XG4gICAgICAgIGxldCBuZXh0O1xuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIG5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIGVsID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBob3N0SW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVTdGF0aWNOb2RlID0gKHsgZWwsIGFuY2hvciB9KSA9PiB7XG4gICAgICAgIGxldCBuZXh0O1xuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgICAgICAgIGVsID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBob3N0UmVtb3ZlKGFuY2hvcik7XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBuMi50eXBlID09PSAnc3ZnJztcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIG1vdW50RWxlbWVudChuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXRjaEVsZW1lbnQobjEsIG4yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3VudEVsZW1lbnQgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgbGV0IGVsO1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCBzaGFwZUZsYWcsIHRyYW5zaXRpb24sIGRpcnMgfSA9IHZub2RlO1xuICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENyZWF0ZUVsZW1lbnQodm5vZGUudHlwZSwgaXNTVkcsIHByb3BzICYmIHByb3BzLmlzLCBwcm9wcyk7XG4gICAgICAgIC8vIG1vdW50IGNoaWxkcmVuIGZpcnN0LCBzaW5jZSBzb21lIHByb3BzIG1heSByZWx5IG9uIGNoaWxkIGNvbnRlbnRcbiAgICAgICAgLy8gYmVpbmcgYWxyZWFkeSByZW5kZXJlZCwgZS5nLiBgPHNlbGVjdCB2YWx1ZT5gXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFNoYXBlRmxhZ3MuVEVYVF9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCB2bm9kZS5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgbW91bnRDaGlsZHJlbih2bm9kZS5jaGlsZHJlbiwgZWwsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHICYmIHR5cGUgIT09ICdmb3JlaWduT2JqZWN0Jywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdjcmVhdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcHJvcHNcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICd2YWx1ZScgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldLCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTcGVjaWFsIGNhc2UgZm9yIHNldHRpbmcgdmFsdWUgb24gRE9NIGVsZW1lbnRzOlxuICAgICAgICAgICAgICogLSBpdCBjYW4gYmUgb3JkZXItc2Vuc2l0aXZlIChlLmcuIHNob3VsZCBiZSBzZXQgKmFmdGVyKiBtaW4vbWF4LCAjMjMyNSwgIzQwMjQpXG4gICAgICAgICAgICAgKiAtIGl0IG5lZWRzIHRvIGJlIGZvcmNlZCAoIzE0NzEpXG4gICAgICAgICAgICAgKiAjMjM1MyBwcm9wb3NlcyBhZGRpbmcgYW5vdGhlciByZW5kZXJlciBvcHRpb24gdG8gY29uZmlndXJlIHRoaXMsIGJ1dFxuICAgICAgICAgICAgICogdGhlIHByb3BlcnRpZXMgYWZmZWN0cyBhcmUgc28gZmluaXRlIGl0IGlzIHdvcnRoIHNwZWNpYWwgY2FzaW5nIGl0XG4gICAgICAgICAgICAgKiBoZXJlIHRvIHJlZHVjZSB0aGUgY29tcGxleGl0eS4gKFNwZWNpYWwgY2FzaW5nIGl0IGFsc28gc2hvdWxkIG5vdFxuICAgICAgICAgICAgICogYWZmZWN0IG5vbi1ET00gcmVuZGVyZXJzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICd2YWx1ZScsIG51bGwsIHByb3BzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xuICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNjb3BlSWRcbiAgICAgICAgc2V0U2NvcGVJZChlbCwgdm5vZGUsIHZub2RlLnNjb3BlSWQsIHNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ19fdm5vZGUnLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHZub2RlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ19fdnVlUGFyZW50Q29tcG9uZW50Jywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJzKSB7XG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVNb3VudCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vICMxNTgzIEZvciBpbnNpZGUgc3VzcGVuc2UgKyBzdXNwZW5zZSBub3QgcmVzb2x2ZWQgY2FzZSwgZW50ZXIgaG9vayBzaG91bGQgY2FsbCB3aGVuIHN1c3BlbnNlIHJlc29sdmVkXG4gICAgICAgIC8vICMxNjg5IEZvciBpbnNpZGUgc3VzcGVuc2UgKyBzdXNwZW5zZSByZXNvbHZlZCBjYXNlLCBqdXN0IGNhbGwgaXRcbiAgICAgICAgY29uc3QgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSAoIXBhcmVudFN1c3BlbnNlIHx8IChwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkpICYmXG4gICAgICAgICAgICB0cmFuc2l0aW9uICYmXG4gICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQ7XG4gICAgICAgIGlmIChuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fFxuICAgICAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgfHxcbiAgICAgICAgICAgIGRpcnMpIHtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRTY29wZUlkID0gKGVsLCB2bm9kZSwgc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgICAgICAgaWYgKHNjb3BlSWQpIHtcbiAgICAgICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzY29wZUlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2xvdFNjb3BlSWRzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsb3RTY29wZUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzbG90U2NvcGVJZHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGxldCBzdWJUcmVlID0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWU7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgc3ViVHJlZS5wYXRjaEZsYWcgPiAwICYmXG4gICAgICAgICAgICAgICAgc3ViVHJlZS5wYXRjaEZsYWcgJiAyMDQ4IC8qIFBhdGNoRmxhZ3MuREVWX1JPT1RfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdWJUcmVlID1cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyU2luZ2xlUm9vdChzdWJUcmVlLmNoaWxkcmVuKSB8fCBzdWJUcmVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZub2RlID09PSBzdWJUcmVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50Vk5vZGUgPSBwYXJlbnRDb21wb25lbnQudm5vZGU7XG4gICAgICAgICAgICAgICAgc2V0U2NvcGVJZChlbCwgcGFyZW50Vk5vZGUsIHBhcmVudFZOb2RlLnNjb3BlSWQsIHBhcmVudFZOb2RlLnNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50LnBhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHN0YXJ0ID0gMCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSAoY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWRcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGNoaWxkcmVuW2ldKVxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pKTtcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIGNoaWxkLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgZGlycyB9ID0gbjI7XG4gICAgICAgIC8vICMxNDI2IHRha2UgdGhlIG9sZCB2bm9kZSdzIHBhdGNoIGZsYWcgaW50byBhY2NvdW50IHNpbmNlIHVzZXIgbWF5IGNsb25lIGFcbiAgICAgICAgLy8gY29tcGlsZXItZ2VuZXJhdGVkIHZub2RlLCB3aGljaCBkZS1vcHRzIHRvIEZVTExfUFJPUFNcbiAgICAgICAgcGF0Y2hGbGFnIHw9IG4xLnBhdGNoRmxhZyAmIDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqLztcbiAgICAgICAgY29uc3Qgb2xkUHJvcHMgPSBuMS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgICAgIGNvbnN0IG5ld1Byb3BzID0gbjIucHJvcHMgfHwgRU1QVFlfT0JKO1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICAvLyBkaXNhYmxlIHJlY3Vyc2UgaW4gYmVmb3JlVXBkYXRlIGhvb2tzXG4gICAgICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgZmFsc2UpO1xuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XG4gICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sobjIsIG4xLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnRDb21wb25lbnQgJiYgdG9nZ2xlUmVjdXJzZShwYXJlbnRDb21wb25lbnQsIHRydWUpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJlQ2hpbGRyZW5TVkcgPSBpc1NWRyAmJiBuMi50eXBlICE9PSAnZm9yZWlnbk9iamVjdCc7XG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgZWwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGFyZUNoaWxkcmVuU1ZHLCBzbG90U2NvcGVJZHMpO1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XG4gICAgICAgICAgICAvLyBmdWxsIGRpZmZcbiAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBlbCwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgYXJlQ2hpbGRyZW5TVkcsIHNsb3RTY29wZUlkcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XG4gICAgICAgICAgICAvLyB0aGUgcHJlc2VuY2Ugb2YgYSBwYXRjaEZsYWcgbWVhbnMgdGhpcyBlbGVtZW50J3MgcmVuZGVyIGNvZGUgd2FzXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIGFuZCBjYW4gdGFrZSB0aGUgZmFzdCBwYXRoLlxuICAgICAgICAgICAgLy8gaW4gdGhpcyBwYXRoIG9sZCBub2RlIGFuZCBuZXcgbm9kZSBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIHRoZSBzYW1lIHNoYXBlXG4gICAgICAgICAgICAvLyAoaS5lLiBhdCB0aGUgZXhhY3Qgc2FtZSBwb3NpdGlvbiBpbiB0aGUgc291cmNlIHRlbXBsYXRlKVxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIFBhdGNoRmxhZ3MuRlVMTF9QUk9QUyAqLykge1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgcHJvcHMgY29udGFpbiBkeW5hbWljIGtleXMsIGZ1bGwgZGlmZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBwYXRjaFByb3BzKGVsLCBuMiwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjbGFzc1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgY2xhc3MgYmluZGluZ3MuXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDIgLyogUGF0Y2hGbGFncy5DTEFTUyAqLykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUHJvcHMuY2xhc3MgIT09IG5ld1Byb3BzLmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAnY2xhc3MnLCBudWxsLCBuZXdQcm9wcy5jbGFzcywgaXNTVkcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHN0eWxlXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBzdHlsZSBiaW5kaW5nc1xuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA0IC8qIFBhdGNoRmxhZ3MuU1RZTEUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ3N0eWxlJywgb2xkUHJvcHMuc3R5bGUsIG5ld1Byb3BzLnN0eWxlLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHByb3BzXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBwcm9wL2F0dHIgYmluZGluZ3NcbiAgICAgICAgICAgICAgICAvLyBvdGhlciB0aGFuIGNsYXNzIGFuZCBzdHlsZS4gVGhlIGtleXMgb2YgZHluYW1pYyBwcm9wL2F0dHJzIGFyZSBzYXZlZCBmb3JcbiAgICAgICAgICAgICAgICAvLyBmYXN0ZXIgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICAgIC8vIE5vdGUgZHluYW1pYyBrZXlzIGxpa2UgOltmb29dPVwiYmFyXCIgd2lsbCBjYXVzZSB0aGlzIG9wdGltaXphdGlvbiB0b1xuICAgICAgICAgICAgICAgIC8vIGJhaWwgb3V0IGFuZCBnbyB0aHJvdWdoIGEgZnVsbCBkaWZmIGJlY2F1c2Ugd2UgbmVlZCB0byB1bnNldCB0aGUgb2xkIGtleVxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBhdGNoRmxhZ3MuUFJPUFMgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZsYWcgaXMgcHJlc2VudCB0aGVuIGR5bmFtaWNQcm9wcyBtdXN0IGJlIG5vbi1udWxsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAjMTQ3MSBmb3JjZSBwYXRjaCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYgfHwga2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBwcmV2LCBuZXh0LCBpc1NWRywgbjEuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXh0XG4gICAgICAgICAgICAvLyBUaGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBvbmx5IGR5bmFtaWMgdGV4dCBjaGlsZHJlbi5cbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAxIC8qIFBhdGNoRmxhZ3MuVEVYVCAqLykge1xuICAgICAgICAgICAgICAgIGlmIChuMS5jaGlsZHJlbiAhPT0gbjIuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQgJiYgZHluYW1pY0NoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHVub3B0aW1pemVkLCBmdWxsIGRpZmZcbiAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVVcGRhdGVkKSB8fCBkaXJzKSB7XG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAndXBkYXRlZCcpO1xuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBUaGUgZmFzdCBwYXRoIGZvciBibG9ja3MuXG4gICAgY29uc3QgcGF0Y2hCbG9ja0NoaWxkcmVuID0gKG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbiwgZmFsbGJhY2tDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgb2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZOb2RlID0gbmV3Q2hpbGRyZW5baV07XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGNvbnRhaW5lciAocGFyZW50IGVsZW1lbnQpIGZvciB0aGUgcGF0Y2guXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBcbiAgICAgICAgICAgIC8vIG9sZFZOb2RlIG1heSBiZSBhbiBlcnJvcmVkIGFzeW5jIHNldHVwKCkgY29tcG9uZW50IGluc2lkZSBTdXNwZW5zZVxuICAgICAgICAgICAgLy8gd2hpY2ggd2lsbCBub3QgaGF2ZSBhIG1vdW50ZWQgZWxlbWVudFxuICAgICAgICAgICAgb2xkVk5vZGUuZWwgJiZcbiAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGEgRnJhZ21lbnQsIHdlIG5lZWQgdG8gcHJvdmlkZSB0aGUgYWN0dWFsIHBhcmVudFxuICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBGcmFnbWVudCBpdHNlbGYgc28gaXQgY2FuIG1vdmUgaXRzIGNoaWxkcmVuLlxuICAgICAgICAgICAgICAgIChvbGRWTm9kZS50eXBlID09PSBGcmFnbWVudCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGRpZmZlcmVudCBub2RlcywgdGhlcmUgaXMgZ29pbmcgdG8gYmUgYSByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgIWlzU2FtZVZOb2RlVHlwZShvbGRWTm9kZSwgbmV3Vk5vZGUpIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBjb21wb25lbnQsIGl0IGNvdWxkIGNvbnRhaW4gYW55dGhpbmcuXG4gICAgICAgICAgICAgICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmICg2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovIHwgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykpXG4gICAgICAgICAgICAgICAgPyBob3N0UGFyZW50Tm9kZShvbGRWTm9kZS5lbClcbiAgICAgICAgICAgICAgICA6IC8vIEluIG90aGVyIGNhc2VzLCB0aGUgcGFyZW50IGNvbnRhaW5lciBpcyBub3QgYWN0dWFsbHkgdXNlZCBzbyB3ZVxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrQ29udGFpbmVyO1xuICAgICAgICAgICAgcGF0Y2gob2xkVk5vZGUsIG5ld1ZOb2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwYXRjaFByb3BzID0gKGVsLCB2bm9kZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRykgPT4ge1xuICAgICAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzKSB7XG4gICAgICAgICAgICBpZiAob2xkUHJvcHMgIT09IEVNUFRZX09CSikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9sZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByb3Aoa2V5KSAmJiAhKGtleSBpbiBuZXdQcm9wcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgb2xkUHJvcHNba2V5XSwgbnVsbCwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcgaXMgbm90IHZhbGlkIHByb3BcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgLy8gZGVmZXIgcGF0Y2hpbmcgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiAmJiBrZXkgIT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBwcmV2LCBuZXh0LCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCd2YWx1ZScgaW4gbmV3UHJvcHMpIHtcbiAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAndmFsdWUnLCBvbGRQcm9wcy52YWx1ZSwgbmV3UHJvcHMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwcm9jZXNzRnJhZ21lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50U3RhcnRBbmNob3IgPSAobjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoJycpKTtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRFbmRBbmNob3IgPSAobjIuYW5jaG9yID0gbjEgPyBuMS5hbmNob3IgOiBob3N0Q3JlYXRlVGV4dCgnJykpO1xuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgc2xvdFNjb3BlSWRzOiBmcmFnbWVudFNsb3RTY29wZUlkcyB9ID0gbjI7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIC8vICM1NTIzIGRldiByb290IGZyYWdtZW50IG1heSBpbmhlcml0IGRpcmVjdGl2ZXNcbiAgICAgICAgICAgIChpc0htclVwZGF0aW5nIHx8IHBhdGNoRmxhZyAmIDIwNDggLyogUGF0Y2hGbGFncy5ERVZfUk9PVF9GUkFHTUVOVCAqLykpIHtcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkIC8gRGV2IHJvb3QgZnJhZ21lbnQgKHcvIGNvbW1lbnRzKSwgZm9yY2UgZnVsbCBkaWZmXG4gICAgICAgICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBzbG90IGZyYWdtZW50IHdpdGggOnNsb3R0ZWQgc2NvcGUgaWRzXG4gICAgICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzXG4gICAgICAgICAgICAgICAgPyBzbG90U2NvcGVJZHMuY29uY2F0KGZyYWdtZW50U2xvdFNjb3BlSWRzKVxuICAgICAgICAgICAgICAgIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRTdGFydEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudEVuZEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgLy8gYSBmcmFnbWVudCBjYW4gb25seSBoYXZlIGFycmF5IGNoaWxkcmVuXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGFyZSBlaXRoZXIgZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciwgb3IgaW1wbGljaXRseSBjcmVhdGVkXG4gICAgICAgICAgICAvLyBmcm9tIGFycmF5cy5cbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4objIuY2hpbGRyZW4sIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCAmJlxuICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmIDY0IC8qIFBhdGNoRmxhZ3MuU1RBQkxFX0ZSQUdNRU5UICovICYmXG4gICAgICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuICYmXG4gICAgICAgICAgICAgICAgLy8gIzI3MTUgdGhlIHByZXZpb3VzIGZyYWdtZW50IGNvdWxkJ3ZlIGJlZW4gYSBCQUlMZWQgb25lIGFzIGEgcmVzdWx0XG4gICAgICAgICAgICAgICAgLy8gb2YgcmVuZGVyU2xvdCgpIHdpdGggbm8gdmFsaWQgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICBuMS5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBhIHN0YWJsZSBmcmFnbWVudCAodGVtcGxhdGUgcm9vdCBvciA8dGVtcGxhdGUgdi1mb3I+KSBkb2Vzbid0IG5lZWQgdG9cbiAgICAgICAgICAgICAgICAvLyBwYXRjaCBjaGlsZHJlbiBvcmRlciwgYnV0IGl0IG1heSBjb250YWluIGR5bmFtaWNDaGlsZHJlbi5cbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcyk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIC8vICMyMDgwIGlmIHRoZSBzdGFibGUgZnJhZ21lbnQgaGFzIGEga2V5LCBpdCdzIGEgPHRlbXBsYXRlIHYtZm9yPiB0aGF0IG1heVxuICAgICAgICAgICAgICAgIC8vICBnZXQgbW92ZWQgYXJvdW5kLiBNYWtlIHN1cmUgYWxsIHJvb3QgbGV2ZWwgdm5vZGVzIGluaGVyaXQgZWwuXG4gICAgICAgICAgICAgICAgLy8gIzIxMzQgb3IgaWYgaXQncyBhIGNvbXBvbmVudCByb290LCBpdCBtYXkgYWxzbyBnZXQgbW92ZWQgYXJvdW5kXG4gICAgICAgICAgICAgICAgLy8gYXMgdGhlIGNvbXBvbmVudCBpcyBiZWluZyBtb3ZlZC5cbiAgICAgICAgICAgICAgICBuMi5rZXkgIT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAocGFyZW50Q29tcG9uZW50ICYmIG4yID09PSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUgLyogc2hhbGxvdyAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8ga2V5ZWQgLyB1bmtleWVkLCBvciBtYW51YWwgZnJhZ21lbnRzLlxuICAgICAgICAgICAgICAgIC8vIGZvciBrZXllZCAmIHVua2V5ZWQsIHNpbmNlIHRoZXkgYXJlIGNvbXBpbGVyIGdlbmVyYXRlZCBmcm9tIHYtZm9yLFxuICAgICAgICAgICAgICAgIC8vIGVhY2ggY2hpbGQgaXMgZ3VhcmFudGVlZCB0byBiZSBhIGJsb2NrIHNvIHRoZSBmcmFnbWVudCB3aWxsIG5ldmVyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBkeW5hbWljQ2hpbGRyZW4uXG4gICAgICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHByb2Nlc3NDb21wb25lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIG4yLnNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcztcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChuMi5zaGFwZUZsYWcgJiA1MTIgLyogU2hhcGVGbGFncy5DT01QT05FTlRfS0VQVF9BTElWRSAqLykge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBtb3VudENvbXBvbmVudCA9IChpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gKGluaXRpYWxWTm9kZS5jb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZShpbml0aWFsVk5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpKTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVySE1SKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQoaW5pdGlhbFZOb2RlKTtcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5qZWN0IHJlbmRlcmVyIGludGVybmFscyBmb3Iga2VlcEFsaXZlXG4gICAgICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVzb2x2ZSBwcm9wcyBhbmQgc2xvdHMgZm9yIHNldHVwIGNvbnRleHRcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldHVwQ29tcG9uZW50KGluc3RhbmNlKTtcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNldHVwKCkgaXMgYXN5bmMuIFRoaXMgY29tcG9uZW50IHJlbGllcyBvbiBhc3luYyBsb2dpYyB0byBiZSByZXNvbHZlZFxuICAgICAgICAvLyBiZWZvcmUgcHJvY2VlZGluZ1xuICAgICAgICBpZiAoaW5zdGFuY2UuYXN5bmNEZXApIHtcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCk7XG4gICAgICAgICAgICAvLyBHaXZlIGl0IGEgcGxhY2Vob2xkZXIgaWYgdGhpcyBpcyBub3QgaHlkcmF0aW9uXG4gICAgICAgICAgICAvLyBUT0RPIGhhbmRsZSBzZWxmLWRlZmluZWQgZmFsbGJhY2tcbiAgICAgICAgICAgIGlmICghaW5pdGlhbFZOb2RlLmVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpKTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobnVsbCwgcGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudCA9IChuMSwgbjIsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChuMi5jb21wb25lbnQgPSBuMS5jb21wb25lbnQpO1xuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKSkge1xuICAgICAgICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwICYmXG4gICAgICAgICAgICAgICAgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBhc3luYyAmIHN0aWxsIHBlbmRpbmcgLSBqdXN0IHVwZGF0ZSBwcm9wcyBhbmQgc2xvdHNcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgY29tcG9uZW50J3MgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXIgaXNuJ3Qgc2V0LXVwIHlldFxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG4yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuMiwgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vcm1hbCB1cGRhdGVcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbjI7XG4gICAgICAgICAgICAgICAgLy8gaW4gY2FzZSB0aGUgY2hpbGQgY29tcG9uZW50IGlzIGFsc28gcXVldWVkLCByZW1vdmUgaXQgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUgdXBkYXRpbmcgdGhlIHNhbWUgY2hpbGQgY29tcG9uZW50IGluIHRoZSBzYW1lIGZsdXNoLlxuICAgICAgICAgICAgICAgIGludmFsaWRhdGVKb2IoaW5zdGFuY2UudXBkYXRlKTtcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZS51cGRhdGUgaXMgdGhlIHJlYWN0aXZlIGVmZmVjdC5cbiAgICAgICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBuZWVkZWQuIGp1c3QgY29weSBvdmVyIHByb3BlcnRpZXNcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG4yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50VXBkYXRlRm4gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlLmlzTW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbCwgcHJvcHMgfSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGJtLCBtLCBwYXJlbnQgfSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXN5bmNXcmFwcGVyVk5vZGUgPSBpc0FzeW5jV3JhcHBlcihpbml0aWFsVk5vZGUpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAvLyBiZWZvcmVNb3VudCBob29rXG4gICAgICAgICAgICAgICAgaWYgKGJtKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZU1vdW50XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FzeW5jV3JhcHBlclZOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgaW5pdGlhbFZOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGh5ZHJhdGVOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIGhhcyBhZG9wdGVkIGhvc3Qgbm9kZSAtIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVTdWJUcmVlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlTm9kZShlbCwgaW5zdGFuY2Uuc3ViVHJlZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXJWTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZOb2RlLnR5cGUuX19hc3luY0xvYWRlcigpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RlOiB3ZSBhcmUgbW92aW5nIHRoZSByZW5kZXIgY2FsbCBpbnRvIGFuIGFzeW5jIGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggbWVhbnMgaXQgd29uJ3QgdHJhY2sgZGVwZW5kZW5jaWVzIC0gYnV0IGl0J3Mgb2sgYmVjYXVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBzZXJ2ZXItcmVuZGVyZWQgYXN5bmMgd3JhcHBlciBpcyBhbHJlYWR5IGluIHJlc29sdmVkIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXQgd2lsbCBuZXZlciBuZWVkIHRvIGNoYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+ICFpbnN0YW5jZS5pc1VubW91bnRlZCAmJiBoeWRyYXRlU3ViVHJlZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGVTdWJUcmVlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YlRyZWUgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QobSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvblZub2RlTW91bnRlZFxuICAgICAgICAgICAgICAgIGlmICghaXNBc3luY1dyYXBwZXJWTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlZEluaXRpYWxWTm9kZSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgc2NvcGVkSW5pdGlhbFZOb2RlKSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhY3RpdmF0ZWQgaG9vayBmb3Iga2VlcC1hbGl2ZSByb290cy5cbiAgICAgICAgICAgICAgICAvLyAjMTc0MiBhY3RpdmF0ZWQgaG9vayBtdXN0IGJlIGFjY2Vzc2VkIGFmdGVyIGZpcnN0IHJlbmRlclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBob29rIG1heSBiZSBpbmplY3RlZCBieSBhIGNoaWxkIGtlZXAtYWxpdmVcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZOb2RlLnNoYXBlRmxhZyAmIDI1NiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLyB8fFxuICAgICAgICAgICAgICAgICAgICAocGFyZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0FzeW5jV3JhcHBlcihwYXJlbnQudm5vZGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQudm5vZGUuc2hhcGVGbGFnICYgMjU2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5hICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChpbnN0YW5jZS5hLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcbiAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICMyNDU4OiBkZWZlcmVuY2UgbW91bnQtb25seSBvYmplY3QgcGFyYW1ldGVycyB0byBwcmV2ZW50IG1lbWxlYWtzXG4gICAgICAgICAgICAgICAgaW5pdGlhbFZOb2RlID0gY29udGFpbmVyID0gYW5jaG9yID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUNvbXBvbmVudFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdHJpZ2dlcmVkIGJ5IG11dGF0aW9uIG9mIGNvbXBvbmVudCdzIG93biBzdGF0ZSAobmV4dDogbnVsbClcbiAgICAgICAgICAgICAgICAvLyBPUiBwYXJlbnQgY2FsbGluZyBwcm9jZXNzQ29tcG9uZW50IChuZXh0OiBWTm9kZSlcbiAgICAgICAgICAgICAgICBsZXQgeyBuZXh0LCBidSwgdSwgcGFyZW50LCB2bm9kZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgbGV0IG9yaWdpbk5leHQgPSBuZXh0O1xuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobmV4dCB8fCBpbnN0YW5jZS52bm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERpc2FsbG93IGNvbXBvbmVudCBlZmZlY3QgcmVjdXJzaW9uIGR1cmluZyBwcmUtbGlmZWN5Y2xlIGhvb2tzLlxuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbmV4dCwgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSB2bm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlVXBkYXRlIGhvb2tcbiAgICAgICAgICAgICAgICBpZiAoYnUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYnUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBvblZub2RlQmVmb3JlVXBkYXRlXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXh0LnByb3BzICYmIG5leHQucHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIC8vIHJlbmRlclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdWJUcmVlID0gbmV4dFRyZWU7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXRjaChwcmV2VHJlZSwgbmV4dFRyZWUsIFxuICAgICAgICAgICAgICAgIC8vIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSB0ZWxlcG9ydFxuICAgICAgICAgICAgICAgIGhvc3RQYXJlbnROb2RlKHByZXZUcmVlLmVsKSwgXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIGZyYWdtZW50XG4gICAgICAgICAgICAgICAgZ2V0TmV4dEhvc3ROb2RlKHByZXZUcmVlKSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dC5lbCA9IG5leHRUcmVlLmVsO1xuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5OZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGYtdHJpZ2dlcmVkIHVwZGF0ZS4gSW4gY2FzZSBvZiBIT0MsIHVwZGF0ZSBwYXJlbnQgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIGVsLiBIT0MgaXMgaW5kaWNhdGVkIGJ5IHBhcmVudCBpbnN0YW5jZSdzIHN1YlRyZWUgcG9pbnRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2hpbGQgY29tcG9uZW50J3Mgdm5vZGVcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCBuZXh0VHJlZS5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZWQgaG9va1xuICAgICAgICAgICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVVcGRhdGVkXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXh0LnByb3BzICYmIG5leHQucHJvcHMub25Wbm9kZVVwZGF0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xuICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBjcmVhdGUgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXJpbmdcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gKGluc3RhbmNlLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChjb21wb25lbnRVcGRhdGVGbiwgKCkgPT4gcXVldWVKb2IodXBkYXRlKSwgaW5zdGFuY2Uuc2NvcGUgLy8gdHJhY2sgaXQgaW4gY29tcG9uZW50J3MgZWZmZWN0IHNjb3BlXG4gICAgICAgICkpO1xuICAgICAgICBjb25zdCB1cGRhdGUgPSAoaW5zdGFuY2UudXBkYXRlID0gKCkgPT4gZWZmZWN0LnJ1bigpKTtcbiAgICAgICAgdXBkYXRlLmlkID0gaW5zdGFuY2UudWlkO1xuICAgICAgICAvLyBhbGxvd1JlY3Vyc2VcbiAgICAgICAgLy8gIzE4MDEsICMyMDQzIGNvbXBvbmVudCByZW5kZXIgZWZmZWN0cyBzaG91bGQgYWxsb3cgcmVjdXJzaXZlIHVwZGF0ZXNcbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIGVmZmVjdC5vblRyYWNrID0gaW5zdGFuY2UucnRjXG4gICAgICAgICAgICAgICAgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0YywgZSlcbiAgICAgICAgICAgICAgICA6IHZvaWQgMDtcbiAgICAgICAgICAgIGVmZmVjdC5vblRyaWdnZXIgPSBpbnN0YW5jZS5ydGdcbiAgICAgICAgICAgICAgICA/IGUgPT4gaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UucnRnLCBlKVxuICAgICAgICAgICAgICAgIDogdm9pZCAwO1xuICAgICAgICAgICAgdXBkYXRlLm93bmVySW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciA9IChpbnN0YW5jZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgICAgbmV4dFZOb2RlLmNvbXBvbmVudCA9IGluc3RhbmNlO1xuICAgICAgICBjb25zdCBwcmV2UHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcztcbiAgICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuZXh0Vk5vZGU7XG4gICAgICAgIGluc3RhbmNlLm5leHQgPSBudWxsO1xuICAgICAgICB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgbmV4dFZOb2RlLnByb3BzLCBwcmV2UHJvcHMsIG9wdGltaXplZCk7XG4gICAgICAgIHVwZGF0ZVNsb3RzKGluc3RhbmNlLCBuZXh0Vk5vZGUuY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgICAgLy8gcHJvcHMgdXBkYXRlIG1heSBoYXZlIHRyaWdnZXJlZCBwcmUtZmx1c2ggd2F0Y2hlcnMuXG4gICAgICAgIC8vIGZsdXNoIHRoZW0gYmVmb3JlIHRoZSByZW5kZXIgdXBkYXRlLlxuICAgICAgICBmbHVzaFByZUZsdXNoQ2JzKCk7XG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICB9O1xuICAgIGNvbnN0IHBhdGNoQ2hpbGRyZW4gPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICAgICAgY29uc3QgYzEgPSBuMSAmJiBuMS5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgcHJldlNoYXBlRmxhZyA9IG4xID8gbjEuc2hhcGVGbGFnIDogMDtcbiAgICAgICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgeyBwYXRjaEZsYWcsIHNoYXBlRmxhZyB9ID0gbjI7XG4gICAgICAgIC8vIGZhc3QgcGF0aFxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEyOCAvKiBQYXRjaEZsYWdzLktFWUVEX0ZSQUdNRU5UICovKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjb3VsZCBiZSBlaXRoZXIgZnVsbHkta2V5ZWQgb3IgbWl4ZWQgKHNvbWUga2V5ZWQgc29tZSBub3QpXG4gICAgICAgICAgICAgICAgLy8gcHJlc2VuY2Ugb2YgcGF0Y2hGbGFnIG1lYW5zIGNoaWxkcmVuIGFyZSBndWFyYW50ZWVkIHRvIGJlIGFycmF5c1xuICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhdGNoRmxhZyAmIDI1NiAvKiBQYXRjaEZsYWdzLlVOS0VZRURfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyB1bmtleWVkXG4gICAgICAgICAgICAgICAgcGF0Y2hVbmtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hpbGRyZW4gaGFzIDMgcG9zc2liaWxpdGllczogdGV4dCwgYXJyYXkgb3Igbm8gY2hpbGRyZW4uXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFNoYXBlRmxhZ3MuVEVYVF9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgLy8gdGV4dCBjaGlsZHJlbiBmYXN0IHBhdGhcbiAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYzIgIT09IGMxKSB7XG4gICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgYzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgYXJyYXlcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyB0d28gYXJyYXlzLCBjYW5ub3QgYXNzdW1lIGFueXRoaW5nLCBkbyBmdWxsIGRpZmZcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hLZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBubyBuZXcgY2hpbGRyZW4sIGp1c3QgdW5tb3VudCBvbGRcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBwcmV2IGNoaWxkcmVuIHdhcyB0ZXh0IE9SIG51bGxcbiAgICAgICAgICAgICAgICAvLyBuZXcgY2hpbGRyZW4gaXMgYXJyYXkgT1IgbnVsbFxuICAgICAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXcgaWYgYXJyYXlcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBhdGNoVW5rZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgICAgICBjMSA9IGMxIHx8IEVNUFRZX0FSUjtcbiAgICAgICAgYzIgPSBjMiB8fCBFTVBUWV9BUlI7XG4gICAgICAgIGNvbnN0IG9sZExlbmd0aCA9IGMxLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gYzIubGVuZ3RoO1xuICAgICAgICBjb25zdCBjb21tb25MZW5ndGggPSBNYXRoLm1pbihvbGRMZW5ndGgsIG5ld0xlbmd0aCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tbW9uTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xuICAgICAgICAgICAgcGF0Y2goYzFbaV0sIG5leHRDaGlsZCwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGRcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSwgZmFsc2UsIGNvbW1vbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBtb3VudCBuZXdcbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGNvbW1vbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGNhbiBiZSBhbGwta2V5ZWQgb3IgbWl4ZWRcbiAgICBjb25zdCBwYXRjaEtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgbDIgPSBjMi5sZW5ndGg7XG4gICAgICAgIGxldCBlMSA9IGMxLmxlbmd0aCAtIDE7IC8vIHByZXYgZW5kaW5nIGluZGV4XG4gICAgICAgIGxldCBlMiA9IGwyIC0gMTsgLy8gbmV4dCBlbmRpbmcgaW5kZXhcbiAgICAgICAgLy8gMS4gc3luYyBmcm9tIHN0YXJ0XG4gICAgICAgIC8vIChhIGIpIGNcbiAgICAgICAgLy8gKGEgYikgZCBlXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbaV07XG4gICAgICAgICAgICBjb25zdCBuMiA9IChjMltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xuICAgICAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XG4gICAgICAgICAgICAgICAgcGF0Y2gobjEsIG4yLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICAvLyAyLiBzeW5jIGZyb20gZW5kXG4gICAgICAgIC8vIGEgKGIgYylcbiAgICAgICAgLy8gZCBlIChiIGMpXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbZTFdO1xuICAgICAgICAgICAgY29uc3QgbjIgPSAoYzJbZTJdID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltlMl0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltlMl0pKTtcbiAgICAgICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlMS0tO1xuICAgICAgICAgICAgZTItLTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBjb21tb24gc2VxdWVuY2UgKyBtb3VudFxuICAgICAgICAvLyAoYSBiKVxuICAgICAgICAvLyAoYSBiKSBjXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDEsIGUyID0gMlxuICAgICAgICAvLyAoYSBiKVxuICAgICAgICAvLyBjIChhIGIpXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IC0xLCBlMiA9IDBcbiAgICAgICAgaWYgKGkgPiBlMSkge1xuICAgICAgICAgICAgaWYgKGkgPD0gZTIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0UG9zID0gZTIgKyAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRQb3MgPCBsMiA/IGMyW25leHRQb3NdLmVsIDogcGFyZW50QW5jaG9yO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpIDw9IGUyKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIChjMltpXSA9IG9wdGltaXplZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gNC4gY29tbW9uIHNlcXVlbmNlICsgdW5tb3VudFxuICAgICAgICAvLyAoYSBiKSBjXG4gICAgICAgIC8vIChhIGIpXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDIsIGUyID0gMVxuICAgICAgICAvLyBhIChiIGMpXG4gICAgICAgIC8vIChiIGMpXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IDAsIGUyID0gLTFcbiAgICAgICAgZWxzZSBpZiAoaSA+IGUyKSB7XG4gICAgICAgICAgICB3aGlsZSAoaSA8PSBlMSkge1xuICAgICAgICAgICAgICAgIHVubW91bnQoYzFbaV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA1LiB1bmtub3duIHNlcXVlbmNlXG4gICAgICAgIC8vIFtpIC4uLiBlMSArIDFdOiBhIGIgW2MgZCBlXSBmIGdcbiAgICAgICAgLy8gW2kgLi4uIGUyICsgMV06IGEgYiBbZSBkIGMgaF0gZiBnXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDQsIGUyID0gNVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHMxID0gaTsgLy8gcHJldiBzdGFydGluZyBpbmRleFxuICAgICAgICAgICAgY29uc3QgczIgPSBpOyAvLyBuZXh0IHN0YXJ0aW5nIGluZGV4XG4gICAgICAgICAgICAvLyA1LjEgYnVpbGQga2V5OmluZGV4IG1hcCBmb3IgbmV3Q2hpbGRyZW5cbiAgICAgICAgICAgIGNvbnN0IGtleVRvTmV3SW5kZXhNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBmb3IgKGkgPSBzMjsgaSA8PSBlMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gKGMyW2ldID0gb3B0aW1pemVkXG4gICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dENoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5VG9OZXdJbmRleE1hcC5oYXMobmV4dENoaWxkLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYER1cGxpY2F0ZSBrZXlzIGZvdW5kIGR1cmluZyB1cGRhdGU6YCwgSlNPTi5zdHJpbmdpZnkobmV4dENoaWxkLmtleSksIGBNYWtlIHN1cmUga2V5cyBhcmUgdW5pcXVlLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGtleVRvTmV3SW5kZXhNYXAuc2V0KG5leHRDaGlsZC5rZXksIGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDUuMiBsb29wIHRocm91Z2ggb2xkIGNoaWxkcmVuIGxlZnQgdG8gYmUgcGF0Y2hlZCBhbmQgdHJ5IHRvIHBhdGNoXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBub2RlcyAmIHJlbW92ZSBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudFxuICAgICAgICAgICAgbGV0IGo7XG4gICAgICAgICAgICBsZXQgcGF0Y2hlZCA9IDA7XG4gICAgICAgICAgICBjb25zdCB0b0JlUGF0Y2hlZCA9IGUyIC0gczIgKyAxO1xuICAgICAgICAgICAgbGV0IG1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAvLyB1c2VkIHRvIHRyYWNrIHdoZXRoZXIgYW55IG5vZGUgaGFzIG1vdmVkXG4gICAgICAgICAgICBsZXQgbWF4TmV3SW5kZXhTb0ZhciA9IDA7XG4gICAgICAgICAgICAvLyB3b3JrcyBhcyBNYXA8bmV3SW5kZXgsIG9sZEluZGV4PlxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG9sZEluZGV4IGlzIG9mZnNldCBieSArMVxuICAgICAgICAgICAgLy8gYW5kIG9sZEluZGV4ID0gMCBpcyBhIHNwZWNpYWwgdmFsdWUgaW5kaWNhdGluZyB0aGUgbmV3IG5vZGUgaGFzXG4gICAgICAgICAgICAvLyBubyBjb3JyZXNwb25kaW5nIG9sZCBub2RlLlxuICAgICAgICAgICAgLy8gdXNlZCBmb3IgZGV0ZXJtaW5pbmcgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2VcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4VG9PbGRJbmRleE1hcCA9IG5ldyBBcnJheSh0b0JlUGF0Y2hlZCk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9CZVBhdGNoZWQ7IGkrKylcbiAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPSAwO1xuICAgICAgICAgICAgZm9yIChpID0gczE7IGkgPD0gZTE7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZDaGlsZCA9IGMxW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwYXRjaGVkID49IHRvQmVQYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbCBuZXcgY2hpbGRyZW4gaGF2ZSBiZWVuIHBhdGNoZWQgc28gdGhpcyBjYW4gb25seSBiZSBhIHJlbW92YWxcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG5ld0luZGV4O1xuICAgICAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggPSBrZXlUb05ld0luZGV4TWFwLmdldChwcmV2Q2hpbGQua2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGtleS1sZXNzIG5vZGUsIHRyeSB0byBsb2NhdGUgYSBrZXktbGVzcyBub2RlIG9mIHRoZSBzYW1lIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gczI7IGogPD0gZTI7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtqIC0gczJdID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHByZXZDaGlsZCwgYzJbal0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggPSBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtuZXdJbmRleCAtIHMyXSA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gbWF4TmV3SW5kZXhTb0Zhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4TmV3SW5kZXhTb0ZhciA9IG5ld0luZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKHByZXZDaGlsZCwgYzJbbmV3SW5kZXhdLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgICAgIHBhdGNoZWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA1LjMgbW92ZSBhbmQgbW91bnRcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlIG9ubHkgd2hlbiBub2RlcyBoYXZlIG1vdmVkXG4gICAgICAgICAgICBjb25zdCBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZSA9IG1vdmVkXG4gICAgICAgICAgICAgICAgPyBnZXRTZXF1ZW5jZShuZXdJbmRleFRvT2xkSW5kZXhNYXApXG4gICAgICAgICAgICAgICAgOiBFTVBUWV9BUlI7XG4gICAgICAgICAgICBqID0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIC8vIGxvb3BpbmcgYmFja3dhcmRzIHNvIHRoYXQgd2UgY2FuIHVzZSBsYXN0IHBhdGNoZWQgbm9kZSBhcyBhbmNob3JcbiAgICAgICAgICAgIGZvciAoaSA9IHRvQmVQYXRjaGVkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0SW5kZXggPSBzMiArIGk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbbmV4dEluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0SW5kZXggKyAxIDwgbDIgPyBjMltuZXh0SW5kZXggKyAxXS5lbCA6IHBhcmVudEFuY2hvcjtcbiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ld1xuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGlmOlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBzdGFibGUgc3Vic2VxdWVuY2UgKGUuZy4gYSByZXZlcnNlKVxuICAgICAgICAgICAgICAgICAgICAvLyBPUiBjdXJyZW50IG5vZGUgaXMgbm90IGFtb25nIHRoZSBzdGFibGUgc2VxdWVuY2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCAwIHx8IGkgIT09IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlW2pdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIDIgLyogTW92ZVR5cGUuUkVPUkRFUiAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG1vdmUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSwgcGFyZW50U3VzcGVuc2UgPSBudWxsKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZWwsIHR5cGUsIHRyYW5zaXRpb24sIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgbW92ZSh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLm1vdmUoY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykge1xuICAgICAgICAgICAgdHlwZS5tb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW50ZXJuYWxzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaG9zdEluc2VydCh2bm9kZS5hbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICAgICAgICBtb3ZlU3RhdGljTm9kZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNpbmdsZSBub2Rlc1xuICAgICAgICBjb25zdCBuZWVkVHJhbnNpdGlvbiA9IG1vdmVUeXBlICE9PSAyIC8qIE1vdmVUeXBlLlJFT1JERVIgKi8gJiZcbiAgICAgICAgICAgIHNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmXG4gICAgICAgICAgICB0cmFuc2l0aW9uO1xuICAgICAgICBpZiAobmVlZFRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIGlmIChtb3ZlVHlwZSA9PT0gMCAvKiBNb3ZlVHlwZS5FTlRFUiAqLykge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gdHJhbnNpdGlvbi5lbnRlcihlbCksIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUsIGFmdGVyTGVhdmUgfSA9IHRyYW5zaXRpb247XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gKCkgPT4gaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGVhdmUoZWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsYXlMZWF2ZShlbCwgcmVtb3ZlLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybUxlYXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1bm1vdW50ID0gKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCByZWYsIGNoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIHNoYXBlRmxhZywgcGF0Y2hGbGFnLCBkaXJzIH0gPSB2bm9kZTtcbiAgICAgICAgLy8gdW5zZXQgcmVmXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMjU2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSB7XG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmRlYWN0aXZhdGUodm5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNob3VsZEludm9rZURpcnMgPSBzaGFwZUZsYWcgJiAxIC8qIFNoYXBlRmxhZ3MuRUxFTUVOVCAqLyAmJiBkaXJzO1xuICAgICAgICBjb25zdCBzaG91bGRJbnZva2VWbm9kZUhvb2sgPSAhaXNBc3luY1dyYXBwZXIodm5vZGUpO1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmXG4gICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZVVubW91bnQpKSB7XG4gICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgdW5tb3VudENvbXBvbmVudCh2bm9kZS5jb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgICAgICB2bm9kZS5zdXNwZW5zZS51bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZEludm9rZURpcnMpIHtcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVVbm1vdW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykge1xuICAgICAgICAgICAgICAgIHZub2RlLnR5cGUucmVtb3ZlKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIGludGVybmFscywgZG9SZW1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZHluYW1pY0NoaWxkcmVuICYmXG4gICAgICAgICAgICAgICAgLy8gIzExNTM6IGZhc3QgcGF0aCBzaG91bGQgbm90IGJlIHRha2VuIGZvciBub24tc3RhYmxlICh2LWZvcikgZnJhZ21lbnRzXG4gICAgICAgICAgICAgICAgKHR5cGUgIT09IEZyYWdtZW50IHx8XG4gICAgICAgICAgICAgICAgICAgIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0IC8qIFBhdGNoRmxhZ3MuU1RBQkxFX0ZSQUdNRU5UICovKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBmYXN0IHBhdGggZm9yIGJsb2NrIG5vZGVzOiBvbmx5IG5lZWQgdG8gdW5tb3VudCBkeW5hbWljIGNoaWxkcmVuLlxuICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihkeW5hbWljQ2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCh0eXBlID09PSBGcmFnbWVudCAmJlxuICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmXG4gICAgICAgICAgICAgICAgICAgICgxMjggLyogUGF0Y2hGbGFncy5LRVlFRF9GUkFHTUVOVCAqLyB8IDI1NiAvKiBQYXRjaEZsYWdzLlVOS0VZRURfRlJBR01FTlQgKi8pKSB8fFxuICAgICAgICAgICAgICAgICghb3B0aW1pemVkICYmIHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkb1JlbW92ZSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZSh2bm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzaG91bGRJbnZva2VWbm9kZUhvb2sgJiZcbiAgICAgICAgICAgICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlVW5tb3VudGVkKSkgfHxcbiAgICAgICAgICAgIHNob3VsZEludm9rZURpcnMpIHtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICAgICAgICAgIHNob3VsZEludm9rZURpcnMgJiZcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAndW5tb3VudGVkJyk7XG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZSA9IHZub2RlID0+IHtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBlbCwgYW5jaG9yLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcbiAgICAgICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgdm5vZGUucGF0Y2hGbGFnID4gMCAmJlxuICAgICAgICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyAmIDIwNDggLyogUGF0Y2hGbGFncy5ERVZfUk9PVF9GUkFHTUVOVCAqLyAmJlxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcbiAgICAgICAgICAgICAgICB2bm9kZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RSZW1vdmUoY2hpbGQuZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRnJhZ21lbnQoZWwsIGFuY2hvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZSh2bm9kZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGVyZm9ybVJlbW92ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoZWwpO1xuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkICYmIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSkge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBTaGFwZUZsYWdzLkVMRU1FTlQgKi8gJiZcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcbiAgICAgICAgICAgICF0cmFuc2l0aW9uLnBlcnNpc3RlZCkge1xuICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IGxlYXZlKGVsLCBwZXJmb3JtUmVtb3ZlKTtcbiAgICAgICAgICAgIGlmIChkZWxheUxlYXZlKSB7XG4gICAgICAgICAgICAgICAgZGVsYXlMZWF2ZSh2bm9kZS5lbCwgcGVyZm9ybVJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGVyZm9ybVJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVGcmFnbWVudCA9IChjdXIsIGVuZCkgPT4ge1xuICAgICAgICAvLyBGb3IgZnJhZ21lbnRzLCBkaXJlY3RseSByZW1vdmUgYWxsIGNvbnRhaW5lZCBET00gbm9kZXMuXG4gICAgICAgIC8vIChmcmFnbWVudCBjaGlsZCBub2RlcyBjYW5ub3QgaGF2ZSB0cmFuc2l0aW9uKVxuICAgICAgICBsZXQgbmV4dDtcbiAgICAgICAgd2hpbGUgKGN1ciAhPT0gZW5kKSB7XG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGN1cik7XG4gICAgICAgICAgICBjdXIgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGhvc3RSZW1vdmUoZW5kKTtcbiAgICB9O1xuICAgIGNvbnN0IHVubW91bnRDb21wb25lbnQgPSAoaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkgPT4ge1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgICAgICAgdW5yZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBidW0sIHNjb3BlLCB1cGRhdGUsIHN1YlRyZWUsIHVtIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgLy8gYmVmb3JlVW5tb3VudCBob29rXG4gICAgICAgIGlmIChidW0pIHtcbiAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1bSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RvcCBlZmZlY3RzIGluIGNvbXBvbmVudCBzY29wZVxuICAgICAgICBzY29wZS5zdG9wKCk7XG4gICAgICAgIC8vIHVwZGF0ZSBtYXkgYmUgbnVsbCBpZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIGl0cyBhc3luY1xuICAgICAgICAvLyBzZXR1cCBoYXMgcmVzb2x2ZWQuXG4gICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgc2NoZWR1bGVyIHdpbGwgbm8gbG9uZ2VyIGludm9rZSBpdFxuICAgICAgICAgICAgdXBkYXRlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdW5tb3VudChzdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB1bm1vdW50ZWQgaG9va1xuICAgICAgICBpZiAodW0pIHtcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1bSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBpbnN0YW5jZS5pc1VubW91bnRlZCA9IHRydWU7XG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgLy8gQSBjb21wb25lbnQgd2l0aCBhc3luYyBkZXAgaW5zaWRlIGEgcGVuZGluZyBzdXNwZW5zZSBpcyB1bm1vdW50ZWQgYmVmb3JlXG4gICAgICAgIC8vIGl0cyBhc3luYyBkZXAgcmVzb2x2ZXMuIFRoaXMgc2hvdWxkIHJlbW92ZSB0aGUgZGVwIGZyb20gdGhlIHN1c3BlbnNlLCBhbmRcbiAgICAgICAgLy8gY2F1c2UgdGhlIHN1c3BlbnNlIHRvIHJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhhdCB3YXMgdGhlIGxhc3QgZGVwLlxuICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UgJiZcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiZcbiAgICAgICAgICAgICFwYXJlbnRTdXNwZW5zZS5pc1VubW91bnRlZCAmJlxuICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgJiZcbiAgICAgICAgICAgICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkICYmXG4gICAgICAgICAgICBpbnN0YW5jZS5zdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRTdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1bm1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlLCBzdGFydCA9IDApID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHVubW91bnQoY2hpbGRyZW5baV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlLCBvcHRpbWl6ZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBnZXROZXh0SG9zdE5vZGUgPSB2bm9kZSA9PiB7XG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UICovKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV4dEhvc3ROb2RlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNoYXBlRmxhZ3MuU1VTUEVOU0UgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiB2bm9kZS5zdXNwZW5zZS5uZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhvc3ROZXh0U2libGluZygodm5vZGUuYW5jaG9yIHx8IHZub2RlLmVsKSk7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXIgPSAodm5vZGUsIGNvbnRhaW5lciwgaXNTVkcpID0+IHtcbiAgICAgICAgaWYgKHZub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjb250YWluZXIuX3Zub2RlKSB7XG4gICAgICAgICAgICAgICAgdW5tb3VudChjb250YWluZXIuX3Zub2RlLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGNoKGNvbnRhaW5lci5fdm5vZGUgfHwgbnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgbnVsbCwgbnVsbCwgaXNTVkcpO1xuICAgICAgICB9XG4gICAgICAgIGZsdXNoUHJlRmx1c2hDYnMoKTtcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgIH07XG4gICAgY29uc3QgaW50ZXJuYWxzID0ge1xuICAgICAgICBwOiBwYXRjaCxcbiAgICAgICAgdW06IHVubW91bnQsXG4gICAgICAgIG06IG1vdmUsXG4gICAgICAgIHI6IHJlbW92ZSxcbiAgICAgICAgbXQ6IG1vdW50Q29tcG9uZW50LFxuICAgICAgICBtYzogbW91bnRDaGlsZHJlbixcbiAgICAgICAgcGM6IHBhdGNoQ2hpbGRyZW4sXG4gICAgICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxuICAgICAgICBuOiBnZXROZXh0SG9zdE5vZGUsXG4gICAgICAgIG86IG9wdGlvbnNcbiAgICB9O1xuICAgIGxldCBoeWRyYXRlO1xuICAgIGxldCBoeWRyYXRlTm9kZTtcbiAgICBpZiAoY3JlYXRlSHlkcmF0aW9uRm5zKSB7XG4gICAgICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoaW50ZXJuYWxzKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyLFxuICAgICAgICBoeWRyYXRlLFxuICAgICAgICBjcmVhdGVBcHA6IGNyZWF0ZUFwcEFQSShyZW5kZXIsIGh5ZHJhdGUpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZVJlY3Vyc2UoeyBlZmZlY3QsIHVwZGF0ZSB9LCBhbGxvd2VkKSB7XG4gICAgZWZmZWN0LmFsbG93UmVjdXJzZSA9IHVwZGF0ZS5hbGxvd1JlY3Vyc2UgPSBhbGxvd2VkO1xufVxuLyoqXG4gKiAjMTE1NlxuICogV2hlbiBhIGNvbXBvbmVudCBpcyBITVItZW5hYmxlZCwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBhbGwgc3RhdGljIG5vZGVzXG4gKiBpbnNpZGUgYSBibG9jayBhbHNvIGluaGVyaXQgdGhlIERPTSBlbGVtZW50IGZyb20gdGhlIHByZXZpb3VzIHRyZWUgc28gdGhhdFxuICogSE1SIHVwZGF0ZXMgKHdoaWNoIGFyZSBmdWxsIHVwZGF0ZXMpIGNhbiByZXRyaWV2ZSB0aGUgZWxlbWVudCBmb3IgcGF0Y2hpbmcuXG4gKlxuICogIzIwODBcbiAqIEluc2lkZSBrZXllZCBgdGVtcGxhdGVgIGZyYWdtZW50IHN0YXRpYyBjaGlsZHJlbiwgaWYgYSBmcmFnbWVudCBpcyBtb3ZlZCxcbiAqIHRoZSBjaGlsZHJlbiB3aWxsIGFsd2F5cyBiZSBtb3ZlZC4gVGhlcmVmb3JlLCBpbiBvcmRlciB0byBlbnN1cmUgY29ycmVjdCBtb3ZlXG4gKiBwb3NpdGlvbiwgZWwgc2hvdWxkIGJlIGluaGVyaXRlZCBmcm9tIHByZXZpb3VzIG5vZGVzLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gICAgY29uc3QgY2gxID0gbjEuY2hpbGRyZW47XG4gICAgY29uc3QgY2gyID0gbjIuY2hpbGRyZW47XG4gICAgaWYgKGlzQXJyYXkoY2gxKSAmJiBpc0FycmF5KGNoMikpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaDEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgb25seSBjYWxsZWQgaW4gdGhlIG9wdGltaXplZCBwYXRoIHNvIGFycmF5IGNoaWxkcmVuIGFyZVxuICAgICAgICAgICAgLy8gZ3VhcmFudGVlZCB0byBiZSB2bm9kZXNcbiAgICAgICAgICAgIGNvbnN0IGMxID0gY2gxW2ldO1xuICAgICAgICAgICAgbGV0IGMyID0gY2gyW2ldO1xuICAgICAgICAgICAgaWYgKGMyLnNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmICFjMi5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoYzIucGF0Y2hGbGFnIDw9IDAgfHwgYzIucGF0Y2hGbGFnID09PSAzMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGMyID0gY2gyW2ldID0gY2xvbmVJZk1vdW50ZWQoY2gyW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFsbG93KVxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAjNjg1MiBhbHNvIGluaGVyaXQgZm9yIHRleHQgbm9kZXNcbiAgICAgICAgICAgIGlmIChjMi50eXBlID09PSBUZXh0KSB7XG4gICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFsc28gaW5oZXJpdCBmb3IgY29tbWVudCBub2RlcywgYnV0IG5vdCBwbGFjZWhvbGRlcnMgKGUuZy4gdi1pZiB3aGljaFxuICAgICAgICAgICAgLy8gd291bGQgaGF2ZSByZWNlaXZlZCAuZWwgZHVyaW5nIGJsb2NrIHBhdGNoKVxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjMi50eXBlID09PSBDb21tZW50ICYmICFjMi5lbCkge1xuICAgICAgICAgICAgICAgIGMyLmVsID0gYzEuZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb25nZXN0X2luY3JlYXNpbmdfc3Vic2VxdWVuY2VcbmZ1bmN0aW9uIGdldFNlcXVlbmNlKGFycikge1xuICAgIGNvbnN0IHAgPSBhcnIuc2xpY2UoKTtcbiAgICBjb25zdCByZXN1bHQgPSBbMF07XG4gICAgbGV0IGksIGosIHUsIHYsIGM7XG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXJySSA9IGFycltpXTtcbiAgICAgICAgaWYgKGFyckkgIT09IDApIHtcbiAgICAgICAgICAgIGogPSByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGFycltqXSA8IGFyckkpIHtcbiAgICAgICAgICAgICAgICBwW2ldID0gajtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHUgPSAwO1xuICAgICAgICAgICAgdiA9IHJlc3VsdC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKHUgPCB2KSB7XG4gICAgICAgICAgICAgICAgYyA9ICh1ICsgdikgPj4gMTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyW3Jlc3VsdFtjXV0gPCBhcnJJKSB7XG4gICAgICAgICAgICAgICAgICAgIHUgPSBjICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHYgPSBjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcnJJIDwgYXJyW3Jlc3VsdFt1XV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcFtpXSA9IHJlc3VsdFt1IC0gMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdFt1XSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdSA9IHJlc3VsdC5sZW5ndGg7XG4gICAgdiA9IHJlc3VsdFt1IC0gMV07XG4gICAgd2hpbGUgKHUtLSA+IDApIHtcbiAgICAgICAgcmVzdWx0W3VdID0gdjtcbiAgICAgICAgdiA9IHBbdl07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmNvbnN0IGlzVGVsZXBvcnQgPSAodHlwZSkgPT4gdHlwZS5fX2lzVGVsZXBvcnQ7XG5jb25zdCBpc1RlbGVwb3J0RGlzYWJsZWQgPSAocHJvcHMpID0+IHByb3BzICYmIChwcm9wcy5kaXNhYmxlZCB8fCBwcm9wcy5kaXNhYmxlZCA9PT0gJycpO1xuY29uc3QgaXNUYXJnZXRTVkcgPSAodGFyZ2V0KSA9PiB0eXBlb2YgU1ZHRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcbmNvbnN0IHJlc29sdmVUYXJnZXQgPSAocHJvcHMsIHNlbGVjdCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gcHJvcHMgJiYgcHJvcHMudG87XG4gICAgaWYgKGlzU3RyaW5nKHRhcmdldFNlbGVjdG9yKSkge1xuICAgICAgICBpZiAoIXNlbGVjdCkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gYCArXG4gICAgICAgICAgICAgICAgICAgIGAobWlzc2luZyBxdWVyeVNlbGVjdG9yIHJlbmRlcmVyIG9wdGlvbilgKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gc2VsZWN0KHRhcmdldFNlbGVjdG9yKTtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byBsb2NhdGUgVGVsZXBvcnQgdGFyZ2V0IHdpdGggc2VsZWN0b3IgXCIke3RhcmdldFNlbGVjdG9yfVwiLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBOb3RlIHRoZSB0YXJnZXQgZWxlbWVudCBtdXN0IGV4aXN0IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgLSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpLmUuIHRoZSB0YXJnZXQgY2Fubm90IGJlIHJlbmRlcmVkIGJ5IHRoZSBjb21wb25lbnQgaXRzZWxmLCBhbmQgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgaWRlYWxseSBzaG91bGQgYmUgb3V0c2lkZSBvZiB0aGUgZW50aXJlIFZ1ZSBjb21wb25lbnQgdHJlZS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXRhcmdldFNlbGVjdG9yICYmICFpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpKSB7XG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIFRlbGVwb3J0IHRhcmdldDogJHt0YXJnZXRTZWxlY3Rvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0U2VsZWN0b3I7XG4gICAgfVxufTtcbmNvbnN0IFRlbGVwb3J0SW1wbCA9IHtcbiAgICBfX2lzVGVsZXBvcnQ6IHRydWUsXG4gICAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscykge1xuICAgICAgICBjb25zdCB7IG1jOiBtb3VudENoaWxkcmVuLCBwYzogcGF0Y2hDaGlsZHJlbiwgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sIG86IHsgaW5zZXJ0LCBxdWVyeVNlbGVjdG9yLCBjcmVhdGVUZXh0LCBjcmVhdGVDb21tZW50IH0gfSA9IGludGVybmFscztcbiAgICAgICAgY29uc3QgZGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjIucHJvcHMpO1xuICAgICAgICBsZXQgeyBzaGFwZUZsYWcsIGNoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4gfSA9IG4yO1xuICAgICAgICAvLyAjMzMwMlxuICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBpbnNlcnQgYW5jaG9ycyBpbiB0aGUgbWFpbiB2aWV3XG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IChuMi5lbCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICAgICAgICAgID8gY3JlYXRlQ29tbWVudCgndGVsZXBvcnQgc3RhcnQnKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlVGV4dCgnJykpO1xuICAgICAgICAgICAgY29uc3QgbWFpbkFuY2hvciA9IChuMi5hbmNob3IgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUNvbW1lbnQoJ3RlbGVwb3J0IGVuZCcpXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XG4gICAgICAgICAgICBpbnNlcnQocGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgICAgIGluc2VydChtYWluQW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gKG4yLnRhcmdldEFuY2hvciA9IGNyZWF0ZVRleHQoJycpKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBpbnNlcnQodGFyZ2V0QW5jaG9yLCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIC8vICMyNjUyIHdlIGNvdWxkIGJlIHRlbGVwb3J0aW5nIGZyb20gYSBub24tU1ZHIHRyZWUgaW50byBhbiBTVkcgdHJlZVxuICAgICAgICAgICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgaXNUYXJnZXRTVkcodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIFRlbGVwb3J0IHRhcmdldCBvbiBtb3VudDonLCB0YXJnZXQsIGAoJHt0eXBlb2YgdGFyZ2V0fSlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1vdW50ID0gKGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVGVsZXBvcnQgKmFsd2F5cyogaGFzIEFycmF5IGNoaWxkcmVuLiBUaGlzIGlzIGVuZm9yY2VkIGluIGJvdGggdGhlXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZXIgYW5kIHZub2RlIGNoaWxkcmVuIG5vcm1hbGl6YXRpb24uXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIG1vdW50KGNvbnRhaW5lciwgbWFpbkFuY2hvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBtb3VudCh0YXJnZXQsIHRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgY29udGVudFxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgICAgICAgIGNvbnN0IG1haW5BbmNob3IgPSAobjIuYW5jaG9yID0gbjEuYW5jaG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChuMi50YXJnZXQgPSBuMS50YXJnZXQpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gKG4yLnRhcmdldEFuY2hvciA9IG4xLnRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICBjb25zdCB3YXNEaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMS5wcm9wcyk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29udGFpbmVyID0gd2FzRGlzYWJsZWQgPyBjb250YWluZXIgOiB0YXJnZXQ7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QW5jaG9yID0gd2FzRGlzYWJsZWQgPyBtYWluQW5jaG9yIDogdGFyZ2V0QW5jaG9yO1xuICAgICAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBpc1RhcmdldFNWRyh0YXJnZXQpO1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIC8vIGZhc3QgcGF0aCB3aGVuIHRoZSB0ZWxlcG9ydCBoYXBwZW5zIHRvIGJlIGEgYmxvY2sgcm9vdFxuICAgICAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgY3VycmVudENvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcyk7XG4gICAgICAgICAgICAgICAgLy8gZXZlbiBpbiBibG9jayB0cmVlIG1vZGUgd2UgbmVlZCB0byBtYWtlIHN1cmUgYWxsIHJvb3QtbGV2ZWwgbm9kZXNcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgdGVsZXBvcnQgaW5oZXJpdCBwcmV2aW91cyBET00gcmVmZXJlbmNlcyBzbyB0aGF0IHRoZXkgY2FuXG4gICAgICAgICAgICAgICAgLy8gYmUgbW92ZWQgaW4gZnV0dXJlIHBhdGNoZXMuXG4gICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCkge1xuICAgICAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBjdXJyZW50Q29udGFpbmVyLCBjdXJyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdhc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZWQgLT4gZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpbnRvIG1haW4gY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgY29udGFpbmVyLCBtYWluQW5jaG9yLCBpbnRlcm5hbHMsIDEgLyogVGVsZXBvcnRNb3ZlVHlwZXMuVE9HR0xFICovKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgY2hhbmdlZFxuICAgICAgICAgICAgICAgIGlmICgobjIucHJvcHMgJiYgbjIucHJvcHMudG8pICE9PSAobjEucHJvcHMgJiYgbjEucHJvcHMudG8pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUYXJnZXQgPSAobjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCBuZXh0VGFyZ2V0LCBudWxsLCBpbnRlcm5hbHMsIDAgLyogVGVsZXBvcnRNb3ZlVHlwZXMuVEFSR0VUX0NIQU5HRSAqLyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIFRlbGVwb3J0IHRhcmdldCBvbiB1cGRhdGU6JywgdGFyZ2V0LCBgKCR7dHlwZW9mIHRhcmdldH0pYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzYWJsZWQgLT4gZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gdGVsZXBvcnQgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgdGFyZ2V0LCB0YXJnZXRBbmNob3IsIGludGVybmFscywgMSAvKiBUZWxlcG9ydE1vdmVUeXBlcy5UT0dHTEUgKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVDc3NWYXJzKG4yKTtcbiAgICB9LFxuICAgIHJlbW92ZSh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkLCB7IHVtOiB1bm1vdW50LCBvOiB7IHJlbW92ZTogaG9zdFJlbW92ZSB9IH0sIGRvUmVtb3ZlKSB7XG4gICAgICAgIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgYW5jaG9yLCB0YXJnZXRBbmNob3IsIHRhcmdldCwgcHJvcHMgfSA9IHZub2RlO1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKHRhcmdldEFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYW4gdW5tb3VudGVkIHRlbGVwb3J0IHNob3VsZCBhbHdheXMgcmVtb3ZlIGl0cyBjaGlsZHJlbiBpZiBub3QgZGlzYWJsZWRcbiAgICAgICAgaWYgKGRvUmVtb3ZlIHx8ICFpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpKSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGFuY2hvcik7XG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChjaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSwgISFjaGlsZC5keW5hbWljQ2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgbW92ZTogbW92ZVRlbGVwb3J0LFxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVUZWxlcG9ydFxufTtcbmZ1bmN0aW9uIG1vdmVUZWxlcG9ydCh2bm9kZSwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHsgbzogeyBpbnNlcnQgfSwgbTogbW92ZSB9LCBtb3ZlVHlwZSA9IDIgLyogVGVsZXBvcnRNb3ZlVHlwZXMuUkVPUkRFUiAqLykge1xuICAgIC8vIG1vdmUgdGFyZ2V0IGFuY2hvciBpZiB0aGlzIGlzIGEgdGFyZ2V0IGNoYW5nZS5cbiAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogVGVsZXBvcnRNb3ZlVHlwZXMuVEFSR0VUX0NIQU5HRSAqLykge1xuICAgICAgICBpbnNlcnQodm5vZGUudGFyZ2V0QW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gICAgfVxuICAgIGNvbnN0IHsgZWwsIGFuY2hvciwgc2hhcGVGbGFnLCBjaGlsZHJlbiwgcHJvcHMgfSA9IHZub2RlO1xuICAgIGNvbnN0IGlzUmVvcmRlciA9IG1vdmVUeXBlID09PSAyIC8qIFRlbGVwb3J0TW92ZVR5cGVzLlJFT1JERVIgKi87XG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cbiAgICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgICAgIGluc2VydChlbCwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICAgIH1cbiAgICAvLyBpZiB0aGlzIGlzIGEgcmUtb3JkZXIgYW5kIHRlbGVwb3J0IGlzIGVuYWJsZWQgKGNvbnRlbnQgaXMgaW4gdGFyZ2V0KVxuICAgIC8vIGRvIG5vdCBtb3ZlIGNoaWxkcmVuLiBTbyB0aGUgb3Bwb3NpdGUgaXM6IG9ubHkgbW92ZSBjaGlsZHJlbiBpZiB0aGlzXG4gICAgLy8gaXMgbm90IGEgcmVvcmRlciwgb3IgdGhlIHRlbGVwb3J0IGlzIGRpc2FibGVkXG4gICAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgICAvLyBUZWxlcG9ydCBoYXMgZWl0aGVyIEFycmF5IGNoaWxkcmVuIG9yIG5vIGNoaWxkcmVuLlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCAyIC8qIE1vdmVUeXBlLlJFT1JERVIgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG1vdmUgbWFpbiB2aWV3IGFuY2hvciBpZiB0aGlzIGlzIGEgcmUtb3JkZXIuXG4gICAgaWYgKGlzUmVvcmRlcikge1xuICAgICAgICBpbnNlcnQoYW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gaHlkcmF0ZVRlbGVwb3J0KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgeyBvOiB7IG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCBxdWVyeVNlbGVjdG9yIH0gfSwgaHlkcmF0ZUNoaWxkcmVuKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gKHZub2RlLnRhcmdldCA9IHJlc29sdmVUYXJnZXQodm5vZGUucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIC8vIGlmIG11bHRpcGxlIHRlbGVwb3J0cyByZW5kZXJlZCB0byB0aGUgc2FtZSB0YXJnZXQgZWxlbWVudCwgd2UgbmVlZCB0b1xuICAgICAgICAvLyBwaWNrIHVwIGZyb20gd2hlcmUgdGhlIGxhc3QgdGVsZXBvcnQgZmluaXNoZWQgaW5zdGVhZCBvZiB0aGUgZmlyc3Qgbm9kZVxuICAgICAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0Ll9scGEgfHwgdGFyZ2V0LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovKSB7XG4gICAgICAgICAgICBpZiAoaXNUZWxlcG9ydERpc2FibGVkKHZub2RlLnByb3BzKSkge1xuICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIHBhcmVudE5vZGUobm9kZSksIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgICAgICAgLy8gbG9va2FoZWFkIHVudGlsIHdlIGZpbmQgdGhlIHRhcmdldCBhbmNob3JcbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW5ub3QgcmVseSBvbiByZXR1cm4gdmFsdWUgb2YgaHlkcmF0ZUNoaWxkcmVuKCkgYmVjYXVzZSB0aGVyZVxuICAgICAgICAgICAgICAgIC8vIGNvdWxkIGJlIG5lc3RlZCB0ZWxlcG9ydHNcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGFyZ2V0QW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEFuY2hvciA9IG5leHRTaWJsaW5nKHRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRBbmNob3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFuY2hvci5ub2RlVHlwZSA9PT0gOCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QW5jaG9yLmRhdGEgPT09ICd0ZWxlcG9ydCBhbmNob3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuX2xwYSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLnRhcmdldEFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoeWRyYXRlQ2hpbGRyZW4odGFyZ2V0Tm9kZSwgdm5vZGUsIHRhcmdldCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUNzc1ZhcnModm5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XG59XG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxuY29uc3QgVGVsZXBvcnQgPSBUZWxlcG9ydEltcGw7XG5mdW5jdGlvbiB1cGRhdGVDc3NWYXJzKHZub2RlKSB7XG4gICAgLy8gcHJlc2VuY2Ugb2YgLnV0IG1ldGhvZCBpbmRpY2F0ZXMgb3duZXIgY29tcG9uZW50IHVzZXMgY3NzIHZhcnMuXG4gICAgLy8gY29kZSBwYXRoIGhlcmUgY2FuIGFzc3VtZSBicm93c2VyIGVudmlyb25tZW50LlxuICAgIGNvbnN0IGN0eCA9IHZub2RlLmN0eDtcbiAgICBpZiAoY3R4ICYmIGN0eC51dCkge1xuICAgICAgICBsZXQgbm9kZSA9IHZub2RlLmNoaWxkcmVuWzBdLmVsO1xuICAgICAgICB3aGlsZSAobm9kZSAhPT0gdm5vZGUudGFyZ2V0QW5jaG9yKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSlcbiAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS12LW93bmVyJywgY3R4LnVpZCk7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICBjdHgudXQoKTtcbiAgICB9XG59XG5cbmNvbnN0IEZyYWdtZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdGcmFnbWVudCcgOiB1bmRlZmluZWQpO1xuY29uc3QgVGV4dCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnVGV4dCcgOiB1bmRlZmluZWQpO1xuY29uc3QgQ29tbWVudCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnQ29tbWVudCcgOiB1bmRlZmluZWQpO1xuY29uc3QgU3RhdGljID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdTdGF0aWMnIDogdW5kZWZpbmVkKTtcbi8vIFNpbmNlIHYtaWYgYW5kIHYtZm9yIGFyZSB0aGUgdHdvIHBvc3NpYmxlIHdheXMgbm9kZSBzdHJ1Y3R1cmUgY2FuIGR5bmFtaWNhbGx5XG4vLyBjaGFuZ2UsIG9uY2Ugd2UgY29uc2lkZXIgdi1pZiBicmFuY2hlcyBhbmQgZWFjaCB2LWZvciBmcmFnbWVudCBhIGJsb2NrLCB3ZVxuLy8gY2FuIGRpdmlkZSBhIHRlbXBsYXRlIGludG8gbmVzdGVkIGJsb2NrcywgYW5kIHdpdGhpbiBlYWNoIGJsb2NrIHRoZSBub2RlXG4vLyBzdHJ1Y3R1cmUgd291bGQgYmUgc3RhYmxlLiBUaGlzIGFsbG93cyB1cyB0byBza2lwIG1vc3QgY2hpbGRyZW4gZGlmZmluZ1xuLy8gYW5kIG9ubHkgd29ycnkgYWJvdXQgdGhlIGR5bmFtaWMgbm9kZXMgKGluZGljYXRlZCBieSBwYXRjaCBmbGFncykuXG5jb25zdCBibG9ja1N0YWNrID0gW107XG5sZXQgY3VycmVudEJsb2NrID0gbnVsbDtcbi8qKlxuICogT3BlbiBhIGJsb2NrLlxuICogVGhpcyBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYC4gSXQgY2Fubm90IGJlIHBhcnQgb2YgYGNyZWF0ZUJsb2NrYFxuICogYmVjYXVzZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGJsb2NrIGFyZSBldmFsdWF0ZWQgYmVmb3JlIGBjcmVhdGVCbG9ja2AgaXRzZWxmXG4gKiBpcyBjYWxsZWQuIFRoZSBnZW5lcmF0ZWQgY29kZSB0eXBpY2FsbHkgbG9va3MgbGlrZSB0aGlzOlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gKiAgIHJldHVybiAob3BlbkJsb2NrKCksY3JlYXRlQmxvY2soJ2RpdicsIG51bGwsIFsuLi5dKSlcbiAqIH1cbiAqIGBgYFxuICogZGlzYWJsZVRyYWNraW5nIGlzIHRydWUgd2hlbiBjcmVhdGluZyBhIHYtZm9yIGZyYWdtZW50IGJsb2NrLCBzaW5jZSBhIHYtZm9yXG4gKiBmcmFnbWVudCBhbHdheXMgZGlmZnMgaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG9wZW5CbG9jayhkaXNhYmxlVHJhY2tpbmcgPSBmYWxzZSkge1xuICAgIGJsb2NrU3RhY2sucHVzaCgoY3VycmVudEJsb2NrID0gZGlzYWJsZVRyYWNraW5nID8gbnVsbCA6IFtdKSk7XG59XG5mdW5jdGlvbiBjbG9zZUJsb2NrKCkge1xuICAgIGJsb2NrU3RhY2sucG9wKCk7XG4gICAgY3VycmVudEJsb2NrID0gYmxvY2tTdGFja1tibG9ja1N0YWNrLmxlbmd0aCAtIDFdIHx8IG51bGw7XG59XG4vLyBXaGV0aGVyIHdlIHNob3VsZCBiZSB0cmFja2luZyBkeW5hbWljIGNoaWxkIG5vZGVzIGluc2lkZSBhIGJsb2NrLlxuLy8gT25seSB0cmFja3Mgd2hlbiB0aGlzIHZhbHVlIGlzID4gMFxuLy8gV2UgYXJlIG5vdCB1c2luZyBhIHNpbXBsZSBib29sZWFuIGJlY2F1c2UgdGhpcyB2YWx1ZSBtYXkgbmVlZCB0byBiZVxuLy8gaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWQgYnkgbmVzdGVkIHVzYWdlIG9mIHYtb25jZSAoc2VlIGJlbG93KVxubGV0IGlzQmxvY2tUcmVlRW5hYmxlZCA9IDE7XG4vKipcbiAqIEJsb2NrIHRyYWNraW5nIHNvbWV0aW1lcyBuZWVkcyB0byBiZSBkaXNhYmxlZCwgZm9yIGV4YW1wbGUgZHVyaW5nIHRoZVxuICogY3JlYXRpb24gb2YgYSB0cmVlIHRoYXQgbmVlZHMgdG8gYmUgY2FjaGVkIGJ5IHYtb25jZS4gVGhlIGNvbXBpbGVyIGdlbmVyYXRlc1xuICogY29kZSBsaWtlIHRoaXM6XG4gKlxuICogYGBgIGpzXG4gKiBfY2FjaGVbMV0gfHwgKFxuICogICBzZXRCbG9ja1RyYWNraW5nKC0xKSxcbiAqICAgX2NhY2hlWzFdID0gY3JlYXRlVk5vZGUoLi4uKSxcbiAqICAgc2V0QmxvY2tUcmFja2luZygxKSxcbiAqICAgX2NhY2hlWzFdXG4gKiApXG4gKiBgYGBcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXRCbG9ja1RyYWNraW5nKHZhbHVlKSB7XG4gICAgaXNCbG9ja1RyZWVFbmFibGVkICs9IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0dXBCbG9jayh2bm9kZSkge1xuICAgIC8vIHNhdmUgY3VycmVudCBibG9jayBjaGlsZHJlbiBvbiB0aGUgYmxvY2sgdm5vZGVcbiAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPVxuICAgICAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XG4gICAgLy8gY2xvc2UgYmxvY2tcbiAgICBjbG9zZUJsb2NrKCk7XG4gICAgLy8gYSBibG9jayBpcyBhbHdheXMgZ29pbmcgdG8gYmUgcGF0Y2hlZCwgc28gdHJhY2sgaXQgYXMgYSBjaGlsZCBvZiBpdHNcbiAgICAvLyBwYXJlbnQgYmxvY2tcbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiBjdXJyZW50QmxvY2spIHtcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcpIHtcbiAgICByZXR1cm4gc2V0dXBCbG9jayhjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgc2hhcGVGbGFnLCB0cnVlIC8qIGlzQmxvY2sgKi8pKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgYmxvY2sgcm9vdCB2bm9kZS4gVGFrZXMgdGhlIHNhbWUgZXhhY3QgYXJndW1lbnRzIGFzIGBjcmVhdGVWTm9kZWAuXG4gKiBBIGJsb2NrIHJvb3Qga2VlcHMgdHJhY2sgb2YgZHluYW1pYyBub2RlcyB3aXRoaW4gdGhlIGJsb2NrIGluIHRoZVxuICogYGR5bmFtaWNDaGlsZHJlbmAgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcykge1xuICAgIHJldHVybiBzZXR1cEJsb2NrKGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHRydWUgLyogaXNCbG9jazogcHJldmVudCBhIGJsb2NrIGZyb20gdHJhY2tpbmcgaXRzZWxmICovKSk7XG59XG5mdW5jdGlvbiBpc1ZOb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID8gdmFsdWUuX192X2lzVk5vZGUgPT09IHRydWUgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXG4gICAgICAgIG4yLnNoYXBlRmxhZyAmIDYgLyogU2hhcGVGbGFncy5DT01QT05FTlQgKi8gJiZcbiAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmhhcyhuMi50eXBlKSkge1xuICAgICAgICAvLyAjNzA0MiwgZW5zdXJlIHRoZSB2bm9kZSBiZWluZyB1bm1vdW50ZWQgZHVyaW5nIEhNUlxuICAgICAgICAvLyBiaXR3aXNlIG9wZXJhdGlvbnMgdG8gcmVtb3ZlIGtlZXAgYWxpdmUgZmxhZ3NcbiAgICAgICAgbjEuc2hhcGVGbGFnICY9IH4yNTYgLyogU2hhcGVGbGFncy5DT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi87XG4gICAgICAgIG4yLnNoYXBlRmxhZyAmPSB+NTEyIC8qIFNoYXBlRmxhZ3MuQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XG4gICAgICAgIC8vIEhNUiBvbmx5OiBpZiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGhvdC11cGRhdGVkLCBmb3JjZSBhIHJlbG9hZC5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbjEudHlwZSA9PT0gbjIudHlwZSAmJiBuMS5rZXkgPT09IG4yLmtleTtcbn1cbmxldCB2bm9kZUFyZ3NUcmFuc2Zvcm1lcjtcbi8qKlxuICogSW50ZXJuYWwgQVBJIGZvciByZWdpc3RlcmluZyBhbiBhcmd1bWVudHMgdHJhbnNmb3JtIGZvciBjcmVhdGVWTm9kZVxuICogdXNlZCBmb3IgY3JlYXRpbmcgc3R1YnMgaW4gdGhlIHRlc3QtdXRpbHNcbiAqIEl0IGlzICppbnRlcm5hbCogYnV0IG5lZWRzIHRvIGJlIGV4cG9zZWQgZm9yIHRlc3QtdXRpbHMgdG8gcGljayB1cCBwcm9wZXJcbiAqIHR5cGluZ3NcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtVk5vZGVBcmdzKHRyYW5zZm9ybWVyKSB7XG4gICAgdm5vZGVBcmdzVHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcjtcbn1cbmNvbnN0IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gPSAoLi4uYXJncykgPT4ge1xuICAgIHJldHVybiBfY3JlYXRlVk5vZGUoLi4uKHZub2RlQXJnc1RyYW5zZm9ybWVyXG4gICAgICAgID8gdm5vZGVBcmdzVHJhbnNmb3JtZXIoYXJncywgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKVxuICAgICAgICA6IGFyZ3MpKTtcbn07XG5jb25zdCBJbnRlcm5hbE9iamVjdEtleSA9IGBfX3ZJbnRlcm5hbGA7XG5jb25zdCBub3JtYWxpemVLZXkgPSAoeyBrZXkgfSkgPT4ga2V5ICE9IG51bGwgPyBrZXkgOiBudWxsO1xuY29uc3Qgbm9ybWFsaXplUmVmID0gKHsgcmVmLCByZWZfa2V5LCByZWZfZm9yIH0pID0+IHtcbiAgICByZXR1cm4gKHJlZiAhPSBudWxsXG4gICAgICAgID8gaXNTdHJpbmcocmVmKSB8fCBpc1JlZihyZWYpIHx8IGlzRnVuY3Rpb24ocmVmKVxuICAgICAgICAgICAgPyB7IGk6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgcjogcmVmLCBrOiByZWZfa2V5LCBmOiAhIXJlZl9mb3IgfVxuICAgICAgICAgICAgOiByZWZcbiAgICAgICAgOiBudWxsKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIHNoYXBlRmxhZyA9IHR5cGUgPT09IEZyYWdtZW50ID8gMCA6IDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovLCBpc0Jsb2NrTm9kZSA9IGZhbHNlLCBuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbiA9IGZhbHNlKSB7XG4gICAgY29uc3Qgdm5vZGUgPSB7XG4gICAgICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgICAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIGtleTogcHJvcHMgJiYgbm9ybWFsaXplS2V5KHByb3BzKSxcbiAgICAgICAgcmVmOiBwcm9wcyAmJiBub3JtYWxpemVSZWYocHJvcHMpLFxuICAgICAgICBzY29wZUlkOiBjdXJyZW50U2NvcGVJZCxcbiAgICAgICAgc2xvdFNjb3BlSWRzOiBudWxsLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50OiBudWxsLFxuICAgICAgICBzdXNwZW5zZTogbnVsbCxcbiAgICAgICAgc3NDb250ZW50OiBudWxsLFxuICAgICAgICBzc0ZhbGxiYWNrOiBudWxsLFxuICAgICAgICBkaXJzOiBudWxsLFxuICAgICAgICB0cmFuc2l0aW9uOiBudWxsLFxuICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgYW5jaG9yOiBudWxsLFxuICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgIHRhcmdldEFuY2hvcjogbnVsbCxcbiAgICAgICAgc3RhdGljQ291bnQ6IDAsXG4gICAgICAgIHNoYXBlRmxhZyxcbiAgICAgICAgcGF0Y2hGbGFnLFxuICAgICAgICBkeW5hbWljUHJvcHMsXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbjogbnVsbCxcbiAgICAgICAgYXBwQ29udGV4dDogbnVsbCxcbiAgICAgICAgY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2VcbiAgICB9O1xuICAgIGlmIChuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbikge1xuICAgICAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pO1xuICAgICAgICAvLyBub3JtYWxpemUgc3VzcGVuc2UgY2hpbGRyZW5cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgICAgICB0eXBlLm5vcm1hbGl6ZSh2bm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgLy8gY29tcGlsZWQgZWxlbWVudCB2bm9kZSAtIGlmIGNoaWxkcmVuIGlzIHBhc3NlZCwgb25seSBwb3NzaWJsZSB0eXBlcyBhcmVcbiAgICAgICAgLy8gc3RyaW5nIG9yIEFycmF5LlxuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gaXNTdHJpbmcoY2hpbGRyZW4pXG4gICAgICAgICAgICA/IDggLyogU2hhcGVGbGFncy5URVhUX0NISUxEUkVOICovXG4gICAgICAgICAgICA6IDE2IC8qIFNoYXBlRmxhZ3MuQVJSQVlfQ0hJTERSRU4gKi87XG4gICAgfVxuICAgIC8vIHZhbGlkYXRlIGtleVxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgdm5vZGUua2V5ICE9PSB2bm9kZS5rZXkpIHtcbiAgICAgICAgd2FybihgVk5vZGUgY3JlYXRlZCB3aXRoIGludmFsaWQga2V5IChOYU4pLiBWTm9kZSB0eXBlOmAsIHZub2RlLnR5cGUpO1xuICAgIH1cbiAgICAvLyB0cmFjayB2bm9kZSBmb3IgYmxvY2sgdHJlZVxuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmXG4gICAgICAgIC8vIGF2b2lkIGEgYmxvY2sgbm9kZSBmcm9tIHRyYWNraW5nIGl0c2VsZlxuICAgICAgICAhaXNCbG9ja05vZGUgJiZcbiAgICAgICAgLy8gaGFzIGN1cnJlbnQgcGFyZW50IGJsb2NrXG4gICAgICAgIGN1cnJlbnRCbG9jayAmJlxuICAgICAgICAvLyBwcmVzZW5jZSBvZiBhIHBhdGNoIGZsYWcgaW5kaWNhdGVzIHRoaXMgbm9kZSBuZWVkcyBwYXRjaGluZyBvbiB1cGRhdGVzLlxuICAgICAgICAvLyBjb21wb25lbnQgbm9kZXMgYWxzbyBzaG91bGQgYWx3YXlzIGJlIHBhdGNoZWQsIGJlY2F1c2UgZXZlbiBpZiB0aGVcbiAgICAgICAgLy8gY29tcG9uZW50IGRvZXNuJ3QgbmVlZCB0byB1cGRhdGUsIGl0IG5lZWRzIHRvIHBlcnNpc3QgdGhlIGluc3RhbmNlIG9uIHRvXG4gICAgICAgIC8vIHRoZSBuZXh0IHZub2RlIHNvIHRoYXQgaXQgY2FuIGJlIHByb3Blcmx5IHVubW91bnRlZCBsYXRlci5cbiAgICAgICAgKHZub2RlLnBhdGNoRmxhZyA+IDAgfHwgc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykgJiZcbiAgICAgICAgLy8gdGhlIEVWRU5UUyBmbGFnIGlzIG9ubHkgZm9yIGh5ZHJhdGlvbiBhbmQgaWYgaXQgaXMgdGhlIG9ubHkgZmxhZywgdGhlXG4gICAgICAgIC8vIHZub2RlIHNob3VsZCBub3QgYmUgY29uc2lkZXJlZCBkeW5hbWljIGR1ZSB0byBoYW5kbGVyIGNhY2hpbmcuXG4gICAgICAgIHZub2RlLnBhdGNoRmxhZyAhPT0gMzIgLyogUGF0Y2hGbGFncy5IWURSQVRFX0VWRU5UUyAqLykge1xuICAgICAgICBjdXJyZW50QmxvY2sucHVzaCh2bm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbn1cbmNvbnN0IGNyZWF0ZVZOb2RlID0gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gOiBfY3JlYXRlVk5vZGUpO1xuZnVuY3Rpb24gX2NyZWF0ZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBpc0Jsb2NrTm9kZSA9IGZhbHNlKSB7XG4gICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpIHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdHlwZSkge1xuICAgICAgICAgICAgd2FybihgSW52YWxpZCB2bm9kZSB0eXBlIHdoZW4gY3JlYXRpbmcgdm5vZGU6ICR7dHlwZX0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgdHlwZSA9IENvbW1lbnQ7XG4gICAgfVxuICAgIGlmIChpc1ZOb2RlKHR5cGUpKSB7XG4gICAgICAgIC8vIGNyZWF0ZVZOb2RlIHJlY2VpdmluZyBhbiBleGlzdGluZyB2bm9kZS4gVGhpcyBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgICAgLy8gPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiLz5cbiAgICAgICAgLy8gIzIwNzggbWFrZSBzdXJlIHRvIG1lcmdlIHJlZnMgZHVyaW5nIHRoZSBjbG9uZSBpbnN0ZWFkIG9mIG92ZXJ3cml0aW5nIGl0XG4gICAgICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodHlwZSwgcHJvcHMsIHRydWUgLyogbWVyZ2VSZWY6IHRydWUgKi8pO1xuICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKGNsb25lZCwgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmICFpc0Jsb2NrTm9kZSAmJiBjdXJyZW50QmxvY2spIHtcbiAgICAgICAgICAgIGlmIChjbG9uZWQuc2hhcGVGbGFnICYgNiAvKiBTaGFwZUZsYWdzLkNPTVBPTkVOVCAqLykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja1tjdXJyZW50QmxvY2suaW5kZXhPZih0eXBlKV0gPSBjbG9uZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2sucHVzaChjbG9uZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNsb25lZC5wYXRjaEZsYWcgfD0gLTIgLyogUGF0Y2hGbGFncy5CQUlMICovO1xuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgICAvLyBjbGFzcyBjb21wb25lbnQgbm9ybWFsaXphdGlvbi5cbiAgICBpZiAoaXNDbGFzc0NvbXBvbmVudCh0eXBlKSkge1xuICAgICAgICB0eXBlID0gdHlwZS5fX3ZjY09wdHM7XG4gICAgfVxuICAgIC8vIGNsYXNzICYgc3R5bGUgbm9ybWFsaXphdGlvbi5cbiAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgLy8gZm9yIHJlYWN0aXZlIG9yIHByb3h5IG9iamVjdHMsIHdlIG5lZWQgdG8gY2xvbmUgaXQgdG8gZW5hYmxlIG11dGF0aW9uLlxuICAgICAgICBwcm9wcyA9IGd1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcyk7XG4gICAgICAgIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xuICAgICAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JqZWN0KHN0eWxlKSkge1xuICAgICAgICAgICAgLy8gcmVhY3RpdmUgc3RhdGUgb2JqZWN0cyBuZWVkIHRvIGJlIGNsb25lZCBzaW5jZSB0aGV5IGFyZSBsaWtlbHkgdG8gYmVcbiAgICAgICAgICAgIC8vIG11dGF0ZWRcbiAgICAgICAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IGV4dGVuZCh7fSwgc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcHMuc3R5bGUgPSBub3JtYWxpemVTdHlsZShzdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5jb2RlIHRoZSB2bm9kZSB0eXBlIGluZm9ybWF0aW9uIGludG8gYSBiaXRtYXBcbiAgICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKVxuICAgICAgICA/IDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovXG4gICAgICAgIDogaXNTdXNwZW5zZSh0eXBlKVxuICAgICAgICAgICAgPyAxMjggLyogU2hhcGVGbGFncy5TVVNQRU5TRSAqL1xuICAgICAgICAgICAgOiBpc1RlbGVwb3J0KHR5cGUpXG4gICAgICAgICAgICAgICAgPyA2NCAvKiBTaGFwZUZsYWdzLlRFTEVQT1JUICovXG4gICAgICAgICAgICAgICAgOiBpc09iamVjdCh0eXBlKVxuICAgICAgICAgICAgICAgICAgICA/IDQgLyogU2hhcGVGbGFncy5TVEFURUZVTF9DT01QT05FTlQgKi9cbiAgICAgICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDIgLyogU2hhcGVGbGFncy5GVU5DVElPTkFMX0NPTVBPTkVOVCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2hhcGVGbGFnICYgNCAvKiBTaGFwZUZsYWdzLlNUQVRFRlVMX0NPTVBPTkVOVCAqLyAmJiBpc1Byb3h5KHR5cGUpKSB7XG4gICAgICAgIHR5cGUgPSB0b1Jhdyh0eXBlKTtcbiAgICAgICAgd2FybihgVnVlIHJlY2VpdmVkIGEgQ29tcG9uZW50IHdoaWNoIHdhcyBtYWRlIGEgcmVhY3RpdmUgb2JqZWN0LiBUaGlzIGNhbiBgICtcbiAgICAgICAgICAgIGBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkLCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgYnkgYCArXG4gICAgICAgICAgICBgbWFya2luZyB0aGUgY29tcG9uZW50IHdpdGggXFxgbWFya1Jhd1xcYCBvciB1c2luZyBcXGBzaGFsbG93UmVmXFxgIGAgK1xuICAgICAgICAgICAgYGluc3RlYWQgb2YgXFxgcmVmXFxgLmAsIGBcXG5Db21wb25lbnQgdGhhdCB3YXMgbWFkZSByZWFjdGl2ZTogYCwgdHlwZSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgc2hhcGVGbGFnLCBpc0Jsb2NrTm9kZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBndWFyZFJlYWN0aXZlUHJvcHMocHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gaXNQcm94eShwcm9wcykgfHwgSW50ZXJuYWxPYmplY3RLZXkgaW4gcHJvcHNcbiAgICAgICAgPyBleHRlbmQoe30sIHByb3BzKVxuICAgICAgICA6IHByb3BzO1xufVxuZnVuY3Rpb24gY2xvbmVWTm9kZSh2bm9kZSwgZXh0cmFQcm9wcywgbWVyZ2VSZWYgPSBmYWxzZSkge1xuICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBOT1QgdXNpbmcgc3ByZWFkIG9yIGV4dGVuZCB0byBhdm9pZCB0aGUgcnVudGltZVxuICAgIC8vIGtleSBlbnVtZXJhdGlvbiBjb3N0LlxuICAgIGNvbnN0IHsgcHJvcHMsIHJlZiwgcGF0Y2hGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XG4gICAgY29uc3QgbWVyZ2VkUHJvcHMgPSBleHRyYVByb3BzID8gbWVyZ2VQcm9wcyhwcm9wcyB8fCB7fSwgZXh0cmFQcm9wcykgOiBwcm9wcztcbiAgICBjb25zdCBjbG9uZWQgPSB7XG4gICAgICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgICAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICAgICAgdHlwZTogdm5vZGUudHlwZSxcbiAgICAgICAgcHJvcHM6IG1lcmdlZFByb3BzLFxuICAgICAgICBrZXk6IG1lcmdlZFByb3BzICYmIG5vcm1hbGl6ZUtleShtZXJnZWRQcm9wcyksXG4gICAgICAgIHJlZjogZXh0cmFQcm9wcyAmJiBleHRyYVByb3BzLnJlZlxuICAgICAgICAgICAgPyAvLyAjMjA3OCBpbiB0aGUgY2FzZSBvZiA8Y29tcG9uZW50IDppcz1cInZub2RlXCIgcmVmPVwiZXh0cmFcIi8+XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHZub2RlIGl0c2VsZiBhbHJlYWR5IGhhcyBhIHJlZiwgY2xvbmVWTm9kZSB3aWxsIG5lZWQgdG8gbWVyZ2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgcmVmcyBzbyB0aGUgc2luZ2xlIHZub2RlIGNhbiBiZSBzZXQgb24gbXVsdGlwbGUgcmVmc1xuICAgICAgICAgICAgICAgIG1lcmdlUmVmICYmIHJlZlxuICAgICAgICAgICAgICAgICAgICA/IGlzQXJyYXkocmVmKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW3JlZiwgbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXVxuICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKVxuICAgICAgICAgICAgOiByZWYsXG4gICAgICAgIHNjb3BlSWQ6IHZub2RlLnNjb3BlSWQsXG4gICAgICAgIHNsb3RTY29wZUlkczogdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgICAgICBjaGlsZHJlbjogKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhdGNoRmxhZyA9PT0gLTEgLyogUGF0Y2hGbGFncy5IT0lTVEVEICovICYmIGlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICAgICAgICA/IGNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSlcbiAgICAgICAgICAgIDogY2hpbGRyZW4sXG4gICAgICAgIHRhcmdldDogdm5vZGUudGFyZ2V0LFxuICAgICAgICB0YXJnZXRBbmNob3I6IHZub2RlLnRhcmdldEFuY2hvcixcbiAgICAgICAgc3RhdGljQ291bnQ6IHZub2RlLnN0YXRpY0NvdW50LFxuICAgICAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcbiAgICAgICAgLy8gaWYgdGhlIHZub2RlIGlzIGNsb25lZCB3aXRoIGV4dHJhIHByb3BzLCB3ZSBjYW4gbm8gbG9uZ2VyIGFzc3VtZSBpdHNcbiAgICAgICAgLy8gZXhpc3RpbmcgcGF0Y2ggZmxhZyB0byBiZSByZWxpYWJsZSBhbmQgbmVlZCB0byBhZGQgdGhlIEZVTExfUFJPUFMgZmxhZy5cbiAgICAgICAgLy8gbm90ZTogcHJlc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxuICAgICAgICAvLyBmYXN0IHBhdGhzIG9ubHkuXG4gICAgICAgIHBhdGNoRmxhZzogZXh0cmFQcm9wcyAmJiB2bm9kZS50eXBlICE9PSBGcmFnbWVudFxuICAgICAgICAgICAgPyBwYXRjaEZsYWcgPT09IC0xIC8vIGhvaXN0ZWQgbm9kZVxuICAgICAgICAgICAgICAgID8gMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovXG4gICAgICAgICAgICAgICAgOiBwYXRjaEZsYWcgfCAxNiAvKiBQYXRjaEZsYWdzLkZVTExfUFJPUFMgKi9cbiAgICAgICAgICAgIDogcGF0Y2hGbGFnLFxuICAgICAgICBkeW5hbWljUHJvcHM6IHZub2RlLmR5bmFtaWNQcm9wcyxcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuOiB2bm9kZS5keW5hbWljQ2hpbGRyZW4sXG4gICAgICAgIGFwcENvbnRleHQ6IHZub2RlLmFwcENvbnRleHQsXG4gICAgICAgIGRpcnM6IHZub2RlLmRpcnMsXG4gICAgICAgIHRyYW5zaXRpb246IHZub2RlLnRyYW5zaXRpb24sXG4gICAgICAgIC8vIFRoZXNlIHNob3VsZCB0ZWNobmljYWxseSBvbmx5IGJlIG5vbi1udWxsIG9uIG1vdW50ZWQgVk5vZGVzLiBIb3dldmVyLFxuICAgICAgICAvLyB0aGV5ICpzaG91bGQqIGJlIGNvcGllZCBmb3Iga2VwdC1hbGl2ZSB2bm9kZXMuIFNvIHdlIGp1c3QgYWx3YXlzIGNvcHlcbiAgICAgICAgLy8gdGhlbSBzaW5jZSB0aGVtIGJlaW5nIG5vbi1udWxsIGR1cmluZyBhIG1vdW50IGRvZXNuJ3QgYWZmZWN0IHRoZSBsb2dpYyBhc1xuICAgICAgICAvLyB0aGV5IHdpbGwgc2ltcGx5IGJlIG92ZXJ3cml0dGVuLlxuICAgICAgICBjb21wb25lbnQ6IHZub2RlLmNvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2U6IHZub2RlLnN1c3BlbnNlLFxuICAgICAgICBzc0NvbnRlbnQ6IHZub2RlLnNzQ29udGVudCAmJiBjbG9uZVZOb2RlKHZub2RlLnNzQ29udGVudCksXG4gICAgICAgIHNzRmFsbGJhY2s6IHZub2RlLnNzRmFsbGJhY2sgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0ZhbGxiYWNrKSxcbiAgICAgICAgZWw6IHZub2RlLmVsLFxuICAgICAgICBhbmNob3I6IHZub2RlLmFuY2hvcixcbiAgICAgICAgY3R4OiB2bm9kZS5jdHhcbiAgICB9O1xuICAgIHJldHVybiBjbG9uZWQ7XG59XG4vKipcbiAqIERldiBvbmx5LCBmb3IgSE1SIG9mIGhvaXN0ZWQgdm5vZGVzIHJldXNlZCBpbiB2LWZvclxuICogaHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL2lzc3Vlcy8yMDIyXG4gKi9cbmZ1bmN0aW9uIGRlZXBDbG9uZVZOb2RlKHZub2RlKSB7XG4gICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgaWYgKGlzQXJyYXkodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICAgIGNsb25lZC5jaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZWQ7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSh0ZXh0ID0gJyAnLCBmbGFnID0gMCkge1xuICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCB0ZXh0LCBmbGFnKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RhdGljVk5vZGUoY29udGVudCwgbnVtYmVyT2ZOb2Rlcykge1xuICAgIC8vIEEgc3RhdGljIHZub2RlIGNhbiBjb250YWluIG11bHRpcGxlIHN0cmluZ2lmaWVkIGVsZW1lbnRzLCBhbmQgdGhlIG51bWJlclxuICAgIC8vIG9mIGVsZW1lbnRzIGlzIG5lY2Vzc2FyeSBmb3IgaHlkcmF0aW9uLlxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoU3RhdGljLCBudWxsLCBjb250ZW50KTtcbiAgICB2bm9kZS5zdGF0aWNDb3VudCA9IG51bWJlck9mTm9kZXM7XG4gICAgcmV0dXJuIHZub2RlO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50Vk5vZGUodGV4dCA9ICcnLCBcbi8vIHdoZW4gdXNlZCBhcyB0aGUgdi1lbHNlIGJyYW5jaCwgdGhlIGNvbW1lbnQgbm9kZSBtdXN0IGJlIGNyZWF0ZWQgYXMgYVxuLy8gYmxvY2sgdG8gZW5zdXJlIGNvcnJlY3QgdXBkYXRlcy5cbmFzQmxvY2sgPSBmYWxzZSkge1xuICAgIHJldHVybiBhc0Jsb2NrXG4gICAgICAgID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhDb21tZW50LCBudWxsLCB0ZXh0KSlcbiAgICAgICAgOiBjcmVhdGVWTm9kZShDb21tZW50LCBudWxsLCB0ZXh0KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZOb2RlKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkID09IG51bGwgfHwgdHlwZW9mIGNoaWxkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgLy8gZW1wdHkgcGxhY2Vob2xkZXJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5KGNoaWxkKSkge1xuICAgICAgICAvLyBmcmFnbWVudFxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoRnJhZ21lbnQsIG51bGwsIFxuICAgICAgICAvLyAjMzY2NiwgYXZvaWQgcmVmZXJlbmNlIHBvbGx1dGlvbiB3aGVuIHJldXNpbmcgdm5vZGVcbiAgICAgICAgY2hpbGQuc2xpY2UoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gYWxyZWFkeSB2bm9kZSwgdGhpcyBzaG91bGQgYmUgdGhlIG1vc3QgY29tbW9uIHNpbmNlIGNvbXBpbGVkIHRlbXBsYXRlc1xuICAgICAgICAvLyBhbHdheXMgcHJvZHVjZSBhbGwtdm5vZGUgY2hpbGRyZW4gYXJyYXlzXG4gICAgICAgIHJldHVybiBjbG9uZUlmTW91bnRlZChjaGlsZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBzdHJpbmdzIGFuZCBudW1iZXJzXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCBTdHJpbmcoY2hpbGQpKTtcbiAgICB9XG59XG4vLyBvcHRpbWl6ZWQgbm9ybWFsaXphdGlvbiBmb3IgdGVtcGxhdGUtY29tcGlsZWQgcmVuZGVyIGZuc1xuZnVuY3Rpb24gY2xvbmVJZk1vdW50ZWQoY2hpbGQpIHtcbiAgICByZXR1cm4gKGNoaWxkLmVsID09PSBudWxsICYmIGNoaWxkLnBhdGNoRmxhZyAhPT0gLTEgLyogUGF0Y2hGbGFncy5IT0lTVEVEICovKSB8fFxuICAgICAgICBjaGlsZC5tZW1vXG4gICAgICAgID8gY2hpbGRcbiAgICAgICAgOiBjbG9uZVZOb2RlKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbikge1xuICAgIGxldCB0eXBlID0gMDtcbiAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gdm5vZGU7XG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICB0eXBlID0gMTYgLyogU2hhcGVGbGFncy5BUlJBWV9DSElMRFJFTiAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoc2hhcGVGbGFnICYgKDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovIHwgNjQgLyogU2hhcGVGbGFncy5URUxFUE9SVCAqLykpIHtcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBzbG90IHRvIHBsYWluIGNoaWxkcmVuIGZvciBwbGFpbiBlbGVtZW50IGFuZCBUZWxlcG9ydFxuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGNoaWxkcmVuLmRlZmF1bHQ7XG4gICAgICAgICAgICBpZiAoc2xvdCkge1xuICAgICAgICAgICAgICAgIC8vIF9jIG1hcmtlciBpcyBhZGRlZCBieSB3aXRoQ3R4KCkgaW5kaWNhdGluZyB0aGlzIGlzIGEgY29tcGlsZWQgc2xvdFxuICAgICAgICAgICAgICAgIHNsb3QuX2MgJiYgKHNsb3QuX2QgPSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIHNsb3QoKSk7XG4gICAgICAgICAgICAgICAgc2xvdC5fYyAmJiAoc2xvdC5fZCA9IHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHlwZSA9IDMyIC8qIFNoYXBlRmxhZ3MuU0xPVFNfQ0hJTERSRU4gKi87XG4gICAgICAgICAgICBjb25zdCBzbG90RmxhZyA9IGNoaWxkcmVuLl87XG4gICAgICAgICAgICBpZiAoIXNsb3RGbGFnICYmICEoSW50ZXJuYWxPYmplY3RLZXkgaW4gY2hpbGRyZW4pKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uX2N0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNsb3RGbGFnID09PSAzIC8qIFNsb3RGbGFncy5GT1JXQVJERUQgKi8gJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBjaGlsZCBjb21wb25lbnQgcmVjZWl2ZXMgZm9yd2FyZGVkIHNsb3RzIGZyb20gdGhlIHBhcmVudC5cbiAgICAgICAgICAgICAgICAvLyBpdHMgc2xvdCB0eXBlIGlzIGRldGVybWluZWQgYnkgaXRzIHBhcmVudCdzIHNsb3QgdHlwZS5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnNsb3RzLl8gPT09IDEgLyogU2xvdEZsYWdzLlNUQUJMRSAqLykge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uXyA9IDIgLyogU2xvdEZsYWdzLkRZTkFNSUMgKi87XG4gICAgICAgICAgICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyB8PSAxMDI0IC8qIFBhdGNoRmxhZ3MuRFlOQU1JQ19TTE9UUyAqLztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSB7IGRlZmF1bHQ6IGNoaWxkcmVuLCBfY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfTtcbiAgICAgICAgdHlwZSA9IDMyIC8qIFNoYXBlRmxhZ3MuU0xPVFNfQ0hJTERSRU4gKi87XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAgIC8vIGZvcmNlIHRlbGVwb3J0IGNoaWxkcmVuIHRvIGFycmF5IHNvIGl0IGNhbiBiZSBtb3ZlZCBhcm91bmRcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFNoYXBlRmxhZ3MuVEVMRVBPUlQgKi8pIHtcbiAgICAgICAgICAgIHR5cGUgPSAxNiAvKiBTaGFwZUZsYWdzLkFSUkFZX0NISUxEUkVOICovO1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eXBlID0gOCAvKiBTaGFwZUZsYWdzLlRFWFRfQ0hJTERSRU4gKi87XG4gICAgICAgIH1cbiAgICB9XG4gICAgdm5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB2bm9kZS5zaGFwZUZsYWcgfD0gdHlwZTtcbn1cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uYXJncykge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0b01lcmdlID0gYXJnc1tpXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdG9NZXJnZSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xuICAgICAgICAgICAgICAgIGlmIChyZXQuY2xhc3MgIT09IHRvTWVyZ2UuY2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0LmNsYXNzID0gbm9ybWFsaXplQ2xhc3MoW3JldC5jbGFzcywgdG9NZXJnZS5jbGFzc10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgICAgIHJldC5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKFtyZXQuc3R5bGUsIHRvTWVyZ2Uuc3R5bGVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzT24oa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcmV0W2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgaW5jb21pbmcgPSB0b01lcmdlW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGluY29taW5nICYmXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nICE9PSBpbmNvbWluZyAmJlxuICAgICAgICAgICAgICAgICAgICAhKGlzQXJyYXkoZXhpc3RpbmcpICYmIGV4aXN0aW5nLmluY2x1ZGVzKGluY29taW5nKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0W2tleV0gPSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGluY29taW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpbmNvbWluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSB0b01lcmdlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIGludm9rZVZOb2RlSG9vayhob29rLCBpbnN0YW5jZSwgdm5vZGUsIHByZXZWTm9kZSA9IG51bGwpIHtcbiAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgNyAvKiBFcnJvckNvZGVzLlZOT0RFX0hPT0sgKi8sIFtcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIHByZXZWTm9kZVxuICAgIF0pO1xufVxuXG5jb25zdCBlbXB0eUFwcENvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XG5sZXQgdWlkJDEgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2Uodm5vZGUsIHBhcmVudCwgc3VzcGVuc2UpIHtcbiAgICBjb25zdCB0eXBlID0gdm5vZGUudHlwZTtcbiAgICAvLyBpbmhlcml0IHBhcmVudCBhcHAgY29udGV4dCAtIG9yIC0gaWYgcm9vdCwgYWRvcHQgZnJvbSByb290IHZub2RlXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IChwYXJlbnQgPyBwYXJlbnQuYXBwQ29udGV4dCA6IHZub2RlLmFwcENvbnRleHQpIHx8IGVtcHR5QXBwQ29udGV4dDtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHtcbiAgICAgICAgdWlkOiB1aWQkMSsrLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBhcHBDb250ZXh0LFxuICAgICAgICByb290OiBudWxsLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBzdWJUcmVlOiBudWxsLFxuICAgICAgICBlZmZlY3Q6IG51bGwsXG4gICAgICAgIHVwZGF0ZTogbnVsbCxcbiAgICAgICAgc2NvcGU6IG5ldyBFZmZlY3RTY29wZSh0cnVlIC8qIGRldGFjaGVkICovKSxcbiAgICAgICAgcmVuZGVyOiBudWxsLFxuICAgICAgICBwcm94eTogbnVsbCxcbiAgICAgICAgZXhwb3NlZDogbnVsbCxcbiAgICAgICAgZXhwb3NlUHJveHk6IG51bGwsXG4gICAgICAgIHdpdGhQcm94eTogbnVsbCxcbiAgICAgICAgcHJvdmlkZXM6IHBhcmVudCA/IHBhcmVudC5wcm92aWRlcyA6IE9iamVjdC5jcmVhdGUoYXBwQ29udGV4dC5wcm92aWRlcyksXG4gICAgICAgIGFjY2Vzc0NhY2hlOiBudWxsLFxuICAgICAgICByZW5kZXJDYWNoZTogW10sXG4gICAgICAgIC8vIGxvY2FsIHJlc29sdmVkIGFzc2V0c1xuICAgICAgICBjb21wb25lbnRzOiBudWxsLFxuICAgICAgICBkaXJlY3RpdmVzOiBudWxsLFxuICAgICAgICAvLyByZXNvbHZlZCBwcm9wcyBhbmQgZW1pdHMgb3B0aW9uc1xuICAgICAgICBwcm9wc09wdGlvbnM6IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcbiAgICAgICAgZW1pdHNPcHRpb25zOiBub3JtYWxpemVFbWl0c09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXG4gICAgICAgIC8vIGVtaXRcbiAgICAgICAgZW1pdDogbnVsbCxcbiAgICAgICAgZW1pdHRlZDogbnVsbCxcbiAgICAgICAgLy8gcHJvcHMgZGVmYXVsdCB2YWx1ZVxuICAgICAgICBwcm9wc0RlZmF1bHRzOiBFTVBUWV9PQkosXG4gICAgICAgIC8vIGluaGVyaXRBdHRyc1xuICAgICAgICBpbmhlcml0QXR0cnM6IHR5cGUuaW5oZXJpdEF0dHJzLFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICBjdHg6IEVNUFRZX09CSixcbiAgICAgICAgZGF0YTogRU1QVFlfT0JKLFxuICAgICAgICBwcm9wczogRU1QVFlfT0JKLFxuICAgICAgICBhdHRyczogRU1QVFlfT0JKLFxuICAgICAgICBzbG90czogRU1QVFlfT0JKLFxuICAgICAgICByZWZzOiBFTVBUWV9PQkosXG4gICAgICAgIHNldHVwU3RhdGU6IEVNUFRZX09CSixcbiAgICAgICAgc2V0dXBDb250ZXh0OiBudWxsLFxuICAgICAgICAvLyBzdXNwZW5zZSByZWxhdGVkXG4gICAgICAgIHN1c3BlbnNlLFxuICAgICAgICBzdXNwZW5zZUlkOiBzdXNwZW5zZSA/IHN1c3BlbnNlLnBlbmRpbmdJZCA6IDAsXG4gICAgICAgIGFzeW5jRGVwOiBudWxsLFxuICAgICAgICBhc3luY1Jlc29sdmVkOiBmYWxzZSxcbiAgICAgICAgLy8gbGlmZWN5Y2xlIGhvb2tzXG4gICAgICAgIC8vIG5vdCB1c2luZyBlbnVtcyBoZXJlIGJlY2F1c2UgaXQgcmVzdWx0cyBpbiBjb21wdXRlZCBwcm9wZXJ0aWVzXG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcbiAgICAgICAgaXNEZWFjdGl2YXRlZDogZmFsc2UsXG4gICAgICAgIGJjOiBudWxsLFxuICAgICAgICBjOiBudWxsLFxuICAgICAgICBibTogbnVsbCxcbiAgICAgICAgbTogbnVsbCxcbiAgICAgICAgYnU6IG51bGwsXG4gICAgICAgIHU6IG51bGwsXG4gICAgICAgIHVtOiBudWxsLFxuICAgICAgICBidW06IG51bGwsXG4gICAgICAgIGRhOiBudWxsLFxuICAgICAgICBhOiBudWxsLFxuICAgICAgICBydGc6IG51bGwsXG4gICAgICAgIHJ0YzogbnVsbCxcbiAgICAgICAgZWM6IG51bGwsXG4gICAgICAgIHNwOiBudWxsXG4gICAgfTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGluc3RhbmNlLmN0eCA9IGNyZWF0ZURldlJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2UuY3R4ID0geyBfOiBpbnN0YW5jZSB9O1xuICAgIH1cbiAgICBpbnN0YW5jZS5yb290ID0gcGFyZW50ID8gcGFyZW50LnJvb3QgOiBpbnN0YW5jZTtcbiAgICBpbnN0YW5jZS5lbWl0ID0gZW1pdCQxLmJpbmQobnVsbCwgaW5zdGFuY2UpO1xuICAgIC8vIGFwcGx5IGN1c3RvbSBlbGVtZW50IHNwZWNpYWwgaGFuZGxpbmdcbiAgICBpZiAodm5vZGUuY2UpIHtcbiAgICAgICAgdm5vZGUuY2UoaW5zdGFuY2UpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2U7XG59XG5sZXQgY3VycmVudEluc3RhbmNlID0gbnVsbDtcbmNvbnN0IGdldEN1cnJlbnRJbnN0YW5jZSA9ICgpID0+IGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG5jb25zdCBzZXRDdXJyZW50SW5zdGFuY2UgPSAoaW5zdGFuY2UpID0+IHtcbiAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICBpbnN0YW5jZS5zY29wZS5vbigpO1xufTtcbmNvbnN0IHVuc2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4ge1xuICAgIGN1cnJlbnRJbnN0YW5jZSAmJiBjdXJyZW50SW5zdGFuY2Uuc2NvcGUub2ZmKCk7XG4gICAgY3VycmVudEluc3RhbmNlID0gbnVsbDtcbn07XG5jb25zdCBpc0J1aWx0SW5UYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50Jyk7XG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgY29uZmlnKSB7XG4gICAgY29uc3QgYXBwSXNOYXRpdmVUYWcgPSBjb25maWcuaXNOYXRpdmVUYWcgfHwgTk87XG4gICAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBhcHBJc05hdGl2ZVRhZyhuYW1lKSkge1xuICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50IGlkOiAnICsgbmFtZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSkge1xuICAgIHJldHVybiBpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNoYXBlRmxhZ3MuU1RBVEVGVUxfQ09NUE9ORU5UICovO1xufVxubGV0IGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xuZnVuY3Rpb24gc2V0dXBDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSID0gZmFsc2UpIHtcbiAgICBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBpc1NTUjtcbiAgICBjb25zdCB7IHByb3BzLCBjaGlsZHJlbiB9ID0gaW5zdGFuY2Uudm5vZGU7XG4gICAgY29uc3QgaXNTdGF0ZWZ1bCA9IGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpO1xuICAgIGluaXRQcm9wcyhpbnN0YW5jZSwgcHJvcHMsIGlzU3RhdGVmdWwsIGlzU1NSKTtcbiAgICBpbml0U2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGlzU3RhdGVmdWxcbiAgICAgICAgPyBzZXR1cFN0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUilcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XG4gICAgcmV0dXJuIHNldHVwUmVzdWx0O1xufVxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGlmIChDb21wb25lbnQubmFtZSkge1xuICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKENvbXBvbmVudC5uYW1lLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbXBvbmVudC5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5jb21wb25lbnRzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZXNbaV0sIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoQ29tcG9uZW50LmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbXBvbmVudC5jb21waWxlck9wdGlvbnMgJiYgaXNSdW50aW1lT25seSgpKSB7XG4gICAgICAgICAgICB3YXJuKGBcImNvbXBpbGVyT3B0aW9uc1wiIGlzIG9ubHkgc3VwcG9ydGVkIHdoZW4gdXNpbmcgYSBidWlsZCBvZiBWdWUgdGhhdCBgICtcbiAgICAgICAgICAgICAgICBgaW5jbHVkZXMgdGhlIHJ1bnRpbWUgY29tcGlsZXIuIFNpbmNlIHlvdSBhcmUgdXNpbmcgYSBydW50aW1lLW9ubHkgYCArXG4gICAgICAgICAgICAgICAgYGJ1aWxkLCB0aGUgb3B0aW9ucyBzaG91bGQgYmUgcGFzc2VkIHZpYSB5b3VyIGJ1aWxkIHRvb2wgY29uZmlnIGluc3RlYWQuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gMC4gY3JlYXRlIHJlbmRlciBwcm94eSBwcm9wZXJ0eSBhY2Nlc3MgY2FjaGVcbiAgICBpbnN0YW5jZS5hY2Nlc3NDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgLy8gMS4gY3JlYXRlIHB1YmxpYyBpbnN0YW5jZSAvIHJlbmRlciBwcm94eVxuICAgIC8vIGFsc28gbWFyayBpdCByYXcgc28gaXQncyBuZXZlciBvYnNlcnZlZFxuICAgIGluc3RhbmNlLnByb3h5ID0gbWFya1JhdyhuZXcgUHJveHkoaW5zdGFuY2UuY3R4LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgICB9XG4gICAgLy8gMi4gY2FsbCBzZXR1cCgpXG4gICAgY29uc3QgeyBzZXR1cCB9ID0gQ29tcG9uZW50O1xuICAgIGlmIChzZXR1cCkge1xuICAgICAgICBjb25zdCBzZXR1cENvbnRleHQgPSAoaW5zdGFuY2Uuc2V0dXBDb250ZXh0ID1cbiAgICAgICAgICAgIHNldHVwLmxlbmd0aCA+IDEgPyBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIDogbnVsbCk7XG4gICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc2V0dXAsIGluc3RhbmNlLCAwIC8qIEVycm9yQ29kZXMuU0VUVVBfRlVOQ1RJT04gKi8sIFsocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2UucHJvcHMpIDogaW5zdGFuY2UucHJvcHMsIHNldHVwQ29udGV4dF0pO1xuICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgIGlmIChpc1Byb21pc2Uoc2V0dXBSZXN1bHQpKSB7XG4gICAgICAgICAgICBzZXR1cFJlc3VsdC50aGVuKHVuc2V0Q3VycmVudEluc3RhbmNlLCB1bnNldEN1cnJlbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICBpZiAoaXNTU1IpIHtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIHByb21pc2Ugc28gc2VydmVyLXJlbmRlcmVyIGNhbiB3YWl0IG9uIGl0XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwUmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNvbHZlZFJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgcmVzb2x2ZWRSZXN1bHQsIGlzU1NSKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGUsIGluc3RhbmNlLCAwIC8qIEVycm9yQ29kZXMuU0VUVVBfRlVOQ1RJT04gKi8pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYXN5bmMgc2V0dXAgcmV0dXJuZWQgUHJvbWlzZS5cbiAgICAgICAgICAgICAgICAvLyBiYWlsIGhlcmUgYW5kIHdhaXQgZm9yIHJlLWVudHJ5LlxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jRGVwID0gc2V0dXBSZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaW5zdGFuY2Uuc3VzcGVuc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IChfYSA9IENvbXBvbmVudC5uYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnQW5vbnltb3VzJztcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IDwke25hbWV9Pjogc2V0dXAgZnVuY3Rpb24gcmV0dXJuZWQgYSBwcm9taXNlLCBidXQgbm8gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgPFN1c3BlbnNlPiBib3VuZGFyeSB3YXMgZm91bmQgaW4gdGhlIHBhcmVudCBjb21wb25lbnQgdHJlZS4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgQSBjb21wb25lbnQgd2l0aCBhc3luYyBzZXR1cCgpIG11c3QgYmUgbmVzdGVkIGluIGEgPFN1c3BlbnNlPiBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpbiBvcmRlciB0byBiZSByZW5kZXJlZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oc2V0dXBSZXN1bHQpKSB7XG4gICAgICAgIC8vIHNldHVwIHJldHVybmVkIGFuIGlubGluZSByZW5kZXIgZnVuY3Rpb25cbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUuX19zc3JJbmxpbmVSZW5kZXIpIHtcbiAgICAgICAgICAgIC8vIHdoZW4gdGhlIGZ1bmN0aW9uJ3MgbmFtZSBpcyBgc3NyUmVuZGVyYCAoY29tcGlsZWQgYnkgU0ZDIGlubGluZSBtb2RlKSxcbiAgICAgICAgICAgIC8vIHNldCBpdCBhcyBzc3JSZW5kZXIgaW5zdGVhZC5cbiAgICAgICAgICAgIGluc3RhbmNlLnNzclJlbmRlciA9IHNldHVwUmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gc2V0dXBSZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc2V0dXBSZXN1bHQpKSB7XG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNWTm9kZShzZXR1cFJlc3VsdCkpIHtcbiAgICAgICAgICAgIHdhcm4oYHNldHVwKCkgc2hvdWxkIG5vdCByZXR1cm4gVk5vZGVzIGRpcmVjdGx5IC0gYCArXG4gICAgICAgICAgICAgICAgYHJldHVybiBhIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNldHVwIHJldHVybmVkIGJpbmRpbmdzLlxuICAgICAgICAvLyBhc3N1bWluZyBhIHJlbmRlciBmdW5jdGlvbiBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGlzIHByZXNlbnQuXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5kZXZ0b29sc1Jhd1NldHVwU3RhdGUgPSBzZXR1cFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5zZXR1cFN0YXRlID0gcHJveHlSZWZzKHNldHVwUmVzdWx0KTtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldHVwUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgd2Fybihgc2V0dXAoKSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdC4gUmVjZWl2ZWQ6ICR7c2V0dXBSZXN1bHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2Ygc2V0dXBSZXN1bHR9YCk7XG4gICAgfVxuICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XG59XG5sZXQgY29tcGlsZTtcbmxldCBpbnN0YWxsV2l0aFByb3h5O1xuLyoqXG4gKiBGb3IgcnVudGltZS1kb20gdG8gcmVnaXN0ZXIgdGhlIGNvbXBpbGVyLlxuICogTm90ZSB0aGUgZXhwb3J0ZWQgbWV0aG9kIHVzZXMgYW55IHRvIGF2b2lkIGQudHMgcmVseWluZyBvbiB0aGUgY29tcGlsZXIgdHlwZXMuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyKF9jb21waWxlKSB7XG4gICAgY29tcGlsZSA9IF9jb21waWxlO1xuICAgIGluc3RhbGxXaXRoUHJveHkgPSBpID0+IHtcbiAgICAgICAgaWYgKGkucmVuZGVyLl9yYykge1xuICAgICAgICAgICAgaS53aXRoUHJveHkgPSBuZXcgUHJveHkoaS5jdHgsIFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLy8gZGV2IG9ubHlcbmNvbnN0IGlzUnVudGltZU9ubHkgPSAoKSA9PiAhY29tcGlsZTtcbmZ1bmN0aW9uIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUiwgc2tpcE9wdGlvbnMpIHtcbiAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICAgIC8vIHRlbXBsYXRlIC8gcmVuZGVyIGZ1bmN0aW9uIG5vcm1hbGl6YXRpb25cbiAgICAvLyBjb3VsZCBiZSBhbHJlYWR5IHNldCB3aGVuIHJldHVybmVkIGZyb20gc2V0dXAoKVxuICAgIGlmICghaW5zdGFuY2UucmVuZGVyKSB7XG4gICAgICAgIC8vIG9ubHkgZG8gb24tdGhlLWZseSBjb21waWxlIGlmIG5vdCBpbiBTU1IgLSBTU1Igb24tdGhlLWZseSBjb21waWxhdGlvblxuICAgICAgICAvLyBpcyBkb25lIGJ5IHNlcnZlci1yZW5kZXJlclxuICAgICAgICBpZiAoIWlzU1NSICYmIGNvbXBpbGUgJiYgIUNvbXBvbmVudC5yZW5kZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gQ29tcG9uZW50LnRlbXBsYXRlIHx8XG4gICAgICAgICAgICAgICAgcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpLnRlbXBsYXRlO1xuICAgICAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgaXNDdXN0b21FbGVtZW50LCBjb21waWxlck9wdGlvbnMgfSA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGVsaW1pdGVycywgY29tcGlsZXJPcHRpb25zOiBjb21wb25lbnRDb21waWxlck9wdGlvbnMgfSA9IENvbXBvbmVudDtcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5hbENvbXBpbGVyT3B0aW9ucyA9IGV4dGVuZChleHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGRlbGltaXRlcnNcbiAgICAgICAgICAgICAgICB9LCBjb21waWxlck9wdGlvbnMpLCBjb21wb25lbnRDb21waWxlck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIENvbXBvbmVudC5yZW5kZXIgPSBjb21waWxlKHRlbXBsYXRlLCBmaW5hbENvbXBpbGVyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSAoQ29tcG9uZW50LnJlbmRlciB8fCBOT09QKTtcbiAgICAgICAgLy8gZm9yIHJ1bnRpbWUtY29tcGlsZWQgcmVuZGVyIGZ1bmN0aW9ucyB1c2luZyBgd2l0aGAgYmxvY2tzLCB0aGUgcmVuZGVyXG4gICAgICAgIC8vIHByb3h5IHVzZWQgbmVlZHMgYSBkaWZmZXJlbnQgYGhhc2AgaGFuZGxlciB3aGljaCBpcyBtb3JlIHBlcmZvcm1hbnQgYW5kXG4gICAgICAgIC8vIGFsc28gb25seSBhbGxvd3MgYSB3aGl0ZWxpc3Qgb2YgZ2xvYmFscyB0byBmYWxsdGhyb3VnaC5cbiAgICAgICAgaWYgKGluc3RhbGxXaXRoUHJveHkpIHtcbiAgICAgICAgICAgIGluc3RhbGxXaXRoUHJveHkoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHN1cHBvcnQgZm9yIDIueCBvcHRpb25zXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIShmYWxzZSApKSB7XG4gICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgICAgYXBwbHlPcHRpb25zKGluc3RhbmNlKTtcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIH1cbiAgICAvLyB3YXJuIG1pc3NpbmcgdGVtcGxhdGUvcmVuZGVyXG4gICAgLy8gdGhlIHJ1bnRpbWUgY29tcGlsYXRpb24gb2YgdGVtcGxhdGUgaW4gU1NSIGlzIGRvbmUgYnkgc2VydmVyLXJlbmRlclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIUNvbXBvbmVudC5yZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QICYmICFpc1NTUikge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFjb21waWxlICYmIENvbXBvbmVudC50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IHByb3ZpZGVkIHRlbXBsYXRlIG9wdGlvbiBidXQgYCArXG4gICAgICAgICAgICAgICAgYHJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICtcbiAgICAgICAgICAgICAgICAoYCBDb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGFsaWFzIFwidnVlXCIgdG8gXCJ2dWUvZGlzdC92dWUuZXNtLWJ1bmRsZXIuanNcIi5gXG4gICAgICAgICAgICAgICAgICAgICkgLyogc2hvdWxkIG5vdCBoYXBwZW4gKi8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGlzIG1pc3NpbmcgdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQXR0cnNQcm94eShpbnN0YW5jZSkge1xuICAgIHJldHVybiBuZXcgUHJveHkoaW5zdGFuY2UuYXR0cnMsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLywgJyRhdHRycycpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgd2Fybihgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWxldGVQcm9wZXJ0eSgpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIDoge1xuICAgICAgICAgICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogVHJhY2tPcFR5cGVzLkdFVCAqLywgJyRhdHRycycpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBleHBvc2UgPSBleHBvc2VkID0+IHtcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICAgICAgICB3YXJuKGBleHBvc2UoKSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZSBwZXIgc2V0dXAoKS5gKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5leHBvc2VkID0gZXhwb3NlZCB8fCB7fTtcbiAgICB9O1xuICAgIGxldCBhdHRycztcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIC8vIFdlIHVzZSBnZXR0ZXJzIGluIGRldiBpbiBjYXNlIGxpYnMgbGlrZSB0ZXN0LXV0aWxzIG92ZXJ3cml0ZSBpbnN0YW5jZVxuICAgICAgICAvLyBwcm9wZXJ0aWVzIChvdmVyd3JpdGVzIHNob3VsZCBub3QgYmUgZG9uZSBpbiBwcm9kKVxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgICAgICBnZXQgYXR0cnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0dHJzIHx8IChhdHRycyA9IGNyZWF0ZUF0dHJzUHJveHkoaW5zdGFuY2UpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgc2xvdHMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoYWxsb3dSZWFkb25seShpbnN0YW5jZS5zbG90cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IGVtaXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChldmVudCwgLi4uYXJncykgPT4gaW5zdGFuY2UuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhwb3NlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnMgfHwgKGF0dHJzID0gY3JlYXRlQXR0cnNQcm94eShpbnN0YW5jZSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsb3RzOiBpbnN0YW5jZS5zbG90cyxcbiAgICAgICAgICAgIGVtaXQ6IGluc3RhbmNlLmVtaXQsXG4gICAgICAgICAgICBleHBvc2VcbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRFeHBvc2VQcm94eShpbnN0YW5jZSkge1xuICAgIGlmIChpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICAgIHJldHVybiAoaW5zdGFuY2UuZXhwb3NlUHJveHkgfHxcbiAgICAgICAgICAgIChpbnN0YW5jZS5leHBvc2VQcm94eSA9IG5ldyBQcm94eShwcm94eVJlZnMobWFya1JhdyhpbnN0YW5jZS5leHBvc2VkKSksIHtcbiAgICAgICAgICAgICAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgaW4gcHVibGljUHJvcGVydGllc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhhcyh0YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5IGluIHRhcmdldCB8fCBrZXkgaW4gcHVibGljUHJvcGVydGllc01hcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSkpO1xuICAgIH1cbn1cbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG5jb25zdCBjbGFzc2lmeSA9IChzdHIpID0+IHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIGMgPT4gYy50b1VwcGVyQ2FzZSgpKS5yZXBsYWNlKC9bLV9dL2csICcnKTtcbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50LCBpbmNsdWRlSW5mZXJyZWQgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oQ29tcG9uZW50KVxuICAgICAgICA/IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZVxuICAgICAgICA6IENvbXBvbmVudC5uYW1lIHx8IChpbmNsdWRlSW5mZXJyZWQgJiYgQ29tcG9uZW50Ll9fbmFtZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgQ29tcG9uZW50LCBpc1Jvb3QgPSBmYWxzZSkge1xuICAgIGxldCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpO1xuICAgIGlmICghbmFtZSAmJiBDb21wb25lbnQuX19maWxlKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gQ29tcG9uZW50Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaFsxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW5hbWUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UucGFyZW50KSB7XG4gICAgICAgIC8vIHRyeSB0byBpbmZlciB0aGUgbmFtZSBiYXNlZCBvbiByZXZlcnNlIHJlc29sdXRpb25cbiAgICAgICAgY29uc3QgaW5mZXJGcm9tUmVnaXN0cnkgPSAocmVnaXN0cnkpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5W2tleV0gPT09IENvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgbmFtZSA9XG4gICAgICAgICAgICBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5jb21wb25lbnRzIHx8XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFyZW50LnR5cGUuY29tcG9uZW50cykgfHwgaW5mZXJGcm9tUmVnaXN0cnkoaW5zdGFuY2UuYXBwQ29udGV4dC5jb21wb25lbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUgPyBjbGFzc2lmeShuYW1lKSA6IGlzUm9vdCA/IGBBcHBgIDogYEFub255bW91c2A7XG59XG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUpICYmICdfX3ZjY09wdHMnIGluIHZhbHVlO1xufVxuXG5jb25zdCBjb21wdXRlZCA9ICgoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGNvbXB1dGVkJDEoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMsIGlzSW5TU1JDb21wb25lbnRTZXR1cCk7XG59KTtcblxuLy8gZGV2IG9ubHlcbmNvbnN0IHdhcm5SdW50aW1lVXNhZ2UgPSAobWV0aG9kKSA9PiB3YXJuKGAke21ldGhvZH0oKSBpcyBhIGNvbXBpbGVyLWhpbnQgaGVscGVyIHRoYXQgaXMgb25seSB1c2FibGUgaW5zaWRlIGAgK1xuICAgIGA8c2NyaXB0IHNldHVwPiBvZiBhIHNpbmdsZSBmaWxlIGNvbXBvbmVudC4gSXRzIGFyZ3VtZW50cyBzaG91bGQgYmUgYCArXG4gICAgYGNvbXBpbGVkIGF3YXkgYW5kIHBhc3NpbmcgaXQgYXQgcnVudGltZSBoYXMgbm8gZWZmZWN0LmApO1xuLy8gaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIGRlZmluZVByb3BzKCkge1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lUHJvcHNgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vLyBpbXBsZW1lbnRhdGlvblxuZnVuY3Rpb24gZGVmaW5lRW1pdHMoKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVFbWl0c2ApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogVnVlIGA8c2NyaXB0IHNldHVwPmAgY29tcGlsZXIgbWFjcm8gZm9yIGRlY2xhcmluZyBhIGNvbXBvbmVudCdzIGV4cG9zZWRcbiAqIGluc3RhbmNlIHByb3BlcnRpZXMgd2hlbiBpdCBpcyBhY2Nlc3NlZCBieSBhIHBhcmVudCBjb21wb25lbnQgdmlhIHRlbXBsYXRlXG4gKiByZWZzLlxuICpcbiAqIGA8c2NyaXB0IHNldHVwPmAgY29tcG9uZW50cyBhcmUgY2xvc2VkIGJ5IGRlZmF1bHQgLSBpLmUuIHZhcmlhYmxlcyBpbnNpZGVcbiAqIHRoZSBgPHNjcmlwdCBzZXR1cD5gIHNjb3BlIGlzIG5vdCBleHBvc2VkIHRvIHBhcmVudCB1bmxlc3MgZXhwbGljaXRseSBleHBvc2VkXG4gKiB2aWEgYGRlZmluZUV4cG9zZWAuXG4gKlxuICogVGhpcyBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgYDxzY3JpcHQgc2V0dXA+YCwgaXMgY29tcGlsZWQgYXdheSBpbiB0aGVcbiAqIG91dHB1dCBhbmQgc2hvdWxkICoqbm90KiogYmUgYWN0dWFsbHkgY2FsbGVkIGF0IHJ1bnRpbWUuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZUV4cG9zZShleHBvc2VkKSB7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICB3YXJuUnVudGltZVVzYWdlKGBkZWZpbmVFeHBvc2VgKTtcbiAgICB9XG59XG4vKipcbiAqIFZ1ZSBgPHNjcmlwdCBzZXR1cD5gIGNvbXBpbGVyIG1hY3JvIGZvciBwcm92aWRpbmcgcHJvcHMgZGVmYXVsdCB2YWx1ZXMgd2hlblxuICogdXNpbmcgdHlwZS1iYXNlZCBgZGVmaW5lUHJvcHNgIGRlY2xhcmF0aW9uLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiBgYGB0c1xuICogd2l0aERlZmF1bHRzKGRlZmluZVByb3BzPHtcbiAqICAgc2l6ZT86IG51bWJlclxuICogICBsYWJlbHM/OiBzdHJpbmdbXVxuICogfT4oKSwge1xuICogICBzaXplOiAzLFxuICogICBsYWJlbHM6ICgpID0+IFsnZGVmYXVsdCBsYWJlbCddXG4gKiB9KVxuICogYGBgXG4gKlxuICogVGhpcyBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgYDxzY3JpcHQgc2V0dXA+YCwgaXMgY29tcGlsZWQgYXdheSBpbiB0aGUgb3V0cHV0XG4gKiBhbmQgc2hvdWxkICoqbm90KiogYmUgYWN0dWFsbHkgY2FsbGVkIGF0IHJ1bnRpbWUuXG4gKi9cbmZ1bmN0aW9uIHdpdGhEZWZhdWx0cyhwcm9wcywgZGVmYXVsdHMpIHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYHdpdGhEZWZhdWx0c2ApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHVzZVNsb3RzKCkge1xuICAgIHJldHVybiBnZXRDb250ZXh0KCkuc2xvdHM7XG59XG5mdW5jdGlvbiB1c2VBdHRycygpIHtcbiAgICByZXR1cm4gZ2V0Q29udGV4dCgpLmF0dHJzO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaSkge1xuICAgICAgICB3YXJuKGB1c2VDb250ZXh0KCkgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGluc3RhbmNlLmApO1xuICAgIH1cbiAgICByZXR1cm4gaS5zZXR1cENvbnRleHQgfHwgKGkuc2V0dXBDb250ZXh0ID0gY3JlYXRlU2V0dXBDb250ZXh0KGkpKTtcbn1cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgZGVmYXVsdCBkZWNsYXJhdGlvbnMuIEltcG9ydGVkIGJ5IGNvbXBpbGVkIGNvZGVcbiAqIG9ubHkuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEZWZhdWx0cyhyYXcsIGRlZmF1bHRzKSB7XG4gICAgY29uc3QgcHJvcHMgPSBpc0FycmF5KHJhdylcbiAgICAgICAgPyByYXcucmVkdWNlKChub3JtYWxpemVkLCBwKSA9PiAoKG5vcm1hbGl6ZWRbcF0gPSB7fSksIG5vcm1hbGl6ZWQpLCB7fSlcbiAgICAgICAgOiByYXc7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICAgICAgY29uc3Qgb3B0ID0gcHJvcHNba2V5XTtcbiAgICAgICAgaWYgKG9wdCkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkpIHtcbiAgICAgICAgICAgICAgICBwcm9wc1trZXldID0geyB0eXBlOiBvcHQsIGRlZmF1bHQ6IGRlZmF1bHRzW2tleV0gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdC5kZWZhdWx0ID0gZGVmYXVsdHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSB7IGRlZmF1bHQ6IGRlZmF1bHRzW2tleV0gfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcbiAgICAgICAgICAgIHdhcm4oYHByb3BzIGRlZmF1bHQga2V5IFwiJHtrZXl9XCIgaGFzIG5vIGNvcnJlc3BvbmRpbmcgZGVjbGFyYXRpb24uYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BzO1xufVxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhIHByb3h5IGZvciB0aGUgcmVzdCBlbGVtZW50IHdoZW4gZGVzdHJ1Y3R1cmluZyBwcm9wcyB3aXRoXG4gKiBkZWZpbmVQcm9wcygpLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVByb3BzUmVzdFByb3h5KHByb3BzLCBleGNsdWRlZEtleXMpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoIWV4Y2x1ZGVkS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBrZXksIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gcHJvcHNba2V5XVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbi8qKlxuICogYDxzY3JpcHQgc2V0dXA+YCBoZWxwZXIgZm9yIHBlcnNpc3RpbmcgdGhlIGN1cnJlbnQgaW5zdGFuY2UgY29udGV4dCBvdmVyXG4gKiBhc3luYy9hd2FpdCBmbG93cy5cbiAqXG4gKiBgQHZ1ZS9jb21waWxlci1zZmNgIGNvbnZlcnRzIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHggPSBhd2FpdCBmb28oKVxuICogYGBgXG4gKlxuICogaW50bzpcbiAqXG4gKiBgYGB0c1xuICogbGV0IF9fdGVtcCwgX19yZXN0b3JlXG4gKiBjb25zdCB4ID0gKChbX190ZW1wLCBfX3Jlc3RvcmVdID0gd2l0aEFzeW5jQ29udGV4dCgoKSA9PiBmb28oKSkpLF9fdGVtcD1hd2FpdCBfX3RlbXAsX19yZXN0b3JlKCksX190ZW1wKVxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gd2l0aEFzeW5jQ29udGV4dChnZXRBd2FpdGFibGUpIHtcbiAgICBjb25zdCBjdHggPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjdHgpIHtcbiAgICAgICAgd2Fybihgd2l0aEFzeW5jQ29udGV4dCBjYWxsZWQgd2l0aG91dCBhY3RpdmUgY3VycmVudCBpbnN0YW5jZS4gYCArXG4gICAgICAgICAgICBgVGhpcyBpcyBsaWtlbHkgYSBidWcuYCk7XG4gICAgfVxuICAgIGxldCBhd2FpdGFibGUgPSBnZXRBd2FpdGFibGUoKTtcbiAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGlmIChpc1Byb21pc2UoYXdhaXRhYmxlKSkge1xuICAgICAgICBhd2FpdGFibGUgPSBhd2FpdGFibGUuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gW2F3YWl0YWJsZSwgKCkgPT4gc2V0Q3VycmVudEluc3RhbmNlKGN0eCldO1xufVxuXG4vLyBBY3R1YWwgaW1wbGVtZW50YXRpb25cbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbikge1xuICAgIGNvbnN0IGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChsID09PSAyKSB7XG4gICAgICAgIGlmIChpc09iamVjdChwcm9wc09yQ2hpbGRyZW4pICYmICFpc0FycmF5KHByb3BzT3JDaGlsZHJlbikpIHtcbiAgICAgICAgICAgIC8vIHNpbmdsZSB2bm9kZSB3aXRob3V0IHByb3BzXG4gICAgICAgICAgICBpZiAoaXNWTm9kZShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIFtwcm9wc09yQ2hpbGRyZW5dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHByb3BzIHdpdGhvdXQgY2hpbGRyZW5cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gb21pdCBwcm9wc1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChsID4gMykge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGwgPT09IDMgJiYgaXNWTm9kZShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbik7XG4gICAgfVxufVxuXG5jb25zdCBzc3JDb250ZXh0S2V5ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBzc3JDb250ZXh0YCA6IGBgKTtcbmNvbnN0IHVzZVNTUkNvbnRleHQgPSAoKSA9PiB7XG4gICAge1xuICAgICAgICBjb25zdCBjdHggPSBpbmplY3Qoc3NyQ29udGV4dEtleSk7XG4gICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgICAgICB3YXJuKGBTZXJ2ZXIgcmVuZGVyaW5nIGNvbnRleHQgbm90IHByb3ZpZGVkLiBNYWtlIHN1cmUgdG8gb25seSBjYWxsIGAgK1xuICAgICAgICAgICAgICAgICAgICBgdXNlU1NSQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3R4O1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi9dKTtcbn1cblxuZnVuY3Rpb24gaW5pdEN1c3RvbUZvcm1hdHRlcigpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cbiAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZ1ZVN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiMzYmE3NzYnIH07XG4gICAgY29uc3QgbnVtYmVyU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzBiMWJjOScgfTtcbiAgICBjb25zdCBzdHJpbmdTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojYjYyZTI0JyB9O1xuICAgIGNvbnN0IGtleXdvcmRTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojOWQyODhjJyB9O1xuICAgIC8vIGN1c3RvbSBmb3JtYXR0ZXIgZm9yIENocm9tZVxuICAgIC8vIGh0dHBzOi8vd3d3Lm1hdHR6ZXVuZXJ0LmNvbS8yMDE2LzAyLzE5L2N1c3RvbS1jaHJvbWUtZGV2dG9vbHMtb2JqZWN0LWZvcm1hdHRlcnMuaHRtbFxuICAgIGNvbnN0IGZvcm1hdHRlciA9IHtcbiAgICAgICAgaGVhZGVyKG9iaikge1xuICAgICAgICAgICAgLy8gVE9ETyBhbHNvIGZvcm1hdCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSAmIGN0eC5zbG90cy9hdHRycyBpbiBzZXR1cFxuICAgICAgICAgICAgaWYgKCFpc09iamVjdChvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2JqLl9faXNWdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWydkaXYnLCB2dWVTdHlsZSwgYFZ1ZUluc3RhbmNlYF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlZihvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgZ2VuUmVmRmxhZyhvYmopXSxcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmoudmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBgPmBcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShvYmopKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgaXNTaGFsbG93KG9iaikgPyAnU2hhbGxvd1JlYWN0aXZlJyA6ICdSZWFjdGl2ZSddLFxuICAgICAgICAgICAgICAgICAgICAnPCcsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXG4gICAgICAgICAgICAgICAgICAgIGA+JHtpc1JlYWRvbmx5KG9iaikgPyBgIChyZWFkb25seSlgIDogYGB9YFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWRvbmx5KG9iaikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCBpc1NoYWxsb3cob2JqKSA/ICdTaGFsbG93UmVhZG9ubHknIDogJ1JlYWRvbmx5J10sXG4gICAgICAgICAgICAgICAgICAgICc8JyxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICAgICAgICAgICAgJz4nXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBoYXNCb2R5KG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYm9keShvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLl9faXNWdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgICAgIC4uLmZvcm1hdEluc3RhbmNlKG9iai4kKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrcyA9IFtdO1xuICAgICAgICBpZiAoaW5zdGFuY2UudHlwZS5wcm9wcyAmJiBpbnN0YW5jZS5wcm9wcykge1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygncHJvcHMnLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2Uuc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdzZXR1cCcsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2UuZGF0YSAhPT0gRU1QVFlfT0JKKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdkYXRhJywgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wdXRlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCAnY29tcHV0ZWQnKTtcbiAgICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdjb21wdXRlZCcsIGNvbXB1dGVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5qZWN0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2luamVjdCcpO1xuICAgICAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2luamVjdGVkJywgaW5qZWN0ZWQpKTtcbiAgICAgICAgfVxuICAgICAgICBibG9ja3MucHVzaChbXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBrZXl3b3JkU3R5bGUuc3R5bGUgKyAnO29wYWNpdHk6MC42NidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICckIChpbnRlcm5hbCk6ICdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbJ29iamVjdCcsIHsgb2JqZWN0OiBpbnN0YW5jZSB9XVxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIGJsb2NrcztcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VCbG9jayh0eXBlLCB0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0ID0gZXh0ZW5kKHt9LCB0YXJnZXQpO1xuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywge31dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6ICdsaW5lLWhlaWdodDoxLjI1ZW07bWFyZ2luLWJvdHRvbTowLjZlbScgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnY29sb3I6IzQ3NjU4MidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3BhZGRpbmctbGVmdDoxLjI1ZW0nXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyh0YXJnZXQpLm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIGtleXdvcmRTdHlsZSwga2V5ICsgJzogJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZSh0YXJnZXRba2V5XSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodiwgYXNSYXcgPSB0cnVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBudW1iZXJTdHlsZSwgdl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIEpTT04uc3RyaW5naWZ5KHYpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywga2V5d29yZFN0eWxlLCB2XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIFsnb2JqZWN0JywgeyBvYmplY3Q6IGFzUmF3ID8gdG9SYXcodikgOiB2IH1dO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4dHJhY3RLZXlzKGluc3RhbmNlLCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IENvbXAgPSBpbnN0YW5jZS50eXBlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihDb21wKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4dHJhY3RlZCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5jdHgpIHtcbiAgICAgICAgICAgIGlmIChpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBpbnN0YW5jZS5jdHhba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXh0cmFjdGVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IENvbXBbdHlwZV07XG4gICAgICAgIGlmICgoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkpIHx8XG4gICAgICAgICAgICAoaXNPYmplY3Qob3B0cykgJiYga2V5IGluIG9wdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQ29tcC5leHRlbmRzICYmIGlzS2V5T2ZUeXBlKENvbXAuZXh0ZW5kcywga2V5LCB0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbXAubWl4aW5zICYmIENvbXAubWl4aW5zLnNvbWUobSA9PiBpc0tleU9mVHlwZShtLCBrZXksIHR5cGUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2VuUmVmRmxhZyh2KSB7XG4gICAgICAgIGlmIChpc1NoYWxsb3codikpIHtcbiAgICAgICAgICAgIHJldHVybiBgU2hhbGxvd1JlZmA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYuZWZmZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gYENvbXB1dGVkUmVmYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFJlZmA7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzKSB7XG4gICAgICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycyA9IFtmb3JtYXR0ZXJdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gd2l0aE1lbW8obWVtbywgcmVuZGVyLCBjYWNoZSwgaW5kZXgpIHtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtpbmRleF07XG4gICAgaWYgKGNhY2hlZCAmJiBpc01lbW9TYW1lKGNhY2hlZCwgbWVtbykpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgcmV0ID0gcmVuZGVyKCk7XG4gICAgLy8gc2hhbGxvdyBjbG9uZVxuICAgIHJldC5tZW1vID0gbWVtby5zbGljZSgpO1xuICAgIHJldHVybiAoY2FjaGVbaW5kZXhdID0gcmV0KTtcbn1cbmZ1bmN0aW9uIGlzTWVtb1NhbWUoY2FjaGVkLCBtZW1vKSB7XG4gICAgY29uc3QgcHJldiA9IGNhY2hlZC5tZW1vO1xuICAgIGlmIChwcmV2Lmxlbmd0aCAhPSBtZW1vLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaGFzQ2hhbmdlZChwcmV2W2ldLCBtZW1vW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSB0byBsZXQgcGFyZW50IGJsb2NrIHRyYWNrIGl0IHdoZW4gcmV0dXJuaW5nIGNhY2hlZFxuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmIGN1cnJlbnRCbG9jaykge1xuICAgICAgICBjdXJyZW50QmxvY2sucHVzaChjYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gQ29yZSBBUEkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCB2ZXJzaW9uID0gXCIzLjIuNDVcIjtcbmNvbnN0IF9zc3JVdGlscyA9IHtcbiAgICBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSxcbiAgICBzZXR1cENvbXBvbmVudCxcbiAgICByZW5kZXJDb21wb25lbnRSb290LFxuICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSxcbiAgICBpc1ZOb2RlLFxuICAgIG5vcm1hbGl6ZVZOb2RlXG59O1xuLyoqXG4gKiBTU1IgdXRpbHMgZm9yIFxcQHZ1ZS9zZXJ2ZXItcmVuZGVyZXIuIE9ubHkgZXhwb3NlZCBpbiBzc3ItcG9zc2libGUgYnVpbGRzLlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IHNzclV0aWxzID0gKF9zc3JVdGlscyApO1xuLyoqXG4gKiBAaW50ZXJuYWwgb25seSBleHBvc2VkIGluIGNvbXBhdCBidWlsZHNcbiAqL1xuY29uc3QgcmVzb2x2ZUZpbHRlciA9IG51bGw7XG4vKipcbiAqIEBpbnRlcm5hbCBvbmx5IGV4cG9zZWQgaW4gY29tcGF0IGJ1aWxkcy5cbiAqL1xuY29uc3QgY29tcGF0VXRpbHMgPSAobnVsbCk7XG5cbmV4cG9ydCB7IEJhc2VUcmFuc2l0aW9uLCBDb21tZW50LCBGcmFnbWVudCwgS2VlcEFsaXZlLCBTdGF0aWMsIFN1c3BlbnNlLCBUZWxlcG9ydCwgVGV4dCwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGNhbGxXaXRoRXJyb3JIYW5kbGluZywgY2xvbmVWTm9kZSwgY29tcGF0VXRpbHMsIGNvbXB1dGVkLCBjcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUJhc2VWTm9kZSBhcyBjcmVhdGVFbGVtZW50Vk5vZGUsIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyLCBjcmVhdGVQcm9wc1Jlc3RQcm94eSwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZVNsb3RzLCBjcmVhdGVTdGF0aWNWTm9kZSwgY3JlYXRlVGV4dFZOb2RlLCBjcmVhdGVWTm9kZSwgZGVmaW5lQXN5bmNDb21wb25lbnQsIGRlZmluZUNvbXBvbmVudCwgZGVmaW5lRW1pdHMsIGRlZmluZUV4cG9zZSwgZGVmaW5lUHJvcHMsIGRldnRvb2xzLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgZ3VhcmRSZWFjdGl2ZVByb3BzLCBoLCBoYW5kbGVFcnJvciwgaW5pdEN1c3RvbUZvcm1hdHRlciwgaW5qZWN0LCBpc01lbW9TYW1lLCBpc1J1bnRpbWVPbmx5LCBpc1ZOb2RlLCBtZXJnZURlZmF1bHRzLCBtZXJnZVByb3BzLCBuZXh0VGljaywgb25BY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgb25CZWZvcmVVcGRhdGUsIG9uRGVhY3RpdmF0ZWQsIG9uRXJyb3JDYXB0dXJlZCwgb25Nb3VudGVkLCBvblJlbmRlclRyYWNrZWQsIG9uUmVuZGVyVHJpZ2dlcmVkLCBvblNlcnZlclByZWZldGNoLCBvblVubW91bnRlZCwgb25VcGRhdGVkLCBvcGVuQmxvY2ssIHBvcFNjb3BlSWQsIHByb3ZpZGUsIHB1c2hTY29wZUlkLCBxdWV1ZVBvc3RGbHVzaENiLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHJlc29sdmVGaWx0ZXIsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIHNldEJsb2NrVHJhY2tpbmcsIHNldERldnRvb2xzSG9vaywgc2V0VHJhbnNpdGlvbkhvb2tzLCBzc3JDb250ZXh0S2V5LCBzc3JVdGlscywgdG9IYW5kbGVycywgdHJhbnNmb3JtVk5vZGVBcmdzLCB1c2VBdHRycywgdXNlU1NSQ29udGV4dCwgdXNlU2xvdHMsIHVzZVRyYW5zaXRpb25TdGF0ZSwgdmVyc2lvbiwgd2Fybiwgd2F0Y2gsIHdhdGNoRWZmZWN0LCB3YXRjaFBvc3RFZmZlY3QsIHdhdGNoU3luY0VmZmVjdCwgd2l0aEFzeW5jQ29udGV4dCwgd2l0aEN0eCwgd2l0aERlZmF1bHRzLCB3aXRoRGlyZWN0aXZlcywgd2l0aE1lbW8sIHdpdGhTY29wZUlkIH07XG4iLCJpbXBvcnQgeyB3YXJuLCBjYW1lbGl6ZSwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGRlZmluZUNvbXBvbmVudCwgbmV4dFRpY2ssIGNyZWF0ZVZOb2RlLCBnZXRDdXJyZW50SW5zdGFuY2UsIHdhdGNoUG9zdEVmZmVjdCwgb25Nb3VudGVkLCBvblVubW91bnRlZCwgRnJhZ21lbnQsIFN0YXRpYywgaCwgQmFzZVRyYW5zaXRpb24sIHVzZVRyYW5zaXRpb25TdGF0ZSwgb25VcGRhdGVkLCB0b1JhdywgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBzZXRUcmFuc2l0aW9uSG9va3MsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIGNyZWF0ZVJlbmRlcmVyLCBpc1J1bnRpbWVPbmx5LCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciB9IGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0FycmF5LCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGlzT24sIGlzTW9kZWxMaXN0ZW5lciwgaXNGdW5jdGlvbiwgY2FtZWxpemUgYXMgY2FtZWxpemUkMSwgdG9OdW1iZXIsIGV4dGVuZCwgRU1QVFlfT0JKLCBpc09iamVjdCwgaW52b2tlQXJyYXlGbnMsIGxvb3NlSW5kZXhPZiwgaXNTZXQsIGxvb3NlRXF1YWwsIGlzSFRNTFRhZywgaXNTVkdUYWcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbmNvbnN0IGRvYyA9ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiBudWxsKTtcbmNvbnN0IHRlbXBsYXRlQ29udGFpbmVyID0gZG9jICYmIC8qI19fUFVSRV9fKi8gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5jb25zdCBub2RlT3BzID0ge1xuICAgIGluc2VydDogKGNoaWxkLCBwYXJlbnQsIGFuY2hvcikgPT4ge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XG4gICAgfSxcbiAgICByZW1vdmU6IGNoaWxkID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogKHRhZywgaXNTVkcsIGlzLCBwcm9wcykgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGlzU1ZHXG4gICAgICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZylcbiAgICAgICAgICAgIDogZG9jLmNyZWF0ZUVsZW1lbnQodGFnLCBpcyA/IHsgaXMgfSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh0YWcgPT09ICdzZWxlY3QnICYmIHByb3BzICYmIHByb3BzLm11bHRpcGxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCBwcm9wcy5tdWx0aXBsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH0sXG4gICAgY3JlYXRlVGV4dDogdGV4dCA9PiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCksXG4gICAgY3JlYXRlQ29tbWVudDogdGV4dCA9PiBkb2MuY3JlYXRlQ29tbWVudCh0ZXh0KSxcbiAgICBzZXRUZXh0OiAobm9kZSwgdGV4dCkgPT4ge1xuICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgfSxcbiAgICBzZXRFbGVtZW50VGV4dDogKGVsLCB0ZXh0KSA9PiB7XG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB9LFxuICAgIHBhcmVudE5vZGU6IG5vZGUgPT4gbm9kZS5wYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBub2RlID0+IG5vZGUubmV4dFNpYmxpbmcsXG4gICAgcXVlcnlTZWxlY3Rvcjogc2VsZWN0b3IgPT4gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxuICAgIHNldFNjb3BlSWQoZWwsIGlkKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShpZCwgJycpO1xuICAgIH0sXG4gICAgLy8gX19VTlNBRkVfX1xuICAgIC8vIFJlYXNvbjogaW5uZXJIVE1MLlxuICAgIC8vIFN0YXRpYyBjb250ZW50IGhlcmUgY2FuIG9ubHkgY29tZSBmcm9tIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAvLyBBcyBsb25nIGFzIHRoZSB1c2VyIG9ubHkgdXNlcyB0cnVzdGVkIHRlbXBsYXRlcywgdGhpcyBpcyBzYWZlLlxuICAgIGluc2VydFN0YXRpY0NvbnRlbnQoY29udGVudCwgcGFyZW50LCBhbmNob3IsIGlzU1ZHLCBzdGFydCwgZW5kKSB7XG4gICAgICAgIC8vIDxwYXJlbnQ+IGJlZm9yZSB8IGZpcnN0IC4uLiBsYXN0IHwgYW5jaG9yIDwvcGFyZW50PlxuICAgICAgICBjb25zdCBiZWZvcmUgPSBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZDtcbiAgICAgICAgLy8gIzUzMDggY2FuIG9ubHkgdGFrZSBjYWNoZWQgcGF0aCBpZjpcbiAgICAgICAgLy8gLSBoYXMgYSBzaW5nbGUgcm9vdCBub2RlXG4gICAgICAgIC8vIC0gbmV4dFNpYmxpbmcgaW5mbyBpcyBzdGlsbCBhdmFpbGFibGVcbiAgICAgICAgaWYgKHN0YXJ0ICYmIChzdGFydCA9PT0gZW5kIHx8IHN0YXJ0Lm5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgLy8gY2FjaGVkXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoc3RhcnQuY2xvbmVOb2RlKHRydWUpLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gZW5kIHx8ICEoc3RhcnQgPSBzdGFydC5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZnJlc2ggaW5zZXJ0XG4gICAgICAgICAgICB0ZW1wbGF0ZUNvbnRhaW5lci5pbm5lckhUTUwgPSBpc1NWRyA/IGA8c3ZnPiR7Y29udGVudH08L3N2Zz5gIDogY29udGVudDtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDb250YWluZXIuY29udGVudDtcbiAgICAgICAgICAgIGlmIChpc1NWRykge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvdXRlciBzdmcgd3JhcHBlclxuICAgICAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSB0ZW1wbGF0ZS5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kQ2hpbGQod3JhcHBlci5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRlbXBsYXRlLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAvLyBmaXJzdFxuICAgICAgICAgICAgYmVmb3JlID8gYmVmb3JlLm5leHRTaWJsaW5nIDogcGFyZW50LmZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAvLyBsYXN0XG4gICAgICAgICAgICBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZFxuICAgICAgICBdO1xuICAgIH1cbn07XG5cbi8vIGNvbXBpbGVyIHNob3VsZCBub3JtYWxpemUgY2xhc3MgKyA6Y2xhc3MgYmluZGluZ3Mgb24gdGhlIHNhbWUgZWxlbWVudFxuLy8gaW50byBhIHNpbmdsZSBiaW5kaW5nIFsnc3RhdGljQ2xhc3MnLCBkeW5hbWljXVxuZnVuY3Rpb24gcGF0Y2hDbGFzcyhlbCwgdmFsdWUsIGlzU1ZHKSB7XG4gICAgLy8gZGlyZWN0bHkgc2V0dGluZyBjbGFzc05hbWUgc2hvdWxkIGJlIGZhc3RlciB0aGFuIHNldEF0dHJpYnV0ZSBpbiB0aGVvcnlcbiAgICAvLyBpZiB0aGlzIGlzIGFuIGVsZW1lbnQgZHVyaW5nIGEgdHJhbnNpdGlvbiwgdGFrZSB0aGUgdGVtcG9yYXJ5IHRyYW5zaXRpb25cbiAgICAvLyBjbGFzc2VzIGludG8gYWNjb3VudC5cbiAgICBjb25zdCB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl92dGM7XG4gICAgaWYgKHRyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc10gOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKCcgJyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTVkcpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGF0Y2hTdHlsZShlbCwgcHJldiwgbmV4dCkge1xuICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gICAgY29uc3QgaXNDc3NTdHJpbmcgPSBpc1N0cmluZyhuZXh0KTtcbiAgICBpZiAobmV4dCAmJiAhaXNDc3NTdHJpbmcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dCkge1xuICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldiAmJiAhaXNTdHJpbmcocHJldikpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY3VycmVudERpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuICAgICAgICBpZiAoaXNDc3NTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmIChwcmV2ICE9PSBuZXh0KSB7XG4gICAgICAgICAgICAgICAgc3R5bGUuY3NzVGV4dCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldikge1xuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluZGljYXRlcyB0aGF0IHRoZSBgZGlzcGxheWAgb2YgdGhlIGVsZW1lbnQgaXMgY29udHJvbGxlZCBieSBgdi1zaG93YCxcbiAgICAgICAgLy8gc28gd2UgYWx3YXlzIGtlZXAgdGhlIGN1cnJlbnQgYGRpc3BsYXlgIHZhbHVlIHJlZ2FyZGxlc3Mgb2YgdGhlIGBzdHlsZWBcbiAgICAgICAgLy8gdmFsdWUsIHRodXMgaGFuZGluZyBvdmVyIGNvbnRyb2wgdG8gYHYtc2hvd2AuXG4gICAgICAgIGlmICgnX3ZvZCcgaW4gZWwpIHtcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSBjdXJyZW50RGlzcGxheTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IHNlbWljb2xvblJFID0gL1teXFxcXF07XFxzKiQvO1xuY29uc3QgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBuYW1lLCB2YWwpIHtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbC5mb3JFYWNoKHYgPT4gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHYpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh2YWwgPT0gbnVsbClcbiAgICAgICAgICAgIHZhbCA9ICcnO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICBpZiAoc2VtaWNvbG9uUkUudGVzdCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgd2FybihgVW5leHBlY3RlZCBzZW1pY29sb24gYXQgdGhlIGVuZCBvZiAnJHtuYW1lfScgc3R5bGUgdmFsdWU6ICcke3ZhbH0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xuICAgICAgICAgICAgLy8gY3VzdG9tIHByb3BlcnR5IGRlZmluaXRpb25cbiAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwcmVmaXhlZCA9IGF1dG9QcmVmaXgoc3R5bGUsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgICAgICAgICAgICAgIC8vICFpbXBvcnRhbnRcbiAgICAgICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUocHJlZml4ZWQpLCB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgJycpLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHlsZVtwcmVmaXhlZF0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuY29uc3QgcHJlZml4Q2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcbiAgICBjb25zdCBjYWNoZWQgPSBwcmVmaXhDYWNoZVtyYXdOYW1lXTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGxldCBuYW1lID0gY2FtZWxpemUocmF3TmFtZSk7XG4gICAgaWYgKG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IG5hbWUpO1xuICAgIH1cbiAgICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeGVkID0gcHJlZml4ZXNbaV0gKyBuYW1lO1xuICAgICAgICBpZiAocHJlZml4ZWQgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiAocHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBwcmVmaXhlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhd05hbWU7XG59XG5cbmNvbnN0IHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHLCBpbnN0YW5jZSkge1xuICAgIGlmIChpc1NWRyAmJiBrZXkuc3RhcnRzV2l0aCgneGxpbms6JykpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleS5zbGljZSg2LCBrZXkubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gbm90ZSB3ZSBhcmUgb25seSBjaGVja2luZyBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBoYXZlIGFcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBkb20gcHJvcCBvZiB0aGUgc2FtZSBuYW1lIGhlcmUuXG4gICAgICAgIGNvbnN0IGlzQm9vbGVhbiA9IGlzU3BlY2lhbEJvb2xlYW5BdHRyKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChpc0Jvb2xlYW4gJiYgIWluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSkpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGlzQm9vbGVhbiA/ICcnIDogdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBfX1VOU0FGRV9fXG4vLyBmdW5jdGlvbnMuIFRoZSB1c2VyIGlzIHJlc3BvbnNpYmxlIGZvciB1c2luZyB0aGVtIHdpdGggb25seSB0cnVzdGVkIGNvbnRlbnQuXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIFxuLy8gdGhlIGZvbGxvd2luZyBhcmdzIGFyZSBwYXNzZWQgb25seSBkdWUgdG8gcG90ZW50aWFsIGlubmVySFRNTC90ZXh0Q29udGVudFxuLy8gb3ZlcnJpZGluZyBleGlzdGluZyBWTm9kZXMsIGluIHdoaWNoIGNhc2UgdGhlIG9sZCB0cmVlIG11c3QgYmUgcHJvcGVybHlcbi8vIHVubW91bnRlZC5cbnByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSB7XG4gICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgfHwga2V5ID09PSAndGV4dENvbnRlbnQnKSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmXG4gICAgICAgIGVsLnRhZ05hbWUgIT09ICdQUk9HUkVTUycgJiZcbiAgICAgICAgLy8gY3VzdG9tIGVsZW1lbnRzIG1heSB1c2UgX3ZhbHVlIGludGVybmFsbHlcbiAgICAgICAgIWVsLnRhZ05hbWUuaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxuICAgICAgICBlbC5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbiAgICAgICAgaWYgKGVsLnZhbHVlICE9PSBuZXdWYWx1ZSB8fFxuICAgICAgICAgICAgLy8gIzQ5NTY6IGFsd2F5cyBzZXQgZm9yIE9QVElPTiBlbGVtZW50cyBiZWNhdXNlIGl0cyB2YWx1ZSBmYWxscyBiYWNrIHRvXG4gICAgICAgICAgICAvLyB0ZXh0Q29udGVudCBpZiBubyB2YWx1ZSBhdHRyaWJ1dGUgaXMgcHJlc2VudC4gQW5kIHNldHRpbmcgLnZhbHVlIGZvclxuICAgICAgICAgICAgLy8gT1BUSU9OIGhhcyBubyBzaWRlIGVmZmVjdFxuICAgICAgICAgICAgZWwudGFnTmFtZSA9PT0gJ09QVElPTicpIHtcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5lZWRSZW1vdmUgPSBmYWxzZTtcbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBlbFtrZXldO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxzZWxlY3QgbXVsdGlwbGU+IGNvbXBpbGVzIHRvIHsgbXVsdGlwbGU6ICcnIH1cbiAgICAgICAgICAgIHZhbHVlID0gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PSBudWxsICYmIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxkaXYgOmlkPVwibnVsbFwiPlxuICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAvLyBlLmcuIDxpbWcgOndpZHRoPVwibnVsbFwiPlxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgbmVlZFJlbW92ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gc29tZSBwcm9wZXJ0aWVzIHBlcmZvcm0gdmFsdWUgdmFsaWRhdGlvbiBhbmQgdGhyb3csXG4gICAgLy8gc29tZSBwcm9wZXJ0aWVzIGhhcyBnZXR0ZXIsIG5vIHNldHRlciwgd2lsbCBlcnJvciBpbiAndXNlIHN0cmljdCdcbiAgICAvLyBlZy4gPHNlbGVjdCA6dHlwZT1cIm51bGxcIj48L3NlbGVjdD4gPHNlbGVjdCA6d2lsbFZhbGlkYXRlPVwibnVsbFwiPjwvc2VsZWN0PlxuICAgIHRyeSB7XG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90IHdhcm4gaWYgdmFsdWUgaXMgYXV0by1jb2VyY2VkIGZyb20gbnVsbGlzaCB2YWx1ZXNcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhbmVlZFJlbW92ZSkge1xuICAgICAgICAgICAgd2FybihgRmFpbGVkIHNldHRpbmcgcHJvcCBcIiR7a2V5fVwiIG9uIDwke2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBgICtcbiAgICAgICAgICAgICAgICBgdmFsdWUgJHt2YWx1ZX0gaXMgaW52YWxpZC5gLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZWVkUmVtb3ZlICYmIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHBhdGNoRXZlbnQoZWwsIHJhd05hbWUsIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpbnN0YW5jZSA9IG51bGwpIHtcbiAgICAvLyB2ZWkgPSB2dWUgZXZlbnQgaW52b2tlcnNcbiAgICBjb25zdCBpbnZva2VycyA9IGVsLl92ZWkgfHwgKGVsLl92ZWkgPSB7fSk7XG4gICAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XG4gICAgaWYgKG5leHRWYWx1ZSAmJiBleGlzdGluZ0ludm9rZXIpIHtcbiAgICAgICAgLy8gcGF0Y2hcbiAgICAgICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gbmV4dFZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgW25hbWUsIG9wdGlvbnNdID0gcGFyc2VOYW1lKHJhd05hbWUpO1xuICAgICAgICBpZiAobmV4dFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBhZGRcbiAgICAgICAgICAgIGNvbnN0IGludm9rZXIgPSAoaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKG5leHRWYWx1ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGludm9rZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4aXN0aW5nSW52b2tlcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlXG4gICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKGVsLCBuYW1lLCBleGlzdGluZ0ludm9rZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaW52b2tlcnNbcmF3TmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBvcHRpb25zTW9kaWZpZXJSRSA9IC8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztcbmZ1bmN0aW9uIHBhcnNlTmFtZShuYW1lKSB7XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnNNb2RpZmllclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICBsZXQgbTtcbiAgICAgICAgd2hpbGUgKChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCBuYW1lLmxlbmd0aCAtIG1bMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIG9wdGlvbnNbbVswXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXZlbnQgPSBuYW1lWzJdID09PSAnOicgPyBuYW1lLnNsaWNlKDMpIDogaHlwaGVuYXRlKG5hbWUuc2xpY2UoMikpO1xuICAgIHJldHVybiBbZXZlbnQsIG9wdGlvbnNdO1xufVxuLy8gVG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIHJlcGVhdGVkbHkgY2FsbGluZyBEYXRlLm5vdygpLCB3ZSBjYWNoZVxuLy8gYW5kIHVzZSB0aGUgc2FtZSB0aW1lc3RhbXAgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnMgYXR0YWNoZWQgaW4gdGhlIHNhbWUgdGljay5cbmxldCBjYWNoZWROb3cgPSAwO1xuY29uc3QgcCA9IC8qI19fUFVSRV9fKi8gUHJvbWlzZS5yZXNvbHZlKCk7XG5jb25zdCBnZXROb3cgPSAoKSA9PiBjYWNoZWROb3cgfHwgKHAudGhlbigoKSA9PiAoY2FjaGVkTm93ID0gMCkpLCAoY2FjaGVkTm93ID0gRGF0ZS5ub3coKSkpO1xuZnVuY3Rpb24gY3JlYXRlSW52b2tlcihpbml0aWFsVmFsdWUsIGluc3RhbmNlKSB7XG4gICAgY29uc3QgaW52b2tlciA9IChlKSA9PiB7XG4gICAgICAgIC8vIGFzeW5jIGVkZ2UgY2FzZSB2dWVqcy92dWUjNjU2NlxuICAgICAgICAvLyBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAgICAgICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgICAgICAgLy8gdGhpcyBubyBsb25nZXIgaGFwcGVucyBmb3IgdGVtcGxhdGVzIGluIFZ1ZSAzLCBidXQgY291bGQgc3RpbGwgYmVcbiAgICAgICAgLy8gdGhlb3JldGljYWxseSBwb3NzaWJsZSBmb3IgaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gICAgICAgIC8vIHRoZSBzb2x1dGlvbjogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAgICAgICAvLyBhbmQgYWxzbyBhdHRhY2ggdGhlIHRpbWVzdGFtcCB0byBhbnkgZXZlbnQgdGhhdCB3YXMgaGFuZGxlZCBieSB2dWVcbiAgICAgICAgLy8gZm9yIHRoZSBmaXJzdCB0aW1lICh0byBhdm9pZCBpbmNvbnNpc3RlbnQgZXZlbnQgdGltZXN0YW1wIGltcGxlbWVudGF0aW9uc1xuICAgICAgICAvLyBvciBldmVudHMgZmlyZWQgZnJvbSBpZnJhbWVzLCBlLmcuICMyNTEzKVxuICAgICAgICAvLyBUaGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgICAgICAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICAgICAgICBpZiAoIWUuX3Z0cykge1xuICAgICAgICAgICAgZS5fdnRzID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLl92dHMgPD0gaW52b2tlci5hdHRhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIGludm9rZXIudmFsdWUpLCBpbnN0YW5jZSwgNSAvKiBFcnJvckNvZGVzLk5BVElWRV9FVkVOVF9IQU5ETEVSICovLCBbZV0pO1xuICAgIH07XG4gICAgaW52b2tlci52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBpbnZva2VyLmF0dGFjaGVkID0gZ2V0Tm93KCk7XG4gICAgcmV0dXJuIGludm9rZXI7XG59XG5mdW5jdGlvbiBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCB2YWx1ZSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBvcmlnaW5hbFN0b3AuY2FsbChlKTtcbiAgICAgICAgICAgIGUuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZuID0+IChlKSA9PiAhZS5fc3RvcHBlZCAmJiBmbiAmJiBmbihlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuXG5jb25zdCBuYXRpdmVPblJFID0gL15vblthLXpdLztcbmNvbnN0IHBhdGNoUHJvcCA9IChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaXNTVkcgPSBmYWxzZSwgcHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XG4gICAgICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgcGF0Y2hTdHlsZShlbCwgcHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgLy8gaWdub3JlIHYtbW9kZWwgbGlzdGVuZXJzXG4gICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgICAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5WzBdID09PSAnLidcbiAgICAgICAgPyAoKGtleSA9IGtleS5zbGljZSgxKSksIHRydWUpXG4gICAgICAgIDoga2V5WzBdID09PSAnXidcbiAgICAgICAgICAgID8gKChrZXkgPSBrZXkuc2xpY2UoMSkpLCBmYWxzZSlcbiAgICAgICAgICAgIDogc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpKSB7XG4gICAgICAgIHBhdGNoRE9NUHJvcChlbCwga2V5LCBuZXh0VmFsdWUsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgPGlucHV0IHYtbW9kZWwgdHlwZT1cImNoZWNrYm94XCI+IHdpdGhcbiAgICAgICAgLy8gOnRydWUtdmFsdWUgJiA6ZmFsc2UtdmFsdWVcbiAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgZG9tIHByb3BlcnRpZXMgc2luY2Ugbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZVxuICAgICAgICAvLyBzdHJpbmdpZmllZC5cbiAgICAgICAgaWYgKGtleSA9PT0gJ3RydWUtdmFsdWUnKSB7XG4gICAgICAgICAgICBlbC5fdHJ1ZVZhbHVlID0gbmV4dFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZhbHNlLXZhbHVlJykge1xuICAgICAgICAgICAgZWwuX2ZhbHNlVmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XG4gICAgaWYgKGlzU1ZHKSB7XG4gICAgICAgIC8vIG1vc3Qga2V5cyBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGUgb24gc3ZnIGVsZW1lbnRzIHRvIHdvcmtcbiAgICAgICAgLy8gLi4uZXhjZXB0IGlubmVySFRNTCAmIHRleHRDb250ZW50XG4gICAgICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnIHx8IGtleSA9PT0gJ3RleHRDb250ZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3IgbmF0aXZlIG9uY2xpY2sgd2l0aCBmdW5jdGlvbiB2YWx1ZXNcbiAgICAgICAgaWYgKGtleSBpbiBlbCAmJiBuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyB0aGVzZSBhcmUgZW51bWVyYXRlZCBhdHRycywgaG93ZXZlciB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBwcm9wZXJ0aWVzXG4gICAgLy8gYXJlIGFjdHVhbGx5IGJvb2xlYW5zIC0gdGhpcyBsZWFkcyB0byBzZXR0aW5nIGl0IHdpdGggYSBzdHJpbmcgXCJmYWxzZVwiXG4gICAgLy8gdmFsdWUgbGVhZGluZyBpdCB0byBiZSBjb2VyY2VkIHRvIGB0cnVlYCwgc28gd2UgbmVlZCB0byBhbHdheXMgdHJlYXRcbiAgICAvLyB0aGVtIGFzIGF0dHJpYnV0ZXMuXG4gICAgLy8gTm90ZSB0aGF0IGBjb250ZW50RWRpdGFibGVgIGRvZXNuJ3QgaGF2ZSB0aGlzIHByb2JsZW06IGl0cyBET01cbiAgICAvLyBwcm9wZXJ0eSBpcyBhbHNvIGVudW1lcmF0ZWQgc3RyaW5nIHZhbHVlcy5cbiAgICBpZiAoa2V5ID09PSAnc3BlbGxjaGVjaycgfHwga2V5ID09PSAnZHJhZ2dhYmxlJyB8fCBrZXkgPT09ICd0cmFuc2xhdGUnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzE3ODcsICMyODQwIGZvcm0gcHJvcGVydHkgb24gZm9ybSBlbGVtZW50cyBpcyByZWFkb25seSBhbmQgbXVzdCBiZSBzZXQgYXNcbiAgICAvLyBhdHRyaWJ1dGUuXG4gICAgaWYgKGtleSA9PT0gJ2Zvcm0nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzE1MjYgPGlucHV0IGxpc3Q+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChrZXkgPT09ICdsaXN0JyAmJiBlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gIzI3NjYgPHRleHRhcmVhIHR5cGU+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChrZXkgPT09ICd0eXBlJyAmJiBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gbmF0aXZlIG9uY2xpY2sgd2l0aCBzdHJpbmcgdmFsdWUsIG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxuICAgIGlmIChuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5IGluIGVsO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZHJhdGUpIHtcbiAgICBjb25zdCBDb21wID0gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMpO1xuICAgIGNsYXNzIFZ1ZUN1c3RvbUVsZW1lbnQgZXh0ZW5kcyBWdWVFbGVtZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoaW5pdGlhbFByb3BzKSB7XG4gICAgICAgICAgICBzdXBlcihDb21wLCBpbml0aWFsUHJvcHMsIGh5ZHJhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFZ1ZUN1c3RvbUVsZW1lbnQuZGVmID0gQ29tcDtcbiAgICByZXR1cm4gVnVlQ3VzdG9tRWxlbWVudDtcbn1cbmNvbnN0IGRlZmluZVNTUkN1c3RvbUVsZW1lbnQgPSAoKG9wdGlvbnMpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGRlZmluZUN1c3RvbUVsZW1lbnQob3B0aW9ucywgaHlkcmF0ZSk7XG59KTtcbmNvbnN0IEJhc2VDbGFzcyA9ICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gSFRNTEVsZW1lbnQgOiBjbGFzcyB7XG59KTtcbmNsYXNzIFZ1ZUVsZW1lbnQgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKF9kZWYsIF9wcm9wcyA9IHt9LCBoeWRyYXRlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2RlZiA9IF9kZWY7XG4gICAgICAgIHRoaXMuX3Byb3BzID0gX3Byb3BzO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9udW1iZXJQcm9wcyA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QgJiYgaHlkcmF0ZSkge1xuICAgICAgICAgICAgaHlkcmF0ZSh0aGlzLl9jcmVhdGVWTm9kZSgpLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgICAgICB3YXJuKGBDdXN0b20gZWxlbWVudCBoYXMgcHJlLXJlbmRlcmVkIGRlY2xhcmF0aXZlIHNoYWRvdyByb290IGJ1dCBpcyBub3QgYCArXG4gICAgICAgICAgICAgICAgICAgIGBkZWZpbmVkIGFzIGh5ZHJhdGFibGUuIFVzZSBcXGBkZWZpbmVTU1JDdXN0b21FbGVtZW50XFxgLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yIHN5bmMgY29tcG9uZW50IGRlZnMgd2UgY2FuIGltbWVkaWF0ZWx5IHJlc29sdmUgcHJvcHNcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlUHJvcHModGhpcy5fZGVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlRGVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcihudWxsLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJlc29sdmUgaW5uZXIgY29tcG9uZW50IGRlZmluaXRpb24gKGhhbmRsZSBwb3NzaWJsZSBhc3luYyBjb21wb25lbnQpXG4gICAgICovXG4gICAgX3Jlc29sdmVEZWYoKSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgLy8gc2V0IGluaXRpYWwgYXR0cnNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX3NldEF0dHIodGhpcy5hdHRyaWJ1dGVzW2ldLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdhdGNoIGZ1dHVyZSBhdHRyIGNoYW5nZXNcbiAgICAgICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25zID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbSBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBdHRyKG0uYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLm9ic2VydmUodGhpcywgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgICAgICBjb25zdCByZXNvbHZlID0gKGRlZiwgaXNBc3luYyA9IGZhbHNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHByb3BzLCBzdHlsZXMgfSA9IGRlZjtcbiAgICAgICAgICAgIC8vIGNhc3QgTnVtYmVyLXR5cGUgcHJvcHMgc2V0IGJlZm9yZSByZXNvbHZlXG4gICAgICAgICAgICBsZXQgbnVtYmVyUHJvcHM7XG4gICAgICAgICAgICBpZiAocHJvcHMgJiYgIWlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gcHJvcHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdCA9PT0gTnVtYmVyIHx8IChvcHQgJiYgb3B0LnR5cGUgPT09IE51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9wc1trZXldID0gdG9OdW1iZXIodGhpcy5fcHJvcHNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAobnVtYmVyUHJvcHMgfHwgKG51bWJlclByb3BzID0gT2JqZWN0LmNyZWF0ZShudWxsKSkpW2NhbWVsaXplJDEoa2V5KV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudW1iZXJQcm9wcztcbiAgICAgICAgICAgIGlmIChpc0FzeW5jKSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmaW5pbmcgZ2V0dGVyL3NldHRlcnMgb24gcHJvdG90eXBlXG4gICAgICAgICAgICAgICAgLy8gZm9yIHN5bmMgZGVmcywgdGhpcyBhbHJlYWR5IGhhcHBlbmVkIGluIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVQcm9wcyhkZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXBwbHkgQ1NTXG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlcyhzdHlsZXMpO1xuICAgICAgICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhc3luY0RlZiA9IHRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyO1xuICAgICAgICBpZiAoYXN5bmNEZWYpIHtcbiAgICAgICAgICAgIGFzeW5jRGVmKCkudGhlbihkZWYgPT4gcmVzb2x2ZShkZWYsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5fZGVmKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVzb2x2ZVByb3BzKGRlZikge1xuICAgICAgICBjb25zdCB7IHByb3BzIH0gPSBkZWY7XG4gICAgICAgIGNvbnN0IGRlY2xhcmVkUHJvcEtleXMgPSBpc0FycmF5KHByb3BzKSA/IHByb3BzIDogT2JqZWN0LmtleXMocHJvcHMgfHwge30pO1xuICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgcHJvcHMgc2V0IHByZS11cGdyYWRlIG9yIGNvbm5lY3RcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcykpIHtcbiAgICAgICAgICAgIGlmIChrZXlbMF0gIT09ICdfJyAmJiBkZWNsYXJlZFByb3BLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdGhpc1trZXldLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVmaW5pbmcgZ2V0dGVyL3NldHRlcnMgb24gcHJvdG90eXBlXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGRlY2xhcmVkUHJvcEtleXMubWFwKGNhbWVsaXplJDEpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcChrZXkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfc2V0QXR0cihrZXkpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgY29uc3QgY2FtZWxLZXkgPSBjYW1lbGl6ZSQxKGtleSk7XG4gICAgICAgIGlmICh0aGlzLl9udW1iZXJQcm9wcyAmJiB0aGlzLl9udW1iZXJQcm9wc1tjYW1lbEtleV0pIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldFByb3AoY2FtZWxLZXksIHZhbHVlLCBmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9nZXRQcm9wKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcHNba2V5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3NldFByb3Aoa2V5LCB2YWwsIHNob3VsZFJlZmxlY3QgPSB0cnVlLCBzaG91bGRVcGRhdGUgPSB0cnVlKSB7XG4gICAgICAgIGlmICh2YWwgIT09IHRoaXMuX3Byb3BzW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3BzW2tleV0gPSB2YWw7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlICYmIHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZWZsZWN0XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVmbGVjdCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksIHZhbCArICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXZhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShoeXBoZW5hdGUoa2V5KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF91cGRhdGUoKSB7XG4gICAgICAgIHJlbmRlcih0aGlzLl9jcmVhdGVWTm9kZSgpLCB0aGlzLnNoYWRvd1Jvb3QpO1xuICAgIH1cbiAgICBfY3JlYXRlVk5vZGUoKSB7XG4gICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodGhpcy5fZGVmLCBleHRlbmQoe30sIHRoaXMuX3Byb3BzKSk7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZub2RlLmNlID0gaW5zdGFuY2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNDRSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gSE1SXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jZVJlbG9hZCA9IG5ld1N0eWxlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHdheXMgcmVzZXQgc3R5bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3R5bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmZvckVhY2gocyA9PiB0aGlzLnNoYWRvd1Jvb3QucmVtb3ZlQ2hpbGQocykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZXMobmV3U3R5bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwYXRjaCA9IChldmVudCwgYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gaW50ZXJjZXB0IGVtaXRcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5lbWl0ID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc3BhdGNoIGJvdGggdGhlIHJhdyBhbmQgaHlwaGVuYXRlZCB2ZXJzaW9ucyBvZiBhbiBldmVudFxuICAgICAgICAgICAgICAgICAgICAvLyB0byBtYXRjaCBWdWUgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZXZlbnQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHlwaGVuYXRlKGV2ZW50KSAhPT0gZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGh5cGhlbmF0ZShldmVudCksIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBsb2NhdGUgbmVhcmVzdCBWdWUgY3VzdG9tIGVsZW1lbnQgcGFyZW50IGZvciBwcm92aWRlL2luamVjdFxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHdoaWxlICgocGFyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ICYmIChwYXJlbnQucGFyZW50Tm9kZSB8fCBwYXJlbnQuaG9zdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBWdWVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQgPSBwYXJlbnQuX2luc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucHJvdmlkZXMgPSBwYXJlbnQuX2luc3RhbmNlLnByb3ZpZGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICB9XG4gICAgX2FwcGx5U3R5bGVzKHN0eWxlcykge1xuICAgICAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgICAgICBzdHlsZXMuZm9yRWFjaChjc3MgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgIHMudGV4dENvbnRlbnQgPSBjc3M7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHMpO1xuICAgICAgICAgICAgICAgIC8vIHJlY29yZCBmb3IgSE1SXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5fc3R5bGVzIHx8ICh0aGlzLl9zdHlsZXMgPSBbXSkpLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVzZUNzc01vZHVsZShuYW1lID0gJyRzdHlsZScpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHVzZUNzc01vZHVsZSBtdXN0IGJlIGNhbGxlZCBpbnNpZGUgc2V0dXAoKWApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2R1bGVzID0gaW5zdGFuY2UudHlwZS5fX2Nzc01vZHVsZXM7XG4gICAgICAgIGlmICghbW9kdWxlcykge1xuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlcyBpbmplY3RlZC5gKTtcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kID0gbW9kdWxlc1tuYW1lXTtcbiAgICAgICAgaWYgKCFtb2QpIHtcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlIG5hbWVkIFwiJHtuYW1lfVwiLmApO1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgU0ZDJ3MgQ1NTIHZhcmlhYmxlIGluamVjdGlvbiBmZWF0dXJlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXNlQ3NzVmFycyhnZXR0ZXIpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcbiAgICAgICAgICAgIHdhcm4oYHVzZUNzc1ZhcnMgaXMgY2FsbGVkIHdpdGhvdXQgY3VycmVudCBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZVRlbGVwb3J0cyA9IChpbnN0YW5jZS51dCA9ICh2YXJzID0gZ2V0dGVyKGluc3RhbmNlLnByb3h5KSkgPT4ge1xuICAgICAgICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFtkYXRhLXYtb3duZXI9XCIke2luc3RhbmNlLnVpZH1cIl1gKSkuZm9yRWFjaChub2RlID0+IHNldFZhcnNPbk5vZGUobm9kZSwgdmFycykpO1xuICAgIH0pO1xuICAgIGNvbnN0IHNldFZhcnMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhcnMgPSBnZXR0ZXIoaW5zdGFuY2UucHJveHkpO1xuICAgICAgICBzZXRWYXJzT25WTm9kZShpbnN0YW5jZS5zdWJUcmVlLCB2YXJzKTtcbiAgICAgICAgdXBkYXRlVGVsZXBvcnRzKHZhcnMpO1xuICAgIH07XG4gICAgd2F0Y2hQb3N0RWZmZWN0KHNldFZhcnMpO1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoc2V0VmFycyk7XG4gICAgICAgIG9iLm9ic2VydmUoaW5zdGFuY2Uuc3ViVHJlZS5lbC5wYXJlbnROb2RlLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICAgICAgb25Vbm1vdW50ZWQoKCkgPT4gb2IuZGlzY29ubmVjdCgpKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZhcnNPblZOb2RlKHZub2RlLCB2YXJzKSB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTaGFwZUZsYWdzLlNVU1BFTlNFICovKSB7XG4gICAgICAgIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2U7XG4gICAgICAgIHZub2RlID0gc3VzcGVuc2UuYWN0aXZlQnJhbmNoO1xuICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiAhc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VmFyc09uVk5vZGUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCB2YXJzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGRyaWxsIGRvd24gSE9DcyB1bnRpbCBpdCdzIGEgbm9uLWNvbXBvbmVudCB2bm9kZVxuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnQpIHtcbiAgICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnQuc3ViVHJlZTtcbiAgICB9XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgLyogU2hhcGVGbGFncy5FTEVNRU5UICovICYmIHZub2RlLmVsKSB7XG4gICAgICAgIHNldFZhcnNPbk5vZGUodm5vZGUuZWwsIHZhcnMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgICB2bm9kZS5jaGlsZHJlbi5mb3JFYWNoKGMgPT4gc2V0VmFyc09uVk5vZGUoYywgdmFycykpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBTdGF0aWMpIHtcbiAgICAgICAgbGV0IHsgZWwsIGFuY2hvciB9ID0gdm5vZGU7XG4gICAgICAgIHdoaWxlIChlbCkge1xuICAgICAgICAgICAgc2V0VmFyc09uTm9kZShlbCwgdmFycyk7XG4gICAgICAgICAgICBpZiAoZWwgPT09IGFuY2hvcilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGVsID0gZWwubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzZXRWYXJzT25Ob2RlKGVsLCB2YXJzKSB7XG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhcnMpIHtcbiAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KGAtLSR7a2V5fWAsIHZhcnNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG5jb25zdCBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcbi8vIERPTSBUcmFuc2l0aW9uIGlzIGEgaGlnaGVyLW9yZGVyLWNvbXBvbmVudCBiYXNlZCBvbiB0aGUgcGxhdGZvcm0tYWdub3N0aWNcbi8vIGJhc2UgVHJhbnNpdGlvbiBjb21wb25lbnQsIHdpdGggRE9NLXNwZWNpZmljIGxvZ2ljLlxuY29uc3QgVHJhbnNpdGlvbiA9IChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpO1xuVHJhbnNpdGlvbi5kaXNwbGF5TmFtZSA9ICdUcmFuc2l0aW9uJztcbmNvbnN0IERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjc3M6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcbiAgICBlbnRlckZyb21DbGFzczogU3RyaW5nLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgICBhcHBlYXJGcm9tQ2xhc3M6IFN0cmluZyxcbiAgICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgICBsZWF2ZUZyb21DbGFzczogU3RyaW5nLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xufTtcbmNvbnN0IFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSAoVHJhbnNpdGlvbi5wcm9wcyA9XG4gICAgLyojX19QVVJFX18qLyBleHRlbmQoe30sIEJhc2VUcmFuc2l0aW9uLnByb3BzLCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSk7XG4vKipcbiAqICMzMjI3IEluY29taW5nIGhvb2tzIG1heSBiZSBtZXJnZWQgaW50byBhcnJheXMgd2hlbiB3cmFwcGluZyBUcmFuc2l0aW9uXG4gKiB3aXRoIGN1c3RvbSBIT0NzLlxuICovXG5jb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzID0gW10pID0+IHtcbiAgICBpZiAoaXNBcnJheShob29rKSkge1xuICAgICAgICBob29rLmZvckVhY2goaCA9PiBoKC4uLmFyZ3MpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaG9vaykge1xuICAgICAgICBob29rKC4uLmFyZ3MpO1xuICAgIH1cbn07XG4vKipcbiAqIENoZWNrIGlmIGEgaG9vayBleHBlY3RzIGEgY2FsbGJhY2sgKDJuZCBhcmcpLCB3aGljaCBtZWFucyB0aGUgdXNlclxuICogaW50ZW5kcyB0byBleHBsaWNpdGx5IGNvbnRyb2wgdGhlIGVuZCBvZiB0aGUgdHJhbnNpdGlvbi5cbiAqL1xuY29uc3QgaGFzRXhwbGljaXRDYWxsYmFjayA9IChob29rKSA9PiB7XG4gICAgcmV0dXJuIGhvb2tcbiAgICAgICAgPyBpc0FycmF5KGhvb2spXG4gICAgICAgICAgICA/IGhvb2suc29tZShoID0+IGgubGVuZ3RoID4gMSlcbiAgICAgICAgICAgIDogaG9vay5sZW5ndGggPiAxXG4gICAgICAgIDogZmFsc2U7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcykge1xuICAgIGNvbnN0IGJhc2VQcm9wcyA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSkge1xuICAgICAgICAgICAgYmFzZVByb3BzW2tleV0gPSByYXdQcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyYXdQcm9wcy5jc3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBiYXNlUHJvcHM7XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZSA9ICd2JywgdHlwZSwgZHVyYXRpb24sIGVudGVyRnJvbUNsYXNzID0gYCR7bmFtZX0tZW50ZXItZnJvbWAsIGVudGVyQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1hY3RpdmVgLCBlbnRlclRvQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci10b2AsIGFwcGVhckZyb21DbGFzcyA9IGVudGVyRnJvbUNsYXNzLCBhcHBlYXJBY3RpdmVDbGFzcyA9IGVudGVyQWN0aXZlQ2xhc3MsIGFwcGVhclRvQ2xhc3MgPSBlbnRlclRvQ2xhc3MsIGxlYXZlRnJvbUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtZnJvbWAsIGxlYXZlQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1hY3RpdmVgLCBsZWF2ZVRvQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS10b2AgfSA9IHJhd1Byb3BzO1xuICAgIGNvbnN0IGR1cmF0aW9ucyA9IG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICBjb25zdCBlbnRlckR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1swXTtcbiAgICBjb25zdCBsZWF2ZUR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1sxXTtcbiAgICBjb25zdCB7IG9uQmVmb3JlRW50ZXIsIG9uRW50ZXIsIG9uRW50ZXJDYW5jZWxsZWQsIG9uTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyID0gb25CZWZvcmVFbnRlciwgb25BcHBlYXIgPSBvbkVudGVyLCBvbkFwcGVhckNhbmNlbGxlZCA9IG9uRW50ZXJDYW5jZWxsZWQgfSA9IGJhc2VQcm9wcztcbiAgICBjb25zdCBmaW5pc2hFbnRlciA9IChlbCwgaXNBcHBlYXIsIGRvbmUpID0+IHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyQWN0aXZlQ2xhc3MgOiBlbnRlckFjdGl2ZUNsYXNzKTtcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XG4gICAgfTtcbiAgICBjb25zdCBmaW5pc2hMZWF2ZSA9IChlbCwgZG9uZSkgPT4ge1xuICAgICAgICBlbC5faXNMZWF2aW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICAgIGRvbmUgJiYgZG9uZSgpO1xuICAgIH07XG4gICAgY29uc3QgbWFrZUVudGVySG9vayA9IChpc0FwcGVhcikgPT4ge1xuICAgICAgICByZXR1cm4gKGVsLCBkb25lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBob29rID0gaXNBcHBlYXIgPyBvbkFwcGVhciA6IG9uRW50ZXI7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoRW50ZXIoZWwsIGlzQXBwZWFyLCBkb25lKTtcbiAgICAgICAgICAgIGNhbGxIb29rKGhvb2ssIFtlbCwgcmVzb2x2ZV0pO1xuICAgICAgICAgICAgbmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyRnJvbUNsYXNzIDogZW50ZXJGcm9tQ2xhc3MpO1xuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0V4cGxpY2l0Q2FsbGJhY2soaG9vaykpIHtcbiAgICAgICAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBlbnRlckR1cmF0aW9uLCByZXNvbHZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBleHRlbmQoYmFzZVByb3BzLCB7XG4gICAgICAgIG9uQmVmb3JlRW50ZXIoZWwpIHtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlRW50ZXIsIFtlbF0pO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckZyb21DbGFzcyk7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUFwcGVhcihlbCkge1xuICAgICAgICAgICAgY2FsbEhvb2sob25CZWZvcmVBcHBlYXIsIFtlbF0pO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRW50ZXI6IG1ha2VFbnRlckhvb2soZmFsc2UpLFxuICAgICAgICBvbkFwcGVhcjogbWFrZUVudGVySG9vayh0cnVlKSxcbiAgICAgICAgb25MZWF2ZShlbCwgZG9uZSkge1xuICAgICAgICAgICAgZWwuX2lzTGVhdmluZyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoTGVhdmUoZWwsIGRvbmUpO1xuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XG4gICAgICAgICAgICAvLyBmb3JjZSByZWZsb3cgc28gKi1sZWF2ZS1mcm9tIGNsYXNzZXMgaW1tZWRpYXRlbHkgdGFrZSBlZmZlY3QgKCMyNTkzKVxuICAgICAgICAgICAgZm9yY2VSZWZsb3coKTtcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZWwuX2lzTGVhdmluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW5jZWxsZWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNFeHBsaWNpdENhbGxiYWNrKG9uTGVhdmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgbGVhdmVEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlLCBbZWwsIHJlc29sdmVdKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25FbnRlckNhbmNlbGxlZChlbCkge1xuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIGZhbHNlKTtcbiAgICAgICAgICAgIGNhbGxIb29rKG9uRW50ZXJDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkFwcGVhckNhbmNlbGxlZChlbCkge1xuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIHRydWUpO1xuICAgICAgICAgICAgY2FsbEhvb2sob25BcHBlYXJDYW5jZWxsZWQsIFtlbF0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkKGVsKSB7XG4gICAgICAgICAgICBmaW5pc2hMZWF2ZShlbCk7XG4gICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoZHVyYXRpb24pKSB7XG4gICAgICAgIHJldHVybiBbTnVtYmVyT2YoZHVyYXRpb24uZW50ZXIpLCBOdW1iZXJPZihkdXJhdGlvbi5sZWF2ZSldO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbiA9IE51bWJlck9mKGR1cmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtuLCBuXTtcbiAgICB9XG59XG5mdW5jdGlvbiBOdW1iZXJPZih2YWwpIHtcbiAgICBjb25zdCByZXMgPSB0b051bWJlcih2YWwpO1xuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXG4gICAgICAgIHZhbGlkYXRlRHVyYXRpb24ocmVzKTtcbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVEdXJhdGlvbih2YWwpIHtcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgd2FybihgPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIGAgK1xuICAgICAgICAgICAgYGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbCl9LmApO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBOYU4gLSBgICtcbiAgICAgICAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcbiAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBlbC5jbGFzc0xpc3QuYWRkKGMpKTtcbiAgICAoZWwuX3Z0YyB8fFxuICAgICAgICAoZWwuX3Z0YyA9IG5ldyBTZXQoKSkpLmFkZChjbHMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcbiAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcbiAgICBjb25zdCB7IF92dGMgfSA9IGVsO1xuICAgIGlmIChfdnRjKSB7XG4gICAgICAgIF92dGMuZGVsZXRlKGNscyk7XG4gICAgICAgIGlmICghX3Z0Yy5zaXplKSB7XG4gICAgICAgICAgICBlbC5fdnRjID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gbmV4dEZyYW1lKGNiKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKTtcbiAgICB9KTtcbn1cbmxldCBlbmRJZCA9IDA7XG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIGV4cGVjdGVkVHlwZSwgZXhwbGljaXRUaW1lb3V0LCByZXNvbHZlKSB7XG4gICAgY29uc3QgaWQgPSAoZWwuX2VuZElkID0gKytlbmRJZCk7XG4gICAgY29uc3QgcmVzb2x2ZUlmTm90U3RhbGUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChpZCA9PT0gZWwuX2VuZElkKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChleHBsaWNpdFRpbWVvdXQpIHtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZUlmTm90U3RhbGUsIGV4cGxpY2l0VGltZW91dCk7XG4gICAgfVxuICAgIGNvbnN0IHsgdHlwZSwgdGltZW91dCwgcHJvcENvdW50IH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICB9XG4gICAgY29uc3QgZW5kRXZlbnQgPSB0eXBlICsgJ2VuZCc7XG4gICAgbGV0IGVuZGVkID0gMDtcbiAgICBjb25zdCBlbmQgPSAoKSA9PiB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcbiAgICAgICAgcmVzb2x2ZUlmTm90U3RhbGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uRW5kID0gKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCAmJiArK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICAgICAgZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgICAgICAgIGVuZCgpO1xuICAgICAgICB9XG4gICAgfSwgdGltZW91dCArIDEpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICAgIGNvbnN0IGdldFN0eWxlUHJvcGVydGllcyA9IChrZXkpID0+IChzdHlsZXNba2V5XSB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgY29uc3QgdHJhbnNpdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OfURlbGF5YCk7XG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OfUR1cmF0aW9uYCk7XG4gICAgY29uc3QgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICAgIGNvbnN0IGFuaW1hdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtBTklNQVRJT059RGVsYXlgKTtcbiAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7QU5JTUFUSU9OfUR1cmF0aW9uYCk7XG4gICAgY29uc3QgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuICAgIGxldCB0eXBlID0gbnVsbDtcbiAgICBsZXQgdGltZW91dCA9IDA7XG4gICAgbGV0IHByb3BDb3VudCA9IDA7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgICAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgICAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICAgICAgdHlwZSA9XG4gICAgICAgICAgICB0aW1lb3V0ID4gMFxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgICAgICAgICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICAgICAgICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICAgICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICAgICAgOiAwO1xuICAgIH1cbiAgICBjb25zdCBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgICAgIC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS8udGVzdChnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTn1Qcm9wZXJ0eWApLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRpbWVvdXQsXG4gICAgICAgIHByb3BDb3VudCxcbiAgICAgICAgaGFzVHJhbnNmb3JtXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFRpbWVvdXQoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXgoLi4uZHVyYXRpb25zLm1hcCgoZCwgaSkgPT4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKSkpO1xufVxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXJcbi8vIG51bWJlcnMgaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93blxuLy8gKGkuZS4gYWN0aW5nIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMocykge1xuICAgIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMDtcbn1cbi8vIHN5bmNocm9ub3VzbHkgZm9yY2UgbGF5b3V0IHRvIHB1dCBlbGVtZW50cyBpbnRvIGEgY2VydGFpbiBzdGF0ZVxuZnVuY3Rpb24gZm9yY2VSZWZsb3coKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xufVxuXG5jb25zdCBwb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBuZXdQb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBUcmFuc2l0aW9uR3JvdXBJbXBsID0ge1xuICAgIG5hbWU6ICdUcmFuc2l0aW9uR3JvdXAnLFxuICAgIHByb3BzOiAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycywge1xuICAgICAgICB0YWc6IFN0cmluZyxcbiAgICAgICAgbW92ZUNsYXNzOiBTdHJpbmdcbiAgICB9KSxcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgICAgIGxldCBwcmV2Q2hpbGRyZW47XG4gICAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgICAgb25VcGRhdGVkKCgpID0+IHtcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGlzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYWZ0ZXIgaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1vdmVDbGFzcyA9IHByb3BzLm1vdmVDbGFzcyB8fCBgJHtwcm9wcy5uYW1lIHx8ICd2J30tbW92ZWA7XG4gICAgICAgICAgICBpZiAoIWhhc0NTU1RyYW5zZm9ybShwcmV2Q2hpbGRyZW5bMF0uZWwsIGluc3RhbmNlLnZub2RlLmVsLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgICAgICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IG1vdmVkQ2hpbGRyZW4gPSBwcmV2Q2hpbGRyZW4uZmlsdGVyKGFwcGx5VHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgICAgICAgICBmb3JjZVJlZmxvdygpO1xuICAgICAgICAgICAgbW92ZWRDaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gYy5lbDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IChlbC5fbW92ZUNiID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgICAgICAgY29uc3QgY3NzVHJhbnNpdGlvblByb3BzID0gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcyk7XG4gICAgICAgICAgICBsZXQgdGFnID0gcmF3UHJvcHMudGFnIHx8IEZyYWdtZW50O1xuICAgICAgICAgICAgcHJldkNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgICAgICBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgPyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpKSA6IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYDxUcmFuc2l0aW9uR3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJldkNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoY2hpbGQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKSk7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uTWFwLnNldChjaGlsZCwgY2hpbGQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0YWcsIG51bGwsIGNoaWxkcmVuKTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuY29uc3QgVHJhbnNpdGlvbkdyb3VwID0gVHJhbnNpdGlvbkdyb3VwSW1wbDtcbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzKGMpIHtcbiAgICBjb25zdCBlbCA9IGMuZWw7XG4gICAgaWYgKGVsLl9tb3ZlQ2IpIHtcbiAgICAgICAgZWwuX21vdmVDYigpO1xuICAgIH1cbiAgICBpZiAoZWwuX2VudGVyQ2IpIHtcbiAgICAgICAgZWwuX2VudGVyQ2IoKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbihjKSB7XG4gICAgbmV3UG9zaXRpb25NYXAuc2V0KGMsIGMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xufVxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKSB7XG4gICAgY29uc3Qgb2xkUG9zID0gcG9zaXRpb25NYXAuZ2V0KGMpO1xuICAgIGNvbnN0IG5ld1BvcyA9IG5ld1Bvc2l0aW9uTWFwLmdldChjKTtcbiAgICBjb25zdCBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gICAgY29uc3QgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgICBpZiAoZHggfHwgZHkpIHtcbiAgICAgICAgY29uc3QgcyA9IGMuZWwuc3R5bGU7XG4gICAgICAgIHMudHJhbnNmb3JtID0gcy53ZWJraXRUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZHh9cHgsJHtkeX1weClgO1xuICAgICAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhc0NTU1RyYW5zZm9ybShlbCwgcm9vdCwgbW92ZUNsYXNzKSB7XG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXG4gICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xuICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgY29uc3QgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICBpZiAoZWwuX3Z0Yykge1xuICAgICAgICBlbC5fdnRjLmZvckVhY2goY2xzID0+IHtcbiAgICAgICAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbW92ZUNsYXNzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LmFkZChjKSk7XG4gICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBjb25zdCBjb250YWluZXIgPSAocm9vdC5ub2RlVHlwZSA9PT0gMSA/IHJvb3QgOiByb290LnBhcmVudE5vZGUpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgY29uc3QgeyBoYXNUcmFuc2Zvcm0gfSA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgIHJldHVybiBoYXNUcmFuc2Zvcm07XG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcbiAgICBjb25zdCBmbiA9IHZub2RlLnByb3BzWydvblVwZGF0ZTptb2RlbFZhbHVlJ10gfHxcbiAgICAgICAgKGZhbHNlICk7XG4gICAgcmV0dXJuIGlzQXJyYXkoZm4pID8gdmFsdWUgPT4gaW52b2tlQXJyYXlGbnMoZm4sIHZhbHVlKSA6IGZuO1xufTtcbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlKSB7XG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQoZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgIHRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcpKTtcbiAgICB9XG59XG4vLyBXZSBhcmUgZXhwb3J0aW5nIHRoZSB2LW1vZGVsIHJ1bnRpbWUgZGlyZWN0bHkgYXMgdm5vZGUgaG9va3Mgc28gdGhhdCBpdCBjYW5cbi8vIGJlIHRyZWUtc2hha2VuIGluIGNhc2Ugdi1tb2RlbCBpcyBuZXZlciB1c2VkLlxuY29uc3Qgdk1vZGVsVGV4dCA9IHtcbiAgICBjcmVhdGVkKGVsLCB7IG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIGNvbnN0IGNhc3RUb051bWJlciA9IG51bWJlciB8fCAodm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSA9PT0gJ251bWJlcicpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBsYXp5ID8gJ2NoYW5nZScgOiAnaW5wdXQnLCBlID0+IHtcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jb21wb3NpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGRvbVZhbHVlID0gZWwudmFsdWU7XG4gICAgICAgICAgICBpZiAodHJpbSkge1xuICAgICAgICAgICAgICAgIGRvbVZhbHVlID0gZG9tVmFsdWUudHJpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhc3RUb051bWJlcikge1xuICAgICAgICAgICAgICAgIGRvbVZhbHVlID0gdG9OdW1iZXIoZG9tVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwuX2Fzc2lnbihkb21WYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHJpbSkge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IGVsLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbGF6eSkge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gc2V0IHZhbHVlIG9uIG1vdW50ZWQgc28gaXQncyBhZnRlciBtaW4vbWF4IGZvciB0eXBlPVwicmFuZ2VcIlxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgICAgICBlbC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICAvLyBhdm9pZCBjbGVhcmluZyB1bnJlc29sdmVkIHRleHQuICMyMzAyXG4gICAgICAgIGlmIChlbC5jb21wb3NpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCAmJiBlbC50eXBlICE9PSAncmFuZ2UnKSB7XG4gICAgICAgICAgICBpZiAobGF6eSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmltICYmIGVsLnZhbHVlLnRyaW0oKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG51bWJlciB8fCBlbC50eXBlID09PSAnbnVtYmVyJykgJiYgdG9OdW1iZXIoZWwudmFsdWUpID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgICAgICBpZiAoZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBlbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufTtcbmNvbnN0IHZNb2RlbENoZWNrYm94ID0ge1xuICAgIC8vICM0MDk2IGFycmF5IGNoZWNrYm94ZXMgbmVlZCB0byBiZSBkZWVwIHRyYXZlcnNlZFxuICAgIGRlZXA6IHRydWUsXG4gICAgY3JlYXRlZChlbCwgXywgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9kZWxWYWx1ZSA9IGVsLl9tb2RlbFZhbHVlO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudFZhbHVlID0gZ2V0VmFsdWUoZWwpO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IGVsLmNoZWNrZWQ7XG4gICAgICAgICAgICBjb25zdCBhc3NpZ24gPSBlbC5fYXNzaWduO1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGxvb3NlSW5kZXhPZihtb2RlbFZhbHVlLCBlbGVtZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gaW5kZXggIT09IC0xO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkICYmICFmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ24obW9kZWxWYWx1ZS5jb25jYXQoZWxlbWVudFZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFjaGVja2VkICYmIGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkID0gWy4uLm1vZGVsVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICBhc3NpZ24oZmlsdGVyZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU2V0KG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xvbmVkID0gbmV3IFNldChtb2RlbFZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuYWRkKGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuZGVsZXRlKGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFzc2lnbihjbG9uZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXNzaWduKGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvLyBzZXQgaW5pdGlhbCBjaGVja2VkIG9uIG1vdW50IHRvIHdhaXQgZm9yIHRydWUtdmFsdWUvZmFsc2UtdmFsdWVcbiAgICBtb3VudGVkOiBzZXRDaGVja2VkLFxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgICAgICBzZXRDaGVja2VkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIHNldENoZWNrZWQoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XG4gICAgZWwuX21vZGVsVmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpID4gLTE7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICBlbC5jaGVja2VkID0gdmFsdWUuaGFzKHZub2RlLnByb3BzLnZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCBnZXRDaGVja2JveFZhbHVlKGVsLCB0cnVlKSk7XG4gICAgfVxufVxuY29uc3Qgdk1vZGVsUmFkaW8gPSB7XG4gICAgY3JlYXRlZChlbCwgeyB2YWx1ZSB9LCB2bm9kZSkge1xuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbC5fYXNzaWduKGdldFZhbHVlKGVsKSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3Qgdk1vZGVsU2VsZWN0ID0ge1xuICAgIC8vIDxzZWxlY3QgbXVsdGlwbGU+IHZhbHVlIG5lZWQgdG8gYmUgZGVlcCB0cmF2ZXJzZWRcbiAgICBkZWVwOiB0cnVlLFxuICAgIGNyZWF0ZWQoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgICAgICBjb25zdCBpc1NldE1vZGVsID0gaXNTZXQodmFsdWUpO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gICAgICAgICAgICAgICAgLmNhbGwoZWwub3B0aW9ucywgKG8pID0+IG8uc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgLm1hcCgobykgPT4gbnVtYmVyID8gdG9OdW1iZXIoZ2V0VmFsdWUobykpIDogZ2V0VmFsdWUobykpO1xuICAgICAgICAgICAgZWwuX2Fzc2lnbihlbC5tdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gaXNTZXRNb2RlbFxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBTZXQoc2VsZWN0ZWRWYWwpXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxcbiAgICAgICAgICAgICAgICA6IHNlbGVjdGVkVmFsWzBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICB9LFxuICAgIC8vIHNldCB2YWx1ZSBpbiBtb3VudGVkICYgdXBkYXRlZCBiZWNhdXNlIDxzZWxlY3Q+IHJlbGllcyBvbiBpdHMgY2hpbGRyZW5cbiAgICAvLyA8b3B0aW9uPnMuXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUoZWwsIF9iaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlIH0pIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKSB7XG4gICAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICAgIGlmIChpc011bHRpcGxlICYmICFpc0FycmF5KHZhbHVlKSAmJiAhaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICAgICAgd2FybihgPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPiBleHBlY3RzIGFuIEFycmF5IG9yIFNldCB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGAgK1xuICAgICAgICAgICAgICAgIGBidXQgZ290ICR7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSl9LmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xuICAgICAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBvcHRpb25WYWx1ZSkgPiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSlcbiAgICAgICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXNNdWx0aXBsZSAmJiBlbC5zZWxlY3RlZEluZGV4ICE9PSAtMSkge1xuICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgfVxufVxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIHNldCB2aWEgOnZhbHVlIGJpbmRpbmdzXG5mdW5jdGlvbiBnZXRWYWx1ZShlbCkge1xuICAgIHJldHVybiAnX3ZhbHVlJyBpbiBlbCA/IGVsLl92YWx1ZSA6IGVsLnZhbHVlO1xufVxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIGZvciB0cnVlLXZhbHVlIGFuZCBmYWxzZS12YWx1ZSBzZXQgdmlhIDp0cnVlLXZhbHVlIG9yIDpmYWxzZS12YWx1ZSBiaW5kaW5nc1xuZnVuY3Rpb24gZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkge1xuICAgIGNvbnN0IGtleSA9IGNoZWNrZWQgPyAnX3RydWVWYWx1ZScgOiAnX2ZhbHNlVmFsdWUnO1xuICAgIHJldHVybiBrZXkgaW4gZWwgPyBlbFtrZXldIDogY2hlY2tlZDtcbn1cbmNvbnN0IHZNb2RlbER5bmFtaWMgPSB7XG4gICAgY3JlYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdjcmVhdGVkJyk7XG4gICAgfSxcbiAgICBtb3VudGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgJ21vdW50ZWQnKTtcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsICd1cGRhdGVkJyk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljTW9kZWwodGFnTmFtZSwgdHlwZSkge1xuICAgIHN3aXRjaCAodGFnTmFtZSkge1xuICAgICAgICBjYXNlICdTRUxFQ1QnOlxuICAgICAgICAgICAgcmV0dXJuIHZNb2RlbFNlbGVjdDtcbiAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxuICAgICAgICAgICAgcmV0dXJuIHZNb2RlbFRleHQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2TW9kZWxDaGVja2JveDtcbiAgICAgICAgICAgICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2TW9kZWxSYWRpbztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdk1vZGVsVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XG4gICAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoZWwudGFnTmFtZSwgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSk7XG4gICAgY29uc3QgZm4gPSBtb2RlbFRvVXNlW2hvb2tdO1xuICAgIGZuICYmIGZuKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKTtcbn1cbi8vIFNTUiB2bm9kZSB0cmFuc2Zvcm1zLCBvbmx5IHVzZWQgd2hlbiB1c2VyIGluY2x1ZGVzIGNsaWVudC1vcmllbnRlZCByZW5kZXJcbi8vIGZ1bmN0aW9uIGluIFNTUlxuZnVuY3Rpb24gaW5pdFZNb2RlbEZvclNTUigpIHtcbiAgICB2TW9kZWxUZXh0LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSkgPT4gKHsgdmFsdWUgfSk7XG4gICAgdk1vZGVsUmFkaW8uZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgICAgICBpZiAodm5vZGUucHJvcHMgJiYgbG9vc2VFcXVhbCh2bm9kZS5wcm9wcy52YWx1ZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZNb2RlbENoZWNrYm94LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSwgdm5vZGUpID0+IHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodm5vZGUucHJvcHMgJiYgbG9vc2VJbmRleE9mKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZNb2RlbER5bmFtaWMuZ2V0U1NSUHJvcHMgPSAoYmluZGluZywgdm5vZGUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2bm9kZS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsVG9Vc2UgPSByZXNvbHZlRHluYW1pY01vZGVsKFxuICAgICAgICAvLyByZXNvbHZlRHluYW1pY01vZGVsIGV4cGVjdHMgYW4gdXBwZXJjYXNlIHRhZyBuYW1lLCBidXQgdm5vZGUudHlwZSBpcyBsb3dlcmNhc2VcbiAgICAgICAgdm5vZGUudHlwZS50b1VwcGVyQ2FzZSgpLCB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlKTtcbiAgICAgICAgaWYgKG1vZGVsVG9Vc2UuZ2V0U1NSUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbFRvVXNlLmdldFNTUlByb3BzKGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmNvbnN0IHN5c3RlbU1vZGlmaWVycyA9IFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddO1xuY29uc3QgbW9kaWZpZXJHdWFyZHMgPSB7XG4gICAgc3RvcDogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxuICAgIHByZXZlbnQ6IGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxuICAgIHNlbGY6IGUgPT4gZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCxcbiAgICBjdHJsOiBlID0+ICFlLmN0cmxLZXksXG4gICAgc2hpZnQ6IGUgPT4gIWUuc2hpZnRLZXksXG4gICAgYWx0OiBlID0+ICFlLmFsdEtleSxcbiAgICBtZXRhOiBlID0+ICFlLm1ldGFLZXksXG4gICAgbGVmdDogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAwLFxuICAgIG1pZGRsZTogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAxLFxuICAgIHJpZ2h0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDIsXG4gICAgZXhhY3Q6IChlLCBtb2RpZmllcnMpID0+IHN5c3RlbU1vZGlmaWVycy5zb21lKG0gPT4gZVtgJHttfUtleWBdICYmICFtb2RpZmllcnMuaW5jbHVkZXMobSkpXG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XG4gICAgICAgICAgICBpZiAoZ3VhcmQgJiYgZ3VhcmQoZXZlbnQsIG1vZGlmaWVycykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbihldmVudCwgLi4uYXJncyk7XG4gICAgfTtcbn07XG4vLyBLZXB0IGZvciAyLnggY29tcGF0LlxuLy8gTm90ZTogSUUxMSBjb21wYXQgZm9yIGBzcGFjZWJhcmAgYW5kIGBkZWxgIGlzIHJlbW92ZWQgZm9yIG5vdy5cbmNvbnN0IGtleU5hbWVzID0ge1xuICAgIGVzYzogJ2VzY2FwZScsXG4gICAgc3BhY2U6ICcgJyxcbiAgICB1cDogJ2Fycm93LXVwJyxcbiAgICBsZWZ0OiAnYXJyb3ctbGVmdCcsXG4gICAgcmlnaHQ6ICdhcnJvdy1yaWdodCcsXG4gICAgZG93bjogJ2Fycm93LWRvd24nLFxuICAgIGRlbGV0ZTogJ2JhY2tzcGFjZSdcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghKCdrZXknIGluIGV2ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50S2V5ID0gaHlwaGVuYXRlKGV2ZW50LmtleSk7XG4gICAgICAgIGlmIChtb2RpZmllcnMuc29tZShrID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmbihldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuY29uc3QgdlNob3cgPSB7XG4gICAgYmVmb3JlTW91bnQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICAgICAgZWwuX3ZvZCA9IGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHZhbHVlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICAgICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVW5tb3VudChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fdm9kIDogJ25vbmUnO1xufVxuLy8gU1NSIHZub2RlIHRyYW5zZm9ybXMsIG9ubHkgdXNlZCB3aGVuIHVzZXIgaW5jbHVkZXMgY2xpZW50LW9yaWVudGVkIHJlbmRlclxuLy8gZnVuY3Rpb24gaW4gU1NSXG5mdW5jdGlvbiBpbml0VlNob3dGb3JTU1IoKSB7XG4gICAgdlNob3cuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0eWxlOiB7IGRpc3BsYXk6ICdub25lJyB9IH07XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5jb25zdCByZW5kZXJlck9wdGlvbnMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7IHBhdGNoUHJvcCB9LCBub2RlT3BzKTtcbi8vIGxhenkgY3JlYXRlIHRoZSByZW5kZXJlciAtIHRoaXMgbWFrZXMgY29yZSByZW5kZXJlciBsb2dpYyB0cmVlLXNoYWthYmxlXG4vLyBpbiBjYXNlIHRoZSB1c2VyIG9ubHkgaW1wb3J0cyByZWFjdGl2aXR5IHV0aWxpdGllcyBmcm9tIFZ1ZS5cbmxldCByZW5kZXJlcjtcbmxldCBlbmFibGVkSHlkcmF0aW9uID0gZmFsc2U7XG5mdW5jdGlvbiBlbnN1cmVSZW5kZXJlcigpIHtcbiAgICByZXR1cm4gKHJlbmRlcmVyIHx8XG4gICAgICAgIChyZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucykpKTtcbn1cbmZ1bmN0aW9uIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkge1xuICAgIHJlbmRlcmVyID0gZW5hYmxlZEh5ZHJhdGlvblxuICAgICAgICA/IHJlbmRlcmVyXG4gICAgICAgIDogY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKTtcbiAgICBlbmFibGVkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVuZGVyZXI7XG59XG4vLyB1c2UgZXhwbGljaXQgdHlwZSBjYXN0cyBoZXJlIHRvIGF2b2lkIGltcG9ydCgpIGNhbGxzIGluIHJvbGxlZC11cCBkLnRzXG5jb25zdCByZW5kZXIgPSAoKC4uLmFyZ3MpID0+IHtcbiAgICBlbnN1cmVSZW5kZXJlcigpLnJlbmRlciguLi5hcmdzKTtcbn0pO1xuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xuICAgIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuaHlkcmF0ZSguLi5hcmdzKTtcbn0pO1xuY29uc3QgY3JlYXRlQXBwID0gKCguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgYXBwID0gZW5zdXJlUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xuICAgICAgICBpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayhhcHApO1xuICAgIH1cbiAgICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XG4gICAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gYXBwLl9jb21wb25lbnQ7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihjb21wb25lbnQpICYmICFjb21wb25lbnQucmVuZGVyICYmICFjb21wb25lbnQudGVtcGxhdGUpIHtcbiAgICAgICAgICAgIC8vIF9fVU5TQUZFX19cbiAgICAgICAgICAgIC8vIFJlYXNvbjogcG90ZW50aWFsIGV4ZWN1dGlvbiBvZiBKUyBleHByZXNzaW9ucyBpbiBpbi1ET00gdGVtcGxhdGUuXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBtdXN0IG1ha2Ugc3VyZSB0aGUgaW4tRE9NIHRlbXBsYXRlIGlzIHRydXN0ZWQuIElmIGl0J3NcbiAgICAgICAgICAgIC8vIHJlbmRlcmVkIGJ5IHRoZSBzZXJ2ZXIsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgbm90IGNvbnRhaW4gYW55IHVzZXIgZGF0YS5cbiAgICAgICAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZSA9IGNvbnRhaW5lci5pbm5lckhUTUw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2xlYXIgY29udGVudCBiZWZvcmUgbW91bnRpbmdcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lciwgZmFsc2UsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xuICAgICAgICBpZiAoY29udGFpbmVyIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgndi1jbG9haycpO1xuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12LWFwcCcsICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xufSk7XG5jb25zdCBjcmVhdGVTU1JBcHAgPSAoKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XG4gICAgICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gICAgfVxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XG4gICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBtb3VudChjb250YWluZXIsIHRydWUsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xufSk7XG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcbiAgICAvLyBJbmplY3QgYGlzTmF0aXZlVGFnYFxuICAgIC8vIHRoaXMgaXMgdXNlZCBmb3IgY29tcG9uZW50IG5hbWUgdmFsaWRhdGlvbiAoZGV2IG9ubHkpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc05hdGl2ZVRhZycsIHtcbiAgICAgICAgdmFsdWU6ICh0YWcpID0+IGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHVGFnKHRhZyksXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xufVxuLy8gZGV2IG9ubHlcbmZ1bmN0aW9uIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCkge1xuICAgIGlmIChpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gYXBwLmNvbmZpZy5pc0N1c3RvbUVsZW1lbnQ7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCAnaXNDdXN0b21FbGVtZW50Jywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0N1c3RvbUVsZW1lbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KCkge1xuICAgICAgICAgICAgICAgIHdhcm4oYFRoZSBcXGBpc0N1c3RvbUVsZW1lbnRcXGAgY29uZmlnIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBVc2UgYCArXG4gICAgICAgICAgICAgICAgICAgIGBcXGBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50XFxgIGluc3RlYWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBhcHAuY29uZmlnLmNvbXBpbGVyT3B0aW9ucztcbiAgICAgICAgY29uc3QgbXNnID0gYFRoZSBcXGBjb21waWxlck9wdGlvbnNcXGAgY29uZmlnIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIGAgK1xuICAgICAgICAgICAgYGEgYnVpbGQgb2YgVnVlLmpzIHRoYXQgaW5jbHVkZXMgdGhlIHJ1bnRpbWUgY29tcGlsZXIgKGFrYSBcImZ1bGwgYnVpbGRcIikuIGAgK1xuICAgICAgICAgICAgYFNpbmNlIHlvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCwgXFxgY29tcGlsZXJPcHRpb25zXFxgIGAgK1xuICAgICAgICAgICAgYG11c3QgYmUgcGFzc2VkIHRvIFxcYEB2dWUvY29tcGlsZXItZG9tXFxgIGluIHRoZSBidWlsZCBzZXR1cCBpbnN0ZWFkLlxcbmAgK1xuICAgICAgICAgICAgYC0gRm9yIHZ1ZS1sb2FkZXI6IHBhc3MgaXQgdmlhIHZ1ZS1sb2FkZXIncyBcXGBjb21waWxlck9wdGlvbnNcXGAgbG9hZGVyIG9wdGlvbi5cXG5gICtcbiAgICAgICAgICAgIGAtIEZvciB2dWUtY2xpOiBzZWUgaHR0cHM6Ly9jbGkudnVlanMub3JnL2d1aWRlL3dlYnBhY2suaHRtbCNtb2RpZnlpbmctb3B0aW9ucy1vZi1hLWxvYWRlclxcbmAgK1xuICAgICAgICAgICAgYC0gRm9yIHZpdGU6IHBhc3MgaXQgdmlhIEB2aXRlanMvcGx1Z2luLXZ1ZSBvcHRpb25zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRlL3RyZWUvbWFpbi9wYWNrYWdlcy9wbHVnaW4tdnVlI2V4YW1wbGUtZm9yLXBhc3Npbmctb3B0aW9ucy10by12dWVjb21waWxlci1kb21gO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgJ2NvbXBpbGVyT3B0aW9ucycsIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVyT3B0aW9ucztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgaWYgKGlzU3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFyZXMpIHtcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byBtb3VudCBhcHA6IG1vdW50IHRhcmdldCBzZWxlY3RvciBcIiR7Y29udGFpbmVyfVwiIHJldHVybmVkIG51bGwuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxuICAgICAgICB3aW5kb3cuU2hhZG93Um9vdCAmJlxuICAgICAgICBjb250YWluZXIgaW5zdGFuY2VvZiB3aW5kb3cuU2hhZG93Um9vdCAmJlxuICAgICAgICBjb250YWluZXIubW9kZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgd2FybihgbW91bnRpbmcgb24gYSBTaGFkb3dSb290IHdpdGggXFxge21vZGU6IFwiY2xvc2VkXCJ9XFxgIG1heSBsZWFkIHRvIHVucHJlZGljdGFibGUgYnVnc2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGFpbmVyO1xufVxubGV0IHNzckRpcmVjdGl2ZUluaXRpYWxpemVkID0gZmFsc2U7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBpbml0RGlyZWN0aXZlc0ZvclNTUiA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFzc3JEaXJlY3RpdmVJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgc3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgaW5pdFZNb2RlbEZvclNTUigpO1xuICAgICAgICAgICAgaW5pdFZTaG93Rm9yU1NSKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgO1xuXG5leHBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAsIFZ1ZUVsZW1lbnQsIGNyZWF0ZUFwcCwgY3JlYXRlU1NSQXBwLCBkZWZpbmVDdXN0b21FbGVtZW50LCBkZWZpbmVTU1JDdXN0b21FbGVtZW50LCBoeWRyYXRlLCBpbml0RGlyZWN0aXZlc0ZvclNTUiwgcmVuZGVyLCB1c2VDc3NNb2R1bGUsIHVzZUNzc1ZhcnMsIHZNb2RlbENoZWNrYm94LCB2TW9kZWxEeW5hbWljLCB2TW9kZWxSYWRpbywgdk1vZGVsU2VsZWN0LCB2TW9kZWxUZXh0LCB2U2hvdywgd2l0aEtleXMsIHdpdGhNb2RpZmllcnMgfTtcbiIsIi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqIElNUE9SVEFOVDogYWxsIGNhbGxzIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBwcmVmaXhlZCB3aXRoXG4gKiBcXC9cXCojXFxfXFxfUFVSRVxcX1xcX1xcKlxcL1xuICogU28gdGhhdCByb2xsdXAgY2FuIHRyZWUtc2hha2UgdGhlbSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAoc3RyLCBleHBlY3RzTG93ZXJDYXNlKSB7XG4gICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RzTG93ZXJDYXNlID8gdmFsID0+ICEhbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXSA6IHZhbCA9PiAhIW1hcFt2YWxdO1xufVxuXG4vKipcbiAqIGRldiBvbmx5IGZsYWcgLT4gbmFtZSBtYXBwaW5nXG4gKi9cbmNvbnN0IFBhdGNoRmxhZ05hbWVzID0ge1xuICAgIFsxIC8qIFBhdGNoRmxhZ3MuVEVYVCAqL106IGBURVhUYCxcbiAgICBbMiAvKiBQYXRjaEZsYWdzLkNMQVNTICovXTogYENMQVNTYCxcbiAgICBbNCAvKiBQYXRjaEZsYWdzLlNUWUxFICovXTogYFNUWUxFYCxcbiAgICBbOCAvKiBQYXRjaEZsYWdzLlBST1BTICovXTogYFBST1BTYCxcbiAgICBbMTYgLyogUGF0Y2hGbGFncy5GVUxMX1BST1BTICovXTogYEZVTExfUFJPUFNgLFxuICAgIFszMiAvKiBQYXRjaEZsYWdzLkhZRFJBVEVfRVZFTlRTICovXTogYEhZRFJBVEVfRVZFTlRTYCxcbiAgICBbNjQgLyogUGF0Y2hGbGFncy5TVEFCTEVfRlJBR01FTlQgKi9dOiBgU1RBQkxFX0ZSQUdNRU5UYCxcbiAgICBbMTI4IC8qIFBhdGNoRmxhZ3MuS0VZRURfRlJBR01FTlQgKi9dOiBgS0VZRURfRlJBR01FTlRgLFxuICAgIFsyNTYgLyogUGF0Y2hGbGFncy5VTktFWUVEX0ZSQUdNRU5UICovXTogYFVOS0VZRURfRlJBR01FTlRgLFxuICAgIFs1MTIgLyogUGF0Y2hGbGFncy5ORUVEX1BBVENIICovXTogYE5FRURfUEFUQ0hgLFxuICAgIFsxMDI0IC8qIFBhdGNoRmxhZ3MuRFlOQU1JQ19TTE9UUyAqL106IGBEWU5BTUlDX1NMT1RTYCxcbiAgICBbMjA0OCAvKiBQYXRjaEZsYWdzLkRFVl9ST09UX0ZSQUdNRU5UICovXTogYERFVl9ST09UX0ZSQUdNRU5UYCxcbiAgICBbLTEgLyogUGF0Y2hGbGFncy5IT0lTVEVEICovXTogYEhPSVNURURgLFxuICAgIFstMiAvKiBQYXRjaEZsYWdzLkJBSUwgKi9dOiBgQkFJTGBcbn07XG5cbi8qKlxuICogRGV2IG9ubHlcbiAqL1xuY29uc3Qgc2xvdEZsYWdzVGV4dCA9IHtcbiAgICBbMSAvKiBTbG90RmxhZ3MuU1RBQkxFICovXTogJ1NUQUJMRScsXG4gICAgWzIgLyogU2xvdEZsYWdzLkRZTkFNSUMgKi9dOiAnRFlOQU1JQycsXG4gICAgWzMgLyogU2xvdEZsYWdzLkZPUldBUkRFRCAqL106ICdGT1JXQVJERUQnXG59O1xuXG5jb25zdCBHTE9CQUxTX1dISVRFX0xJU1RFRCA9ICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLHBhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLCcgK1xuICAgICdkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCxNYXRoLE51bWJlcixEYXRlLEFycmF5LCcgK1xuICAgICdPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludCc7XG5jb25zdCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoR0xPQkFMU19XSElURV9MSVNURUQpO1xuXG5jb25zdCByYW5nZSA9IDI7XG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZShzb3VyY2UsIHN0YXJ0ID0gMCwgZW5kID0gc291cmNlLmxlbmd0aCkge1xuICAgIC8vIFNwbGl0IHRoZSBjb250ZW50IGludG8gaW5kaXZpZHVhbCBsaW5lcyBidXQgY2FwdHVyZSB0aGUgbmV3bGluZSBzZXF1ZW5jZVxuICAgIC8vIHRoYXQgc2VwYXJhdGVkIGVhY2ggbGluZS4gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSB0aGUgYWN0dWFsIHNlcXVlbmNlIGlzXG4gICAgLy8gbmVlZGVkIHRvIHByb3Blcmx5IHRha2UgaW50byBhY2NvdW50IHRoZSBmdWxsIGxpbmUgbGVuZ3RoIGZvciBvZmZzZXRcbiAgICAvLyBjb21wYXJpc29uXG4gICAgbGV0IGxpbmVzID0gc291cmNlLnNwbGl0KC8oXFxyP1xcbikvKTtcbiAgICAvLyBTZXBhcmF0ZSB0aGUgbGluZXMgYW5kIG5ld2xpbmUgc2VxdWVuY2VzIGludG8gc2VwYXJhdGUgYXJyYXlzIGZvciBlYXNpZXIgcmVmZXJlbmNpbmdcbiAgICBjb25zdCBuZXdsaW5lU2VxdWVuY2VzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDEpO1xuICAgIGxpbmVzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDApO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgY29uc3QgcmVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb3VudCArPVxuICAgICAgICAgICAgbGluZXNbaV0ubGVuZ3RoICtcbiAgICAgICAgICAgICAgICAoKG5ld2xpbmVTZXF1ZW5jZXNbaV0gJiYgbmV3bGluZVNlcXVlbmNlc1tpXS5sZW5ndGgpIHx8IDApO1xuICAgICAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBqICsgMTtcbiAgICAgICAgICAgICAgICByZXMucHVzaChgJHtsaW5lfSR7JyAnLnJlcGVhdChNYXRoLm1heCgzIC0gU3RyaW5nKGxpbmUpLmxlbmd0aCwgMCkpfXwgICR7bGluZXNbal19YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdMaW5lU2VxTGVuZ3RoID0gKG5ld2xpbmVTZXF1ZW5jZXNbal0gJiYgbmV3bGluZVNlcXVlbmNlc1tqXS5sZW5ndGgpIHx8IDA7XG4gICAgICAgICAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkID0gc3RhcnQgLSAoY291bnQgLSAobGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoMSwgZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICcgJy5yZXBlYXQocGFkKSArICdeJy5yZXBlYXQobGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGogPiBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgJ14nLnJlcGVhdChsZW5ndGgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgbmV3TGluZVNlcUxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZSh2YWx1ZSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCByZXMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHZhbHVlW2ldO1xuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGlzU3RyaW5nKGl0ZW0pXG4gICAgICAgICAgICAgICAgPyBwYXJzZVN0cmluZ1N0eWxlKGl0ZW0pXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVTdHlsZShpdGVtKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IG5vcm1hbGl6ZWRba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5jb25zdCBsaXN0RGVsaW1pdGVyUkUgPSAvOyg/IVteKF0qXFwpKS9nO1xuY29uc3QgcHJvcGVydHlEZWxpbWl0ZXJSRSA9IC86KFteXSspLztcbmNvbnN0IHN0eWxlQ29tbWVudFJFID0gL1xcL1xcKi4qP1xcKlxcLy9ncztcbmZ1bmN0aW9uIHBhcnNlU3RyaW5nU3R5bGUoY3NzVGV4dCkge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGNzc1RleHRcbiAgICAgICAgLnJlcGxhY2Uoc3R5bGVDb21tZW50UkUsICcnKVxuICAgICAgICAuc3BsaXQobGlzdERlbGltaXRlclJFKVxuICAgICAgICAuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXJSRSk7XG4gICAgICAgICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmV0W3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5U3R5bGUoc3R5bGVzKSB7XG4gICAgbGV0IHJldCA9ICcnO1xuICAgIGlmICghc3R5bGVzIHx8IGlzU3RyaW5nKHN0eWxlcykpIHtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGVzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBrZXkuc3RhcnRzV2l0aChgLS1gKSA/IGtleSA6IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIHZhbGlkIHZhbHVlc1xuICAgICAgICAgICAgcmV0ICs9IGAke25vcm1hbGl6ZWRLZXl9OiR7dmFsdWV9O2A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmVzID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVDbGFzcyh2YWx1ZVtpXSk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICAgIHJlcyArPSBub3JtYWxpemVkICsgJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZVtuYW1lXSkge1xuICAgICAgICAgICAgICAgIHJlcyArPSBuYW1lICsgJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMudHJpbSgpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMocHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcbiAgICB9XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG59XG5cbi8vIFRoZXNlIHRhZyBjb25maWdzIGFyZSBzaGFyZWQgYmV0d2VlbiBjb21waWxlci1kb20gYW5kIHJ1bnRpbWUtZG9tLCBzbyB0aGV5XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnRcbmNvbnN0IEhUTUxfVEFHUyA9ICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLCcgK1xuICAgICdoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sJyArXG4gICAgJ2ZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLCcgK1xuICAgICdkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnVieSxzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCwnICtcbiAgICAndGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSwnICtcbiAgICAnY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLCcgK1xuICAgICd0aCx0cixidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsJyArXG4gICAgJ29wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsJyArXG4gICAgJ3N1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnO1xuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0VsZW1lbnRcbmNvbnN0IFNWR19UQUdTID0gJ3N2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSwnICtcbiAgICAnZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlciwnICtcbiAgICAnZmVDb21wb3NpdGUsZmVDb252b2x2ZU1hdHJpeCxmZURpZmZ1c2VMaWdodGluZyxmZURpc3BsYWNlbWVudE1hcCwnICtcbiAgICAnZmVEaXN0YW5jZUxpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsJyArXG4gICAgJ2ZlR2F1c3NpYW5CbHVyLGZlSW1hZ2UsZmVNZXJnZSxmZU1lcmdlTm9kZSxmZU1vcnBob2xvZ3ksZmVPZmZzZXQsJyArXG4gICAgJ2ZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsJyArXG4gICAgJ2ZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzaywnICtcbiAgICAnbWVzaCxtZXNoZ3JhZGllbnQsbWVzaHBhdGNoLG1lc2hyb3csbWV0YWRhdGEsbXBhdGgscGF0aCxwYXR0ZXJuLCcgK1xuICAgICdwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLCcgK1xuICAgICd0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXcnO1xuY29uc3QgVk9JRF9UQUdTID0gJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsaHIsaW1nLGlucHV0LGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJztcbi8qKlxuICogQ29tcGlsZXIgb25seS5cbiAqIERvIE5PVCB1c2UgaW4gcnVudGltZSBjb2RlIHBhdGhzIHVubGVzcyBiZWhpbmQgYChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKWAgZmxhZy5cbiAqL1xuY29uc3QgaXNIVE1MVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEhUTUxfVEFHUyk7XG4vKipcbiAqIENvbXBpbGVyIG9ubHkuXG4gKiBEbyBOT1QgdXNlIGluIHJ1bnRpbWUgY29kZSBwYXRocyB1bmxlc3MgYmVoaW5kIGAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylgIGZsYWcuXG4gKi9cbmNvbnN0IGlzU1ZHVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFNWR19UQUdTKTtcbi8qKlxuICogQ29tcGlsZXIgb25seS5cbiAqIERvIE5PVCB1c2UgaW4gcnVudGltZSBjb2RlIHBhdGhzIHVubGVzcyBiZWhpbmQgYChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKWAgZmxhZy5cbiAqL1xuY29uc3QgaXNWb2lkVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFZPSURfVEFHUyk7XG5cbi8qKlxuICogT24gdGhlIGNsaWVudCB3ZSBvbmx5IG5lZWQgdG8gb2ZmZXIgc3BlY2lhbCBjYXNlcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzIHRoYXRcbiAqIGhhdmUgZGlmZmVyZW50IG5hbWVzIGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyBkb20gcHJvcGVydGllczpcbiAqIC0gaXRlbXNjb3BlIC0+IE4vQVxuICogLSBhbGxvd2Z1bGxzY3JlZW4gLT4gYWxsb3dGdWxsc2NyZWVuXG4gKiAtIGZvcm1ub3ZhbGlkYXRlIC0+IGZvcm1Ob1ZhbGlkYXRlXG4gKiAtIGlzbWFwIC0+IGlzTWFwXG4gKiAtIG5vbW9kdWxlIC0+IG5vTW9kdWxlXG4gKiAtIG5vdmFsaWRhdGUgLT4gbm9WYWxpZGF0ZVxuICogLSByZWFkb25seSAtPiByZWFkT25seVxuICovXG5jb25zdCBzcGVjaWFsQm9vbGVhbkF0dHJzID0gYGl0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seWA7XG5jb25zdCBpc1NwZWNpYWxCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzKTtcbi8qKlxuICogVGhlIGZ1bGwgbGlzdCBpcyBuZWVkZWQgZHVyaW5nIFNTUiB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGluaXRpYWwgbWFya3VwLlxuICovXG5jb25zdCBpc0Jvb2xlYW5BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMgK1xuICAgIGAsYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNvbnRyb2xzLGRlZmF1bHQsZGVmZXIsZGlzYWJsZWQsaGlkZGVuLGAgK1xuICAgIGBsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGAgK1xuICAgIGBjaGVja2VkLG11dGVkLG11bHRpcGxlLHNlbGVjdGVkYCk7XG4vKipcbiAqIEJvb2xlYW4gYXR0cmlidXRlcyBzaG91bGQgYmUgaW5jbHVkZWQgaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBvciAnJy5cbiAqIGUuZy4gYDxzZWxlY3QgbXVsdGlwbGU+YCBjb21waWxlcyB0byBgeyBtdWx0aXBsZTogJycgfWBcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUgfHwgdmFsdWUgPT09ICcnO1xufVxuY29uc3QgdW5zYWZlQXR0ckNoYXJSRSA9IC9bPi89XCInXFx1MDAwOVxcdTAwMGFcXHUwMDBjXFx1MDAyMF0vO1xuY29uc3QgYXR0clZhbGlkYXRpb25DYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNTU1JTYWZlQXR0ck5hbWUobmFtZSkge1xuICAgIGlmIChhdHRyVmFsaWRhdGlvbkNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdO1xuICAgIH1cbiAgICBjb25zdCBpc1Vuc2FmZSA9IHVuc2FmZUF0dHJDaGFyUkUudGVzdChuYW1lKTtcbiAgICBpZiAoaXNVbnNhZmUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgdW5zYWZlIGF0dHJpYnV0ZSBuYW1lOiAke25hbWV9YCk7XG4gICAgfVxuICAgIHJldHVybiAoYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXSA9ICFpc1Vuc2FmZSk7XG59XG5jb25zdCBwcm9wc1RvQXR0ck1hcCA9IHtcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBodG1sRm9yOiAnZm9yJyxcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xufTtcbi8qKlxuICogS25vd24gYXR0cmlidXRlcywgdGhpcyBpcyB1c2VkIGZvciBzdHJpbmdpZmljYXRpb24gb2YgcnVudGltZSBzdGF0aWMgbm9kZXNcbiAqIHNvIHRoYXQgd2UgZG9uJ3Qgc3RyaW5naWZ5IGJpbmRpbmdzIHRoYXQgY2Fubm90IGJlIHNldCBmcm9tIEhUTUwuXG4gKiBEb24ndCBhbHNvIGZvcmdldCB0byBhbGxvdyBgZGF0YS0qYCBhbmQgYGFyaWEtKmAhXG4gKiBHZW5lcmF0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0F0dHJpYnV0ZXNcbiAqL1xuY29uc3QgaXNLbm93bkh0bWxBdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBhY2NlcHQsYWNjZXB0LWNoYXJzZXQsYWNjZXNza2V5LGFjdGlvbixhbGlnbixhbGxvdyxhbHQsYXN5bmMsYCArXG4gICAgYGF1dG9jYXBpdGFsaXplLGF1dG9jb21wbGV0ZSxhdXRvZm9jdXMsYXV0b3BsYXksYmFja2dyb3VuZCxiZ2NvbG9yLGAgK1xuICAgIGBib3JkZXIsYnVmZmVyZWQsY2FwdHVyZSxjaGFsbGVuZ2UsY2hhcnNldCxjaGVja2VkLGNpdGUsY2xhc3MsY29kZSxgICtcbiAgICBgY29kZWJhc2UsY29sb3IsY29scyxjb2xzcGFuLGNvbnRlbnQsY29udGVudGVkaXRhYmxlLGNvbnRleHRtZW51LGNvbnRyb2xzLGAgK1xuICAgIGBjb29yZHMsY3Jvc3NvcmlnaW4sY3NwLGRhdGEsZGF0ZXRpbWUsZGVjb2RpbmcsZGVmYXVsdCxkZWZlcixkaXIsZGlybmFtZSxgICtcbiAgICBgZGlzYWJsZWQsZG93bmxvYWQsZHJhZ2dhYmxlLGRyb3B6b25lLGVuY3R5cGUsZW50ZXJrZXloaW50LGZvcixmb3JtLGAgK1xuICAgIGBmb3JtYWN0aW9uLGZvcm1lbmN0eXBlLGZvcm1tZXRob2QsZm9ybW5vdmFsaWRhdGUsZm9ybXRhcmdldCxoZWFkZXJzLGAgK1xuICAgIGBoZWlnaHQsaGlkZGVuLGhpZ2gsaHJlZixocmVmbGFuZyxodHRwLWVxdWl2LGljb24saWQsaW1wb3J0YW5jZSxpbnRlZ3JpdHksYCArXG4gICAgYGlzbWFwLGl0ZW1wcm9wLGtleXR5cGUsa2luZCxsYWJlbCxsYW5nLGxhbmd1YWdlLGxvYWRpbmcsbGlzdCxsb29wLGxvdyxgICtcbiAgICBgbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtaW5sZW5ndGgsbWVkaWEsbWluLG11bHRpcGxlLG11dGVkLG5hbWUsbm92YWxpZGF0ZSxgICtcbiAgICBgb3BlbixvcHRpbXVtLHBhdHRlcm4scGluZyxwbGFjZWhvbGRlcixwb3N0ZXIscHJlbG9hZCxyYWRpb2dyb3VwLHJlYWRvbmx5LGAgK1xuICAgIGByZWZlcnJlcnBvbGljeSxyZWwscmVxdWlyZWQscmV2ZXJzZWQscm93cyxyb3dzcGFuLHNhbmRib3gsc2NvcGUsc2NvcGVkLGAgK1xuICAgIGBzZWxlY3RlZCxzaGFwZSxzaXplLHNpemVzLHNsb3Qsc3BhbixzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsYCArXG4gICAgYHN0YXJ0LHN0ZXAsc3R5bGUsc3VtbWFyeSx0YWJpbmRleCx0YXJnZXQsdGl0bGUsdHJhbnNsYXRlLHR5cGUsdXNlbWFwLGAgK1xuICAgIGB2YWx1ZSx3aWR0aCx3cmFwYCk7XG4vKipcbiAqIEdlbmVyYXRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGVcbiAqL1xuY29uc3QgaXNLbm93blN2Z0F0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYHhtbG5zLGFjY2VudC1oZWlnaHQsYWNjdW11bGF0ZSxhZGRpdGl2ZSxhbGlnbm1lbnQtYmFzZWxpbmUsYWxwaGFiZXRpYyxhbXBsaXR1ZGUsYCArXG4gICAgYGFyYWJpYy1mb3JtLGFzY2VudCxhdHRyaWJ1dGVOYW1lLGF0dHJpYnV0ZVR5cGUsYXppbXV0aCxiYXNlRnJlcXVlbmN5LGAgK1xuICAgIGBiYXNlbGluZS1zaGlmdCxiYXNlUHJvZmlsZSxiYm94LGJlZ2luLGJpYXMsYnksY2FsY01vZGUsY2FwLWhlaWdodCxjbGFzcyxgICtcbiAgICBgY2xpcCxjbGlwUGF0aFVuaXRzLGNsaXAtcGF0aCxjbGlwLXJ1bGUsY29sb3IsY29sb3ItaW50ZXJwb2xhdGlvbixgICtcbiAgICBgY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzLGNvbG9yLXByb2ZpbGUsY29sb3ItcmVuZGVyaW5nLGAgK1xuICAgIGBjb250ZW50U2NyaXB0VHlwZSxjb250ZW50U3R5bGVUeXBlLGNyb3Nzb3JpZ2luLGN1cnNvcixjeCxjeSxkLGRlY2VsZXJhdGUsYCArXG4gICAgYGRlc2NlbnQsZGlmZnVzZUNvbnN0YW50LGRpcmVjdGlvbixkaXNwbGF5LGRpdmlzb3IsZG9taW5hbnQtYmFzZWxpbmUsZHVyLGR4LGAgK1xuICAgIGBkeSxlZGdlTW9kZSxlbGV2YXRpb24sZW5hYmxlLWJhY2tncm91bmQsZW5kLGV4cG9uZW50LGZpbGwsZmlsbC1vcGFjaXR5LGAgK1xuICAgIGBmaWxsLXJ1bGUsZmlsdGVyLGZpbHRlclJlcyxmaWx0ZXJVbml0cyxmbG9vZC1jb2xvcixmbG9vZC1vcGFjaXR5LGAgK1xuICAgIGBmb250LWZhbWlseSxmb250LXNpemUsZm9udC1zaXplLWFkanVzdCxmb250LXN0cmV0Y2gsZm9udC1zdHlsZSxgICtcbiAgICBgZm9udC12YXJpYW50LGZvbnQtd2VpZ2h0LGZvcm1hdCxmcm9tLGZyLGZ4LGZ5LGcxLGcyLGdseXBoLW5hbWUsYCArXG4gICAgYGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwsZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwsZ2x5cGhSZWYsYCArXG4gICAgYGdyYWRpZW50VHJhbnNmb3JtLGdyYWRpZW50VW5pdHMsaGFuZ2luZyxoZWlnaHQsaHJlZixocmVmbGFuZyxob3Jpei1hZHYteCxgICtcbiAgICBgaG9yaXotb3JpZ2luLXgsaWQsaWRlb2dyYXBoaWMsaW1hZ2UtcmVuZGVyaW5nLGluLGluMixpbnRlcmNlcHQsayxrMSxrMixrMyxgICtcbiAgICBgazQsa2VybmVsTWF0cml4LGtlcm5lbFVuaXRMZW5ndGgsa2VybmluZyxrZXlQb2ludHMsa2V5U3BsaW5lcyxrZXlUaW1lcyxgICtcbiAgICBgbGFuZyxsZW5ndGhBZGp1c3QsbGV0dGVyLXNwYWNpbmcsbGlnaHRpbmctY29sb3IsbGltaXRpbmdDb25lQW5nbGUsbG9jYWwsYCArXG4gICAgYG1hcmtlci1lbmQsbWFya2VyLW1pZCxtYXJrZXItc3RhcnQsbWFya2VySGVpZ2h0LG1hcmtlclVuaXRzLG1hcmtlcldpZHRoLGAgK1xuICAgIGBtYXNrLG1hc2tDb250ZW50VW5pdHMsbWFza1VuaXRzLG1hdGhlbWF0aWNhbCxtYXgsbWVkaWEsbWV0aG9kLG1pbixtb2RlLGAgK1xuICAgIGBuYW1lLG51bU9jdGF2ZXMsb2Zmc2V0LG9wYWNpdHksb3BlcmF0b3Isb3JkZXIsb3JpZW50LG9yaWVudGF0aW9uLG9yaWdpbixgICtcbiAgICBgb3ZlcmZsb3csb3ZlcmxpbmUtcG9zaXRpb24sb3ZlcmxpbmUtdGhpY2tuZXNzLHBhbm9zZS0xLHBhaW50LW9yZGVyLHBhdGgsYCArXG4gICAgYHBhdGhMZW5ndGgscGF0dGVybkNvbnRlbnRVbml0cyxwYXR0ZXJuVHJhbnNmb3JtLHBhdHRlcm5Vbml0cyxwaW5nLGAgK1xuICAgIGBwb2ludGVyLWV2ZW50cyxwb2ludHMscG9pbnRzQXRYLHBvaW50c0F0WSxwb2ludHNBdFoscHJlc2VydmVBbHBoYSxgICtcbiAgICBgcHJlc2VydmVBc3BlY3RSYXRpbyxwcmltaXRpdmVVbml0cyxyLHJhZGl1cyxyZWZlcnJlclBvbGljeSxyZWZYLHJlZlkscmVsLGAgK1xuICAgIGByZW5kZXJpbmctaW50ZW50LHJlcGVhdENvdW50LHJlcGVhdER1cixyZXF1aXJlZEV4dGVuc2lvbnMscmVxdWlyZWRGZWF0dXJlcyxgICtcbiAgICBgcmVzdGFydCxyZXN1bHQscm90YXRlLHJ4LHJ5LHNjYWxlLHNlZWQsc2hhcGUtcmVuZGVyaW5nLHNsb3BlLHNwYWNpbmcsYCArXG4gICAgYHNwZWN1bGFyQ29uc3RhbnQsc3BlY3VsYXJFeHBvbmVudCxzcGVlZCxzcHJlYWRNZXRob2Qsc3RhcnRPZmZzZXQsYCArXG4gICAgYHN0ZERldmlhdGlvbixzdGVtaCxzdGVtdixzdGl0Y2hUaWxlcyxzdG9wLWNvbG9yLHN0b3Atb3BhY2l0eSxgICtcbiAgICBgc3RyaWtldGhyb3VnaC1wb3NpdGlvbixzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyxzdHJpbmcsc3Ryb2tlLGAgK1xuICAgIGBzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LHN0cm9rZS1saW5lY2FwLHN0cm9rZS1saW5lam9pbixgICtcbiAgICBgc3Ryb2tlLW1pdGVybGltaXQsc3Ryb2tlLW9wYWNpdHksc3Ryb2tlLXdpZHRoLHN0eWxlLHN1cmZhY2VTY2FsZSxgICtcbiAgICBgc3lzdGVtTGFuZ3VhZ2UsdGFiaW5kZXgsdGFibGVWYWx1ZXMsdGFyZ2V0LHRhcmdldFgsdGFyZ2V0WSx0ZXh0LWFuY2hvcixgICtcbiAgICBgdGV4dC1kZWNvcmF0aW9uLHRleHQtcmVuZGVyaW5nLHRleHRMZW5ndGgsdG8sdHJhbnNmb3JtLHRyYW5zZm9ybS1vcmlnaW4sYCArXG4gICAgYHR5cGUsdTEsdTIsdW5kZXJsaW5lLXBvc2l0aW9uLHVuZGVybGluZS10aGlja25lc3MsdW5pY29kZSx1bmljb2RlLWJpZGksYCArXG4gICAgYHVuaWNvZGUtcmFuZ2UsdW5pdHMtcGVyLWVtLHYtYWxwaGFiZXRpYyx2LWhhbmdpbmcsdi1pZGVvZ3JhcGhpYyxgICtcbiAgICBgdi1tYXRoZW1hdGljYWwsdmFsdWVzLHZlY3Rvci1lZmZlY3QsdmVyc2lvbix2ZXJ0LWFkdi15LHZlcnQtb3JpZ2luLXgsYCArXG4gICAgYHZlcnQtb3JpZ2luLXksdmlld0JveCx2aWV3VGFyZ2V0LHZpc2liaWxpdHksd2lkdGgsd2lkdGhzLHdvcmQtc3BhY2luZyxgICtcbiAgICBgd3JpdGluZy1tb2RlLHgseC1oZWlnaHQseDEseDIseENoYW5uZWxTZWxlY3Rvcix4bGluazphY3R1YXRlLHhsaW5rOmFyY3JvbGUsYCArXG4gICAgYHhsaW5rOmhyZWYseGxpbms6cm9sZSx4bGluazpzaG93LHhsaW5rOnRpdGxlLHhsaW5rOnR5cGUseG1sOmJhc2UseG1sOmxhbmcsYCArXG4gICAgYHhtbDpzcGFjZSx5LHkxLHkyLHlDaGFubmVsU2VsZWN0b3Iseix6b29tQW5kUGFuYCk7XG5cbmNvbnN0IGVzY2FwZVJFID0gL1tcIicmPD5dLztcbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XG4gICAgY29uc3Qgc3RyID0gJycgKyBzdHJpbmc7XG4gICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVSRS5leGVjKHN0cik7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBsZXQgaHRtbCA9ICcnO1xuICAgIGxldCBlc2NhcGVkO1xuICAgIGxldCBpbmRleDtcbiAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGluZGV4KSkge1xuICAgICAgICAgICAgY2FzZSAzNDogLy8gXCJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZxdW90Oyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM4OiAvLyAmXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmYW1wOyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM5OiAvLyAnXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmIzM5Oyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDYwOiAvLyA8XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmbHQ7JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjI6IC8vID5cbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZndDsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgICAgICAgaHRtbCArPSBzdHIuc2xpY2UobGFzdEluZGV4LCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICBodG1sICs9IGVzY2FwZWQ7XG4gICAgfVxuICAgIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4ID8gaHRtbCArIHN0ci5zbGljZShsYXN0SW5kZXgsIGluZGV4KSA6IGh0bWw7XG59XG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUyL3N5bnRheC5odG1sI2NvbW1lbnRzXG5jb25zdCBjb21tZW50U3RyaXBSRSA9IC9eLT8+fDwhLS18LS0+fC0tIT58PCEtJC9nO1xuZnVuY3Rpb24gZXNjYXBlSHRtbENvbW1lbnQoc3JjKSB7XG4gICAgcmV0dXJuIHNyYy5yZXBsYWNlKGNvbW1lbnRTdHJpcFJFLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBlcXVhbCA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGVxdWFsICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVxdWFsID0gbG9vc2VFcXVhbChhW2ldLCBiW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGVxdWFsO1xufVxuZnVuY3Rpb24gbG9vc2VFcXVhbChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGxldCBhVmFsaWRUeXBlID0gaXNEYXRlKGEpO1xuICAgIGxldCBiVmFsaWRUeXBlID0gaXNEYXRlKGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKSA6IGZhbHNlO1xuICAgIH1cbiAgICBhVmFsaWRUeXBlID0gaXNTeW1ib2woYSk7XG4gICAgYlZhbGlkVHlwZSA9IGlzU3ltYm9sKGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgfVxuICAgIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xuICAgIGJWYWxpZFR5cGUgPSBpc0FycmF5KGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSA6IGZhbHNlO1xuICAgIH1cbiAgICBhVmFsaWRUeXBlID0gaXNPYmplY3QoYSk7XG4gICAgYlZhbGlkVHlwZSA9IGlzT2JqZWN0KGIpO1xuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmOiB0aGlzIGlmIHdpbGwgcHJvYmFibHkgbmV2ZXIgYmUgY2FsbGVkICovXG4gICAgICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGJLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhiKS5sZW5ndGg7XG4gICAgICAgIGlmIChhS2V5c0NvdW50ICE9PSBiS2V5c0NvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IGJIYXNLZXkgPSBiLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICAgICAgICBpZiAoKGFIYXNLZXkgJiYgIWJIYXNLZXkpIHx8XG4gICAgICAgICAgICAgICAgKCFhSGFzS2V5ICYmIGJIYXNLZXkpIHx8XG4gICAgICAgICAgICAgICAgIWxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsIHZhbCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGl0ZW0gPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcbn1cblxuLyoqXG4gKiBGb3IgY29udmVydGluZyB7eyBpbnRlcnBvbGF0aW9uIH19IHZhbHVlcyB0byBkaXNwbGF5ZWQgc3RyaW5ncy5cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHRvRGlzcGxheVN0cmluZyA9ICh2YWwpID0+IHtcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHZhbCA9PSBudWxsXG4gICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICA6IGlzQXJyYXkodmFsKSB8fFxuICAgICAgICAgICAgICAgIChpc09iamVjdCh2YWwpICYmXG4gICAgICAgICAgICAgICAgICAgICh2YWwudG9TdHJpbmcgPT09IG9iamVjdFRvU3RyaW5nIHx8ICFpc0Z1bmN0aW9uKHZhbC50b1N0cmluZykpKVxuICAgICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCByZXBsYWNlciwgMilcbiAgICAgICAgICAgICAgICA6IFN0cmluZyh2YWwpO1xufTtcbmNvbnN0IHJlcGxhY2VyID0gKF9rZXksIHZhbCkgPT4ge1xuICAgIC8vIGNhbid0IHVzZSBpc1JlZiBoZXJlIHNpbmNlIEB2dWUvc2hhcmVkIGhhcyBubyBkZXBzXG4gICAgaWYgKHZhbCAmJiB2YWwuX192X2lzUmVmKSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlcihfa2V5LCB2YWwudmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc01hcCh2YWwpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBbYE1hcCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC5lbnRyaWVzKCldLnJlZHVjZSgoZW50cmllcywgW2tleSwgdmFsXSkgPT4ge1xuICAgICAgICAgICAgICAgIGVudHJpZXNbYCR7a2V5fSA9PmBdID0gdmFsO1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgICAgICAgICAgfSwge30pXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtgU2V0KCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLnZhbHVlcygpXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmICFpc0FycmF5KHZhbCkgJiYgIWlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59O1xuXG5jb25zdCBFTVBUWV9PQkogPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcbiAgICA/IE9iamVjdC5mcmVlemUoe30pXG4gICAgOiB7fTtcbmNvbnN0IEVNUFRZX0FSUiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IE9iamVjdC5mcmVlemUoW10pIDogW107XG5jb25zdCBOT09QID0gKCkgPT4geyB9O1xuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG5jb25zdCBOTyA9ICgpID0+IGZhbHNlO1xuY29uc3Qgb25SRSA9IC9eb25bXmEtel0vO1xuY29uc3QgaXNPbiA9IChrZXkpID0+IG9uUkUudGVzdChrZXkpO1xuY29uc3QgaXNNb2RlbExpc3RlbmVyID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoJ29uVXBkYXRlOicpO1xuY29uc3QgZXh0ZW5kID0gT2JqZWN0LmFzc2lnbjtcbmNvbnN0IHJlbW92ZSA9IChhcnIsIGVsKSA9PiB7XG4gICAgY29uc3QgaSA9IGFyci5pbmRleE9mKGVsKTtcbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgIGFyci5zcGxpY2UoaSwgMSk7XG4gICAgfVxufTtcbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmNvbnN0IGhhc093biA9ICh2YWwsIGtleSkgPT4gaGFzT3duUHJvcGVydHkuY2FsbCh2YWwsIGtleSk7XG5jb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmNvbnN0IGlzTWFwID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE1hcF0nO1xuY29uc3QgaXNTZXQgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgU2V0XSc7XG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1N0cmluZyA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xuY29uc3QgaXNTeW1ib2wgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3ltYm9sJztcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xuY29uc3QgaXNQcm9taXNlID0gKHZhbCkgPT4ge1xuICAgIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcbn07XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gICAgLy8gZXh0cmFjdCBcIlJhd1R5cGVcIiBmcm9tIHN0cmluZ3MgbGlrZSBcIltvYmplY3QgUmF3VHlwZV1cIlxuICAgIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuY29uc3QgaXNJbnRlZ2VyS2V5ID0gKGtleSkgPT4gaXNTdHJpbmcoa2V5KSAmJlxuICAgIGtleSAhPT0gJ05hTicgJiZcbiAgICBrZXlbMF0gIT09ICctJyAmJlxuICAgICcnICsgcGFyc2VJbnQoa2V5LCAxMCkgPT09IGtleTtcbmNvbnN0IGlzUmVzZXJ2ZWRQcm9wID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFxuLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxuJyxrZXkscmVmLHJlZl9mb3IscmVmX2tleSwnICtcbiAgICAnb25Wbm9kZUJlZm9yZU1vdW50LG9uVm5vZGVNb3VudGVkLCcgK1xuICAgICdvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLCcgK1xuICAgICdvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkJyk7XG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ2JpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0LG1lbW8nKTtcbmNvbnN0IGNhY2hlU3RyaW5nRnVuY3Rpb24gPSAoZm4pID0+IHtcbiAgICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV0dXJuICgoc3RyKSA9PiB7XG4gICAgICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XG4gICAgICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcbiAgICB9KTtcbn07XG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gKGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJykpO1xufSk7XG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGh5cGhlbmF0ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgY2FwaXRhbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgdG9IYW5kbGVyS2V5ID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGApO1xuLy8gY29tcGFyZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQsIGFjY291bnRpbmcgZm9yIE5hTi5cbmNvbnN0IGhhc0NoYW5nZWQgPSAodmFsdWUsIG9sZFZhbHVlKSA9PiAhT2JqZWN0LmlzKHZhbHVlLCBvbGRWYWx1ZSk7XG5jb25zdCBpbnZva2VBcnJheUZucyA9IChmbnMsIGFyZykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuc1tpXShhcmcpO1xuICAgIH1cbn07XG5jb25zdCBkZWYgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlXG4gICAgfSk7XG59O1xuY29uc3QgdG9OdW1iZXIgPSAodmFsKSA9PiB7XG4gICAgY29uc3QgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xufTtcbmxldCBfZ2xvYmFsVGhpcztcbmNvbnN0IGdldEdsb2JhbFRoaXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChfZ2xvYmFsVGhpcyB8fFxuICAgICAgICAoX2dsb2JhbFRoaXMgPVxuICAgICAgICAgICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgPyBnbG9iYWxUaGlzXG4gICAgICAgICAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gd2luZG93XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnbG9iYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt9KSk7XG59O1xuY29uc3QgaWRlbnRSRSA9IC9eW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSokLztcbmZ1bmN0aW9uIGdlblByb3BzQWNjZXNzRXhwKG5hbWUpIHtcbiAgICByZXR1cm4gaWRlbnRSRS50ZXN0KG5hbWUpXG4gICAgICAgID8gYF9fcHJvcHMuJHtuYW1lfWBcbiAgICAgICAgOiBgX19wcm9wc1ske0pTT04uc3RyaW5naWZ5KG5hbWUpfV1gO1xufVxuXG5leHBvcnQgeyBFTVBUWV9BUlIsIEVNUFRZX09CSiwgTk8sIE5PT1AsIFBhdGNoRmxhZ05hbWVzLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgZGVmLCBlc2NhcGVIdG1sLCBlc2NhcGVIdG1sQ29tbWVudCwgZXh0ZW5kLCBnZW5Qcm9wc0FjY2Vzc0V4cCwgZ2VuZXJhdGVDb2RlRnJhbWUsIGdldEdsb2JhbFRoaXMsIGhhc0NoYW5nZWQsIGhhc093biwgaHlwaGVuYXRlLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGludm9rZUFycmF5Rm5zLCBpc0FycmF5LCBpc0Jvb2xlYW5BdHRyLCBpc0J1aWx0SW5EaXJlY3RpdmUsIGlzRGF0ZSwgaXNGdW5jdGlvbiwgaXNHbG9iYWxseVdoaXRlbGlzdGVkLCBpc0hUTUxUYWcsIGlzSW50ZWdlcktleSwgaXNLbm93bkh0bWxBdHRyLCBpc0tub3duU3ZnQXR0ciwgaXNNYXAsIGlzTW9kZWxMaXN0ZW5lciwgaXNPYmplY3QsIGlzT24sIGlzUGxhaW5PYmplY3QsIGlzUHJvbWlzZSwgaXNSZXNlcnZlZFByb3AsIGlzU1NSU2FmZUF0dHJOYW1lLCBpc1NWR1RhZywgaXNTZXQsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc1N0cmluZywgaXNTeW1ib2wsIGlzVm9pZFRhZywgbG9vc2VFcXVhbCwgbG9vc2VJbmRleE9mLCBtYWtlTWFwLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplUHJvcHMsIG5vcm1hbGl6ZVN0eWxlLCBvYmplY3RUb1N0cmluZywgcGFyc2VTdHJpbmdTdHlsZSwgcHJvcHNUb0F0dHJNYXAsIHJlbW92ZSwgc2xvdEZsYWdzVGV4dCwgc3RyaW5naWZ5U3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgdG9SYXdUeXBlLCB0b1R5cGVTdHJpbmcgfTtcbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdlxuICAgIGNsYXNzPVwidmwtZHJvcGRvd25cIlxuICAgIDpjbGFzcz1cImB2bC1kcm9wZG93bi0ke2FsaWdufSB2bC1kcm9wZG93bi0ke2RpcmVjdGlvbn1gXCJcbiAgICBAbW91c2V1cD1cIm9uTW91c2VVcFwiXG4gID5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cInZsLWRyb3Bkb3duLXRvZ2dsZVwiXG4gICAgICBAY2xpY2s9XCJvblRvZ2dsZVwiXG4gICAgICBAZm9jdXM9XCJvbkZvY3VzXCJcbiAgICAgIEBibHVyPVwib25CbHVyXCJcbiAgICA+XG4gICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInZsLWRyb3Bkb3duLW1lbnVcIiB2LXNob3c9XCJvcGVuXCIgQG1vdXNlZG93bi5zdG9wPlxuICAgICAgPHNsb3QgbmFtZT1cImNvbnRlbnRcIj5cbiAgICAgICAge3sgY29udGVudCB9fVxuICAgICAgPC9zbG90PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBtb2RlbEZpZWxkcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd2bC1kcm9wZG93bicsXG4gIHByb3BzOiB7XG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhlIGRyb3Bkb3duIG1lbnUgd2lsbCBjbG9zZSBvbiBtZW51IGNsaWNrZWQuXG4gICAgICovXG4gICAgY2xvc2VBZnRlckNsaWNrOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0aGUgZHJvcGRvd24gbWVudSB3aWxsIG9wZW4gb24gdG9nZ2xlIGZvY3VzZWQuXG4gICAgICovXG4gICAgZm9jdXNPcGVuOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTZXQgYWxpZ25tZW50IG9mIHRoZSBkcm9wZG93biBtZW51LCBlaXRoZXIgJ2xlZnQnIG9yICdyaWdodCcuXG4gICAgICovXG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdsZWZ0JyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNldCBkaXJlY3Rpb24gb2YgdGhlIGRyb3Bkb3duIG1lbnUsIGVpdGhlciAnZG93bicgb3IgJ3VwJy5cbiAgICAgKi9cbiAgICBkaXJlY3Rpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdkb3duJyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENvbnRlbnQgb2YgZHJvcGRvd24sIGNhbiBiZSBvdmVycmlkZW4gYnkgYHYtc2xvdDpjb250ZW50YC5cbiAgICAgKi9cbiAgICBjb250ZW50OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHNob3cgZHJvcGRvd24uXG4gICAgICovXG4gICAgW21vZGVsRmllbGRzLnZhbHVlXToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIGVtaXRzOiBbbW9kZWxGaWVsZHMudXBkYXRlXSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogdGhpcy5tb2RlbFZhbHVlLFxuICAgIH07XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgW21vZGVsRmllbGRzLnZhbHVlXSh2YWx1ZSkge1xuICAgICAgdGhpcy5vcGVuID0gdmFsdWU7XG4gICAgfSxcbiAgICBvcGVuKHZhbHVlLCBwcmV2VmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcHJldlZhbHVlKSByZXR1cm47XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbkNsb3NlLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uQ2xvc2UsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgb25Ub2dnbGUoKSB7XG4gICAgICB0aGlzLm9wZW4gPSAhdGhpcy5vcGVuO1xuICAgICAgdGhpcy4kZW1pdChtb2RlbEZpZWxkcy51cGRhdGUsIHRoaXMub3Blbik7XG4gICAgfSxcbiAgICBvbkNsb3NlKCkge1xuICAgICAgaWYgKHRoaXMub3BlbikgdGhpcy5vblRvZ2dsZSgpO1xuICAgIH0sXG4gICAgb25Gb2N1cygpIHtcbiAgICAgIGlmICh0aGlzLmZvY3VzT3BlbiAmJiAhdGhpcy5vcGVuKSB0aGlzLm9uVG9nZ2xlKCk7XG4gICAgfSxcbiAgICBvbkJsdXIoKSB7XG4gICAgICBjb25zdCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGRvY3VtZW50O1xuICAgICAgaWYgKFxuICAgICAgICBhY3RpdmVFbGVtZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmXG4gICAgICAgICF0aGlzLiRlbC5jb250YWlucyhhY3RpdmVFbGVtZW50KVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Nb3VzZVVwKCkge1xuICAgICAgaWYgKHRoaXMuY2xvc2VBZnRlckNsaWNrKSB0aGlzLm9uQ2xvc2UoKTtcbiAgICB9LFxuICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc3JjPVwiLi9zdHlsZS5jc3NcIj48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8dGVsZXBvcnQgdG89XCJib2R5XCI+XG4gICAgPHRyYW5zaXRpb24gOm5hbWU9XCJ0cmFuc2l0aW9uXCIgQGFmdGVyLWxlYXZlPVwib25BZnRlckxlYXZlXCIgYXBwZWFyPlxuICAgICAgPGRpdiA6Y2xhc3M9XCJgdmwtbW9kYWwgJHttb2RhbENsYXNzfWBcIiB2LWlmPVwic2hvd1wiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgOmNsYXNzPVwiYHZsLW1vZGFsLWJhY2tkcm9wICR7YmFja2Ryb3BDbGFzc31gXCJcbiAgICAgICAgICB2LWlmPVwiYmFja2Ryb3BcIlxuICAgICAgICAgIEBjbGljaz1cIm9uQmFja2Ryb3BDbGlja1wiXG4gICAgICAgIC8+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdHJhbnNpdGlvbj5cbiAgPC90ZWxlcG9ydD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5jb25zdCBjb21wb25lbnRzID0ge1xuXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICd2bC1tb2RhbCcsXG4gIGNvbXBvbmVudHMsXG4gIHByb3BzOiB7XG4gICAgbW9kYWxDbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJycsXG4gICAgfSxcbiAgICBiYWNrZHJvcENsYXNzOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJyxcbiAgICB9LFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgc2hvdzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gICAgYmFja2Ryb3A6IHtcbiAgICAgIHR5cGU6IFtPYmplY3QsIEJvb2xlYW5dLFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHsgY2xvc2U6IHRydWUgfSksXG4gICAgfSxcbiAgfSxcbiAgZW1pdHM6IFsnY2xvc2UnLCAnYWZ0ZXJMZWF2ZSddLFxuICBtZXRob2RzOiB7XG4gICAgb25CYWNrZHJvcENsaWNrKCkge1xuICAgICAgaWYgKHRoaXMuYmFja2Ryb3AgPT09IHRydWUgfHwgdGhpcy5iYWNrZHJvcC5jbG9zZSkge1xuICAgICAgICB0aGlzLiRlbWl0KCdjbG9zZScsIHtcbiAgICAgICAgICBzb3VyY2U6ICdiYWNrZHJvcCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25BZnRlckxlYXZlKCkge1xuICAgICAgdGhpcy4kZW1pdCgnYWZ0ZXJMZWF2ZScpO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzcmM9XCIuL3N0eWxlLmNzc1wiPjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXZcbiAgICBjbGFzcz1cInZsLXRvb2x0aXBcIlxuICAgIDpjbGFzcz1cImB2bC10b29sdGlwLSR7cGxhY2VtZW50fSB2bC10b29sdGlwLWFsaWduLSR7YWxpZ259YFwiXG4gID5cbiAgICA8aT48L2k+XG4gICAgPGRpdiBjbGFzcz1cInZsLXRvb2x0aXAtd3JhcFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInZsLXRvb2x0aXAtY29udGVudFwiPlxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIHBsYWNlbWVudDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2F1dG8teScsXG4gICAgfSxcbiAgICBhbGlnbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2NlbnRlcicsIC8vIHN0YXJ0IHwgY2VudGVyIHwgZW5kXG4gICAgfSxcbiAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIHNyYz1cIi4vc3R5bGUuY3NzXCI+PC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW5cbiAgICA6Y2xhc3M9XCJ7IGRpc2FibGVkIH1cIlxuICAgIEBtb3VzZWVudGVyPVwib25FbnRlclwiXG4gICAgQG1vdXNlbGVhdmU9XCJvbkxlYXZlXCJcbiAgICBAdGlwc2hvdy5zdG9wPVwiaG92ZXJlZCA9IHRydWVcIlxuICAgIEB0aXBoaWRlLnN0b3A9XCJob3ZlcmVkID0gZmFsc2VcIlxuICAgIEB0aXB0b2dnbGUuc3RvcD1cImhvdmVyZWQgPSAhaG92ZXJlZFwiXG4gID5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPHRlbGVwb3J0IHRvPVwiYm9keVwiIHYtaWY9XCJ0b29sdGlwXCI+XG4gICAgICA8VG9vbHRpcENvbnRlbnRcbiAgICAgICAgOnBsYWNlbWVudD1cInRvb2x0aXAucGxhY2VtZW50XCJcbiAgICAgICAgOmFsaWduPVwidG9vbHRpcC5hbGlnblwiXG4gICAgICAgIDpzdHlsZT1cInRvb2x0aXAuc3R5bGVcIlxuICAgICAgPlxuICAgICAgICA8c2xvdCBuYW1lPVwiY29udGVudFwiPlxuICAgICAgICAgIHt7IGNvbnRlbnQgfX1cbiAgICAgICAgPC9zbG90PlxuICAgICAgPC9Ub29sdGlwQ29udGVudD5cbiAgICA8L3RlbGVwb3J0PlxuICA8L3NwYW4+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFRvb2x0aXBDb250ZW50IGZyb20gJy4vdG9vbHRpcC1jb250ZW50LnZ1ZSc7XG5pbXBvcnQgeyBsaWZlY3ljbGVCZWZvcmVVbm1vdW50IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IGNvbXBvbmVudHMgPSB7XG4gIFRvb2x0aXBDb250ZW50LFxuXG59O1xuXG5jb25zdCB0b29sdGlwcyA9IFtdO1xuY29uc3QgdGhyb3R0bGVkVXBkYXRlID0gdGhyb3R0bGVXaXRoUkFGKHVwZGF0ZVRvb2x0aXBzKTtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRocm90dGxlZFVwZGF0ZSwgdHJ1ZSk7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhyb3R0bGVkVXBkYXRlLCBmYWxzZSk7XG5cbmZ1bmN0aW9uIHRocm90dGxlV2l0aFJBRihmdW5jKSB7XG4gIGxldCBydW5uaW5nID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGV4ZWMoKSB7XG4gICAgZnVuYygpO1xuICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChydW5uaW5nKSByZXR1cm47XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGV4ZWMpO1xuICAgIHJ1bm5pbmcgPSB0cnVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVUb29sdGlwcygpIHtcbiAgdG9vbHRpcHMuZm9yRWFjaCgodG9vbHRpcCkgPT4ge1xuICAgIHRvb2x0aXAucmVuZGVyKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gYWRkVG9vbHRpcCh0b29sdGlwKSB7XG4gIHRvb2x0aXBzLnB1c2godG9vbHRpcCk7XG59XG5mdW5jdGlvbiByZW1vdmVUb29sdGlwKHRvb2x0aXApIHtcbiAgdG9vbHRpcC5jbGVhbigpO1xuICBjb25zdCBpID0gdG9vbHRpcHMuaW5kZXhPZih0b29sdGlwKTtcbiAgaWYgKGkgPj0gMCkgdG9vbHRpcHMuc3BsaWNlKGksIDEpO1xufVxuXG5jb25zdCBQTEFDRU1FTlRfVE9QID0gJ3RvcCc7XG5jb25zdCBQTEFDRU1FTlRfQk9UVE9NID0gJ2JvdHRvbSc7XG5jb25zdCBQTEFDRU1FTlRfTEVGVCA9ICdsZWZ0JztcbmNvbnN0IFBMQUNFTUVOVF9SSUdIVCA9ICdyaWdodCc7XG5jb25zdCBQTEFDRU1FTlRfQVVUT19ZID0gJ2F1dG8teSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ZsLXRvb2x0aXAnLFxuICBjb21wb25lbnRzLFxuICBwcm9wczoge1xuICAgIGFjdGl2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gICAgbm9Nb3VzZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gICAgcGxhY2VtZW50OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBQTEFDRU1FTlRfQVVUT19ZLFxuICAgIH0sXG4gICAgYWxpZ246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdjZW50ZXInLCAvLyBzdGFydCB8IGNlbnRlciB8IGVuZFxuICAgIH0sXG4gICAgY29udGVudDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgIH0sXG4gICAgZ2FwOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAxMCxcbiAgICB9LFxuICAgIGRpc2FibGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICB0b29sdGlwOiBudWxsLFxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgc2hvdWxkSGFuZGxlTW91c2UoKSB7XG4gICAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQgJiYgIXRoaXMubm9Nb3VzZTtcbiAgICB9LFxuICAgIHNob3VsZFNob3coKSB7XG4gICAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQgJiYgKHRoaXMuYWN0aXZlIHx8IHRoaXMuaG92ZXJlZCk7XG4gICAgfSxcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBzaG91bGRTaG93OiAncmVuZGVyJyxcbiAgICBwbGFjZW1lbnQ6ICdyZW5kZXInLFxuICAgIGFsaWduOiAncmVuZGVyJyxcbiAgICBjb250ZW50OiAncmVuZGVyJyxcbiAgICBnYXA6ICdyZW5kZXInLFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgb25FbnRlcigpIHtcbiAgICAgIGlmICh0aGlzLnNob3VsZEhhbmRsZU1vdXNlKSB0aGlzLmhvdmVyZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgb25MZWF2ZSgpIHtcbiAgICAgIHRoaXMuaG92ZXJlZCA9IGZhbHNlO1xuICAgIH0sXG4gICAgcmVuZGVyKCkge1xuICAgICAgaWYgKHRoaXMuc2hvdWxkU2hvdykgdGhpcy51cGRhdGUoKTtcbiAgICAgIGVsc2UgdGhpcy5jbGVhbigpO1xuICAgIH0sXG4gICAgdXBkYXRlKCkge1xuICAgICAgY29uc3QgcmVjdCA9IHRoaXMuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgbGV0IHsgcGFnZVhPZmZzZXQ6IGxlZnQsIHBhZ2VZT2Zmc2V0OiB0b3AgfSA9IHdpbmRvdztcbiAgICAgIGxldCB7IHBsYWNlbWVudCB9ID0gdGhpcztcbiAgICAgIGlmIChwbGFjZW1lbnQgPT09IFBMQUNFTUVOVF9BVVRPX1kpIHtcbiAgICAgICAgcGxhY2VtZW50ID1cbiAgICAgICAgICByZWN0LmJvdHRvbSA8IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IC8gMiA/IFBMQUNFTUVOVF9CT1RUT00gOiBQTEFDRU1FTlRfVE9QO1xuICAgICAgfVxuICAgICAgaWYgKHBsYWNlbWVudCA9PT0gUExBQ0VNRU5UX1RPUCB8fCBwbGFjZW1lbnQgPT09IFBMQUNFTUVOVF9CT1RUT00pIHtcbiAgICAgICAgbGVmdCArPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjtcbiAgICAgICAgdG9wICs9IHBsYWNlbWVudCA9PT0gUExBQ0VNRU5UX1RPUCA/IHJlY3QudG9wIC0gdGhpcy5nYXAgOiByZWN0LmJvdHRvbSArIHRoaXMuZ2FwO1xuICAgICAgfSBlbHNlIGlmIChwbGFjZW1lbnQgPT09IFBMQUNFTUVOVF9MRUZUIHx8IHBsYWNlbWVudCA9PT0gUExBQ0VNRU5UX1JJR0hUKSB7XG4gICAgICAgIHRvcCArPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcbiAgICAgICAgbGVmdCArPSBwbGFjZW1lbnQgPT09IFBMQUNFTUVOVF9MRUZUID8gcmVjdC5sZWZ0IC0gdGhpcy5nYXAgOiByZWN0LnJpZ2h0ICsgdGhpcy5nYXA7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBVbmtub3duIHBsYWNlbWVudDogJHtwbGFjZW1lbnR9YCk7XG4gICAgICB9XG4gICAgICB0aGlzLnRvb2x0aXAgPSB7XG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgYWxpZ246IHRoaXMuYWxpZ24sXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgdG9wOiBgJHt0b3B9cHhgLFxuICAgICAgICAgIGxlZnQ6IGAke2xlZnR9cHhgLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIGNsZWFuKCkge1xuICAgICAgaWYgKHRoaXMudG9vbHRpcCkge1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZWQoKSB7XG4gICAgYWRkVG9vbHRpcCh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9LFxuICBbbGlmZWN5Y2xlQmVmb3JlVW5tb3VudF0oKSB7XG4gICAgcmVtb3ZlVG9vbHRpcCh0aGlzKTtcbiAgfSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2xcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZWRpdG9yLWNvZGUgZmxleC1hdXRvXCIgcmVmPVwiY29kZVwiPjwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmcmFtZS1ibG9jayBlZGl0b3Itc2VhcmNoIGZsZXhcIiB2LXNob3c9XCJzZWFyY2guc2hvd1wiPlxuICAgICAgPGZvcm0gQHN1Ym1pdC5wcmV2ZW50PVwiZ29Ub0xpbmUoKVwiPlxuICAgICAgICA8c3BhbiB2LXRleHQ9XCJpMThuKCdsYWJlbExpbmVOdW1iZXInKVwiPjwvc3Bhbj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ3LTFcIiB2LW1vZGVsPVwianVtcFBvc1wiPlxuICAgICAgPC9mb3JtPlxuICAgICAgPGZvcm0gY2xhc3M9XCJmbGV4LTFcIiBAc3VibWl0LnByZXZlbnQ9XCJmaW5kTmV4dCgpXCI+XG4gICAgICAgIDxzcGFuIHYtdGV4dD1cImkxOG4oJ2xhYmVsU2VhcmNoJylcIj48L3NwYW4+XG4gICAgICAgIDx0b29sdGlwIDpjb250ZW50PVwidG9vbHRpcC5maW5kXCIgY2xhc3M9XCJmbGV4LTFcIj5cbiAgICAgICAgICA8IS0tIGlkIGlzIHJlcXVpcmVkIGZvciB0aGUgYnVpbHQtaW4gYXV0b2NvbXBsZXRlIHVzaW5nIGVudGVyZWQgdmFsdWVzIC0tPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgOmNsYXNzPVwieyAnaXMtZXJyb3InOiAhc2VhcmNoLmhhc1Jlc3VsdCB9XCJcbiAgICAgICAgICAgIDp0aXRsZT1cInNlYXJjaC5lcnJvclwiXG4gICAgICAgICAgICB0eXBlPVwic2VhcmNoXCJcbiAgICAgICAgICAgIGlkPVwiZWRpdG9yLXNlYXJjaFwiXG4gICAgICAgICAgICByZWY9XCJzZWFyY2hcIlxuICAgICAgICAgICAgdi1tb2RlbD1cInNlYXJjaC5xdWVyeVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC90b29sdGlwPlxuICAgICAgICA8dG9vbHRpcCA6Y29udGVudD1cInRvb2x0aXAuZmluZFByZXZcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJmaW5kTmV4dCgxKVwiPiZsdDs8L2J1dHRvbj5cbiAgICAgICAgPC90b29sdGlwPlxuICAgICAgICA8dG9vbHRpcCA6Y29udGVudD1cInRvb2x0aXAuZmluZE5leHRcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj4mZ3Q7PC9idXR0b24+XG4gICAgICAgIDwvdG9vbHRpcD5cbiAgICAgIDwvZm9ybT5cbiAgICAgIDxmb3JtIGNsYXNzPVwiZmxleC0xXCIgQHN1Ym1pdC5wcmV2ZW50PVwicmVwbGFjZSgpXCIgdi1pZj1cIiFyZWFkT25seVwiPlxuICAgICAgICA8c3BhbiB2LXRleHQ9XCJpMThuKCdsYWJlbFJlcGxhY2UnKVwiPjwvc3Bhbj5cbiAgICAgICAgPCEtLSBpZCBpcyByZXF1aXJlZCBmb3IgdGhlIGJ1aWx0LWluIGF1dG9jb21wbGV0ZSB1c2luZyBlbnRlcmVkIHZhbHVlcyAtLT5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZmxleC0xXCIgdHlwZT1cInNlYXJjaFwiIGlkPVwiZWRpdG9yLXJlcGxhY2VcIiB2LW1vZGVsPVwic2VhcmNoLnJlcGxhY2VcIj5cbiAgICAgICAgPHRvb2x0aXAgOmNvbnRlbnQ9XCJ0b29sdGlwLnJlcGxhY2VcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiB2LXRleHQ9XCJpMThuKCdidXR0b25SZXBsYWNlJylcIj48L2J1dHRvbj5cbiAgICAgICAgPC90b29sdGlwPlxuICAgICAgICA8dG9vbHRpcCA6Y29udGVudD1cInRvb2x0aXAucmVwbGFjZUFsbFwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHYtdGV4dD1cImkxOG4oJ2J1dHRvblJlcGxhY2VBbGwnKVwiIEBjbGljaz1cInJlcGxhY2UoMSlcIj48L2J1dHRvbj5cbiAgICAgICAgPC90b29sdGlwPlxuICAgICAgPC9mb3JtPlxuICAgICAgPGRpdj5cbiAgICAgICAgPHRvb2x0aXAgOmNvbnRlbnQ9XCJpMThuKCdzZWFyY2hVc2VSZWdleCcpXCI+XG4gICAgICAgICAgPHRvZ2dsZS1idXR0b24gdi1tb2RlbD1cInNlYXJjaC5vcHRpb25zLnVzZVJlZ2V4XCI+Lio8L3RvZ2dsZS1idXR0b24+XG4gICAgICAgIDwvdG9vbHRpcD5cbiAgICAgICAgPHRvb2x0aXAgOmNvbnRlbnQ9XCJpMThuKCdzZWFyY2hDYXNlU2Vuc2l0aXZlJylcIj5cbiAgICAgICAgICA8dG9nZ2xlLWJ1dHRvbiB2LW1vZGVsPVwic2VhcmNoLm9wdGlvbnMuY2FzZVNlbnNpdGl2ZVwiPkFhPC90b2dnbGUtYnV0dG9uPlxuICAgICAgICA8L3Rvb2x0aXA+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gQGNsaWNrPVwiY2xlYXJTZWFyY2hcIj4mdGltZXM7PC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCAnY29kZW1pcnJvci9saWIvY29kZW1pcnJvci5jc3MnO1xuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2NvbW1lbnQvY29udGludWVjb21tZW50JztcbmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9jb21tZW50L2NvbW1lbnQnO1xuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2VkaXQvbWF0Y2hicmFja2V0cyc7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vZWRpdC9jbG9zZWJyYWNrZXRzJztcbmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9mb2xkL2ZvbGRjb2RlJztcbmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9mb2xkL2ZvbGRndXR0ZXInO1xuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2ZvbGQvZm9sZGd1dHRlci5jc3MnO1xuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2ZvbGQvYnJhY2UtZm9sZCc7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vZm9sZC9jb21tZW50LWZvbGQnO1xuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL3NlYXJjaC9tYXRjaC1oaWdobGlnaHRlcic7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vc2VhcmNoL3NlYXJjaGN1cnNvcic7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vc2VsZWN0aW9uL2FjdGl2ZS1saW5lJztcbmltcG9ydCAnY29kZW1pcnJvci9rZXltYXAvc3VibGltZSc7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vaGludC9zaG93LWhpbnQuY3NzJztcbmltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9oaW50L3Nob3ctaGludCc7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvYWRkb24vaGludC9qYXZhc2NyaXB0LWhpbnQnO1xuaW1wb3J0ICdjb2RlbWlycm9yL2FkZG9uL2hpbnQvYW55d29yZC1oaW50JztcbmltcG9ydCBDb2RlTWlycm9yIGZyb20gJ2NvZGVtaXJyb3InO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAndnVlbGV0b24vbGliL3Rvb2x0aXAnO1xuaW1wb3J0IFRvZ2dsZUJ1dHRvbiBmcm9tICdAL2NvbW1vbi91aS90b2dnbGUtYnV0dG9uJztcbmltcG9ydCB7IGRlYm91bmNlLCBnZXRVbmlxSWQsIGkxOG4sIHNlbmRDbWREaXJlY3RseSB9IGZyb20gJ0AvY29tbW9uJztcbmltcG9ydCB7IGRlZXBFcXVhbCwgZm9yRWFjaEVudHJ5LCBvYmplY3RQaWNrIH0gZnJvbSAnQC9jb21tb24vb2JqZWN0JztcbmltcG9ydCBob29rU2V0dGluZyBmcm9tICdAL2NvbW1vbi9ob29rLXNldHRpbmcnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnQC9jb21tb24vb3B0aW9ucyc7XG5pbXBvcnQgJy4vY29kZS1hdXRvY29tcGxldGUnO1xuaW1wb3J0ICcuL2NvZGUtanMtbWl4ZWQtbW9kZSc7XG5pbXBvcnQgeyBraWxsVHJhaWxpbmdTcGFjZXMgfSBmcm9tICcuL2NvZGUtdHJhaWxpbmctc3BhY2VzJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xubGV0IG1heERpc3BsYXlMZW5ndGg7XG4vLyBNYWtlIHN1cmUgdGhpcyBpcyBzdGlsbCB0aGUgbG9uZ2VzdCBsaW5lIGluIHRoZSBkb2NcbmNvbnN0IENUUkxfT1BFTiA9IGdldFVuaXFJZCgnXFx4MDInLnJlcGVhdCgyNTYpKTtcbmNvbnN0IENUUkxfQ0xPU0UgPSAnXFx4MDMnLnJlcGVhdCgyNTYpO1xuY29uc3QgQ1RSTF9SRSA9IG5ldyBSZWdFeHAoYCR7Q1RSTF9PUEVOfShcXFxcZCspJHtDVFJMX0NMT1NFfWAsICdnJyk7XG5jb25zdCBQTEFDRUhPTERFUl9DTFMgPSAndG9vLWxvbmctcGxhY2Vob2xkZXInO1xuLy8gVG8gaWRlbnRpZnkgb3VyIENvZGVNaXJyb3IgbWFya2VycyB3ZSdyZSB1c2luZyBhIFN5bWJvbCBzaW5jZSBpdCdzIGFsd2F5cyB1bmlxdWVcbmNvbnN0IFBMQUNFSE9MREVSX1NZTSA9IFN5bWJvbChQTEFDRUhPTERFUl9DTFMpO1xuY29uc3QgY21EZWZhdWx0cyA9IHtcbiAgY29udGludWVDb21tZW50czogdHJ1ZSxcbiAgc3R5bGVBY3RpdmVMaW5lOiB0cnVlLFxuICBmb2xkR3V0dGVyOiB0cnVlLFxuICBndXR0ZXJzOiBbJ0NvZGVNaXJyb3ItbGluZW51bWJlcnMnLCAnQ29kZU1pcnJvci1mb2xkZ3V0dGVyJ10sXG4gIHRoZW1lOiAnZGVmYXVsdCcsXG4gIG1vZGU6ICdqYXZhc2NyaXB0LW1peGVkJyxcbiAgbGluZU51bWJlcnM6IHRydWUsXG4gIG1hdGNoQnJhY2tldHM6IHRydWUsXG4gIGF1dG9DbG9zZUJyYWNrZXRzOiB0cnVlLFxuICBoaWdobGlnaHRTZWxlY3Rpb25NYXRjaGVzOiB0cnVlLFxuICBrZXlNYXA6ICdzdWJsaW1lJyxcbiAgLyogTGltaXRpbmcgdGhlIG1heCBsZW5ndGggdG8gYXZvaWQgZGVsYXlzIHdoaWxlIENvZGVNaXJyb3IgdHJpZXMgdG8gbWFrZSBzZW5zZSBvZiBhIGxvbmcgbGluZS5cbiAgICogMTAwa0IgaXMgZmFzdCBlbm91Z2ggZm9yIHRoZSBtYWluIGVkaXRvciAobW9yZW92ZXIgc3VjaCBsb25nIGxpbmVzIGFyZSByYXJlIGluIHRoZSBtYWluIHNjcmlwdCksXG4gICAqIGFuZCBpcyBiaWcgZW5vdWdoIHRvIGluY2x1ZGUgbW9zdCBvZiBwb3B1bGFyIG1pbmlmaWVkIGxpYnJhcmllcyBmb3IgdGhlIGBAcmVzb3VyY2UvQHJlcXVpcmVgIHZpZXdlci4gKi9cbiAgbWF4RGlzcGxheUxlbmd0aDogMTAwXzAwMCxcbn07XG5jb25zdCBjbUNvbW1hbmRzID0gQ29kZU1pcnJvci5jb21tYW5kcztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIGFjdGl2ZTogQm9vbGVhbixcbiAgICByZWFkT25seToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgIH0sXG4gICAgbW9kZTogU3RyaW5nLFxuICAgIGNvbW1hbmRzOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiBudWxsLFxuICAgIH0sXG4gICAgY21PcHRpb25zOiBPYmplY3QsXG4gIH0sXG4gIGNvbXBvbmVudHM6IHtcbiAgICBUb29sdGlwLFxuICAgIFRvZ2dsZUJ1dHRvbixcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY21EZWZhdWx0cyxcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAganVtcFBvczogJycsXG4gICAgICBzZWFyY2g6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIHF1ZXJ5OiAnJyxcbiAgICAgICAgcmVwbGFjZTogJycsXG4gICAgICAgIGhhc1Jlc3VsdDogZmFsc2UsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICB1c2VSZWdleDogZmFsc2UsXG4gICAgICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBmaW5kOiAnJyxcbiAgICAgICAgZmluZFByZXY6ICcnLFxuICAgICAgICBmaW5kTmV4dDogJycsXG4gICAgICAgIHJlcGxhY2U6ICcnLFxuICAgICAgICByZXBsYWNlQWxsOiAnJyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBhY3RpdmU6ICdvbkFjdGl2ZScsXG4gICAgbW9kZSh2YWx1ZSkge1xuICAgICAgdGhpcy5jbS5zZXRPcHRpb24oJ21vZGUnLCB2YWx1ZSB8fCBjbURlZmF1bHRzLm1vZGUpO1xuICAgIH0sXG4gICAgdmFsdWU6ICd1cGRhdGVWYWx1ZScsXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB1cGRhdGVWYWx1ZSh2YWx1ZSA9IHRoaXMudmFsdWUpIHtcbiAgICAgIGNvbnN0IHsgY20gfSA9IHRoaXM7XG4gICAgICBjbT8ub3BlcmF0aW9uKCgpID0+IHtcbiAgICAgICAgY20uc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICBjbS5jbGVhckhpc3RvcnkoKTtcbiAgICAgICAgY20ubWFya0NsZWFuKCk7XG4gICAgICAgIGNtLmZvY3VzKCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uQmVmb3JlQ2hhbmdlKGNtLCBjaGFuZ2UpIHtcbiAgICAgIGlmICh0aGlzLmNyZWF0ZVBsYWNlaG9sZGVycyhjaGFuZ2UpKSB7XG4gICAgICAgIGNtLm9uKCdjaGFuZ2UnLCB0aGlzLm9uQ2hhbmdlKTsgLy8gdHJpZ2dlcmVkIGJlZm9yZSBET00gaXMgdXBkYXRlZFxuICAgICAgICBjaGFuZ2UudXBkYXRlPy4obnVsbCwgbnVsbCwgY2hhbmdlLnRleHQpO1xuICAgICAgfVxuICAgICAgLy8gVE9ETzogcmVtb3ZlIHBsYWNlaG9sZGVycyB0aGF0IGJlbG9uZyB0byBhIGNoYW5nZSBiZXlvbmQgYHVuZG9EZXB0aGBcbiAgICB9LFxuICAgIG9uQ2hhbmdlKGNtKSB7XG4gICAgICBjbS5vZmYoJ2NoYW5nZScsIHRoaXMub25DaGFuZ2UpO1xuICAgICAgdGhpcy5yZW5kZXJQbGFjZWhvbGRlcnMoKTtcbiAgICB9LFxuICAgIG9uQ2hhbmdlcyhjbSwgW3sgb3JpZ2luIH1dKSB7XG4gICAgICAvLyBObyBuZWVkIHRvIHJlcG9ydCBpZiBjaGFuZ2VkIGV4dGVybmFsbHkgdmlhIHByb3BzLnZhbHVlXG4gICAgICBpZiAob3JpZ2luICE9PSAnc2V0VmFsdWUnKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2NvZGUtZGlydHknLCAhY20uaXNDbGVhbigpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZVBsYWNlaG9sZGVycyhjaGFuZ2UpIHtcbiAgICAgIGNvbnN0IHsgbGluZSwgY2ggfSA9IGNoYW5nZS5mcm9tO1xuICAgICAgbGV0IHJlcyA9IGZhbHNlO1xuICAgICAgbGV0IGxlbjtcbiAgICAgIGxldCBwcmVmaXg7XG4gICAgICBjaGFuZ2UudGV4dC5mb3JFYWNoKCh0ZXh0TGluZSwgaSkgPT4ge1xuICAgICAgICBpZiAodGV4dExpbmUuaW5jbHVkZXMoQ1RSTF9PUEVOKSkge1xuICAgICAgICAgIHRleHRMaW5lID0gdGhpcy5nZXRSZWFsQ29udGVudCh0ZXh0TGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0gdGV4dExpbmUubGVuZ3RoIC0gbWF4RGlzcGxheUxlbmd0aDtcbiAgICAgICAgcHJlZml4ID0gbGVuID4gMCA/IHRleHRMaW5lLm1hdGNoKC9eXFxzKi8pWzBdIDogJyc7XG4gICAgICAgIGxlbiAtPSBwcmVmaXgubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID4gMCAmJiBsZW4gLSB0ZXh0TGluZS5tYXRjaCgvXFxzKiQvKVswXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmVzID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVySWQgKz0gMTtcbiAgICAgICAgICBjb25zdCBpZCA9IHRoaXMucGxhY2Vob2xkZXJJZDtcbiAgICAgICAgICBjb25zdCBib2R5ID0gdGV4dExpbmUuc2xpY2UocHJlZml4Lmxlbmd0aCk7XG4gICAgICAgICAgY29uc3QgcmVwbGFjZWQgPSBgJHtDVFJMX09QRU59JHtpZH0ke0NUUkxfQ0xPU0V9YDtcbiAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVycy5zZXQoaWQsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgICAgIGxpbmU6IGxpbmUgKyBpLFxuICAgICAgICAgICAgY2g6IGNoICsgcHJlZml4Lmxlbmd0aCxcbiAgICAgICAgICAgIGxlbmd0aDogcmVwbGFjZWQubGVuZ3RoLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNoYW5nZS50ZXh0W2ldID0gYCR7cHJlZml4fSR7cmVwbGFjZWR9YDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sXG4gICAgcmVuZGVyUGxhY2Vob2xkZXJzKCkge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlcnMuZm9yRWFjaChwID0+IHtcbiAgICAgICAgaWYgKCFwLmVsKSB7XG4gICAgICAgICAgY29uc3QgeyBsaW5lLCBjaCwgYm9keSwgbGVuZ3RoIH0gPSBwO1xuICAgICAgICAgIGNvbnN0IHsgY20gfSA9IHRoaXM7XG4gICAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgY29uc3QgbWFya2VyID0gY20ubWFya1RleHQoeyBsaW5lLCBjaCB9LCB7IGxpbmUsIGNoOiBjaCArIGxlbmd0aCB9LCB7IHJlcGxhY2VkV2l0aDogZWwgfSk7XG4gICAgICAgICAgbWFya2VyW1BMQUNFSE9MREVSX1NZTV0gPSB0cnVlO1xuICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IFBMQUNFSE9MREVSX0NMUztcbiAgICAgICAgICBlbC50aXRsZSA9IGkxOG4oJ2VkaXRMb25nTGluZVRvb2x0aXAnKTtcbiAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IGAke2JvZHkuc2xpY2UoMCwgbWF4RGlzcGxheUxlbmd0aCl9Li4uWyR7aTE4bignZWRpdExvbmdMaW5lJyl9XWA7XG4gICAgICAgICAgZWwub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghYCR7d2luZG93LmdldFNlbGVjdGlvbigpfWApIHtcbiAgICAgICAgICAgICAgY20uc2V0Q3Vyc29yKG1hcmtlci5maW5kKCkuZnJvbSk7XG4gICAgICAgICAgICAgIGNtLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBwLmVsID0gZWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaW5pdGlhbGl6ZShjbSkge1xuICAgICAgdGhpcy5jbSA9IGNtO1xuICAgICAgdGhpcy5wbGFjZWhvbGRlcnMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLnBsYWNlaG9sZGVySWQgPSAwO1xuICAgICAgbWF4RGlzcGxheUxlbmd0aCA9IGNtLm9wdGlvbnMubWF4RGlzcGxheUxlbmd0aDtcbiAgICAgIGNtLnNldE9wdGlvbigncmVhZE9ubHknLCB0aGlzLnJlYWRPbmx5KTtcbiAgICAgIC8vIHRoZXNlIGFyZSBhY3RpdmUgb25seSBpbiB0aGUgY29kZSBuYXYgdGFiXG4gICAgICBjbS5zdGF0ZS5jb21tYW5kcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAvLyBjYWxsIG93biBtZXRob2RzIGV4cGxpY2l0bHkgdG8gc3RyaXAgYGNtYCBwYXJhbWV0ZXIgcGFzc2VkIGJ5IENvZGVNaXJyb3JcbiAgICAgICAgZmluZDogKCkgPT4gdGhpcy5maW5kKCksXG4gICAgICAgIGZpbmROZXh0OiAoKSA9PiB0aGlzLmZpbmROZXh0KCksXG4gICAgICAgIGZpbmRQcmV2OiAoKSA9PiB0aGlzLmZpbmROZXh0KDEpLFxuICAgICAgICByZXBsYWNlOiAoKSA9PiB0aGlzLnJlcGxhY2UoKSxcbiAgICAgICAgcmVwbGFjZUFsbDogKCkgPT4gdGhpcy5yZXBsYWNlKDEpLFxuICAgICAgfSwgdGhpcy5jb21tYW5kcyk7XG4gICAgICBjb25zdCBjbU9yaWdDb21tYW5kcyA9IHt9O1xuICAgICAgY29uc3QgeyBpbnNlcnRUYWIsIGluc2VydFNvZnRUYWIgfSA9IGNtQ29tbWFuZHM7XG4gICAgICBmb3IgKGNvbnN0IGNtZHMgb2YgW2NtLnN0YXRlLmNvbW1hbmRzLCB7XG4gICAgICAgIGF1dG9jb21wbGV0ZSgpIHtcbiAgICAgICAgICBjbS5zaG93SGludCh7IGhpbnQ6IENvZGVNaXJyb3IuaGludC5hdXRvSGludFdpdGhGYWxsYmFjayB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FuY2VsOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuc2VhcmNoLnNob3cpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWFyY2goKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY20uZXhlY0NvbW1hbmQoY20ubGlzdFNlbGVjdGlvbnMoKVsxXSA/ICdzaW5nbGVTZWxlY3Rpb24nIDogJ2Nsb3NlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb21tZW50U2VsZWN0aW9uKCkge1xuICAgICAgICAgIGNtLmJsb2NrQ29tbWVudChjbS5nZXRDdXJzb3IoJ2Zyb20nKSwgY20uZ2V0Q3Vyc29yKCd0bycpLCB7IGZ1bGxMaW5lczogZmFsc2UgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGluc2VydFRhYigpIHtcbiAgICAgICAgICAvLyBwcmVzc2luZyBUYWIga2V5IGluc2lkZSBhIGxpbmUgd2l0aCBubyBzZWxlY3Rpb24gd2lsbCByZXVzZSBpbmRlbnQgdHlwZSAodGFicy9zcGFjZXMpXG4gICAgICAgICAgKGNtLm9wdGlvbnMuaW5kZW50V2l0aFRhYnMgPyBpbnNlcnRUYWIgOiBpbnNlcnRTb2Z0VGFiKShjbSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dIZWxwOiB0aGlzLmNvbW1hbmRzPy5zaG93SGVscCxcbiAgICAgIH1dKSB7XG4gICAgICAgIGNtZHM6OmZvckVhY2hFbnRyeSgoW2tleSwgdmFsXSkgPT4ge1xuICAgICAgICAgIGNtT3JpZ0NvbW1hbmRzW2tleV0gPSBjbUNvbW1hbmRzW2tleV07XG4gICAgICAgICAgY21Db21tYW5kc1trZXldID0gdmFsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMub3JpZ0NvbW1hbmRzID0gY21PcmlnQ29tbWFuZHM7XG4gICAgICAvLyB0aGVzZSBhcmUgYWN0aXZlIGluIGFsbCBuYXYgdGFic1xuICAgICAgY20uc2V0T3B0aW9uKCdleHRyYUtleXMnLCB7XG4gICAgICAgIEVzYzogJ2NhbmNlbCcsXG4gICAgICAgIEYxOiAnc2hvd0hlbHAnLFxuICAgICAgICAnQ3RybC1TcGFjZSc6ICdhdXRvY29tcGxldGUnLFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuYXNzaWduKENvZGVNaXJyb3Iua2V5TWFwLnN1YmxpbWUsIHtcbiAgICAgICAgJ1NoaWZ0LUN0cmwtLyc6ICdjb21tZW50U2VsZWN0aW9uJyxcbiAgICAgIH0pO1xuICAgICAgY20ub24oJ2tleUhhbmRsZWQnLCAoX2NtLCBfbmFtZSwgZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNtLm9uKCdjaGFuZ2VzJywgdGhpcy5vbkNoYW5nZXMpO1xuICAgICAgdGhpcy5jbS5vbignYmVmb3JlQ2hhbmdlJywgdGhpcy5vbkJlZm9yZUNoYW5nZSk7XG4gICAgICBpZiAodGhpcy52YWx1ZSkgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgICAgdGhpcy4kZW1pdCgncmVhZHknLCBjbSk7XG4gICAgfSxcbiAgICBvbkFjdGl2ZShzdGF0ZSkge1xuICAgICAgY29uc3Qgb25PZmYgPSBzdGF0ZSA/ICdvbicgOiAnb2ZmJztcbiAgICAgIHRoaXMuY21bb25PZmZdKCdibHVyJywgdGhpcy5vbktleURvd25Ub2dnbGVyKTtcbiAgICAgIHRoaXMuY21bb25PZmZdKCdmb2N1cycsIHRoaXMub25LZXlEb3duVG9nZ2xlcik7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5jbT8uZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyogcmVyb3V0ZSBob3RrZXlzIGJhY2sgdG8gQ00gd2hlbiBpdCBpc24ndCBmb2N1c2VkLFxuICAgICAgIGJ1dCBpZ25vcmUgYHdpbmRvd2AgYmx1ciAoYGV2dGAgcGFyYW0gaXMgYWJzZW50KSAqL1xuICAgIG9uS2V5RG93blRvZ2dsZXIoY20sIGV2dCkge1xuICAgICAgaWYgKGV2dCkge1xuICAgICAgICB3aW5kb3dbYCR7ZXZ0LnR5cGUgPT09ICdibHVyJyA/ICdhZGQnIDogJ3JlbW92ZSd9RXZlbnRMaXN0ZW5lcmBdKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25LZXlEb3duKGUpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBDb2RlTWlycm9yLmtleU5hbWUoZSk7XG4gICAgICBpZiAoIXRoaXMuY20pIHJldHVybjtcbiAgICAgIFtcbiAgICAgICAgdGhpcy5jbS5vcHRpb25zLmV4dHJhS2V5cyxcbiAgICAgICAgdGhpcy5jbS5vcHRpb25zLmtleU1hcCxcbiAgICAgIF0uc29tZShrZXlNYXAgPT4ga2V5TWFwICYmIHRoaXMubG9va3VwS2V5KG5hbWUsIGtleU1hcCwgZSkgPT09ICdoYW5kbGVkJyk7XG4gICAgfSxcbiAgICBsb29rdXBLZXkobmFtZSwga2V5TWFwLCBlKSB7XG4gICAgICByZXR1cm4gQ29kZU1pcnJvci5sb29rdXBLZXkobmFtZSwga2V5TWFwLCAoYikgPT4ge1xuICAgICAgICBpZiAoa2V5TWFwID09PSB0aGlzLmNtLm9wdGlvbnMuZXh0cmFLZXlzIHx8IHRoaXMuY20uc3RhdGUuY29tbWFuZHNbYl0pIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB0aGlzLmNtLmV4ZWNDb21tYW5kKGIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzLmNtKTtcbiAgICB9LFxuICAgIGZpbmRGaWxsUXVlcnkoZm9yY2UpIHtcbiAgICAgIGNvbnN0IHsgY20sIHNlYXJjaCB9ID0gdGhpcztcbiAgICAgIGlmICghc2VhcmNoLnF1ZXJ5IHx8IGZvcmNlKSB7XG4gICAgICAgIGNvbnN0IHNlbCA9IGNtLmxpc3RTZWxlY3Rpb25zKCk7XG4gICAgICAgIC8vIHVzZSB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRleHQgaWYgaXQncyB3aXRoaW4gb25lIGxpbmVcbiAgICAgICAgaWYgKHNlbD8ubGVuZ3RoID09PSAxICYmIHNlbFswXS5hbmNob3IubGluZSA9PT0gc2VsWzBdLmhlYWQubGluZSAmJiAhc2VsWzBdLmVtcHR5KCkpIHtcbiAgICAgICAgICBjb25zdCBxdWVyeSA9IGNtLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgIHNlYXJjaC5xdWVyeUZpbGxlZCA9ICEhcXVlcnk7XG4gICAgICAgICAgc2VhcmNoLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIH1cbiAgICAgICAgc2VhcmNoLnNob3cgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIEBwYXJhbSB7Vk1TZWFyY2hPcHRpb25zfSBvcHRzICovXG4gICAgZG9TZWFyY2gob3B0cykge1xuICAgICAgY29uc3QgeyBzZWFyY2ggfSA9IHRoaXM7XG4gICAgICBzZWFyY2guaGFzUmVzdWx0ID0gIXNlYXJjaC5xdWVyeSB8fCAhIXRoaXMuZG9TZWFyY2hJbnRlcm5hbCh7IC4uLm9wdHMsIHdyYXBBcm91bmQ6IHRydWUgfSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1ZNU2VhcmNoT3B0aW9uc30gb3B0c1xuICAgICAqIEByZXR1cm5zIHs/dHJ1ZX1cbiAgICAgKi9cbiAgICBkb1NlYXJjaEludGVybmFsKHsgcmV2ZXJzZWQsIHdyYXBBcm91bmQsIHBvcywgcmV1c2VDdXJzb3IgfSA9IHt9KSB7XG4gICAgICBjb25zdCB7IGNtLCBzZWFyY2ggfSA9IHRoaXM7XG4gICAgICBjb25zdCB7IGNhc2VTZW5zaXRpdmUsIHVzZVJlZ2V4IH0gPSBzZWFyY2gub3B0aW9ucztcbiAgICAgIGxldCByZXRyeSA9IHdyYXBBcm91bmQgPyAyIDogMTtcbiAgICAgIGlmICghcG9zIHx8IHR5cGVvZiBwb3MgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBvcyA9IGNtLmdldEN1cnNvcihwb3MgfHwgKHJldmVyc2VkID8gJ2Zyb20nIDogJ3RvJykpO1xuICAgICAgfVxuICAgICAgZG8ge1xuICAgICAgICBsZXQgY3VyO1xuICAgICAgICBpZiAocmV1c2VDdXJzb3IpIHtcbiAgICAgICAgICBjdXIgPSBzZWFyY2guY3Vyc29yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCB7IHF1ZXJ5IH0gPSBzZWFyY2g7XG4gICAgICAgICAgaWYgKHVzZVJlZ2V4KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBxdWVyeSA9IG5ldyBSZWdFeHAocXVlcnksIGNhc2VTZW5zaXRpdmUgPyAnJyA6ICdnaScpO1xuICAgICAgICAgICAgICBzZWFyY2guZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIHNlYXJjaC5lcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdXIgPSBjbS5nZXRTZWFyY2hDdXJzb3IocXVlcnksIHBvcywgeyBjYXNlRm9sZDogIWNhc2VTZW5zaXRpdmUgfSk7XG4gICAgICAgICAgc2VhcmNoLmN1cnNvciA9IGN1cjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoY3VyLmZpbmQocmV2ZXJzZWQpKSB7XG4gICAgICAgICAgY29uc3QgZnJvbSA9IGN1ci5mcm9tKCk7XG4gICAgICAgICAgY29uc3QgdG8gPSBjdXIudG8oKTtcbiAgICAgICAgICBpZiAoIWNtLmZpbmRNYXJrcyhmcm9tLCB0bywgbSA9PiBtW1BMQUNFSE9MREVSX1NZTV0pLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5yZXZlYWwoZnJvbSwgdG8pO1xuICAgICAgICAgICAgY20uc2V0U2VsZWN0aW9uKGZyb20sIHRvLCB7IHNjcm9sbDogZmFsc2UgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0cnkgLT0gMTtcbiAgICAgICAgaWYgKHJldHJ5KSB7XG4gICAgICAgICAgcG9zID0ge1xuICAgICAgICAgICAgbGluZTogcmV2ZXJzZWQgPyBjbS5kb2Muc2l6ZSA6IDAsXG4gICAgICAgICAgICBjaDogMCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChyZXRyeSk7XG4gICAgfSxcbiAgICBmaW5kKCkge1xuICAgICAgdGhpcy5maW5kRmlsbFF1ZXJ5KHRydWUpO1xuICAgICAgdGhpcy5kb1NlYXJjaCh7IHBvczogJ2Zyb20nIH0pO1xuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBjb25zdCB7IHNlYXJjaCB9ID0gdGhpcy4kcmVmcztcbiAgICAgICAgc2VhcmNoLnNlbGVjdCgpO1xuICAgICAgICBzZWFyY2guZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZmluZE5leHQocmV2ZXJzZWQpIHtcbiAgICAgIGNvbnN0IHJlZm9jdXMgPSAhdGhpcy5zZWFyY2gucXVlcnkgfHwgIXRoaXMuY20uaGFzRm9jdXMoKTtcbiAgICAgIHRoaXMuZmluZEZpbGxRdWVyeSgpO1xuICAgICAgdGhpcy5kb1NlYXJjaCh7IHJldmVyc2VkIH0pO1xuICAgICAgaWYgKHJlZm9jdXMpIHRoaXMuJG5leHRUaWNrKCgpID0+IHRoaXMuJHJlZnMuc2VhcmNoLmZvY3VzKCkpO1xuICAgIH0sXG4gICAgY2xlYXJTZWFyY2goKSB7XG4gICAgICB0aGlzLnNlYXJjaC5zaG93ID0gZmFsc2U7XG4gICAgICB0aGlzLmNtLmZvY3VzKCk7XG4gICAgfSxcbiAgICByZXBsYWNlKGFsbCkge1xuICAgICAgY29uc3QgeyBjbSwgc2VhcmNoIH0gPSB0aGlzO1xuICAgICAgY29uc3QgeyByZXBsYWNlLCBxdWVyeSB9ID0gc2VhcmNoO1xuICAgICAgaWYgKCFxdWVyeSB8fCAhc2VhcmNoLnNob3cpIHtcbiAgICAgICAgc2VhcmNoLnNob3cgPSB0cnVlO1xuICAgICAgICB0aGlzLmZpbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFsbCkge1xuICAgICAgICBjbS5vcGVyYXRpb24oKCkgPT4ge1xuICAgICAgICAgIGxldCBvcHRzID0geyBwb3M6IHsgbGluZTogMCwgY2g6IDAgfSB9O1xuICAgICAgICAgIHdoaWxlICh0aGlzLmRvU2VhcmNoSW50ZXJuYWwob3B0cykpIHtcbiAgICAgICAgICAgIHNlYXJjaC5jdXJzb3IucmVwbGFjZShyZXBsYWNlKTtcbiAgICAgICAgICAgIG9wdHMgPSB7IHJldXNlQ3Vyc29yOiB0cnVlIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgc2VsIH0gPSBjbS5kb2M7XG4gICAgICAgIHRoaXMuZG9TZWFyY2goeyBwb3M6ICdmcm9tJyB9KTtcbiAgICAgICAgaWYgKHNlbC5zb21ldGhpbmdTZWxlY3RlZCgpICYmIHNlbC5lcXVhbHMoY20uZG9jLnNlbCkpIHtcbiAgICAgICAgICBjbS5yZXBsYWNlU2VsZWN0aW9uKHJlcGxhY2UpO1xuICAgICAgICAgIHRoaXMuZG9TZWFyY2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgLyoqIENlbnRlcnMgdGhlIHNlbGVjdGlvbiBpZiBpdCdzIG91dHNpZGUgb2Ygdmlld3BvcnQgc28gdGhlIHN1cnJvdW5kaW5nIGNvbnRleHQgaXMgdmlzaWJsZSAqL1xuICAgIHJldmVhbChmcm9tLCB0bykge1xuICAgICAgY29uc3QgeyBjbSB9ID0gdGhpcztcbiAgICAgIGNvbnN0IHZwbSA9IGNtLm9wdGlvbnMudmlld3BvcnRNYXJnaW47XG4gICAgICBjb25zdCB7IHZpZXdGcm9tLCB2aWV3VG8gfSA9IGNtLmRpc3BsYXk7XG4gICAgICBjb25zdCBpblZpZXcgPSBmcm9tLmxpbmUgPj0gdmlld0Zyb20gKyB2cG1cbiAgICAgICAgJiYgKHRvLmxpbmUgPCB2aWV3VG8gLSBNYXRoLm1pbihjbS5kb2Muc2l6ZSAtIHZpZXdUbywgdnBtKSk7XG4gICAgICBjbS5zY3JvbGxJbnRvVmlldyh7IGZyb20sIHRvIH0sXG4gICAgICAgIGluVmlldyA/IGNtLmRlZmF1bHRUZXh0SGVpZ2h0KCkgKiAyIDogY20uZGlzcGxheS53cmFwcGVyLmNsaWVudEhlaWdodCAvIDIpO1xuICAgIH0sXG4gICAgZ29Ub0xpbmUoKSB7XG4gICAgICBjb25zdCB7IGNtLCBzZWFyY2gsIGp1bXBQb3MgfSA9IHRoaXM7XG4gICAgICBsZXQgW2xpbmUsIGNoXSA9IGp1bXBQb3Muc3BsaXQoJzonKS5tYXAoTnVtYmVyKSB8fCBbXTtcbiAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgIGxpbmUgLT0gMTtcbiAgICAgICAgY2ggPSBjaCA/IGNoIC0gMSA6IDA7XG4gICAgICAgIGNtLm9wZXJhdGlvbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZXZlYWwoeyBsaW5lLCBjaCB9LCB7IGxpbmUsIGNoIH0pO1xuICAgICAgICAgIGNtLnNldEN1cnNvcihsaW5lLCBjaCwgeyBzY3JvbGw6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2VhcmNoLnNob3cgPSBmYWxzZTtcbiAgICAgICAgY20uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uQ29weShlKSB7XG4gICAgICAvLyBDTSBhbHJlYWR5IHByZXBhcmVkIHRoZSBjb3JyZWN0IHRleHQgaW4gRE9NIHNlbGVjdGlvbiwgd2hpY2ggaXMgcGFydGljdWxhcmx5XG4gICAgICAvLyBpbXBvcnRhbnQgd2hlbiB1c2luZyBpdHMgbGluZVdpc2VDb3B5Q3V0IG9wdGlvbiAob24gYnkgZGVmYXVsdClcbiAgICAgIGNvbnN0IHNlbCA9IGAke3dpbmRvdy5nZXRTZWxlY3Rpb24oKX1gIHx8IHRoaXMuY20/LmdldFNlbGVjdGlvbigpO1xuICAgICAgaWYgKCFzZWwpIHJldHVybjtcbiAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFJlYWxDb250ZW50KHNlbCk7XG4gICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dCcsIHRleHQpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9LFxuICAgIGdldFJlYWxDb250ZW50KHRleHQpIHtcbiAgICAgIGNvbnN0IHsgcGxhY2Vob2xkZXJzIH0gPSB0aGlzO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0ZXh0ID0ga2lsbFRyYWlsaW5nU3BhY2VzKHRoaXMuY20sIHBsYWNlaG9sZGVycyk7XG4gICAgICB9XG4gICAgICBpZiAocGxhY2Vob2xkZXJzLnNpemUpIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShDVFJMX1JFLCAoXywgaWQpID0+IHBsYWNlaG9sZGVycy5nZXQoK2lkKT8uYm9keSB8fCAnJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9LFxuICAgIGV4cGFuZEtleU1hcChyZXMsIC4uLm1hcHMpIHtcbiAgICAgIGlmICghcmVzKSB7XG4gICAgICAgIGNvbnN0IHsga2V5TWFwLCBleHRyYUtleXMgfSA9IHRoaXMuY20ub3B0aW9ucztcbiAgICAgICAgbWFwcyA9IFtleHRyYUtleXMsIGtleU1hcF07XG4gICAgICAgIHJlcyA9IHt9O1xuICAgICAgfVxuICAgICAgbWFwcy5mb3JFYWNoKChtYXApID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBtYXAgPT09ICdzdHJpbmcnKSBtYXAgPSBDb2RlTWlycm9yLmtleU1hcFttYXBdO1xuICAgICAgICBtYXA6OmZvckVhY2hFbnRyeSgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXNba2V5XSAmJiAvXlthLXpdKyQvaS50ZXN0KHZhbHVlKSAmJiBDb2RlTWlycm9yLmNvbW1hbmRzW3ZhbHVlXSkge1xuICAgICAgICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobWFwLmZhbGx0aHJvdWdoKSB0aGlzLmV4cGFuZEtleU1hcChyZXMsIG1hcC5mYWxsdGhyb3VnaCk7XG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSByZXMuZmFsbHRocm91Z2g7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IHVzZXJPcHRzID0gb3B0aW9ucy5nZXQoJ2VkaXRvcicpO1xuICAgIGNvbnN0IHRoZW1lID0gb3B0aW9ucy5nZXQoJ2VkaXRvclRoZW1lTmFtZScpO1xuICAgIGNvbnN0IGludGVybmFsT3B0cyA9IHRoaXMuY21PcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAuLi5jbURlZmF1bHRzLFxuICAgICAgLi4udXNlck9wdHMsXG4gICAgICAuLi50aGVtZSAmJiB7IHRoZW1lIH0sXG4gICAgICAuLi5pbnRlcm5hbE9wdHMsIC8vIGludGVybmFsIG9wdGlvbnMgcGFzc2VkIHZpYSBgcHJvcHNgIGhhdmUgdGhlIGhpZ2hlc3QgcHJpb3JpdHlcbiAgICAgIG1vZGU6IHRoaXMubW9kZSB8fCBjbURlZmF1bHRzLm1vZGUsXG4gICAgfTtcbiAgICBDb2RlTWlycm9yLnJlZ2lzdGVySGVscGVyKCdoaW50JywgJ2F1dG9IaW50V2l0aEZhbGxiYWNrJywgKGNtLCAuLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjbS5nZXRIZWxwZXIoY20uZ2V0Q3Vyc29yKCksICdoaW50Jyk/LihjbSwgLi4uYXJncyk7XG4gICAgICAvLyBmYWxsYmFjayB0byBhbnl3b3JkIGlmIGRlZmF1bHQgcmV0dXJucyBub3RoaW5nIChvciBubyBkZWZhdWx0KVxuICAgICAgcmV0dXJuIHJlc3VsdD8ubGlzdC5sZW5ndGggPyByZXN1bHQgOiBDb2RlTWlycm9yLmhpbnQuYW55d29yZChjbSwgLi4uYXJncyk7XG4gICAgfSk7XG4gICAgdGhpcy5pbml0aWFsaXplKENvZGVNaXJyb3IodGhpcy4kcmVmcy5jb2RlLCBvcHRzKSk7XG4gICAgdGhpcy5leHBhbmRLZXlNYXAoKTo6Zm9yRWFjaEVudHJ5KChba2V5LCBjbWRdKSA9PiB7XG4gICAgICBjb25zdCB0dCA9IHRoaXMudG9vbHRpcFtjbWRdO1xuICAgICAgaWYgKHR0ICE9IG51bGwpIHRoaXMudG9vbHRpcFtjbWRdICs9IGAke3R0ID8gJywgJyA6ICcnfSR7a2V5fWA7XG4gICAgfSk7XG4gICAgLy8gcHJlc3NpbmcgVGFiIGtleSBpbnNpZGUgYSBsaW5lIHdpdGggbm8gc2VsZWN0aW9uIHdpbGwgcmV1c2UgaW5kZW50IHNpemVcbiAgICBpZiAoIW9wdHMudGFiU2l6ZSkgdGhpcy5jbS5vcHRpb25zLnRhYlNpemUgPSB0aGlzLmNtLm9wdGlvbnMuaW5kZW50VW5pdDtcbiAgICB0aGlzLiRyZWZzLmNvZGUuYWRkRXZlbnRMaXN0ZW5lcignY29weScsIHRoaXMub25Db3B5KTtcbiAgICB0aGlzLm9uQWN0aXZlKHRydWUpO1xuICAgIGhvb2tTZXR0aW5nKCdlZGl0b3InLCAobmV3VXNlck9wdHMpID0+IHtcbiAgICAgIC8vIFVzZSBkZWZhdWx0cyBmb3Iga2V5cyB0aGF0IHdlcmUgcHJlc2VudCBpbiB0aGUgb2xkIHVzZXJPcHRzIGJ1dCBnb3QgZGVsZXRlZCBpbiBuZXdVc2VyT3B0c1xuICAgICAgKHsgLi4uY21EZWZhdWx0cywgLi4ubmV3VXNlck9wdHMgfSk6OmZvckVhY2hFbnRyeSgoW2tleSwgdmFsXSkgPT4ge1xuICAgICAgICBpZiAoKGtleSBpbiBuZXdVc2VyT3B0cyB8fCBrZXkgaW4gdXNlck9wdHMpXG4gICAgICAgICYmICEoa2V5IGluIGludGVybmFsT3B0cylcbiAgICAgICAgJiYgIWRlZXBFcXVhbCh0aGlzLmNtLmdldE9wdGlvbihrZXkpLCB2YWwpKSB7XG4gICAgICAgICAgdGhpcy5jbS5zZXRPcHRpb24oa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHVzZXJPcHRzID0gbmV3VXNlck9wdHM7XG4gICAgfSk7XG4gICAgc2VuZENtZERpcmVjdGx5KCdTdG9yYWdlJywgWydiYXNlJywgJ2dldE9uZScsICdlZGl0b3JTZWFyY2gnXSkudGhlbihwcmV2ID0+IHtcbiAgICAgIGNvbnN0IHsgc2VhcmNoIH0gPSB0aGlzO1xuICAgICAgY29uc3Qgc2F2ZVNlYXJjaExhdGVyID0gZGVib3VuY2UoKCkgPT4ge1xuICAgICAgICBzZW5kQ21kRGlyZWN0bHkoJ1N0b3JhZ2UnLCBbJ2Jhc2UnLCAnc2V0T25lJywgJ2VkaXRvclNlYXJjaCcsXG4gICAgICAgICAgb2JqZWN0UGljayhzZWFyY2gsIFsncXVlcnknLCAncmVwbGFjZScsICdvcHRpb25zJ10pXSk7XG4gICAgICB9LCA1MDApO1xuICAgICAgY29uc3Qgc2VhcmNoQWdhaW4gPSAoKSA9PiB7XG4gICAgICAgIHNhdmVTZWFyY2hMYXRlcigpO1xuICAgICAgICB0aGlzLmRvU2VhcmNoKHsgcG9zOiAnZnJvbScgfSk7XG4gICAgICB9O1xuICAgICAgaWYgKHByZXYpIE9iamVjdC5hc3NpZ24oc2VhcmNoLCBwcmV2KTtcbiAgICAgIHRoaXMuJHdhdGNoKCdzZWFyY2gucXVlcnknLCAoKSA9PiB7XG4gICAgICAgIGlmICghc2VhcmNoLnF1ZXJ5RmlsbGVkKSBzZWFyY2hBZ2FpbigpO1xuICAgICAgICBlbHNlIHNlYXJjaC5xdWVyeUZpbGxlZCA9IG51bGw7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJHdhdGNoKCdzZWFyY2gub3B0aW9ucycsIHNlYXJjaEFnYWluLCB7IGRlZXA6IHRydWUgfSk7XG4gICAgICB0aGlzLiR3YXRjaCgnc2VhcmNoLnJlcGxhY2UnLCBzYXZlU2VhcmNoTGF0ZXIpO1xuICAgIH0pO1xuICAgIGhvb2tTZXR0aW5nKCdlZGl0b3JUaGVtZU5hbWUnLCB2YWwgPT4ge1xuICAgICAgaWYgKHZhbCAhPSBudWxsICYmIHZhbCAhPT0gdGhpcy5jbS5vcHRpb25zLnRoZW1lKSB7XG4gICAgICAgIHRoaXMuY20uc2V0T3B0aW9uKCd0aGVtZScsIHZhbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICB9LFxuICBiZWZvcmVVbm1vdW50KCkge1xuICAgIE9iamVjdC5hc3NpZ24oY21Db21tYW5kcywgdGhpcy5vcmlnQ29tbWFuZHMpO1xuICAgIHRoaXMub25BY3RpdmUoZmFsc2UpO1xuICB9LFxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4kc2VsZWN0aW9uQmc6ICNkN2Q0ZjA7IC8qIGNvcGllZCBmcm9tIGNvZGVtaXJyb3IuY3NzICovXG4kc2VsZWN0aW9uRGFya0JnOiByZ2JhKDgwLCA3NSwgNjUsIC45OSk7XG5cbi8qIGNvbXBhdGlibGUgd2l0aCBvbGQgYnJvd3NlcnMsIGUuZy4gTWF4dGhvbiA0LjQsIENocm9tZSA1MC0gKi9cbi5lZGl0b3ItY29kZS5mbGV4LWF1dG8ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gID4gZGl2IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbn1cblxuLmVkaXRvci1zZWFyY2gge1xuICB3aGl0ZS1zcGFjZTogcHJlO1xuICBmbGV4LXdyYXA6IHdyYXA7IC8vIHdyYXAgZmllbGRzIGluIGEgbmFycm93IHdpbmRvd1xuICA+IGZvcm0sXG4gID4gZGl2IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luLXJpZ2h0OiAuNXJlbTtcbiAgfVxuICBpbnB1dFt0eXBlPXNlYXJjaF0ge1xuICAgIG1pbi13aWR0aDogOGVtO1xuICB9XG4gIHNwYW4gPiBpbnB1dCB7IC8vIGEgdG9vbHRpcCdlZCBpbnB1dFxuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5pcy1lcnJvciwgLmlzLWVycm9yOmZvY3VzIHtcbiAgICBib3JkZXItY29sb3I6ICNlODU2MDA7XG4gICAgYmFja2dyb3VuZDogI2U4NTYwMDEwO1xuICB9XG59XG5cbi50b28tbG9uZy1wbGFjZWhvbGRlciB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLyogQ29kZU1pcnJvciBzaG93LWhpbnRzIGZpeCB0byB3b3JrIGhlcmUgKi9cbi5Db2RlTWlycm9yLWhpbnRzIHtcbiAgei1pbmRleDogOTk5OTtcbn1cblxuLyogZml4IGNvbnRlbnRlZGl0YWJsZSBzZWxlY3Rpb24gY29sb3IgYnVnICovXG4uQ29kZU1pcnJvciAuQ29kZU1pcnJvci1saW5lIHtcbiAgOjpzZWxlY3Rpb24ge1xuICAgIGJhY2tncm91bmQ6ICRzZWxlY3Rpb25CZztcbiAgfVxuICAvKiBtdXN0IGJlIHVzZWQgc2VwYXJhdGVseSBvdGhlcndpc2UgdGhlIGVudGlyZSBydWxlIGlzIGlnbm9yZWQgaW4gQ2hyb21lICovXG4gIDo6LW1vei1zZWxlY3Rpb24ge1xuICAgIGJhY2tncm91bmQ6ICRzZWxlY3Rpb25CZztcbiAgfVxufVxuXG4uY20tbWF0Y2hoaWdobGlnaHQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2xhKDE2OCwgMTAwJSwgNTAlLCAwLjE1KTtcbn1cbi5jbS10cmFpbGluZ3NwYWNlIHtcbiAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KGNvcm5mbG93ZXJibHVlLCB0cmFuc3BhcmVudCAxcHgpIDAgNTAlIC8gMWNoIDFjaCByZXBlYXQteDtcbn1cbmRpdi5Db2RlTWlycm9yIHNwYW4uQ29kZU1pcnJvci1tYXRjaGluZ2JyYWNrZXQgeyAvKiB0aGUgc2FtZSBzZWxlY3RvciB1c2VkIGluIGNvZGVtaXJyb3IuY3NzICovXG4gIGNvbG9yOiB1bnNldDtcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsYSgxMDIsIDgwJSwgNTAlLCAwLjMpO1xufVxuLmNtLXMtZGVmYXVsdCB7XG4gIC5jbS1jb21tZW50IHtcbiAgICBjb2xvcjogIzkxODk4MjtcbiAgfVxuICAuY20tc3RyaW5nLTIgeyAvLyB0ZW1wbGF0ZSBsaXRlcmFsOiBgZXhhbXBsZWBcbiAgICBjb2xvcjogIzg3MDtcbiAgfVxuICAuY20tc3RyaW5nLTIuY20tcmVnZXhwIHtcbiAgICBjb2xvcjogI2Q2MDtcbiAgfVxufVxuXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XG4gIC5jbS1tYXRjaGhpZ2hsaWdodCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogaHNsYSg0MCwgMTAwJSwgNTAlLCAwLjEpO1xuICAgIGJvcmRlci1ib3R0b20tY29sb3I6IGhzbGEoNDAsIDEwMCUsIDUwJSwgMC4yNSk7XG4gIH1cbiAgLkNvZGVNaXJyb3ItaGludHMge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWJnKTtcbiAgfVxuICAuQ29kZU1pcnJvci1oaW50IHtcbiAgICBjb2xvcjogdmFyKC0tZmcpO1xuICB9XG4gIGxpLkNvZGVNaXJyb3ItaGludC1hY3RpdmUge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWZnKTtcbiAgICBjb2xvcjogdmFyKC0tYmcpO1xuICB9XG4gIC5Db2RlTWlycm9yIHtcbiAgICBjb2xvcjogdmFyKC0tZmcpO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWJnKTtcbiAgICAmICYtc2Nyb2xsYmFyLWZpbGxlcixcbiAgICAmICYtZ3V0dGVyLWZpbGxlciB7XG4gICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgIH1cbiAgICAmICYtZ3V0dGVycyB7XG4gICAgICBib3JkZXItY29sb3I6IHZhcigtLWZpbGwtMik7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1maWxsLTAtNSk7XG4gICAgfVxuICAgICYgJi1zZWxlY3RlZCB7XG4gICAgICBiYWNrZ3JvdW5kOiAkc2VsZWN0aW9uRGFya0JnO1xuICAgIH1cbiAgICAmICYtbGluZSB7XG4gICAgICA6OnNlbGVjdGlvbiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICRzZWxlY3Rpb25EYXJrQmc7XG4gICAgICB9XG4gICAgICAvKiBtdXN0IGJlIHVzZWQgc2VwYXJhdGVseSBvdGhlcndpc2UgdGhlIGVudGlyZSBydWxlIGlzIGlnbm9yZWQgaW4gQ2hyb21lICovXG4gICAgICA6Oi1tb3otc2VsZWN0aW9uIHtcbiAgICAgICAgYmFja2dyb3VuZDogJHNlbGVjdGlvbkRhcmtCZztcbiAgICAgIH1cbiAgICB9XG4gICAgJiAmLWd1dHRlcm1hcmtlciB7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAmLXN1YnRsZSB7XG4gICAgICAgIGNvbG9yOiAjZDBkMGQwO1xuICAgICAgfVxuICAgIH1cbiAgICAmICYtbGluZW51bWJlciB7XG4gICAgICBjb2xvcjogIzY2NjtcbiAgICB9XG4gICAgJiAmLWN1cnNvciB7XG4gICAgICBib3JkZXItY29sb3I6ICNmOGY4ZjA7XG4gICAgfVxuICAgICYgJi1hY3RpdmVsaW5lLWJhY2tncm91bmQge1xuICAgICAgYmFja2dyb3VuZDogIzFhMWExYTtcbiAgICB9XG4gICAgJiAmLW1hdGNoaW5nYnJhY2tldCB7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgYmFja2dyb3VuZDogIzQ0NDtcbiAgICAgIGNvbG9yOiB5ZWxsb3cgIWltcG9ydGFudDtcbiAgICB9XG4gIH1cbiAgLmNtLXMtZGVmYXVsdCB7XG4gICAgLy8gbW9zdGx5IGNvcGllZCBmcm9tIE1vbm9rYWkgdGhlbWVcbiAgICAuY20tY29tbWVudCB7XG4gICAgICBjb2xvcjogIzc1NzE1ZTtcbiAgICB9XG4gICAgLmNtLWF0b20ge1xuICAgICAgY29sb3I6ICNhZTgxZmY7XG4gICAgfVxuICAgIC5jbS1udW1iZXIge1xuICAgICAgY29sb3I6ICNhZTgxZmY7XG4gICAgfVxuICAgIC5jbS1jb21tZW50LmNtLWF0dHJpYnV0ZSB7XG4gICAgICBjb2xvcjogIzk3Yjc1NztcbiAgICB9XG4gICAgLmNtLWNvbW1lbnQuY20tZGVmIHtcbiAgICAgIGNvbG9yOiAjYmM5MjYyO1xuICAgIH1cbiAgICAuY20tY29tbWVudC5jbS10YWcge1xuICAgICAgY29sb3I6ICNiYzYyODM7XG4gICAgfVxuICAgIC5jbS1jb21tZW50LmNtLXR5cGUge1xuICAgICAgY29sb3I6ICM1OTk4YTY7XG4gICAgfVxuICAgIC5jbS1wcm9wZXJ0eSxcbiAgICAuY20tYXR0cmlidXRlIHtcbiAgICAgIGNvbG9yOiAjYTZlMjJlO1xuICAgIH1cbiAgICAuY20ta2V5d29yZCB7XG4gICAgICBjb2xvcjogI2Y5MjY3MjtcbiAgICB9XG4gICAgLmNtLWJ1aWx0aW4ge1xuICAgICAgY29sb3I6ICM2NmQ5ZWY7XG4gICAgfVxuICAgIC5jbS1zdHJpbmcge1xuICAgICAgY29sb3I6ICNlNmRiNzQ7XG4gICAgfVxuICAgIC5jbS1zdHJpbmctMiB7XG4gICAgICBjb2xvcjogI2JjYjE0OTtcbiAgICB9XG4gICAgLmNtLXN0cmluZy0yLmNtLXJlZ2V4cCB7XG4gICAgICBjb2xvcjogI2ZmMDBmNztcbiAgICB9XG4gICAgLmNtLXZhcmlhYmxlIHtcbiAgICAgIGNvbG9yOiAjZjhmOGYyO1xuICAgIH1cbiAgICAuY20tdmFyaWFibGUtMiB7XG4gICAgICBjb2xvcjogIzllZmZmZjtcbiAgICB9XG4gICAgLmNtLXZhcmlhYmxlLTMsXG4gICAgLmNtLXR5cGUge1xuICAgICAgY29sb3I6ICM2NmQ5ZWY7XG4gICAgfVxuICAgIC5jbS1kZWYge1xuICAgICAgY29sb3I6ICNmZDk3MWY7XG4gICAgfVxuICAgIC5jbS1icmFja2V0IHtcbiAgICAgIGNvbG9yOiAjZjhmOGYyO1xuICAgIH1cbiAgICAuY20tdGFnIHtcbiAgICAgIGNvbG9yOiAjZjkyNjcyO1xuICAgIH1cbiAgICAuY20taGVhZGVyIHtcbiAgICAgIGNvbG9yOiAjYWU4MWZmO1xuICAgIH1cbiAgICAuY20tbGluayB7XG4gICAgICBjb2xvcjogI2FlODFmZjtcbiAgICB9XG4gICAgLmNtLWVycm9yIHtcbiAgICAgIGNvbG9yOiAjZjhmOGYwO1xuICAgICAgYmFja2dyb3VuZDogI2Y5MjY3MjtcbiAgICB9XG4gICAgLmNtLW9wZXJhdG9yIHtcbiAgICAgIGNvbG9yOiAjOTk5XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZWRpdC1leHRlcm5hbHMgZmxleCBmbGV4LWNvbFwiPlxuICAgIDxkaXYgdi1pZj1cIiFpbnN0YWxsIHx8IGFsbC5sZW5ndGggPiAxXCIgY2xhc3M9XCJzZWxlY3RcIlxuICAgICAgICAgOmRhdGEtaGFzLW1haW49XCJpbnN0YWxsID8gJycgOiBudWxsXCI+XG4gICAgICA8ZGwgdi1mb3I9XCIoW3R5cGUsIHVybCwgY29udGVudHNdLCBpKSBvZiBhbGxcIiA6a2V5PVwiaVwiXG4gICAgICAgICAgY2xhc3M9XCJmbGV4XCJcbiAgICAgICAgICA6Y2xhc3M9XCJ7XG4gICAgICAgICAgICBhY3RpdmU6IGluZGV4ID09PSBpLFxuICAgICAgICAgICAgbG9hZGluZzogaW5zdGFsbCAmJiBpICYmIGNvbnRlbnRzID09IG51bGwsXG4gICAgICAgICAgICBlcnJvcjogY29udGVudHMgPT09IGZhbHNlLFxuICAgICAgICAgIH1cIlxuICAgICAgICAgIEBjbGljaz1cImNvbnRlbnRzICE9PSBmYWxzZSAmJiAoaW5kZXggPSBpKVwiPlxuICAgICAgICA8ZHQgdi10ZXh0PVwidHlwZVwiLz5cbiAgICAgICAgPGRkIGNsYXNzPVwiZWxsaXBzaXMgZmxleC0xXCI+XG4gICAgICAgICAgPGEgOmhyZWY9XCJ1cmxcIiB0YXJnZXQ9XCJfYmxhbmtcIj4mbmVhcnI7PC9hPlxuICAgICAgICAgIDxzcGFuIHYtdGV4dD1cImRlY29kZVVSSUNvbXBvbmVudCh1cmwpXCIvPlxuICAgICAgICA8L2RkPlxuICAgICAgICA8ZGQgdi1pZj1cImNvbnRlbnRzXCIgdi10ZXh0PVwiZm9ybWF0TGVuZ3RoKGNvbnRlbnRzLCB0eXBlKVwiIGNsYXNzPVwibWwtMlwiLz5cbiAgICAgIDwvZGw+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRzIHBvcy1yZWwgZmxleC0xXCI+XG4gICAgICA8aW1nIHYtaWY9XCJkYXRhLmltYWdlXCIgOnNyYz1cImRhdGEuaW1hZ2VcIj5cbiAgICAgIDxWbUNvZGVcbiAgICAgICAgdi1zaG93PVwiIWRhdGEuaW1hZ2VcIlxuICAgICAgICBjbGFzcz1cImFicy1mdWxsXCJcbiAgICAgICAgOnZhbHVlPVwiZGF0YS5jb2RlXCJcbiAgICAgICAgcmVmPVwiY29kZVwiXG4gICAgICAgIHJlYWRPbmx5XG4gICAgICAgIDpjbS1vcHRpb25zPVwiY21PcHRpb25zXCJcbiAgICAgICAgOm1vZGU9XCJkYXRhLm1vZGVcIlxuICAgICAgICA6Y29tbWFuZHM9XCJjb21tYW5kc1wiXG4gICAgICAvPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkYXRhVXJpMnRleHQsIGZvcm1hdEJ5dGVMZW5ndGgsIGkxOG4sIG1ha2VEYXRhVXJpLCBzZW5kQ21kRGlyZWN0bHkgfSBmcm9tICdAL2NvbW1vbic7XG5pbXBvcnQgVm1Db2RlIGZyb20gJ0AvY29tbW9uL3VpL2NvZGUnO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKFsndmFsdWUnLCAnY21PcHRpb25zJywgJ2NvbW1hbmRzJywgJ2luc3RhbGwnXSk7XG5cbmNvbnN0IGRlcGVuZGVuY2llcyA9IHJlZih7fSk7XG5cbmNvbnN0IGluZGV4ID0gcmVmKDApO1xuXG5jb25zdCBkYXRhID0gcmVmKHt9KTtcblxuY29uc3QgYWxsID0gY29tcHV0ZWQoKCkgPT4ge1xuICBjb25zdCB7IGNvZGUsIGRlcHMgPSBkZXBlbmRlbmNpZXMudmFsdWUsIHVybDogbWFpblVybCB9ID0gcHJvcHMuaW5zdGFsbCB8fCB7fTtcbiAgY29uc3QgeyByZXF1aXJlID0gW10sIHJlc291cmNlcyA9IHt9IH0gPSBwcm9wcy52YWx1ZS5tZXRhIHx8IHt9O1xuICByZXR1cm4gW1xuICAgIC4uLm1haW5VcmwgPyBbW2kxOG4oJ2VkaXROYXZDb2RlJyksIG1haW5VcmwsIGNvZGVdXSA6IFtdLFxuICAgIC4uLnJlcXVpcmUubWFwKHVybCA9PiBbJ0ByZXF1aXJlJywgdXJsLCBkZXBzW2AwJHt1cmx9YF1dKSxcbiAgICAuLi5PYmplY3QuZW50cmllcyhyZXNvdXJjZXMpLm1hcCgoW2lkLCB1cmxdKSA9PiBbYEByZXNvdXJjZSAke2lkfWAsIHVybCwgZGVwc1tgMSR7dXJsfWBdXSksXG4gIF07XG59KTtcblxud2F0Y2hFZmZlY3QodXBkYXRlKTtcblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlKCkge1xuICBjb25zdCBbdHlwZSwgdXJsXSA9IGFsbC52YWx1ZVtpbmRleC52YWx1ZV07XG4gIGlmICghdXJsKSByZXR1cm47XG4gIGNvbnN0IHsgaW5zdGFsbCB9ID0gcHJvcHM7XG4gIGNvbnN0IGlzTWFpbiA9IGluc3RhbGwgJiYgIWluZGV4LnZhbHVlO1xuICBjb25zdCBpc0RhdGFVcmkgPSB1cmwuc3RhcnRzV2l0aCgnZGF0YTonKTtcbiAgY29uc3QgaXNSZXEgPSAhaXNNYWluICYmICFpc0RhdGFVcmkgJiYgdHlwZSA9PT0gJ0ByZXF1aXJlJztcbiAgY29uc3QgZGVwc1VybCA9IGAkeyshaXNSZXF9JHt1cmx9YDtcbiAgbGV0IGNvZGU7XG4gIGxldCBjb250ZW50VHlwZTtcbiAgbGV0IGltZztcbiAgbGV0IHJhdztcbiAgaWYgKGlzTWFpbikge1xuICAgIGNvZGUgPSBpbnN0YWxsLmNvZGU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGF0YVVyaSkge1xuICAgICAgcmF3ID0gdXJsO1xuICAgIH0gZWxzZSBpZiAoaW5zdGFsbCkge1xuICAgICAgcmF3ID0gaW5zdGFsbC5kZXBzW2RlcHNVcmxdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXkgPSBwcm9wcy52YWx1ZS5jdXN0b20ucGF0aE1hcD8uW3VybF0gfHwgdXJsO1xuICAgICAgcmF3ID0gYXdhaXQgc2VuZENtZERpcmVjdGx5KCdTdG9yYWdlJywgW2lzUmVxID8gJ3JlcXVpcmUnIDogJ2NhY2hlJywgJ2dldE9uZScsIGtleV0pO1xuICAgICAgaWYgKCFpc1JlcSkgcmF3ID0gbWFrZURhdGFVcmkocmF3LCBrZXkpO1xuICAgIH1cbiAgICBpZiAoaXNSZXEgfHwgIXJhdykge1xuICAgICAgY29kZSA9IHJhdztcbiAgICB9IGVsc2UgaWYgKHJhdy5zdGFydHNXaXRoKCdkYXRhOmltYWdlJykpIHtcbiAgICAgIGltZyA9IHJhdztcbiAgICB9IGVsc2Uge1xuICAgICAgW2NvbnRlbnRUeXBlLCBjb2RlXSA9IHJhdy5zcGxpdCgnLCcpO1xuICAgICAgaWYgKGNvZGUgPT0gbnVsbCkgeyAvLyB3b3JrYXJvdW5kIGZvciBidWdzIGluIG9sZCBWTSwgc2VlIDJlMTM1Y2Y3XG4gICAgICAgIGNvbnN0IGZpbGVFeHQgPSB1cmwubWF0Y2goL1xcLihcXHcrKShbIyY/XXwkKS8pPy5bMV0gfHwgJyc7XG4gICAgICAgIGNvbnRlbnRUeXBlID0gL14ocG5nfGpwZT9nfGJtcHxzdmd6P3xnenx6aXApJC9pLnRlc3QoZmlsZUV4dClcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiBgdGV4dC8ke2ZpbGVFeHQudG9Mb3dlckNhc2UoKX1gO1xuICAgICAgfSBlbHNlIGlmIChjb250ZW50VHlwZSkge1xuICAgICAgICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnNwbGl0KC9bOjtdLylbMV07XG4gICAgICB9XG4gICAgICBjb2RlID0gZGF0YVVyaTJ0ZXh0KGlzRGF0YVVyaSA/IHVybCA6IGAke2NvbnRlbnRUeXBlfTtiYXNlNjQsJHtjb2RlfWApO1xuICAgIH1cbiAgfVxuICBkYXRhLnZhbHVlID0ge1xuICAgIGltZyxcbiAgICBjb2RlLFxuICAgIG1vZGU6IGNvbnRlbnRUeXBlID09PSAndGV4dC9jc3MnIHx8IC9cXC5jc3MoWyMmP118JCkvaS50ZXN0KHVybCkgPyAnY3NzJyA6IG51bGwsXG4gIH07XG4gIGRlcGVuZGVuY2llcy52YWx1ZVtkZXBzVXJsXSA9IGNvZGU7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExlbmd0aChzdHIsIHR5cGUpIHtcbiAgbGV0IGxlbiA9IHN0cj8ubGVuZ3RoO1xuICBpZiAodHlwZS5zdGFydHNXaXRoKCdAcmVzb3VyY2UnKSkge1xuICAgIGxlbiA9IE1hdGgucm91bmQoKGxlbiAtIHN0ci5pbmRleE9mKCcsJykgLSAxKSAqIDYgLyA4KTsgLy8gYmFzZTY0IHVzZXMgNiBiaXRzIG91dCBvZiA4XG4gIH1cbiAgcmV0dXJuIGZvcm1hdEJ5dGVMZW5ndGgobGVuKTtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4kb3V0ZXJQYWRYOiAxcmVtO1xuJG1haW5FbnRyeUJvcmRlcjogNnB4IGRvdWJsZTtcbi5lZGl0LWV4dGVybmFscyB7XG4gIC0tYm9yZGVyOiAkbWFpbkVudHJ5Qm9yZGVyIHZhcigtLWZpbGwtOCk7XG4gIGJvcmRlci10b3A6IHZhcigtLWJvcmRlcik7XG4gID4gLnNlbGVjdCB7XG4gICAgbWluLWhlaWdodDogMS4yNXJlbTtcbiAgICBtYXgtaGVpZ2h0OiAxNXZoO1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWZpbGwtMyk7XG4gICAgcGFkZGluZy1ib3R0b206IGNhbGMoJG91dGVyUGFkWC8yKTtcbiAgICAmW2RhdGEtaGFzLW1haW5dIGRsOmZpcnN0LWNoaWxkIHtcbiAgICAgIHBhZGRpbmctdG9wOiAuNWVtO1xuICAgICAgcGFkZGluZy1ib3R0b206IC41ZW07XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZmlsbC0zKTtcbiAgICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgICB0b3A6IDA7XG4gICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iZyk7XG4gICAgfVxuICAgIGRsIHtcbiAgICAgIHBhZGRpbmctcmlnaHQ6ICRvdXRlclBhZFg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICYuYWN0aXZlIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgfVxuICAgICAgJi5sb2FkaW5nIGRkIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWZpbGwtNyk7XG4gICAgICB9XG4gICAgICAmLmVycm9yIGRkIHtcbiAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgIH1cbiAgICAgICY6bm90KC5lcnJvcikge1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICY6aG92ZXIgZGQge1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgICAgICAgIGEge1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBkdCB7XG4gICAgICBjb2xvcjogZGFya2JsdWU7XG4gICAgICBtYXJnaW4tbGVmdDogJG91dGVyUGFkWDtcbiAgICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XG4gICAgfVxuICAgIGEge1xuICAgICAgcGFkZGluZzogMCAuNWVtO1xuICAgICAgY3Vyc29yOiBhbGlhcztcbiAgICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1maWxsLTMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICA+IC5jb250ZW50cyB7XG4gICAgPiBpbWcge1xuICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgICBvYmplY3QtZml0OiBjb250YWluO1xuICAgIH1cbiAgfVxuICBAbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XG4gICAgLnNlbGVjdCB7XG4gICAgICAmLmVycm9yIGRkIHtcbiAgICAgICAgY29sb3I6ICNmZjQ3NDc7XG4gICAgICB9XG4gICAgICBkbC5hY3RpdmUge1xuICAgICAgICBjb2xvcjogY29yYWw7XG4gICAgICAgIGR0IHtcbiAgICAgICAgICBjb2xvcjogaG90cGluaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZHQge1xuICAgICAgICBjb2xvcjogI2MzNGVjMztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8dGVtcGxhdGU+XG4gIDxzdmcgY2xhc3M9XCJpY29uXCI+PHVzZSA6eGxpbms6aHJlZj1cImAjJHtuYW1lfWBcIiAvPjwvc3ZnPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmNvbnN0IHJlcXVpcmVJY29uID0gcmVxdWlyZS5jb250ZXh0KCdAL3Jlc291cmNlcy9zdmcnLCBmYWxzZSwgL1xcLnN2ZyQvKTtcbnJlcXVpcmVJY29uLmtleXMoKS5tYXAoa2V5ID0+IHJlcXVpcmVJY29uKGtleSkpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiBbJ25hbWUnXSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPHNwYW4+XG4gICAge3twYXJ0c1swXX19XG4gICAgPHNsb3Q+PC9zbG90PlxuICAgIHt7cGFydHNbMV19fVxuICA8L3NwYW4+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgaTE4biB9IGZyb20gJ0AvY29tbW9uJztcblxuY29uc3QgU0VQID0gJ1xceDAyJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczogWydpMThuS2V5J10sXG4gIGNvbXB1dGVkOiB7XG4gICAgcGFydHMoKSB7XG4gICAgICByZXR1cm4gaTE4bih0aGlzLmkxOG5LZXksIFtTRVBdKS5zcGxpdChTRVApO1xuICAgIH0sXG4gIH0sXG59O1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJtZXNzYWdlIG1vZGFsLWNvbnRlbnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1ib2R5XCI+XG4gICAgICA8cCB2LXRleHQ9XCJjb250ZW50LnRpdGxlXCI+PC9wPlxuICAgICAgPHAgdi10ZXh0PVwiY29udGVudC5kZXNjXCIgdi1pZj1cImNvbnRlbnQuZGVzY1wiPjwvcD5cbiAgICA8L2Rpdj5cbiAgICA8Zm9ybSB2LWlmPVwibWVzc2FnZS5idXR0b25zXCIgQHN1Ym1pdC5wcmV2ZW50PlxuICAgICAgPCEtLSBlc2xpbnQtZGlzYWJsZSB2dWUvbm8tbXV0YXRpbmctcHJvcHMgLS0+XG4gICAgICA8aW5wdXRcbiAgICAgICAgcmVmPVwicmVmSW5wdXRcIlxuICAgICAgICBjbGFzcz1cIm1iLTFcIlxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIHYtaWY9XCJtZXNzYWdlLmlucHV0ICE9PSBmYWxzZVwiXG4gICAgICAgIHYtbW9kZWw9XCJtZXNzYWdlLmlucHV0XCJcbiAgICAgIC8+XG4gICAgICA8IS0tIGVzbGludC1lbmFibGUgdnVlL25vLW11dGF0aW5nLXByb3BzIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cIm1yLTFjXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB2LWZvcj1cIihidXR0b24sIGluZGV4KSBpbiBtZXNzYWdlLmJ1dHRvbnNcIlxuICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgOnR5cGU9XCJidXR0b24udHlwZSB8fCAnYnV0dG9uJ1wiXG4gICAgICAgICAgdi10ZXh0PVwiYnV0dG9uLnRleHRcIlxuICAgICAgICAgIEBjbGljaz1cIm9uQnV0dG9uQ2xpY2soYnV0dG9uKVwiXG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGNvbXB1dGVkLCBuZXh0VGljaywgb25Nb3VudGVkLCByZWYgfSBmcm9tICd2dWUnO1xuXG5jb25zdCBkaXNtaXNzZXJzID0gW107XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgaWYgKGUua2V5Q29kZSA9PT0gMjcgJiYgZGlzbWlzc2Vycy5sZW5ndGgpIHtcbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGRpc21pc3NlcnMucG9wKCkoKTtcbiAgfVxufSwgdHJ1ZSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IFsnbWVzc2FnZSddLFxuICBzZXR1cChwcm9wcywgY29udGV4dCkge1xuICAgIGNvbnN0IHJlZklucHV0ID0gcmVmKCk7XG4gICAgY29uc3QgZGlzbWlzcyA9ICgpID0+IHtcbiAgICAgIGNvbnRleHQuZW1pdCgnZGlzbWlzcycpO1xuICAgIH07XG4gICAgY29uc3Qgb25CdXR0b25DbGljayA9IGJ1dHRvbiA9PiB7XG4gICAgICBjb25zdCB7IG9uQ2xpY2sgfSA9IGJ1dHRvbjtcbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIGlmIChvbkNsaWNrKHByb3BzLm1lc3NhZ2UuaW5wdXQpICE9PSBmYWxzZSkgZGlzbWlzcygpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgb25CYWNrZHJvcENsaWNrID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBvbkJhY2tkcm9wQ2xpY2sgfSA9IHByb3BzLm1lc3NhZ2U7XG4gICAgICBpZiAob25CYWNrZHJvcENsaWNrKSB7XG4gICAgICAgIGlmIChvbkJhY2tkcm9wQ2xpY2soKSAhPT0gZmFsc2UpIGRpc21pc3MoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNvbnRlbnQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCB7IHRleHQgfSA9IHByb3BzLm1lc3NhZ2U7XG4gICAgICBjb25zdCBzZXAgPSB0ZXh0LmluZGV4T2YoJ1xcblxcbicpO1xuICAgICAgaWYgKHNlcCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHsgdGl0bGU6IHRleHQuc2xpY2UoMCwgc2VwKSwgZGVzYzogdGV4dC5zbGljZShzZXAgKyAyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgdGl0bGU6IHRleHQgfTtcbiAgICB9KTtcblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBpZiAocmVmSW5wdXQudmFsdWUpIHtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHJlZklucHV0LnZhbHVlLmZvY3VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZGlzbWlzc2Vycy5wdXNoKGRpc21pc3MpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IGRpc21pc3NlcnMuaW5kZXhPZihkaXNtaXNzKTtcbiAgICAgICAgaWYgKGkgPj0gMCkgZGlzbWlzc2Vycy5zcGxpY2UoaSwgMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZklucHV0LFxuICAgICAgY29udGVudCxcbiAgICAgIG9uQnV0dG9uQ2xpY2ssXG4gICAgICBvbkJhY2tkcm9wQ2xpY2ssXG4gICAgfTtcbiAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLm1lc3NhZ2Uge1xuICBtYXgtd2lkdGg6IDUwdnc7XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogLjJyZW07XG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAuMnJlbTtcbiAgYm94LXNoYWRvdzogMCAwIC4ycmVtIHJnYmEoMCwwLDAsLjIpO1xuICBpbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgJi1ib2R5IHtcbiAgICA+IHAge1xuICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICAgIH1cbiAgICAgICY6bm90KDpmaXJzdC1jaGlsZCkge1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGxhYmVsIGNsYXNzPVwic2V0dGluZy1jaGVja1wiPlxuICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiB2LW1vZGVsPVwidmFsdWVcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZFwiPlxuICAgIDxzbG90PlxuICAgICAgPHNwYW4gdi10ZXh0PVwibGFiZWxcIiAvPlxuICAgIDwvc2xvdD5cbiAgPC9sYWJlbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuLi9vcHRpb25zJztcbmltcG9ydCBob29rU2V0dGluZyBmcm9tICcuLi9ob29rLXNldHRpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiB7XG4gICAgbmFtZTogU3RyaW5nLFxuICAgIGxhYmVsOiBTdHJpbmcsXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgc3luYzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIG9uQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAvLyBNYXh0aG9uIGlzIHJlY29nbml6ZWQgYXMgQ2hyb21lIGluIFZ1ZS5qcy5cbiAgICAgIC8vIER1ZSB0byB2dWVqcy92dWUjNDUyMSwgbW9kZWwgaXMgdXBkYXRlZCBhY3R1YWxseSBvbiBjbGljay5cbiAgICAgIC8vIE5vcm1hbGx5IGBjbGlja2AgZXZlbnQgc2hvdWxkIGJlIGZpcmVkIGJlZm9yZSBgY2hhbmdlYCBldmVudC5cbiAgICAgIC8vIEJ1dCBNYXh0aG9uIDQuNCBzdWNrcywgYGNoYW5nZWAgZXZlbnQgaXMgZmlyZWQgZmlyc3QsIHdoaWNoIGJyZWFrcyBldmVyeXRoaW5nIVxuICAgICAgLy8gQW5kIHRoaXMgaXMgZml4ZWQgaW4gbGF0ZXIgdmVyc2lvbnMsIHNvIHdlIHdhdGNoIHRoZSB2YWx1ZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBsaXN0ZW5pbmcgdG8gYGNoYW5nZWAgZXZlbnQgdG8ga2VlcCB0aGUgY29kZSBjb25zaXN0ZW50LlxuICAgICAgaWYgKHRoaXMuc3luYykge1xuICAgICAgICBvcHRpb25zLnNldCh0aGlzLm5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHZhbHVlKTtcbiAgICB9LFxuICB9LFxuICBjcmVhdGVkKCkge1xuICAgIHRoaXMucmV2b2tlID0gaG9va1NldHRpbmcodGhpcy5uYW1lLCB2YWwgPT4geyB0aGlzLnZhbHVlID0gdmFsOyB9KTtcbiAgICB0aGlzLiR3YXRjaCgndmFsdWUnLCB0aGlzLm9uQ2hhbmdlKTtcbiAgfSxcbiAgYmVmb3JlVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5yZXZva2UpIHRoaXMucmV2b2tlKCk7XG4gIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5zZXR0aW5nLWNoZWNrIHtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICA8ZGl2PlxuICAgIDx0ZXh0YXJlYVxuICAgICAgcmVmPVwidGV4dFwiXG4gICAgICBjbGFzcz1cIm1vbm9zcGFjZS1mb250XCJcbiAgICAgIDpjbGFzcz1cInsnaGFzLWVycm9yJzogcGFyc2VkRGF0YS5lcnJvcn1cIlxuICAgICAgc3BlbGxjaGVjaz1cImZhbHNlXCJcbiAgICAgIHYtbW9kZWw9XCJ2YWx1ZVwiXG4gICAgICA6ZGlzYWJsZWQ9XCJkaXNhYmxlZFwiXG4gICAgICA6dGl0bGU9XCJwYXJzZWREYXRhLmVycm9yXCJcbiAgICAgIDpwbGFjZWhvbGRlcj1cInBsYWNlaG9sZGVyXCJcbiAgICAgIDpyb3dzPVwicm93cyB8fCBjYWxjUm93cyh2YWx1ZSlcIlxuICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlXCJcbiAgICAvPlxuICAgIDxidXR0b24gdi1pZj1cImhhc1NhdmVcIiB2LXRleHQ9XCJpMThuKCdidXR0b25TYXZlJylcIiBAY2xpY2s9XCJvblNhdmVcIlxuICAgICAgICAgICAgOmRpc2FibGVkPVwiZGlzYWJsZWQgfHwgIWNhblNhdmVcIi8+XG4gICAgPGJ1dHRvbiB2LWlmPVwiaGFzUmVzZXRcIiB2LXRleHQ9XCJpMThuKCdidXR0b25SZXNldCcpXCIgQGNsaWNrPVwib25SZXNldFwiXG4gICAgICAgICAgICA6ZGlzYWJsZWQ9XCJkaXNhYmxlZCB8fCAhY2FuUmVzZXRcIi8+XG4gICAgPHNsb3QvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBnZXRVbmxvYWRTZW50cnkgfSBmcm9tICdAL2NvbW1vbi9yb3V0ZXInO1xuaW1wb3J0IHsgZGVlcEVxdWFsLCBvYmplY3RHZXQgfSBmcm9tICcuLi9vYmplY3QnO1xuaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi4vb3B0aW9ucyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vb3B0aW9ucy1kZWZhdWx0cyc7XG5pbXBvcnQgaG9va1NldHRpbmcgZnJvbSAnLi4vaG9vay1zZXR0aW5nJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICBqc29uOiBCb29sZWFuLFxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxuICAgIGhhc1NhdmU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gICAgaGFzUmVzZXQ6IEJvb2xlYW4sXG4gICAgcm93czogTnVtYmVyLFxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgICAgc2F2ZWRWYWx1ZTogbnVsbCxcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHBhcnNlZERhdGEoKSB7XG4gICAgICBsZXQgdmFsdWU7XG4gICAgICBsZXQgZXJyb3I7XG4gICAgICBpZiAodGhpcy5qc29uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHRoaXMudmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyb3IgPSBlLm1lc3NhZ2UgfHwgZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgdmFsdWUsIGVycm9yIH07XG4gICAgfSxcbiAgICBpc0RpcnR5KCkge1xuICAgICAgcmV0dXJuICFkZWVwRXF1YWwodGhpcy5wYXJzZWREYXRhLnZhbHVlLCB0aGlzLnNhdmVkVmFsdWUgfHwgJycpO1xuICAgIH0sXG4gICAgY2FuU2F2ZSgpIHtcbiAgICAgIHJldHVybiAhdGhpcy5wYXJzZWREYXRhLmVycm9yICYmIHRoaXMuaXNEaXJ0eTtcbiAgICB9LFxuICAgIGNhblJlc2V0KCkge1xuICAgICAgcmV0dXJuICFkZWVwRXF1YWwodGhpcy5wYXJzZWREYXRhLnZhbHVlLCB0aGlzLmRlZmF1bHRWYWx1ZSB8fCAnJyk7XG4gICAgfSxcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBpc0RpcnR5KHN0YXRlKSB7XG4gICAgICB0aGlzLnRvZ2dsZVVubG9hZFNlbnRyeShzdGF0ZSk7XG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlZCgpIHtcbiAgICBjb25zdCBoYW5kbGUgPSB0aGlzLmpzb25cbiAgICAgID8gKHZhbHVlID0+IEpTT04uc3RyaW5naWZ5KHZhbHVlLCBudWxsLCAnICAnKSlcbiAgICAgIC8vIFhYWCBjb21wYXRpYmxlIHdpdGggb2xkIGRhdGEgZm9ybWF0XG4gICAgICA6ICh2YWx1ZSA9PiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCdcXG4nKSA6IHZhbHVlIHx8ICcnKSk7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb2JqZWN0R2V0KGRlZmF1bHRzLCB0aGlzLm5hbWUpO1xuICAgIHRoaXMucmV2b2tlID0gaG9va1NldHRpbmcodGhpcy5uYW1lLCB2YWwgPT4ge1xuICAgICAgdGhpcy5zYXZlZFZhbHVlID0gdmFsO1xuICAgICAgdGhpcy52YWx1ZSA9IGhhbmRsZSh2YWwpO1xuICAgIH0pO1xuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgIHRoaXMucGxhY2Vob2xkZXIgPSBoYW5kbGUoZGVmYXVsdFZhbHVlKTtcbiAgICB0aGlzLnRvZ2dsZVVubG9hZFNlbnRyeSA9IGdldFVubG9hZFNlbnRyeSgoKSA9PiB7XG4gICAgICAvLyBSZXNldCB0byBzYXZlZCB2YWx1ZSBhZnRlciBjb25maXJtaW5nIGxvc3Mgb2YgZGF0YS5cbiAgICAgIC8vIFRoZSBjb21wb25lbnQgd29uJ3QgYmUgZGVzdHJveWVkIG9uIHRhYiBjaGFuZ2UsIHNvIHRoZSBjaGFuZ2VzIGFyZSBhY3R1YWxseSBrZXB0LlxuICAgICAgLy8gSGVyZSB3ZSByZXNldCBpdCB0byBtYWtlIHN1cmUgdGhlIHVzZXIgbG9zZXMgdGhlIGNoYW5nZXMgd2hlbiBsZWF2aW5nIHRoZSBzZXR0aW5ncyB0YWIuXG4gICAgICAvLyBPdGhlcndpc2UgdGhlIHVzZXIgbWF5IGJlIGNvbmZ1c2VkIGFib3V0IHdoZXJlIHRoZSBjaGFuZ2VzIGFyZSBhZnRlciBzd2l0Y2hpbmcgYmFjay5cbiAgICAgIHRoaXMudmFsdWUgPSBoYW5kbGUodGhpcy5zYXZlZFZhbHVlKTtcbiAgICB9KTtcbiAgfSxcbiAgYmVmb3JlVW5tb3VudCgpIHtcbiAgICB0aGlzLnJldm9rZSgpO1xuICAgIHRoaXMudG9nZ2xlVW5sb2FkU2VudHJ5KGZhbHNlKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIG9uQ2hhbmdlKCkge1xuICAgICAgLy8gQXV0byBzYXZlIGlmIHRoZXJlIGlzIG5vIGBTYXZlYCBidXR0b25cbiAgICAgIGlmICghdGhpcy5oYXNTYXZlICYmIHRoaXMuY2FuU2F2ZSkgdGhpcy5vblNhdmUoKTtcbiAgICB9LFxuICAgIG9uU2F2ZSgpIHtcbiAgICAgIG9wdGlvbnMuc2V0KHRoaXMubmFtZSwgdGhpcy5wYXJzZWREYXRhLnZhbHVlKS5jYXRjaCh0aGlzLmJnRXJyb3IpO1xuICAgICAgdGhpcy4kZW1pdCgnc2F2ZScpO1xuICAgIH0sXG4gICAgb25SZXNldCgpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpcy4kcmVmcy50ZXh0O1xuICAgICAgLyogRm9jdXNpbmcgdG8gYWxsb3cgcXVpY2sgQ3RybC1aIHRvIHVuZG8uXG4gICAgICAgKiBGb2N1c2luZyBhbHNvIHByZXZlbnRzIGxheW91dCBzaGlmdCB3aGVuIGByZXNldGAgYnV0dG9uIGF1dG8taGlkZXMuICovXG4gICAgICBlbC5mb2N1cygpO1xuICAgICAgaWYgKCF0aGlzLmhhc1NhdmUpIHtcbiAgICAgICAgLy8gTm8gc2F2ZSBidXR0b24gPSBzb21ldGhpbmcgcmF0aGVyIHRyaXZpYWwgZS5nLiB0aGUgZXhwb3J0IGZpbGUgbmFtZVxuICAgICAgICBvcHRpb25zLnNldCh0aGlzLm5hbWUsIHRoaXMuZGVmYXVsdFZhbHVlKS5jYXRjaCh0aGlzLmJnRXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2F2ZSBidXR0b24gZXhpc3RzID0gbGV0IHRoZSB1c2VyIHVuZG8gdGhlIGlucHV0XG4gICAgICAgIGVsLnNlbGVjdCgpO1xuICAgICAgICBpZiAoIWRvY3VtZW50LmV4ZWNDb21tYW5kKCdpbnNlcnRUZXh0JywgZmFsc2UsIHRoaXMucGxhY2Vob2xkZXIpKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMucGxhY2Vob2xkZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGJnRXJyb3IoZXJyKSB7XG4gICAgICB0aGlzLiRlbWl0KCdiZy1lcnJvcicsIGVycik7XG4gICAgfSxcbiAgfSxcbn07XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInRvZ2dsZS1idXR0b25cIiA6Y2xhc3M9XCJ7YWN0aXZlOiBtb2RlbFZhbHVlfVwiXG4gICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICBAa2V5cHJlc3MuZW50ZXIuZXhhY3Q9XCJvblRvZ2dsZVwiXG4gICAgICAgQGtleXByZXNzLnNwYWNlLmV4YWN0PVwib25Ub2dnbGVcIlxuICAgICAgIEBjbGljaz1cIm9uVG9nZ2xlXCI+XG4gICAgPHNsb3Q+PC9zbG90PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKFsnbW9kZWxWYWx1ZSddKTtcbmNvbnN0IGVtaXRzID0gZGVmaW5lRW1pdHMoWyd1cGRhdGU6bW9kZWxWYWx1ZSddKTtcblxuZnVuY3Rpb24gb25Ub2dnbGUoKSB7XG4gIGVtaXRzKCd1cGRhdGU6bW9kZWxWYWx1ZScsICFwcm9wcy5tb2RlbFZhbHVlKTtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4udG9nZ2xlLWJ1dHRvbiB7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgY29sb3I6IHZhcigtLWZpbGwtMTIpO1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1maWxsLTIpO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gICYuYWN0aXZlIHtcbiAgICBjb2xvcjogdmFyKC0tYmcpO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWZpbGwtOSk7XG4gIH1cbiAgJjpmb2N1cywgJjpob3ZlciB7XG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKC44KTtcbiAgfVxufVxuPC9zdHlsZT5cbiIsImltcG9ydCBWbERyb3Bkb3duIGZyb20gJy4vZHJvcGRvd24udnVlJztcblxuZXhwb3J0IGRlZmF1bHQgVmxEcm9wZG93bjtcbiIsImltcG9ydCBWbE1vZGFsIGZyb20gJy4vbW9kYWwudnVlJztcblxuXG5cbmltcG9ydCAnLi9tb2RhbC12Myc7XG5cbmV4cG9ydCBkZWZhdWx0IFZsTW9kYWw7XG4iLCJpbXBvcnQgeyBjcmVhdGVBcHAsIGgsIHJlYWN0aXZlIH0gZnJvbSAndnVlJztcbmltcG9ydCBWbE1vZGFsIGZyb20gJy4vbW9kYWwudnVlJztcblxuZnVuY3Rpb24gc2hvd01vZGFsKGNoaWxkQ29tcG9uZW50LCBwcm9wcykge1xuICBjb25zdCBkYXRhID0gcmVhY3RpdmUoe1xuICAgIC4uLnByb3BzLFxuICAgIHNob3c6IHRydWUsXG4gICAgb25BZnRlckxlYXZlOiAoKSA9PiB7XG4gICAgICBhcHAudW5tb3VudCgpO1xuICAgICAgY29udGFpbmVyLnJlbW92ZSgpO1xuICAgIH0sXG4gIH0pO1xuICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBkYXRhLnNob3cgPSBmYWxzZTtcbiAgfTtcbiAgZGF0YS5vbkNsb3NlID0gY2xvc2U7XG4gIGNvbnN0IGFwcCA9IGNyZWF0ZUFwcCh7XG4gICAgcmVuZGVyOiAoKSA9PiBoKFZsTW9kYWwsIGRhdGEsICgpID0+IFtoKGNoaWxkQ29tcG9uZW50KV0pLFxuICB9KTtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kKGNvbnRhaW5lcik7XG4gIGFwcC5tb3VudChjb250YWluZXIpO1xuICByZXR1cm4geyBjbG9zZSB9O1xufVxuXG5WbE1vZGFsLnNob3cgPSBzaG93TW9kYWw7XG4iLCJpbXBvcnQgVmxUb29sdGlwIGZyb20gJy4vdG9vbHRpcC52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCBWbFRvb2x0aXA7XG4iLCJleHBvcnQgY29uc3QgbW9kZWxGaWVsZHMgPSB7XG4gIHZhbHVlOiAnbW9kZWxWYWx1ZScsXG4gIHVwZGF0ZTogJ3VwZGF0ZTptb2RlbFZhbHVlJyxcbn07XG5leHBvcnQgY29uc3QgbGlmZWN5Y2xlQmVmb3JlVW5tb3VudCA9ICdiZWZvcmVVbm1vdW50JztcblxuIiwibGV0IHsgYnJvd3NlciB9ID0gZ2xvYmFsO1xuXG4vLyBTaW5jZSB0aGlzIGFsc28gcnVucyBpbiBhIGNvbnRlbnQgc2NyaXB0IHdlJ2xsIGd1YXJkIGFnYWluc3QgaW1wbGljaXQgZ2xvYmFsIHZhcmlhYmxlc1xuLy8gZm9yIERPTSBlbGVtZW50cyB3aXRoICdpZCcgYXR0cmlidXRlIHdoaWNoIGlzIGEgc3RhbmRhcmQgZmVhdHVyZSwgbW9yZSBpbmZvOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL3B1bGwvMTUzXG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93aW5kb3ctb2JqZWN0Lmh0bWwjbmFtZWQtYWNjZXNzLW9uLXRoZS13aW5kb3ctb2JqZWN0XG5pZiAoIUlTX0ZJUkVGT1ggJiYgIWJyb3dzZXI/LnJ1bnRpbWUpIHtcbiAgY29uc3QgeyBQcm94eTogU2FmZVByb3h5IH0gPSBnbG9iYWw7XG4gIGNvbnN0IHsgYmluZCB9ID0gU2FmZVByb3h5O1xuICBjb25zdCBNRVNTQUdFID0gJ21lc3NhZ2UnO1xuICBjb25zdCBTVEFDSyA9ICdzdGFjayc7XG4gIGNvbnN0IGlzU3luY01ldGhvZE5hbWUgPSBrZXkgPT4ga2V5ID09PSAnYWRkTGlzdGVuZXInXG4gICAgfHwga2V5ID09PSAncmVtb3ZlTGlzdGVuZXInXG4gICAgfHwga2V5ID09PSAnaGFzTGlzdGVuZXInXG4gICAgfHwga2V5ID09PSAnaGFzTGlzdGVuZXJzJztcbiAgLyoqIEFQSSB0eXBlcyBvciBlbnVtcyBvciBsaXRlcmFsIGNvbnN0YW50cyAqL1xuICBjb25zdCBwcm94aWZ5VmFsdWUgPSAodGFyZ2V0LCBrZXksIHNyYywgbWV0YVZhbCkgPT4ge1xuICAgIGNvbnN0IHNyY1ZhbCA9IHNyY1trZXldO1xuICAgIGlmIChzcmNWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIGxldCByZXM7XG4gICAgaWYgKGlzRnVuY3Rpb24obWV0YVZhbCkpIHtcbiAgICAgIHJlcyA9IG1ldGFWYWwoc3JjLCBzcmNWYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzcmNWYWwpKSB7XG4gICAgICByZXMgPSBtZXRhVmFsID09PSAwIHx8IGlzU3luY01ldGhvZE5hbWUoa2V5KSB8fCAhaGFzT3duUHJvcGVydHkoc3JjLCBrZXkpXG4gICAgICAgID8gc3JjVmFsOjpiaW5kKHNyYylcbiAgICAgICAgOiB3cmFwQXN5bmMoc3JjLCBzcmNWYWwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgfSBlbHNlIGlmIChpc09iamVjdChzcmNWYWwpICYmIG1ldGFWYWwgIT09IDApIHtcbiAgICAgIHJlcyA9IHByb3hpZnlHcm91cChzcmNWYWwsIG1ldGFWYWwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHNyY1ZhbDtcbiAgICB9XG4gICAgdGFyZ2V0W2tleV0gPSByZXM7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbiAgY29uc3QgcHJveGlmeUdyb3VwID0gKHNyYywgbWV0YSkgPT4gbmV3IFNhZmVQcm94eSh7IF9fcHJvdG9fXzogbnVsbCB9LCB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIGdldDogKGdyb3VwLCBrZXkpID0+IGdyb3VwW2tleV0gPz8gcHJveGlmeVZhbHVlKGdyb3VwLCBrZXksIHNyYywgbWV0YT8uW2tleV0pLFxuICB9KTtcbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIC0gb3JpZ2luYWwgQVBJIGdyb3VwXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgLSBvcmlnaW5hbCBBUEkgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtXcmFwQXN5bmNQcmVwcm9jZXNzb3JGdW5jfSBbcHJlcHJvY2Vzc29yRnVuY10gLSBtb2RpZmllcyB0aGUgQVBJIGNhbGxiYWNrJ3MgcmVzcG9uc2VcbiAgICAqL1xuICBjb25zdCB3cmFwQXN5bmMgPSAodGhpc0FyZywgZnVuYywgcHJlcHJvY2Vzc29yRnVuYykgPT4gKFxuICAgICguLi5hcmdzKSA9PiB7XG4gICAgICBsZXQgcmVzb2x2ZTtcbiAgICAgIGxldCByZWplY3Q7XG4gICAgICAvKiBVc2luZyByZXNvbHZlL3JlamVjdCB0byBjYWxsIEFQSSBpbiB0aGUgc2NvcGUgb2YgdGhpcyBmdW5jdGlvbiwgbm90IGluc2lkZSBQcm9taXNlLFxuICAgICAgICAgYmVjYXVzZSBhbiBBUEkgdmFsaWRhdGlvbiBleGNlcHRpb24gaXMgdGhyb3duIHN5bmNocm9ub3VzbHkgYm90aCBpbiBDaHJvbWUgYW5kIEZGXG4gICAgICAgICBzbyB0aGUgY2FsbGVyIGNhbiB1c2UgdHJ5L2NhdGNoIHRvIGRldGVjdCBpdCBsaWtlIHdlJ3ZlIGJlZW4gZG9pbmcgaW4gaWNvbi5qcyAqL1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBTYWZlUHJvbWlzZSgoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xuICAgICAgICByZWplY3QgPSBfcmVqZWN0O1xuICAgICAgfSk7XG4gICAgICAvLyBNYWtlIHRoZSBlcnJvciBtZXNzYWdlcyBhY3R1YWxseSB1c2VmdWwgYnkgY2FwdHVyaW5nIGEgcmVhbCBzdGFja1xuICAgICAgY29uc3Qgc3RhY2tJbmZvID0gbmV3IFNhZmVFcnJvcihgY2FsbHN0YWNrIGJlZm9yZSBpbnZva2luZyAke2Z1bmMubmFtZSB8fCAnY2hyb21lIEFQSSd9OmApO1xuICAgICAgLy8gQSBzaW5nbGUgcGFyYW1ldGVyIGByZXN1bHRgIGlzIGZpbmUgYmVjYXVzZSB3ZSBkb24ndCB1c2UgQVBJIHRoYXQgcmV0dXJuIG1vcmVcbiAgICAgIGNvbnN0IGNiID0gcmVzdWx0ID0+IHtcbiAgICAgICAgY29uc3QgcnVudGltZUVyciA9IGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcjtcbiAgICAgICAgY29uc3QgZXJyID0gcnVudGltZUVyciB8fCAoXG4gICAgICAgICAgcHJlcHJvY2Vzc29yRnVuY1xuICAgICAgICAgICAgPyBwcmVwcm9jZXNzb3JGdW5jKHJlc29sdmUsIHJlc3VsdClcbiAgICAgICAgICAgIDogcmVzb2x2ZShyZXN1bHQpXG4gICAgICAgICk7XG4gICAgICAgIC8vIFByZWZlciBgcmVqZWN0YCBvdmVyIGB0aHJvd2Agd2hpY2ggc3RvcHMgZGVidWdnZXIgaW4gJ3BhdXNlIG9uIGV4Y2VwdGlvbnMnIG1vZGVcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGlmICghcnVudGltZUVycikgc3RhY2tJbmZvW1NUQUNLXSA9IGAke2VyclsxXX1cXG4ke3N0YWNrSW5mb1tTVEFDS119YDtcbiAgICAgICAgICBzdGFja0luZm9bTUVTU0FHRV0gPSBydW50aW1lRXJyID8gZXJyW01FU1NBR0VdIDogYCR7ZXJyWzBdfWA7XG4gICAgICAgICAgc3RhY2tJbmZvLmlzUnVudGltZSA9ICEhcnVudGltZUVycjtcbiAgICAgICAgICByZWplY3Qoc3RhY2tJbmZvKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5JU19JTkpFQ1RFRCkge1xuICAgICAgICBzYWZlUHVzaChhcmdzLCBjYik7IC8qIGdsb2JhbCBzYWZlUHVzaCAqL1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNhZmVBcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChlW01FU1NBR0VdID09PSAnRXh0ZW5zaW9uIGNvbnRleHQgaW52YWxpZGF0ZWQuJykge1xuICAgICAgICAgICAgLyogZ2xvYmFsIGxvZ2dpbmcgKi8vLyBvbmx5IHVzZWQgd2l0aCBwcm9jZXNzLmVudi5JU19JTkpFQ1RFRD1jb250ZW50XG4gICAgICAgICAgICBsb2dnaW5nLmVycm9yKGBQbGVhc2UgcmVsb2FkIHRoZSB0YWIgdG8gcmVzdG9yZSAke1ZJT0xFTlRNT05LRVl9IEFQSSBmb3IgdXNlcnNjcmlwdHMuYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBOb3QgcHJvY2Vzcy5lbnYuSVNfSU5KRUNURUQgKi8vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgdGhpc0FyZzo6ZnVuYyguLi5hcmdzLCBjYik7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuREVCVUcpIHByb21pc2UuY2F0Y2goZXJyID0+IGNvbnNvbGUud2FybihhcmdzLCBlcnI/LltNRVNTQUdFXSB8fCBlcnIpKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgKTtcbiAgY29uc3Qgd3JhcFJlc3BvbnNlID0gKHJlc3VsdCwgZXJyb3IpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuREVCVUcpIGNvbnNvbGVbZXJyb3IgPyAnd2FybicgOiAnbG9nJ10oJ3NlbmRSZXNwb25zZScsIGVycm9yIHx8IHJlc3VsdCk7XG4gICAgcmV0dXJuIFtcbiAgICAgIHJlc3VsdCxcbiAgICAgIGVycm9yICYmIChcbiAgICAgICAgZXJyb3JbTUVTU0FHRV1cbiAgICAgICAgICA/IFtlcnJvcltNRVNTQUdFXSwgZXJyb3JbU1RBQ0tdXVxuICAgICAgICAgIDogW2Vycm9yLCBuZXcgU2FmZUVycm9yKClbU1RBQ0tdXVxuICAgICAgKSxcbiAgICBdO1xuICB9O1xuICBjb25zdCBzZW5kUmVzcG9uc2VBc3luYyA9IGFzeW5jIChyZXN1bHQsIHNlbmRSZXNwb25zZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBzZW5kUmVzcG9uc2Uod3JhcFJlc3BvbnNlKGF3YWl0IHJlc3VsdCkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgc2VuZFJlc3BvbnNlKHdyYXBSZXNwb25zZSgwLCBlcnIpKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uTWVzc2FnZUxpc3RlbmVyID0gKGxpc3RlbmVyLCBtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5ERUJVRykgY29uc29sZS5pbmZvKCdyZWNlaXZlJywgbWVzc2FnZSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGxpc3RlbmVyKG1lc3NhZ2UsIHNlbmRlcik7XG4gICAgICBpZiAocmVzdWx0ICYmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuSVNfSU5KRUNURURcbiAgICAgICAgICA/IGlzUHJvbWlzZShyZXN1bHQpIC8qIGdsb2JhbCBpc1Byb21pc2UgKi9cbiAgICAgICAgICA6IHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2VcbiAgICAgICkpIHtcbiAgICAgICAgc2VuZFJlc3BvbnNlQXN5bmMocmVzdWx0LCBzZW5kUmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLyogV0FSTklORzogd2hlbiB1c2luZyBvbk1lc3NhZ2UgaW4gZXh0ZW5zaW9uIHBhZ2VzIGRvbid0IHVzZSBgYXN5bmNgXG4gICAgICAgICAqIGFuZCBtYWtlIHN1cmUgdG8gcmV0dXJuIGB1bmRlZmluZWRgIGZvciBjb250ZW50IG1lc3NhZ2VzIGxpa2UgR2V0SW5qZWN0ZWQgKi9cbiAgICAgICAgc2VuZFJlc3BvbnNlKHdyYXBSZXNwb25zZShyZXN1bHQpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHNlbmRSZXNwb25zZSh3cmFwUmVzcG9uc2UoMCwgZXJyKSk7XG4gICAgfVxuICB9O1xuICAvKiogQHR5cGUge1dyYXBBc3luY1ByZXByb2Nlc3NvckZ1bmN9ICovXG4gIGNvbnN0IHVud3JhcFJlc3BvbnNlID0gKHJlc29sdmUsIHJlc3BvbnNlKSA9PiAoXG4gICAgIXJlc3BvbnNlICYmICdudWxsIHJlc3BvbnNlJ1xuICAgIHx8IHJlc3BvbnNlWzFdIC8vIGVycm9yIGNyZWF0ZWQgaW4gd3JhcFJlc3BvbnNlXG4gICAgfHwgcmVzb2x2ZShyZXNwb25zZVswXSkgLy8gcmVzdWx0IGNyZWF0ZWQgaW4gd3JhcFJlc3BvbnNlXG4gICk7XG4gIGNvbnN0IHdyYXBTZW5kTWVzc2FnZSA9IChydW50aW1lLCBzZW5kTWVzc2FnZSkgPT4gKFxuICAgIHdyYXBBc3luYyhydW50aW1lLCBzZW5kTWVzc2FnZSwgdW53cmFwUmVzcG9uc2UpXG4gICk7XG4gIC8qKlxuICAgKiAwID0gbm9uLWFzeW5jIG1ldGhvZCBvciB0aGUgZW50aXJlIGdyb3VwXG4gICAqIGZ1bmN0aW9uID0gdHJhbnNmb3JtZXIgbGlrZSAob3JpZ2luYWxPYmosIG9yaWdpbmFsRnVuYyk6IGZ1bmN0aW9uXG4gICAqL1xuICBicm93c2VyID0gZ2xvYmFsLmJyb3dzZXIgPSBwcm94aWZ5R3JvdXAoY2hyb21lLCB7XG4gICAgZXh0ZW5zaW9uOiAwLCAvLyB3ZSBkb24ndCB1c2UgaXRzIGFzeW5jIG1ldGhvZHNcbiAgICBpMThuOiAwLCAvLyB3ZSBkb24ndCB1c2UgaXRzIGFzeW5jIG1ldGhvZHNcbiAgICBydW50aW1lOiB7XG4gICAgICBjb25uZWN0OiAwLFxuICAgICAgZ2V0TWFuaWZlc3Q6IDAsXG4gICAgICBnZXRVUkw6IDAsXG4gICAgICBvbk1lc3NhZ2U6IHtcbiAgICAgICAgYWRkTGlzdGVuZXI6IChvbk1lc3NhZ2UsIGFkZExpc3RlbmVyKSA9PiAoXG4gICAgICAgICAgbGlzdGVuZXIgPT4ge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52LkRFVlxuICAgICAgICAgICAgJiYgIXByb2Nlc3MuZW52LklTX0lOSkVDVEVEXG4gICAgICAgICAgICAmJiBsaXN0ZW5lciAhPT0gZ2xvYmFsLmhhbmRsZUNvbW1hbmRNZXNzYWdlXG4gICAgICAgICAgICAmJiAvXmFzeW5jLy50ZXN0KGxpc3RlbmVyKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29uTWVzc2FnZSBsaXN0ZW5lciBjYW5ub3QgYmUgYXN5bmMgZHVlIHRvIEdldEluamVjdGVkIGludGVyZmVyZW5jZSEnKTtcbiAgICAgICAgICAgICAgLy8gVE9ETzogbWlncmF0ZSB0byBhZGRSdW50aW1lTGlzdGVuZXIoZm4sIGNvbW1hbmRzOiBvYmplY3QpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb25NZXNzYWdlOjphZGRMaXN0ZW5lcihvbk1lc3NhZ2VMaXN0ZW5lcjo6YmluZChudWxsLCBsaXN0ZW5lcikpO1xuICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgICBzZW5kTWVzc2FnZTogd3JhcFNlbmRNZXNzYWdlLFxuICAgIH0sXG4gICAgdGFiczogIXByb2Nlc3MuZW52LklTX0lOSkVDVEVEICYmIHtcbiAgICAgIGNvbm5lY3Q6IDAsXG4gICAgICBzZW5kTWVzc2FnZTogd3JhcFNlbmRNZXNzYWdlLFxuICAgIH0sXG4gIH0pO1xufSBlbHNlIGlmIChwcm9jZXNzLmVudi5ERUJVRyAmJiBJU19GSVJFRk9YKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovLy8gdGhpcyBpcyBhIGRlYnVnLW9ubHkgc2VjdGlvblxuICBsZXQgY291bnRlciA9IDA7XG4gIGNvbnN0IHsgcnVudGltZSB9ID0gYnJvd3NlcjtcbiAgY29uc3QgeyBzZW5kTWVzc2FnZSwgb25NZXNzYWdlIH0gPSBydW50aW1lO1xuICBjb25zdCBsb2cgPSAodHlwZSwgYXJncywgaWQsIGlzUmVzcG9uc2UpID0+IGNvbnNvbGUuaW5mbyhcbiAgICBgJHt0eXBlfU1lc3NhZ2UjJWQke2lzUmVzcG9uc2UgPyAnIHJlc3BvbnNlJyA6ICcnfWAsXG4gICAgaWQsXG4gICAgLi4uYXJncyxcbiAgKTtcbiAgcnVudGltZS5zZW5kTWVzc2FnZSA9ICguLi5hcmdzKSA9PiB7XG4gICAgY291bnRlciArPSAxO1xuICAgIGNvbnN0IGlkID0gY291bnRlcjtcbiAgICBsb2coJ3NlbmQnLCBhcmdzLCBpZCk7XG4gICAgY29uc3QgcHJvbWlzZSA9IHJ1bnRpbWU6OnNlbmRNZXNzYWdlKC4uLmFyZ3MpO1xuICAgIHByb21pc2UudGhlbihkYXRhID0+IGxvZygnc2VuZCcsIFtkYXRhXSwgaWQsIHRydWUpLCBjb25zb2xlLndhcm4pO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuICBjb25zdCB7IGFkZExpc3RlbmVyIH0gPSBvbk1lc3NhZ2U7XG4gIG9uTWVzc2FnZS5hZGRMaXN0ZW5lciA9IChsaXN0ZW5lcikgPT4gb25NZXNzYWdlOjphZGRMaXN0ZW5lcigobXNnLCBzZW5kZXIpID0+IHtcbiAgICBjb3VudGVyICs9IDE7XG4gICAgY29uc3QgaWQgPSBjb3VudGVyO1xuICAgIGNvbnN0IHsgZnJhbWVJZCwgdGFiLCB1cmwgfSA9IHNlbmRlcjtcbiAgICBsb2coJ29uJywgW21zZywgeyBmcmFtZUlkLCB0YWIsIHVybCB9XSwgaWQpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGxpc3RlbmVyKG1zZywgc2VuZGVyKTtcbiAgICAoaXNGdW5jdGlvbihyZXN1bHQ/LnRoZW4pID8gcmVzdWx0IDogU2FmZVByb21pc2UucmVzb2x2ZShyZXN1bHQpKVxuICAgIC50aGVuKGRhdGEgPT4gbG9nKCdvbicsIFtkYXRhXSwgaWQsIHRydWUpLCBjb25zb2xlLndhcm4pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG59XG5cbi8qKlxuICogQGNhbGxiYWNrIFdyYXBBc3luY1ByZXByb2Nlc3NvckZ1bmNcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW55KX0gcmVzb2x2ZSAtIGNhbGxlZCBvbiBzdWNjZXNzXG4gKiBAcGFyYW0ge2FueX0gcmVzcG9uc2UgLSBBUEkgY2FsbGJhY2sncyByZXNwb25zZVxuICogQHJldHVybnMgez9zdHJpbmdbXX0gLSBbZXJyb3JNZXNzYWdlLCBlcnJvclN0YWNrXSBhcnJheSBvbiBlcnJvclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0Q2FjaGUoe1xuICBsaWZldGltZTogZGVmYXVsdExpZmV0aW1lID0gMzAwMCxcbiAgb25EaXNwb3NlLFxufSA9IHt9KSB7XG4gIGxldCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIHNldFRpbWVvdXQgY2FsbCBpcyB2ZXJ5IGV4cGVuc2l2ZSB3aGVuIGRvbmUgZnJlcXVlbnRseSxcbiAgLy8gMTAwMCBjYWxscyBwZXJmb3JtZWQgZm9yIDUwIHNjcmlwdHMgY29uc3VtZSA1MG1zIG9uIGVhY2ggdGFiIGxvYWQsXG4gIC8vIHNvIHdlJ2xsIHNjaGVkdWxlIHRyaW0oKSBqdXN0IG9uY2UgcGVyIGV2ZW50IGxvb3AgY3ljbGUsXG4gIC8vIGFuZCB0aGVuIHRyaW0oKSB3aWxsIHRyaW0gdGhlIGNhY2hlIGFuZCByZXNjaGVkdWxlIGl0c2VsZiB0byB0aGUgZWFybGllc3QgZXhwaXJ5IHRpbWUuXG4gIGxldCB0aW1lcjtcbiAgbGV0IG1pbkxpZmV0aW1lID0gLTE7XG4gIC8vIHNhbWUgZ29lcyBmb3IgdGhlIHBlcmZvcm1hbmNlLm5vdygpIHVzZWQgYnkgaGl0KCkgYW5kIHB1dCgpIHdoaWNoIGlzIHdoeSB3ZSBleHBvc2UgYmF0Y2godHJ1ZSlcbiAgLy8gdG8gc3RhcnQgYW4gb3BlcmF0aW9uIHRoYXQgcmV1c2VzIHRoZSBzYW1lIHZhbHVlIG9mIG5vdygpLCBhbmQgYmF0Y2goZmFsc2UpIHRvIGVuZCBpdFxuICBsZXQgYmF0Y2hTdGFydGVkO1xuICBsZXQgYmF0Y2hTdGFydFRpbWU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXR1cm4tYXNzaWduXG4gIGNvbnN0IGdldE5vdyA9ICgpID0+IGJhdGNoU3RhcnRlZCAmJiBiYXRjaFN0YXJ0VGltZSB8fCAoYmF0Y2hTdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSk7XG4gIGNvbnN0IE9WRVJSVU4gPSAxMDAwOyAvLyBpbiBtcywgdG8gcmVkdWNlIGZyZXF1ZW5jeSBvZiBjYWxsaW5nIHNldFRpbWVvdXRcbiAgY29uc3QgZXhwb3J0cyA9IHtcbiAgICBiYXRjaCwgZ2V0LCBzb21lLCBwb3AsIHB1dCwgZGVsLCBoYXMsIGhpdCwgZGVzdHJveSxcbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52LkRFVikgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdkYXRhJywgeyBnZXQ6ICgpID0+IGNhY2hlIH0pO1xuICByZXR1cm4gZXhwb3J0cztcbiAgZnVuY3Rpb24gYmF0Y2goZW5hYmxlKSB7XG4gICAgYmF0Y2hTdGFydGVkID0gZW5hYmxlO1xuICAgIGJhdGNoU3RhcnRUaW1lID0gMDtcbiAgfVxuICBmdW5jdGlvbiBnZXQoa2V5LCBkZWYsIHNob3VsZEhpdCA9IHRydWUpIHtcbiAgICBjb25zdCBpdGVtID0gY2FjaGVba2V5XTtcbiAgICBpZiAoaXRlbSAmJiBzaG91bGRIaXQpIHtcbiAgICAgIHJlc2NoZWR1bGUoaXRlbSwgaXRlbS5saWZldGltZSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtID8gaXRlbS52YWx1ZSA6IGRlZjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHsodmFsOj8sIGtleTpzdHJpbmcpID0+IHZvaWR9IGZuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbdGhpc09ial1cbiAgICovXG4gIGZ1bmN0aW9uIHNvbWUoZm4sIHRoaXNPYmopIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjYWNoZSkge1xuICAgICAgY29uc3QgaXRlbSA9IGNhY2hlW2tleV07XG4gICAgICAvLyBNaWdodCBiZSBhbHJlYWR5IGRlbGV0ZWQgYnkgZm5cbiAgICAgIGlmIChpdGVtICYmIGZuLmNhbGwodGhpc09iaiwgaXRlbS52YWx1ZSwga2V5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcG9wKGtleSwgZGVmKSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXQoa2V5LCBkZWYpO1xuICAgIGRlbChrZXkpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiBwdXQoa2V5LCB2YWx1ZSwgbGlmZXRpbWUpIHtcbiAgICByZXNjaGVkdWxlKGNhY2hlW2tleV0gPSBsaWZldGltZSA/IHsgdmFsdWUsIGxpZmV0aW1lIH0gOiB7IHZhbHVlIH0sIGxpZmV0aW1lKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gZGVsKGtleSkge1xuICAgIGNvbnN0IGRhdGEgPSBjYWNoZVtrZXldO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBkZWxldGUgY2FjaGVba2V5XTtcbiAgICAgIG9uRGlzcG9zZT8uKGRhdGEudmFsdWUsIGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICByZXR1cm4gY2FjaGVba2V5XTtcbiAgfVxuICBmdW5jdGlvbiBoaXQoa2V5LCBsaWZldGltZSkge1xuICAgIGNvbnN0IGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHJlc2NoZWR1bGUoZW50cnksIGxpZmV0aW1lKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAvLyBkZWxldGUgYWxsIGtleXMgdG8gbWFrZSBzdXJlIG9uRGlzcG9zZSBpcyBjYWxsZWQgZm9yIGVhY2ggdmFsdWVcbiAgICBpZiAob25EaXNwb3NlKSB7XG4gICAgICAvLyBjYWNoZSBpbmhlcml0cyBudWxsIHNvIHdlIGRvbid0IG5lZWQgdG8gY2hlY2sgaGFzT3duUHJvcGVydHlcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGNhY2hlKSB7XG4gICAgICAgIGRlbChrZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgdGltZXIgPSAwO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2NoZWR1bGUoZW50cnksIGxpZmV0aW1lID0gZGVmYXVsdExpZmV0aW1lKSB7XG4gICAgZW50cnkuZXhwaXJ5ID0gbGlmZXRpbWUgKyBnZXROb3coKTtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGlmIChsaWZldGltZSA+PSBtaW5MaWZldGltZSkgcmV0dXJuO1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB9XG4gICAgbWluTGlmZXRpbWUgPSBsaWZldGltZTtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQodHJpbSwgbGlmZXRpbWUgKyBPVkVSUlVOKTtcbiAgfVxuICBmdW5jdGlvbiB0cmltKCkge1xuICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGxldCBjbG9zZXN0RXhwaXJ5ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAoY29uc3Qga2V5IGluIGNhY2hlKSB7XG4gICAgICBjb25zdCB7IGV4cGlyeSB9ID0gY2FjaGVba2V5XTtcbiAgICAgIGlmIChleHBpcnkgPCBub3cpIHtcbiAgICAgICAgZGVsKGtleSk7XG4gICAgICB9IGVsc2UgaWYgKGV4cGlyeSA8IGNsb3Nlc3RFeHBpcnkpIHtcbiAgICAgICAgY2xvc2VzdEV4cGlyeSA9IGV4cGlyeTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWluTGlmZXRpbWUgPSBjbG9zZXN0RXhwaXJ5IC0gbm93O1xuICAgIHRpbWVyID0gY2xvc2VzdEV4cGlyeSA8IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG4gICAgICA/IHNldFRpbWVvdXQodHJpbSwgbWluTGlmZXRpbWUgKyBPVkVSUlVOKVxuICAgICAgOiAwO1xuICB9XG59XG4iLCIvLyBTQUZFVFkgV0FSTklORyEgRXhwb3J0cyB1c2VkIGJ5IGBpbmplY3RlZGAgbXVzdCBtYWtlIDo6c2FmZSgpIGNhbGxzIGFuZCB1c2UgX19wcm90b19fOm51bGxcblxuZXhwb3J0IGNvbnN0IENIQVJTRVRfVVRGOCA9ICdjaGFyc2V0PVVURi04JztcbmV4cG9ydCBjb25zdCBGT1JNX1VSTEVOQ09ERUQgPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcbmV4cG9ydCBjb25zdCBJTkZFUlJFRCA9ICdpbmZlcnJlZCc7XG5leHBvcnQgY29uc3QgSE9NRVBBR0VfVVJMID0gJ2hvbWVwYWdlVVJMJztcbmV4cG9ydCBjb25zdCBTVVBQT1JUX1VSTCA9ICdzdXBwb3J0VVJMJztcblxuLy8gQWxsb3cgbWV0YWRhdGEgbGluZXMgdG8gc3RhcnQgd2l0aCBXSElURVNQQUNFPyAnLy8nIFNQQUNFXG4vLyBBbGxvdyBhbnl0aGluZyB0byBmb2xsb3cgdGhlIHByZWRlZmluZWQgdGV4dCBvZiB0aGUgbWV0YVN0YXJ0L0VuZFxuLy8gVGhlIFNQQUNFIG11c3QgYmUgb24gdGhlIHNhbWUgbGluZSBhbmQgc3BlY2lmaWNhbGx5IFxceDIwIGFzIFxccyB3b3VsZCBhbHNvIG1hdGNoIFxcclxcblxcdFxuLy8gTm90ZTogd2hlbiB0aGVyZSdzIG5vIHZhbGlkIG1ldGFibG9jaywgYW4gZW1wdHkgc3RyaW5nIGlzIG1hdGNoZWQgZm9yIGNvbnZlbmllbmNlXG5leHBvcnQgY29uc3QgVVNFUlNDUklQVF9NRVRBX0lOVFJPID0gJy8vID09VXNlclNjcmlwdD09JztcbmV4cG9ydCBjb25zdCBNRVRBQkxPQ0tfUkUgPSAvKCg/Ol58XFxuKVxccypcXC9cXC9cXHgyMD09VXNlclNjcmlwdD09KShbXFxzXFxTXSo/XFxuKVxccypcXC9cXC9cXHgyMD09XFwvVXNlclNjcmlwdD09fCQvO1xuZXhwb3J0IGNvbnN0IE1FVEFfU1RSID0gJ21ldGFTdHInO1xuZXhwb3J0IGNvbnN0IE5FV0xJTkVfRU5EX1JFID0gL1xcbigoPyFcXG4pXFxzKSokLztcbmV4cG9ydCBjb25zdCBJTkpFQ1RBQkxFX1RBQl9VUkxfUkUgPSAvXihodHRwcz98ZmlsZXxmdHBzPyk6LztcbmV4cG9ydCBjb25zdCBXQVRDSF9TVE9SQUdFID0gJ3dhdGNoU3RvcmFnZSc7XG4vLyBgYnJvd3NlcmAgaXMgYSBsb2NhbCB2YXJpYWJsZSBzaW5jZSB3ZSByZW1vdmUgdGhlIGdsb2JhbCBgY2hyb21lYCBhbmQgYGJyb3dzZXJgIGluIGluamVjdGVkKlxuLy8gdG8gcHJldmVudCBleHBvc2luZyB0aGVtIHRvIHVzZXJzY3JpcHRzIHdpdGggYEBpbmplY3QtaW50byBjb250ZW50YFxuZXhwb3J0IGNvbnN0IGJyb3dzZXIgPSBwcm9jZXNzLmVudi5JU19JTkpFQ1RFRCAhPT0gJ2luamVjdGVkLXdlYicgJiYgZ2xvYmFsLmJyb3dzZXI7XG5cbi8vIHNldFRpbWVvdXQgdHJ1bmNhdGVzIHRoZSBkZWxheSB0byBhIDMyLWJpdCBzaWduZWQgaW50ZWdlciBzbyB0aGUgbWF4IGRlbGF5IGlzIH4yNCBkYXlzXG5leHBvcnQgY29uc3QgVElNRU9VVF9NQVggPSAweDdGRkZfRkZGRjtcbmV4cG9ydCBjb25zdCBUSU1FT1VUX0hPVVIgPSA2MCAqIDYwICogMTAwMDtcbmV4cG9ydCBjb25zdCBUSU1FT1VUXzI0SE9VUlMgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xuZXhwb3J0IGNvbnN0IFRJTUVPVVRfV0VFSyA9IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuXG5leHBvcnQgY29uc3QgQkxBQ0tMSVNUID0gJ2JsYWNrbGlzdCc7XG5leHBvcnQgY29uc3QgQkxBQ0tMSVNUX0VSUk9SUyA9IGAke0JMQUNLTElTVH1FcnJvcnNgO1xuZXhwb3J0IGNvbnN0IFJVTl9BVF9SRSA9IC9eZG9jdW1lbnQtKHN0YXJ0fGJvZHl8ZW5kfGlkbGUpJC87XG5leHBvcnQgY29uc3QgS05PV05fSU5KRUNUX0lOVE8gPSB7XG4gIC8vIFVzaW5nIHRoZSBkZWZhdWx0IGluamVjdGlvbiBvcmRlcjogYXV0bywgcGFnZSwgY29udGVudFxuICBbQVVUT106IDEsXG4gIFtQQUdFXTogMSxcbiAgW0NPTlRFTlRdOiAxLFxufTtcbiIsImNvbnN0IERBWV9NUyA9IDI0ICogMzYwMGUzO1xuY29uc3QgV0VFS19NUyA9IDcgKiAyNCAqIDM2MDBlMztcbi8vIFVzaW5nIHNpbXBsZSBwYWRkaW5nIGZ1bmN0aW9ucyBiZWNhdXNlIFN0cmluZyNwYWRTdGFydCBpcyBDaHJvbWU1NysgYnV0IG91ciBtaW5pbXVtIGlzIDU1XG5jb25zdCBwYWQyID0gbnVtID0+IGAke251bSA8IDEwID8gJzAnIDogJyd9JHtudW19YDtcbmNvbnN0IHBhZDMgPSBudW0gPT4gYCR7bnVtIDwgMTAgJiYgJzAwJyB8fCBudW0gPCAxMDAgJiYgJzAnIHx8ICcnfSR7bnVtfWA7XG5jb25zdCBnZXRZZWFyID0gZGF0ZSA9PiBkYXRlLmdldEZ1bGxZZWFyKCk7XG5jb25zdCBnZXREYXlPZlllYXIgPSBkYXRlID0+IE1hdGguZmxvb3IoKGRhdGUgLSBuZXcgRGF0ZShnZXRZZWFyKGRhdGUpLCAwLCAxKSkgLyBEQVlfTVMpICsgMTtcbmNvbnN0IGdldFdlZWtPZlllYXIgPSBkYXRlID0+IE1hdGguZmxvb3IoKGRhdGUgLSBuZXcgRGF0ZShnZXRZZWFyKGRhdGUpLCAwLCAxKSkgLyBXRUVLX01TKSArIDE7XG5jb25zdCB0b0xvY2FsZVN0cmluZyA9IChkYXRlLCBvcHRzKSA9PiBkYXRlLnRvTG9jYWxlU3RyaW5nKFtuYXZpZ2F0b3IubGFuZ3VhZ2VdLCBvcHRzKTtcblxuLyoqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLChEYXRlKT0+c3RyaW5nPn0gKi9cbmV4cG9ydCBjb25zdCBEQVRFX0ZNVCA9IHtcbiAgTTogZGF0ZSA9PiBkYXRlLmdldE1vbnRoKCkgKyAxLCAvLyAxIDIgLi4uIDExIDEyXG4gIE1NOiBkYXRlID0+IHBhZDIoZGF0ZS5nZXRNb250aCgpICsgMSksIC8vIDAxIDAyIC4uLiAxMSAxMlxuICBNTU06IGRhdGUgPT4gdG9Mb2NhbGVTdHJpbmcoZGF0ZSwgeyBtb250aDogJ3Nob3J0JyB9KSwgLy8gSmFuIEZlYlxuICBNTU1NOiBkYXRlID0+IHRvTG9jYWxlU3RyaW5nKGRhdGUsIHsgbW9udGg6ICdsb25nJyB9KSwgLy8gSmFudWFyeSBGZWJydWFyeVxuICBROiBkYXRlID0+IE1hdGguZmxvb3IoZGF0ZS5nZXRNb250aCgpIC8gMykgKyAxLCAvLyAxIDIgMyA0XG4gIEQ6IGRhdGUgPT4gZGF0ZS5nZXREYXRlKCksIC8vIDEgMiAuLi4gMzAgMzFcbiAgREQ6IGRhdGUgPT4gcGFkMihkYXRlLmdldERhdGUoKSksIC8vIDAxIDAyIC4uLiAzMCAzMVxuICBEREQ6IGdldERheU9mWWVhciwgLy8gMSAyIC4uLiAzNjQgMzY1XG4gIEREREQ6IGRhdGUgPT4gcGFkMyhnZXREYXlPZlllYXIoZGF0ZSkpLCAvLyAwMDEgMDAyIC4uLiAzNjQgMzY1XG4gIGQ6IGRhdGUgPT4gZGF0ZS5nZXREYXkoKSwgLy8gMCAxIC4uLiA1IDZcbiAgZGQ6IGRhdGUgPT4gdG9Mb2NhbGVTdHJpbmcoZGF0ZSwgeyB3ZWVrZGF5OiAnc2hvcnQnIH0pLnNsaWNlKDAsIDIpLCAvLyBTdSBNbyAuLi4gRnIgU2FcbiAgZGRkOiBkYXRlID0+IHRvTG9jYWxlU3RyaW5nKGRhdGUsIHsgd2Vla2RheTogJ3Nob3J0JyB9KSwgLy8gU3VuIE1vbiAuLi4gRnJpIFNhdFxuICBkZGRkOiBkYXRlID0+IHRvTG9jYWxlU3RyaW5nKGRhdGUsIHsgd2Vla2RheTogJ2xvbmcnIH0pLCAvLyBTdW5kYXkgTW9uZGF5IC4uLiBGcmlkYXkgU2F0dXJkYXlcbiAgdzogZ2V0V2Vla09mWWVhciwgLy8gMSAyIC4uLiA1MiA1M1xuICB3dzogZGF0ZSA9PiBwYWQyKGdldFdlZWtPZlllYXIoZGF0ZSkpLCAvLyAwMSAwMiAuLi4gNTIgNTNcbiAgWTogZ2V0WWVhcixcbiAgWVk6IGRhdGUgPT4gcGFkMihnZXRZZWFyKGRhdGUpICUgMTAwKSxcbiAgWVlZWTogZGF0ZSA9PiBgJHtnZXRZZWFyKGRhdGUpfWAuc2xpY2UoLTQpLFxuICBIOiBkYXRlID0+IGRhdGUuZ2V0SG91cnMoKSwgLy8gMCAxIC4uLiAyMiAyM1xuICBISDogZGF0ZSA9PiBwYWQyKGRhdGUuZ2V0SG91cnMoKSksIC8vIDAwIDAxIC4uLiAyMiAyM1xuICBtOiBkYXRlID0+IGRhdGUuZ2V0TWludXRlcygpLCAvLyAwIDEgLi4uIDU4IDU5XG4gIG1tOiBkYXRlID0+IHBhZDIoZGF0ZS5nZXRNaW51dGVzKCkpLCAvLyAwMCAwMSAuLi4gNTggNTlcbiAgczogZGF0ZSA9PiBkYXRlLmdldFNlY29uZHMoKSwgLy8gMCAxIC4uLiA1OCA1OVxuICBzczogZGF0ZSA9PiBwYWQyKGRhdGUuZ2V0U2Vjb25kcygpKSwgLy8gMDAgMDEgLi4uIDU4IDU5XG4gIFM6IGRhdGUgPT4gYCR7K2RhdGV9YC5zbGljZSgtMywgLTIpLCAvLyBmcmFjdGlvbmFsIHNlY29uZCAwIDEgLi4uIDggOVxuICBTUzogZGF0ZSA9PiBgJHsrZGF0ZX1gLnNsaWNlKC0zLCAtMSksIC8vIGZyYWN0aW9uYWwgc2Vjb25kIDAwIDAxIC4uLiA5OCA5OVxuICBTU1M6IGRhdGUgPT4gYCR7K2RhdGV9YC5zbGljZSgtMyksIC8vIGZyYWN0aW9uYWwgc2Vjb25kIDAwMCAwMDEgLi4uIDk5OCA5OTlcbiAgWlo6IGRhdGUgPT4geyAvLyAtMDcwMCAtMDYwMCAuLi4gKzA2MDAgKzA3MDBcbiAgICBjb25zdCB0eiA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBjb25zdCB0emEgPSBNYXRoLmFicyh0eik7XG4gICAgcmV0dXJuIGAke3R6IDwgMCA/ICctJyA6ICcrJ30ke3BhZDIoTWF0aC5mbG9vcih0emEgLyA2MCkpfSR7cGFkMihNYXRoLmZsb29yKHR6YSAlIDYwKSl9YDtcbiAgfSxcbn07XG5cbmxldCByZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGUodHBsLCBkYXRlID0gbmV3IERhdGUoKSkge1xuICBpZiAoIXJlKSB7XG4gICAgcmUgPSBuZXcgUmVnRXhwKGAke1xuICAgICAgLy8gbW9tZW50LmpzIGVzY2FwaW5nIGZvciBbbGl0ZXJhbCB0ZXh0XVxuICAgICAgL1xcWyhbXltcXF1dKildLy5zb3VyY2VcbiAgICB9fCR7XG4gICAgICAvLyBNYXRjaGluZyBsb25nZXN0IGZpcnN0IHRvIGFsbG93IG9taXR0aW5nIHNlcGFyYXRvcnMgZS5nLiBISE1NXG4gICAgICBPYmplY3Qua2V5cyhEQVRFX0ZNVCkuc29ydCgoYSwgYikgPT4gYi5sZW5ndGggLSBhLmxlbmd0aCkuam9pbignfCcpXG4gICAgfWAsICdnJyk7XG4gIH1cbiAgcmV0dXJuIHRwbC5yZXBsYWNlKHJlLCAocywgbGl0ZXJhbCkgPT4gKFxuICAgIGhhc093blByb3BlcnR5KERBVEVfRk1ULCBzKVxuICAgICAgPyBEQVRFX0ZNVFtzXShkYXRlKVxuICAgICAgOiBsaXRlcmFsID8/IHNcbiAgKSk7XG59XG4iLCJpbXBvcnQgeyBtYWtlUGF1c2UgfSBmcm9tICdAL2NvbW1vbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZEJsb2IoYmxvYiwgbmFtZSkge1xuICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBhLmhyZWYgPSB1cmw7XG4gIGEuZG93bmxvYWQgPSBuYW1lIHx8ICcnO1xuICBhLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoJ2NsaWNrJykpO1xuICBtYWtlUGF1c2UoMzAwMCkudGhlbigoKSA9PiBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCkpO1xufVxuIiwiaW1wb3J0IG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcblxuY29uc3QgaGFuZGxlcnMgPSB7XG4gIFVwZGF0ZU9wdGlvbnMoZGF0YSkge1xuICAgIG9wdGlvbnMudXBkYXRlKGRhdGEpO1xuICB9LFxufTtcblxuYnJvd3Nlci5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigocmVzLCBzcmMpID0+IHtcbiAgY29uc3QgaGFuZGxlID0gaGFuZGxlcnNbcmVzLmNtZF07XG4gIGlmIChoYW5kbGUpIGhhbmRsZShyZXMuZGF0YSwgc3JjKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVycztcbiIsImltcG9ydCBvcHRpb25zIGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBmb3JFYWNoRW50cnksIG9iamVjdEdldCB9IGZyb20gJy4vb2JqZWN0JztcblxuY29uc3QgaG9va3MgPSB7fTtcblxub3B0aW9ucy5ob29rKChkYXRhKSA9PiB7XG4gIGhvb2tzOjpmb3JFYWNoRW50cnkoKFtrZXksIGxpc3RdKSA9PiB7XG4gICAgaWYgKGxpc3QpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0R2V0KGRhdGEsIGtleSk7XG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgbGlzdC5mb3JFYWNoKHVwZGF0ZSA9PiB1cGRhdGUodmFsdWUpKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhvb2tTZXR0aW5nKGtleSwgdXBkYXRlKSB7XG4gIG9wdGlvbnMucmVhZHkudGhlbigoKSA9PiB1cGRhdGUob3B0aW9ucy5nZXQoa2V5KSkpO1xuICBjb25zdCBsaXN0ID0gaG9va3Nba2V5XSB8fCAoaG9va3Nba2V5XSA9IFtdKTtcbiAgbGlzdC5wdXNoKHVwZGF0ZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgaSA9IGxpc3QuaW5kZXhPZih1cGRhdGUpO1xuICAgIGlmIChpID49IDApIGxpc3Quc3BsaWNlKGksIDEpO1xuICB9O1xufVxuIiwiLy8gU0FGRVRZIFdBUk5JTkchIEV4cG9ydHMgdXNlZCBieSBgaW5qZWN0ZWRgIG11c3QgbWFrZSA6OnNhZmUoKSBjYWxscyBhbmQgdXNlIF9fcHJvdG9fXzpudWxsXG5cbmltcG9ydCB7IGJyb3dzZXIsIEhPTUVQQUdFX1VSTCwgSU5GRVJSRUQsIFJVTl9BVF9SRSwgU1VQUE9SVF9VUkwgfSBmcm9tICcuL2NvbnN0cyc7XG5pbXBvcnQgeyBkZWVwQ29weSB9IGZyb20gJy4vb2JqZWN0JztcbmltcG9ydCB7IGJsb2IyYmFzZTY0LCBpMThuLCBpc0RhdGFVcmkgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgeyBub3JtYWxpemVLZXlzIH0gZnJvbSAnLi9vYmplY3QnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlsJztcblxuaWYgKHByb2Nlc3MuZW52LkRFViAmJiBwcm9jZXNzLmVudi5JU19JTkpFQ1RFRCAhPT0gJ2luamVjdGVkLXdlYicpIHtcbiAgY29uc3QgZ2V0ID0gKCkgPT4ge1xuICAgIHRocm93ICdEbyBub3QgdXNlIGBmb3Itb2ZgIHdpdGggTWFwL1NldC4gVXNlIGZvckVhY2ggb3IgZm9yLW9mIHdpdGggYSBbLi4uY29weV0nXG4gICAgKyAnXFxuKG5vdCBzdXBwb3J0ZWQgZHVlIHRvIG91ciBjb25maWcgb2YgQGJhYmVsL3BsdWdpbi10cmFuc2Zvcm0tZm9yLW9mKS4nO1xuICB9O1xuICBmb3IgKGNvbnN0IG9iaiBvZiBbTWFwLCBTZXQsIFdlYWtNYXAsIFdlYWtTZXRdKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iai5wcm90b3R5cGUsICdsZW5ndGgnLCB7IGdldCwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBicm93c2VyV2luZG93cyA9IGJyb3dzZXIud2luZG93cztcbmV4cG9ydCBjb25zdCBkZWZhdWx0SW1hZ2UgPSAhcHJvY2Vzcy5lbnYuSVNfSU5KRUNURUQgJiYgYCR7SUNPTl9QUkVGSVh9MTI4LnBuZ2A7XG4vKiogV2lsbCBiZSBlbmNvZGVkIHRvIGF2b2lkIHNwbGl0dGluZyB0aGUgVVJMIGluIGRldnRvb2xzIFVJICovXG5jb25zdCBCQURfVVJMX0NIQVIgPSAvWyMvP10vZztcbi8qKiBGdWxsd2lkdGggcmFuZ2Ugc3RhcnRzIGF0IDB4RkYwMCwgbm9ybWFsIHJhbmdlIHN0YXJ0cyBhdCBzcGFjZSBjaGFyIGNvZGUgMHgyMCAqL1xuY29uc3QgcmVwbGFjZVdpdGhGdWxsV2lkdGhGb3JtID0gcyA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKHMuY2hhckNvZGVBdCgwKSAtIDB4MjAgKyAweEZGMDApO1xuY29uc3QgUE9SVF9FUlJPUl9SRSA9IC8oUmVjZWl2aW5nIGVuZCBkb2VzIG5vdCBleGlzdCl8VGhlIG1lc3NhZ2UgcG9ydCBjbG9zZWQgYmVmb3JlfCQvO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEhvb2tzKCkge1xuICBjb25zdCBob29rcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGZpcmUoZGF0YSkge1xuICAgIGhvb2tzLnNsaWNlKCkuZm9yRWFjaCgoY2IpID0+IHtcbiAgICAgIGNiKGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaG9vayhjYWxsYmFjaykge1xuICAgIGhvb2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBpID0gaG9va3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICBpZiAoaSA+PSAwKSBob29rcy5zcGxpY2UoaSwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7IGhvb2ssIGZpcmUgfTtcbn1cblxuLyoqXG4gKiBVc2VkIGJ5IGBpbmplY3RlZGBcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbWRcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0ge3tyZXRyeT86IGJvb2xlYW59fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge1Byb21pc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZW5kQ21kKGNtZCwgZGF0YSwgb3B0aW9ucykge1xuICAvLyBGaXJlZm94K1Z1ZTMgYnVnIHdvcmthcm91bmQgZm9yIFwiUHJveHkgb2JqZWN0IGNvdWxkIG5vdCBiZSBjbG9uZWRcIlxuICBpZiAoIXByb2Nlc3MuZW52LklTX0lOSkVDVEVEICYmIElTX0ZJUkVGT1ggJiYgaXNPYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0gZGVlcENvcHkoZGF0YSk7XG4gIH1cbiAgcmV0dXJuIHNlbmRNZXNzYWdlKHsgY21kLCBkYXRhIH0sIG9wdGlvbnMpO1xufVxuXG4vLyBUaGVzZSBuZWVkIGBzcmNgIHBhcmFtZXRlciBzbyB3ZSdsbCB1c2Ugc2VuZENtZCBmb3IgdGhlbS4gV2UgY291bGQgaGF2ZSBmb3JnZWQgYHNyY2AgdmlhXG4vLyBicm93c2VyLnRhYnMuZ2V0Q3VycmVudCBidXQgdGhlcmUncyBubyBuZWVkIGFzIHRoZXkgbm9ybWFsbHkgdXNlIG9ubHkgYSB0aW55IGFtb3VudCBvZiBkYXRhLlxuY29uc3QgQ09NTUFORFNfV0lUSF9TUkMgPSBbXG4gICdDb25maXJtSW5zdGFsbCcsXG4gICdOb3RpZmljYXRpb24nLFxuICAnVGFiQ2xvc2UnLFxuICAnVGFiRm9jdXMnLFxuICAnVGFiT3BlbicsXG4vKlxuICBUaGVzZSBhcmUgdXNlZCBvbmx5IGJ5IGNvbnRlbnQgc2NyaXB0cyB3aGVyZSBzZW5kQ21kRGlyZWN0bHkgY2FuJ3QgYmUgdXNlZCBhbnl3YXlcbiAgJ0dldEluamVjdGVkJyxcbiAgJ0dldFJlcXVlc3RJZCcsXG4gICdIdHRwUmVxdWVzdCcsXG4gICdJbmplY3Rpb25GZWVkYmFjaycsXG4gICdTZXRQb3B1cCcsXG4qL1xuXTtcbmNvbnN0IGdldEJnUGFnZSA9ICgpID0+IGJyb3dzZXIuZXh0ZW5zaW9uLmdldEJhY2tncm91bmRQYWdlPy4oKTtcblxuLyoqXG4gKiBTZW5kcyB0aGUgY29tbWFuZCtkYXRhIGRpcmVjdGx5IHNvIGl0J3Mgc3luY2hyb25vdXMgYW5kIGZhc3RlciB0aGFuIHNlbmRDbWQgdGhhbmtzIHRvIGRlZXBDb3B5LlxuICogV0FSTklORyEgTWFrZSBzdXJlIGBjbWRgIGhhbmRsZXIgZG9lc24ndCB1c2UgYHNyY2Agb3IgYGNtZGAgaXMgbGlzdGVkIGluIENPTU1BTkRTX1dJVEhfU1JDLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VuZENtZERpcmVjdGx5KGNtZCwgZGF0YSwgb3B0aW9ucywgZmFrZVNyYykge1xuICBjb25zdCBiZyA9ICFDT01NQU5EU19XSVRIX1NSQy5pbmNsdWRlcyhjbWQpICYmIGdldEJnUGFnZSgpO1xuICBjb25zdCBiZ0NvcHkgPSBiZyAmJiBiZyAhPT0gd2luZG93ICYmIGJnLmRlZXBDb3B5O1xuICBpZiAoIWJnQ29weSkge1xuICAgIHJldHVybiBzZW5kQ21kKGNtZCwgZGF0YSwgb3B0aW9ucyk7XG4gIH1cbiAgaWYgKGZha2VTcmMpIHtcbiAgICBmYWtlU3JjID0gYmdDb3B5KGZha2VTcmMpO1xuICAgIGZha2VTcmMuZmFrZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGJnLmhhbmRsZUNvbW1hbmRNZXNzYWdlKGJnQ29weSh7IGNtZCwgZGF0YSB9KSwgZmFrZVNyYykudGhlbihkZWVwQ29weSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRhYklkXG4gKiBAcGFyYW0ge3N0cmluZ30gY21kXG4gKiBAcGFyYW0gZGF0YVxuICogQHBhcmFtIHt7ZnJhbWVJZD86IG51bWJlcn19IFtvcHRpb25zXVxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbmRUYWJDbWQodGFiSWQsIGNtZCwgZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gYnJvd3Nlci50YWJzLnNlbmRNZXNzYWdlKHRhYklkLCB7IGNtZCwgZGF0YSB9LCBvcHRpb25zKS5jYXRjaChpZ25vcmVOb1JlY2VpdmVyKTtcbn1cblxuLy8gVXNlZCBieSBgaW5qZWN0ZWRgXG5leHBvcnQgZnVuY3Rpb24gc2VuZE1lc3NhZ2UocGF5bG9hZCwgeyByZXRyeSB9ID0ge30pIHtcbiAgaWYgKHJldHJ5KSByZXR1cm4gc2VuZE1lc3NhZ2VSZXRyeShwYXlsb2FkKTtcbiAgbGV0IHByb21pc2UgPSBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2UocGF5bG9hZCk7XG4gIC8vIElnbm9yaW5nIGVycm9ycyB3aGVuIHNlbmRpbmcgZnJvbSB0aGUgZXh0ZW5zaW9uIHNjcmlwdCBiZWNhdXNlIGl0J3MgYSBicm9hZGNhc3RcbiAgaWYgKCFwcm9jZXNzLmVudi5JU19JTkpFQ1RFRCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKGlnbm9yZU5vUmVjZWl2ZXIpO1xuICB9XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG4vKipcbiAqIFVzZWQgYnkgYGluamVjdGVkYFxuICogVGhlIGFjdGl2ZSB0YWIgcGFnZSBhbmQgaXRzIFtjb250ZW50XSBzY3JpcHRzIGxvYWQgYmVmb3JlIHRoZSBleHRlbnNpb24nc1xuICogcGVyc2lzdGVudCBiYWNrZ3JvdW5kIHNjcmlwdCB3aGVuIENocm9tZSBzdGFydHMgd2l0aCBhIFVSTCB2aWEgY29tbWFuZCBsaW5lXG4gKiBvciB3aGVuIGNvbmZpZ3VyZWQgdG8gcmVzdG9yZSB0aGUgc2Vzc2lvbiwgaHR0cHM6Ly9jcmJ1Zy5jb20vMzE0Njg2XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kTWVzc2FnZVJldHJ5KHBheWxvYWQsIG1heER1cmF0aW9uID0gMTBlMykge1xuICBmb3IgKGxldCBzdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpOyBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0IDwgbWF4RHVyYXRpb247KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzZW5kTWVzc2FnZShwYXlsb2FkKTtcbiAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKCFQT1JUX0VSUk9SX1JFLmV4ZWMoZSlbMV0pIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTm90IHVzaW5nIHNldFRpbWVvdXQgd2hpY2ggbWF5IGJlIGNsZWFyZWQgYnkgdGhlIHdlYiBwYWdlXG4gICAgYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChWSU9MRU5UTU9OS0VZKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoVklPTEVOVE1PTktFWSArICcgY2Fubm90IGNvbm5lY3QgdG8gdGhlIGJhY2tncm91bmQgcGFnZS4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlnbm9yZU5vUmVjZWl2ZXIoZXJyKSB7XG4gIGlmICghUE9SVF9FUlJPUl9SRS5leGVjKGVycilbMF0pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVmdHBhZChpbnB1dCwgbGVuZ3RoLCBwYWQgPSAnMCcpIHtcbiAgbGV0IG51bSA9IGlucHV0LnRvU3RyaW5nKCk7XG4gIHdoaWxlIChudW0ubGVuZ3RoIDwgbGVuZ3RoKSBudW0gPSBgJHtwYWR9JHtudW19YDtcbiAgcmV0dXJuIG51bTtcbn1cblxuLyoqXG4gKiBHZXQgbG9jYWxlIGF0dHJpYnV0ZXMgc3VjaCBhcyBgQG5hbWU6emgtQ05gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGVTdHJpbmcobWV0YSwga2V5KSB7XG4gIGNvbnN0IGxvY2FsZU1ldGEgPSBuYXZpZ2F0b3IubGFuZ3VhZ2VzXG4gIC8vIFVzZSBgbGFuZy50b0xvd2VyQ2FzZSgpYCBzaW5jZSB2Mi42LjVcbiAgLm1hcChsYW5nID0+IG1ldGFbYCR7a2V5fToke2xhbmd9YF0gfHwgbWV0YVtgJHtrZXl9OiR7bGFuZy50b0xvd2VyQ2FzZSgpfWBdKVxuICAuZmluZChCb29sZWFuKTtcbiAgcmV0dXJuIGxvY2FsZU1ldGEgfHwgbWV0YVtrZXldIHx8ICcnO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Vk1TY3JpcHR9IHNjcmlwdFxuICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmlwdEhvbWUoc2NyaXB0KSB7XG4gIGxldCBtZXRhO1xuICByZXR1cm4gc2NyaXB0LmN1c3RvbVtIT01FUEFHRV9VUkxdXG4gICAgfHwgKG1ldGEgPSBzY3JpcHQubWV0YSlbSE9NRVBBR0VfVVJMXVxuICAgIHx8IHNjcmlwdFtJTkZFUlJFRF0/LltIT01FUEFHRV9VUkxdXG4gICAgfHwgbWV0YS5ob21lcGFnZVxuICAgIHx8IG1ldGEud2Vic2l0ZVxuICAgIHx8IG1ldGEuc291cmNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Vk1TY3JpcHR9IHNjcmlwdFxuICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmlwdFN1cHBvcnRVcmwoc2NyaXB0KSB7XG4gIHJldHVybiBzY3JpcHQubWV0YVtTVVBQT1JUX1VSTF0gfHwgc2NyaXB0W0lORkVSUkVEXT8uW1NVUFBPUlRfVVJMXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmlwdE5hbWUoc2NyaXB0KSB7XG4gIHJldHVybiBzY3JpcHQuY3VzdG9tLm5hbWUgfHwgZ2V0TG9jYWxlU3RyaW5nKHNjcmlwdC5tZXRhLCAnbmFtZScpXG4gICAgfHwgYCMke3NjcmlwdC5wcm9wcy5pZCA/PyBpMThuKCdsYWJlbE5vTmFtZScpfWA7XG59XG5cbi8qKiBAcmV0dXJucyB7Vk1JbmplY3Rpb24uUnVuQXR9IHdpdGhvdXQgXCJkb2N1bWVudC1cIiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmlwdFJ1bkF0KHNjcmlwdCkge1xuICByZXR1cm4gYCR7c2NyaXB0LmN1c3RvbVtSVU5fQVRdIHx8IHNjcmlwdC5tZXRhW1JVTl9BVF0gfHwgJyd9YC5tYXRjaChSVU5fQVRfUkUpPy5bMV0gfHwgJ2VuZCc7XG59XG5cbi8qKiBVUkwgdGhhdCBzaG93cyB0aGUgbmFtZSBvZiB0aGUgc2NyaXB0IGFuZCBvcGVucyBpbiBkZXZ0b29scyBzb3VyY2VzIG9yIGluIG91ciBlZGl0b3IgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JpcHRQcmV0dHlVcmwoc2NyaXB0LCBkaXNwbGF5TmFtZSkge1xuICByZXR1cm4gYCR7XG4gICAgZXh0ZW5zaW9uUm9vdFxuICB9JHtcbiAgICAvLyBXaGVuIGNhbGxlZCBmcm9tIHByZXBhcmVTY3JpcHQsIGFkZGluZyBhIHNwYWNlIHRvIGdyb3VwIHNjcmlwdHMgaW4gb25lIGJsb2NrIHZpc3VhbGx5XG4gICAgZGlzcGxheU5hbWUgJiYgSVNfRklSRUZPWCA/ICclMjAnIDogJydcbiAgfSR7XG4gICAgZW5jb2RlVVJJQ29tcG9uZW50KChkaXNwbGF5TmFtZSB8fCBnZXRTY3JpcHROYW1lKHNjcmlwdCkpXG4gICAgLnJlcGxhY2UoQkFEX1VSTF9DSEFSLCByZXBsYWNlV2l0aEZ1bGxXaWR0aEZvcm0pKVxuICB9LnVzZXIuanMjJHtcbiAgICBzY3JpcHQucHJvcHMuaWRcbiAgfWA7XG59XG5cbi8qKlxuICogQHBhcmFtIHtWTVNjcmlwdH0gc2NyaXB0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthbGxdIC0gdG8gcmV0dXJuIGFsbCB0d28gdXJscyAoMTogY2hlY2ssIDI6IGRvd25sb2FkKVxuICogQHJldHVybiB7QXJyYXk8c3RyaW5nPnxzdHJpbmd8dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmlwdFVwZGF0ZVVybChzY3JpcHQsIGFsbCkge1xuICBpZiAoc2NyaXB0LmNvbmZpZy5zaG91bGRVcGRhdGUpIHtcbiAgICBjb25zdCB7IGN1c3RvbSwgbWV0YSB9ID0gc2NyaXB0O1xuICAgIC8qIFVSTCBpbiBtZXRhIG1heSBiZSBzZXQgdG8gYW4gaW52YWxpZCB2YWx1ZSB0byBlbmZvcmNlIGRpc2FibGluZyBvZiB0aGUgYXV0b21hdGljIHVwZGF0ZXNcbiAgICAgKiBlLmcuIEdyZWFzeUZvcmsgc2V0cyBpdCB0byBgbm9uZWAgd2hlbiB0aGUgdXNlciBpbnN0YWxscyBhbiBvbGQgdmVyc2lvbi5cbiAgICAgKiBXZSdsbCBzaG93IHN1Y2ggc2NyaXB0IGFzIG5vbi11cGRhdGFibGUuICovXG4gICAgY29uc3QgZG93bmxvYWRVUkwgPSB0cnlVcmwoY3VzdG9tLmRvd25sb2FkVVJMIHx8IG1ldGEuZG93bmxvYWRVUkwgfHwgY3VzdG9tLmxhc3RJbnN0YWxsVVJMKTtcbiAgICBjb25zdCB1cGRhdGVVUkwgPSB0cnlVcmwoY3VzdG9tLnVwZGF0ZVVSTCB8fCBtZXRhLnVwZGF0ZVVSTCB8fCBkb3dubG9hZFVSTCk7XG4gICAgY29uc3QgdXJsID0gZG93bmxvYWRVUkwgfHwgdXBkYXRlVVJMO1xuICAgIGlmICh1cmwpIHJldHVybiBhbGwgPyBbZG93bmxvYWRVUkwsIHVwZGF0ZVVSTF0gOiB1cmw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bGxVcmwodXJsLCBiYXNlKSB7XG4gIGxldCBvYmo7XG4gIHRyeSB7XG4gICAgb2JqID0gbmV3IFVSTCh1cmwsIGJhc2UpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGBkYXRhOiwke2UubWVzc2FnZX0gJHt1cmx9YDtcbiAgfVxuICAvLyBVc2UgcHJvdG9jb2wgd2hpdGVsaXN0IHRvIGZpbHRlciBVUkxzXG4gIGlmICghW1xuICAgICdodHRwOicsXG4gICAgJ2h0dHBzOicsXG4gICAgJ2Z0cDonLFxuICAgICdkYXRhOicsXG4gIF0uaW5jbHVkZXMob2JqLnByb3RvY29sKSkgb2JqLnByb3RvY29sID0gJ2h0dHA6JztcbiAgcmV0dXJuIG9iai5ocmVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlRmlsZW5hbWUobmFtZSkge1xuICAvLyBgZXNjYXBlYCBnZW5lcmF0ZWQgVVJJIGhhcyAlIGluIGl0XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoL1stXFxcXC86Kj9cIjw+fCVcXHNdL2csIChtKSA9PiB7XG4gICAgbGV0IGNvZGUgPSBtLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuICAgIGlmIChjb2RlLmxlbmd0aCA8IDIpIGNvZGUgPSBgMCR7Y29kZX1gO1xuICAgIHJldHVybiBgLSR7Y29kZX1gO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUZpbGVuYW1lKGZpbGVuYW1lKSB7XG4gIHJldHVybiBmaWxlbmFtZS5yZXBsYWNlKC8tKFswLTlhLWZdezJ9KS9nLCAoX20sIGcpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoZywgMTYpKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBY3RpdmVUYWIoKSB7XG4gIHJldHVybiAoXG4gICAgYXdhaXQgYnJvd3Nlci50YWJzLnF1ZXJ5KHtcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICAgIGN1cnJlbnRXaW5kb3c6IHRydWUsXG4gICAgfSlcbiAgKVswXSB8fCBicm93c2VyV2luZG93cyAmJiAoXG4gICAgLy8gQ2hyb21lIGJ1ZyB3b3JrYXJvdW5kIHdoZW4gYW4gdW5kb2NrZWQgZGV2dG9vbHMgd2luZG93IGlzIGZvY3VzZWRcbiAgICBhd2FpdCBicm93c2VyLnRhYnMucXVlcnkoe1xuICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgd2luZG93SWQ6IChhd2FpdCBicm93c2VyV2luZG93cy5nZXRDdXJyZW50KCkpLmlkLFxuICAgIH0pXG4gIClbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGF1c2UobXMpIHtcbiAgcmV0dXJuIG1zIDwgMFxuICAgID8gUHJvbWlzZS5yZXNvbHZlKClcbiAgICA6IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJ1ZUpvaW4oc2VwYXJhdG9yKSB7XG4gIHJldHVybiB0aGlzLmZpbHRlcihCb29sZWFuKS5qb2luKHNlcGFyYXRvcik7XG59XG5cbi8qKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cnlVcmwoc3RyKSB7XG4gIHRyeSB7XG4gICAgaWYgKHN0ciAmJiBuZXcgVVJMKHN0cikpIHtcbiAgICAgIHJldHVybiBzdHI7IC8vIHRocm93cyBvbiBpbnZhbGlkIHVybHNcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyB1bmRlZmluZWRcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7c3RyaW5nfSByYXcgLSByYXcgdmFsdWUgaW4gc3RvcmFnZS5jYWNoZVxuICogQHJldHVybnMgez9zdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRGF0YVVyaShyYXcsIHVybCkge1xuICBpZiAoaXNEYXRhVXJpKHVybCkpIHJldHVybiB1cmw7XG4gIGlmICgvXihpLHxpbWFnZVxcLykvLnRlc3QocmF3KSkgeyAvLyB3b3JrYXJvdW5kIGZvciBidWdzIGluIG9sZCBWTSwgc2VlIDJlMTM1Y2Y3XG4gICAgY29uc3QgaSA9IHJhdy5sYXN0SW5kZXhPZignLCcpO1xuICAgIGNvbnN0IHR5cGUgPSByYXcuc3RhcnRzV2l0aCgnaW1hZ2UvJykgPyByYXcuc2xpY2UoMCwgaSkgOiAnaW1hZ2UvcG5nJztcbiAgICByZXR1cm4gYGRhdGE6JHt0eXBlfTtiYXNlNjQsJHtyYXcuc2xpY2UoaSArIDEpfWA7XG4gIH1cbiAgcmV0dXJuIHJhdztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1ZNUmVxLlJlc3BvbnNlfSByZXNwb25zZVxuICogQHBhcmFtIHtib29sZWFufSBbbm9Kb2luXVxuICogQHJldHVybnMge3N0cmluZ3xzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1ha2VSYXcocmVzcG9uc2UsIG5vSm9pbikge1xuICBjb25zdCB0eXBlID0gKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSB8fCAnJykuc3BsaXQoJzsnKVswXSB8fCAnJztcbiAgY29uc3QgYm9keSA9IGF3YWl0IGJsb2IyYmFzZTY0KHJlc3BvbnNlLmRhdGEpO1xuICByZXR1cm4gbm9Kb2luID8gW3R5cGUsIGJvZHldIDogYCR7dHlwZX0sJHtib2R5fWA7XG59XG4iLCJpbXBvcnQgeyBLZXlib2FyZFNlcnZpY2UgfSBmcm9tICdAdmlvbGVudG1vbmtleS9zaG9ydGN1dCc7XG5cbmV4cG9ydCAqIGZyb20gJ0B2aW9sZW50bW9ua2V5L3Nob3J0Y3V0JztcblxuZXhwb3J0IGNvbnN0IGtleWJvYXJkU2VydmljZSA9IG5ldyBLZXlib2FyZFNlcnZpY2UoKTtcblxuYmluZEtleXMoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5wdXQoZWwpIHtcbiAgcmV0dXJuIFsnaW5wdXQnLCAndGV4dGFyZWEnXS5pbmNsdWRlcyhlbD8udGFnTmFtZT8udG9Mb3dlckNhc2UoKSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvY3VzKGUpIHtcbiAgaWYgKGlzSW5wdXQoZS50YXJnZXQpKSB7XG4gICAga2V5Ym9hcmRTZXJ2aWNlLnNldENvbnRleHQoJ2lucHV0Rm9jdXMnLCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVCbHVyKGUpIHtcbiAgaWYgKGlzSW5wdXQoZS50YXJnZXQpKSB7XG4gICAga2V5Ym9hcmRTZXJ2aWNlLnNldENvbnRleHQoJ2lucHV0Rm9jdXMnLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3RpcGhpZGUnLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgIH0pO1xuICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVzY2FwZSgpIHtcbiAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVUaXAoZWwpIHtcbiAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3RpcHRvZ2dsZScsIHtcbiAgICBidWJibGVzOiB0cnVlLFxuICB9KTtcbiAgZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGJpbmRLZXlzKCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGhhbmRsZUJsdXIsIHRydWUpO1xuICBrZXlib2FyZFNlcnZpY2UucmVnaXN0ZXIoJ2VzY2FwZScsIGhhbmRsZUVzY2FwZSk7XG4gIGtleWJvYXJkU2VydmljZS5yZWdpc3RlcignYy1bJywgaGFuZGxlRXNjYXBlKTtcbiAga2V5Ym9hcmRTZXJ2aWNlLnJlZ2lzdGVyKCdlbnRlcicsICgpID0+IHtcbiAgICBjb25zdCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGRvY3VtZW50O1xuICAgIGFjdGl2ZUVsZW1lbnQuY2xpY2soKTtcbiAgfSwge1xuICAgIGNvbmRpdGlvbjogJyFpbnB1dEZvY3VzJyxcbiAgfSk7XG59XG5cbi8qKlxuICogTm90ZTogVGhpcyBpcyBvbmx5IHVzZWQgaW4gRmlyZWZveCB0byB3b3JrIGFyb3VuZCB0aGUgaXNzdWUgdGhhdCA8YT4gY2Fubm90IGJlIGZvY3VzZWQuXG4gKiBSZWY6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTcxMzUzNy80MjM4MzM1XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVUYWJOYXZpZ2F0aW9uKGRpcikge1xuICBjb25zdCBlbHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0YWJpbmRleD1cIjBcIl0sYVtocmVmXSxidXR0b24saW5wdXQsc2VsZWN0LHRleHRhcmVhJykpXG4gIC5maWx0ZXIoZWwgPT4ge1xuICAgIGlmIChlbC50YWJJbmRleCA8IDApIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHJlY3Qud2lkdGggPiAwICYmIHJlY3QuaGVpZ2h0ID4gMDtcbiAgfSk7XG4gIGxldCBpbmRleCA9IGVscy5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICBpbmRleCA9IChpbmRleCArIGRpciArIGVscy5sZW5ndGgpICUgZWxzLmxlbmd0aDtcbiAgZWxzW2luZGV4XS5mb2N1cygpO1xufVxuIiwiaW1wb3J0IHsgaXNEYXRhVXJpLCBpc0h0dHBPckh0dHBzLCBub29wLCBzZW5kQ21kRGlyZWN0bHkgfSBmcm9tICdAL2NvbW1vbi9pbmRleCc7XG5cbi8vIFRPRE86IGNvbnZlcnQgdGhpcyBpbnRvIGEgY29tcG9uZW50IHRhZyBlLmcuIDxzYWZlLWljb24+XG5jb25zdCBLRVkgPSAnc2FmZUljb24nO1xuY29uc3QgS0VZX0RFRkFVTFQgPSAnbm9JY29uJztcblxuLyoqXG4gKiBTZXRzIHNjcmlwdCdzIHNhZmVJY29uIHByb3BlcnR5IGFmdGVyIHRoZSBpbWFnZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkXG4gKiBAcGFyYW0ge1ZNU2NyaXB0fSBzY3JpcHRcbiAqIEBwYXJhbSB7e2NhY2hlPzp7fSwgaXNIaURQST86Ym9vbGVhbn19IFtzdG9yZV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Nob3dEZWZhdWx0XVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZFNjcmlwdEljb24oc2NyaXB0LCBzdG9yZSwgc2hvd0RlZmF1bHQpIHtcbiAgbGV0IGRlZjtcbiAgY29uc3QgeyBpY29uIH0gPSBzY3JpcHQubWV0YTtcbiAgY29uc3QgeyBjYWNoZSA9IHt9LCBpc0hpRFBJIH0gPSBzdG9yZSB8fCB7fTtcbiAgY29uc3QgdXJsID0gc2NyaXB0LmN1c3RvbT8ucGF0aE1hcD8uW2ljb25dIHx8IGljb24gfHwgc2hvd0RlZmF1bHQgJiYgKFxuICAgIGRlZiA9IGAke0lDT05fUFJFRklYfSR7aXNIaURQSSAmJiAxMjggfHwgKHNjcmlwdC5jb25maWcucmVtb3ZlZCA/IDMyIDogMzgpfS5wbmdgXG4gICk7XG4gIGlmICghdXJsIHx8IHVybCAhPT0gc2NyaXB0W0tFWV0pIHtcbiAgICAvLyBleHBvc2luZyBzY3JpcHRzIHdpdGggbm8gaWNvbiBmb3IgdXNlcidzIEN1c3RvbUNTU1xuICAgIHNjcmlwdFtLRVlfREVGQVVMVF0gPSBkZWYgPyAnJyA6IG51bGw7XG4gICAgLy8gY3JlYXRlcyBhbiBvYnNlcnZhYmxlIHByb3BlcnR5IHNvIFZ1ZSB3aWxsIHNlZSB0aGUgY2hhbmdlIGFmdGVyIGBhd2FpdGBcbiAgICBpZiAoIShLRVkgaW4gc2NyaXB0KSkge1xuICAgICAgc2NyaXB0W0tFWV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodXJsKSB7XG4gICAgICBzY3JpcHRbS0VZXSA9IGNhY2hlW3VybF1cbiAgICAgICAgfHwgaXNEYXRhVXJpKHVybCkgJiYgdXJsXG4gICAgICAgIHx8IGlzSGlEUEkgJiYgZGVmIC8vIFVzaW5nIG91ciBiaWcgaWNvbiBkaXJlY3RseSBhcyBpdHMgZGF0YSBVUkkgaXMgcmVuZGVyZWQgc2xvd2VyXG4gICAgICAgIHx8IChkZWYgfHwgaXNIdHRwT3JIdHRwcyh1cmwpKVxuICAgICAgICAgICYmIChjYWNoZVt1cmxdID0gYXdhaXQgc2VuZENtZERpcmVjdGx5KCdHZXRJbWFnZURhdGEnLCB1cmwpLmNhdGNoKG5vb3ApKVxuICAgICAgICB8fCBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2NyaXB0W0tFWV07XG59XG4iLCIvKiogQHR5cGUge2Jvb2xlYW59ICovXG5sZXQgZGVlcERpZmY7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVLZXlzKGtleSkge1xuICBpZiAoa2V5ID09IG51bGwpIHJldHVybiBbXTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIGAke2tleX1gLnNwbGl0KCcuJykuZmlsdGVyKEJvb2xlYW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0R2V0KG9iaiwgcmF3S2V5KSB7XG4gIGZvciAoY29uc3Qga2V5IG9mIG5vcm1hbGl6ZUtleXMocmF3S2V5KSkge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSBicmVhaztcbiAgICBvYmogPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqID0ge31dXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW3Jhd0tleV1cbiAqIEBwYXJhbSB7P30gW3ZhbF0gLSBpZiBgdW5kZWZpbmVkYCBvciBvbWl0dGVkIHRoZSB2YWx1ZSBpcyBkZWxldGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRQYXJlbnRdXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBvcmlnaW5hbCBvYmplY3Qgb3IgdGhlIHBhcmVudCBvZiBgdmFsYCBpZiByZXRQYXJlbnQgaXMgc2V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvYmplY3RTZXQob2JqLCByYXdLZXksIHZhbCwgcmV0UGFyZW50KSB7XG4gIHJhd0tleSA9IG5vcm1hbGl6ZUtleXMocmF3S2V5KTtcbiAgbGV0IHJlcyA9IG9iaiB8fCB7fTtcbiAgbGV0IGtleTtcbiAgZm9yIChsZXQgaSA9IDA7IChrZXkgPSByYXdLZXlbaV0sIGkgPCByYXdLZXkubGVuZ3RoIC0gMSk7IGkgKz0gMSkge1xuICAgIHJlcyA9IHJlc1trZXldIHx8IChyZXNba2V5XSA9IHt9KTtcbiAgfVxuICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgcmVzW2tleV07XG4gIH0gZWxzZSB7XG4gICAgcmVzW2tleV0gPSB2YWw7XG4gIH1cbiAgcmV0dXJuIHJldFBhcmVudCA/IHJlcyA6IG9iajtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3t9fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWUsa2V5KTo/fSBbdHJhbnNmb3JtXVxuICogQHJldHVybnMge3t9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0UGljayhvYmosIGtleXMsIHRyYW5zZm9ybSkge1xuICBjb25zdCByZXMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGxldCB2YWx1ZSA9IG9iaj8uW2tleV07XG4gICAgaWYgKHRyYW5zZm9ybSkgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUsIGtleSk7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHJlc1trZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZm5WYWx1ZV0gLSAodmFsdWUsIG5ld0tleSwgb2JqKSA9PiBuZXdWYWx1ZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2ZuS2V5XSAtIChrZXksIHZhbCwgb2JqKSA9PiBuZXdLZXkgKGlmIG5ld0tleSBpcyBmYWxzeSB0aGUga2V5IGlzIHNraXBwZWQpXG4gKiBAcGFyYW0ge09iamVjdH0gW3RoaXNPYmpdIC0gcGFzc2VkIGFzIGB0aGlzYCB0byBib3RoIGZ1bmN0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwRW50cnkoZm5WYWx1ZSwgZm5LZXksIHRoaXNPYmopIHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzKSkge1xuICAgIGNvbnN0IHZhbCA9IHRoaXNba2V5XTtcbiAgICBpZiAoIWZuS2V5IHx8IChrZXkgPSB0aGlzT2JqOjpmbktleShrZXksIHZhbCwgdGhpcykpKSB7XG4gICAgICByZXNba2V5XSA9IGZuVmFsdWUgPyB0aGlzT2JqOjpmblZhbHVlKHZhbCwga2V5LCB0aGlzKSA6IHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuLy8gaW52b2tlZCBhcyBvYmo6OmZvckVhY2hFbnRyeSgoW2tleSwgdmFsdWVdLCBpLCBhbGxFbnRyaWVzKSA9PiB7fSlcbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoRW50cnkoZnVuYywgdGhpc09iaikge1xuICBpZiAodGhpcykgT2JqZWN0LmVudHJpZXModGhpcykuZm9yRWFjaChmdW5jLCB0aGlzT2JqKTtcbn1cblxuLy8gaW52b2tlZCBhcyBvYmo6OmZvckVhY2hLZXkoa2V5ID0+IHt9LCBpLCBhbGxLZXlzKVxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hLZXkoZnVuYywgdGhpc09iaikge1xuICBpZiAodGhpcykgT2JqZWN0LmtleXModGhpcykuZm9yRWFjaChmdW5jLCB0aGlzT2JqKTtcbn1cblxuLy8gaW52b2tlZCBhcyBvYmo6OmZvckVhY2hWYWx1ZSh2YWx1ZSA9PiB7fSwgaSwgYWxsVmFsdWVzKVxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hWYWx1ZShmdW5jLCB0aGlzT2JqKSB7XG4gIGlmICh0aGlzKSBPYmplY3QudmFsdWVzKHRoaXMpLmZvckVhY2goZnVuYywgdGhpc09iaik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ29weShzcmMpIHtcbiAgaWYgKCFzcmMgfHwgdHlwZW9mIHNyYyAhPT0gJ29iamVjdCcpIHJldHVybiBzcmM7XG4gIC8qIE5vdCB1c2luZyBgbWFwYCBiZWNhdXNlIGl0cyByZXN1bHQgYmVsb25ncyB0byB0aGUgYHdpbmRvd2Agb2YgdGhlIHNvdXJjZSxcbiAgICogc28gaXQgYmVjb21lcyBcImRlYWQgb2JqZWN0XCIgaW4gRmlyZWZveCBhZnRlciBHQyBjb2xsZWN0cyBpdC4gKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoc3JjKSkgcmV0dXJuIEFycmF5LmZyb20oc3JjLCBkZWVwQ29weSk7XG4gIHJldHVybiBzcmM6Om1hcEVudHJ5KGRlZXBDb3B5KTtcbn1cblxuLy8gU2ltcGxpZmllZCBkZWVwIGVxdWFsaXR5IGNoZWNrZXJcbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICBsZXQgcmVzO1xuICBpZiAoIWEgfHwgIWIgfHwgdHlwZW9mIGEgIT09IHR5cGVvZiBiIHx8IHR5cGVvZiBhICE9PSAnb2JqZWN0Jykge1xuICAgIHJlcyA9IGEgPT09IGI7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJlcyA9IGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KChpdGVtLCBpKSA9PiBkZWVwRXF1YWwoaXRlbSwgYltpXSkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgLyogTm90IGNoZWNraW5nIGhhc093blByb3BlcnR5IGJlY2F1c2UgMSkgd2Ugb25seSB1c2Ugb3duIHByb3BlcnRpZXMgYW5kXG4gICAgICogMikgdGhpcyBjYW4gYmUgc2xvdyBmb3IgYSBsYXJnZSB2YWx1ZSBzdG9yYWdlIHRoYXQgaGFzIHRob3VzYW5kcyBvZiBrZXlzICovXG4gICAgcmVzID0ga2V5c0EubGVuZ3RoID09PSBPYmplY3Qua2V5cyhiKS5sZW5ndGhcbiAgICAgICYmIGtleXNBLmV2ZXJ5KGtleSA9PiBkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0pKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG4vKiogQHJldHVybiB7P30gYHVuZGVmaW5lZGAgaWYgZXF1YWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ29weURpZmYoc3JjLCBzYW1wbGUpIHtcbiAgaWYgKHNyYyA9PT0gc2FtcGxlKSByZXR1cm47XG4gIGlmICghc3JjIHx8IHR5cGVvZiBzcmMgIT09ICdvYmplY3QnKSByZXR1cm4gc3JjO1xuICBpZiAoIXNhbXBsZSB8fCB0eXBlb2Ygc2FtcGxlICE9PSAnb2JqZWN0JykgcmV0dXJuIGRlZXBDb3B5KHNyYyk7XG4gIGlmICgoZGVlcERpZmYgPSBmYWxzZSwgc3JjID0gZGVlcENvcHlEaWZmT2JqZWN0cyhzcmMsIHNhbXBsZSksIGRlZXBEaWZmKSkgcmV0dXJuIHNyYztcbn1cblxuZnVuY3Rpb24gZGVlcENvcHlEaWZmT2JqZWN0cyhzcmMsIHNhbXBsZSkge1xuICBjb25zdCBpc0FyciA9IEFycmF5LmlzQXJyYXkoc3JjKTtcbiAgY29uc3QgYXJyMSA9IGlzQXJyID8gc3JjIDogT2JqZWN0LmtleXMoc3JjKTtcbiAgY29uc3QgYXJyMiA9IGlzQXJyID8gc2FtcGxlIDogT2JqZWN0LmtleXMoc2FtcGxlKTtcbiAgY29uc3QgcmVzID0gaXNBcnIgPyBbXSA6IHt9O1xuICBpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG4gICAgZGVlcERpZmYgPSB0cnVlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwLCBrZXksIGEsIGI7IGkgPCBhcnIxLmxlbmd0aDsgaSArPSAxKSB7XG4gICAga2V5ID0gaXNBcnIgPyBpIDogYXJyMVtpXTtcbiAgICBhID0gc3JjW2tleV07XG4gICAgLyogTm90IGNoZWNraW5nIGhhc093blByb3BlcnR5IGJlY2F1c2UgMSkgd2Ugb25seSB1c2Ugb3duIHByb3BlcnRpZXMgYW5kXG4gICAgICogMikgdGhpcyBjYW4gYmUgc2xvdyBmb3IgYSBsYXJnZSB2YWx1ZSBzdG9yYWdlIHRoYXQgaGFzIHRob3VzYW5kcyBvZiBrZXlzICovXG4gICAgYiA9IHNhbXBsZVtrZXldO1xuICAgIGlmIChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGIgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGEgPSBkZWVwQ29weURpZmZPYmplY3RzKGEsIGIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYSA9IGRlZXBDb3B5KGEpO1xuICAgICAgICBkZWVwRGlmZiA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhICE9PSBiKSB7XG4gICAgICBkZWVwRGlmZiA9IHRydWU7XG4gICAgfVxuICAgIHJlc1trZXldID0gYTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVlcFNpemUodmFsKSB7XG4gIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIGlmICh2YWwgPT09IHRydWUgfHwgdmFsID09IG51bGwpIHJldHVybiA0O1xuICBpZiAodmFsID09PSBmYWxzZSkgcmV0dXJuIDU7XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgcmV0dXJuIHZhbC5sZW5ndGggKyAyOyAvLyBub3QgY291bnRpbmcgZXNjYXBlcyBmb3IgXFxuXFxyXFx0IGFuZCBzbyBvblxuICBpZiAodHlwZW9mIHZhbCAhPT0gJ29iamVjdCcpIHJldHVybiBgJHt2YWx9YC5sZW5ndGg7IC8vIG51bWJlciBhbmQgd2hhdGV2ZXJcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuIHZhbC5yZWR1Y2UoKHN1bSwgdikgPT4gc3VtICsgMSArIGRlZXBTaXplKHYpLCAyKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbCkucmVkdWNlKChzdW0sIGspID0+IHN1bSArIGsubGVuZ3RoICsgNCArIGRlZXBTaXplKHZhbFtrXSksIDIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBpc0FwcGxpZWQ6IHRydWUsXG4gIGF1dG9VcGRhdGU6IDEsIC8vIGRheXMsIDAgPSBkaXNhYmxlXG4gIHVwZGF0ZUVuYWJsZWRTY3JpcHRzT25seTogdHJ1ZSxcbiAgLy8gaWdub3JlR3JhbnQ6IGZhbHNlLFxuICBsYXN0VXBkYXRlOiAwLFxuICBsYXN0TW9kaWZpZWQ6IDAsXG4gIC8qKiBAdHlwZSB7Vk1CYWRnZU1vZGV9ICovXG4gIHNob3dCYWRnZTogJ3VuaXF1ZScsXG4gIGJhZGdlQ29sb3I6ICcjODgwMDg4JyxcbiAgYmFkZ2VDb2xvckJsb2NrZWQ6ICcjODg4ODg4JyxcbiAgZXhwb3J0VmFsdWVzOiB0cnVlLFxuICBleHBvcnROYW1lVGVtcGxhdGU6ICdbdmlvbGVudG1vbmtleV1fWVlZWS1NTS1ERF9ISC5tbS5zcycsXG4gIFtFWFBPU0VdOiB7IC8vIHVzZSBwZXJjZW50LWVuY29kaW5nIGZvciAnLidcbiAgICAnZ3JlYXN5Zm9yayUyRW9yZyc6IHRydWUsXG4gICAgJ3NsZWF6eWZvcmslMkVvcmcnOiBmYWxzZSxcbiAgfSxcbiAgY2xvc2VBZnRlckluc3RhbGw6IGZhbHNlLFxuICB0cmFja0xvY2FsRmlsZTogZmFsc2UsXG4gIGF1dG9SZWxvYWQ6IGZhbHNlLFxuICBmZWF0dXJlczogbnVsbCxcbiAgYmxhY2tsaXN0OiBudWxsLFxuICBzeW5jU2NyaXB0U3RhdHVzOiB0cnVlLFxuICBzeW5jOiBudWxsLFxuICBjdXN0b21DU1M6ICcnLFxuICBpbXBvcnRTY3JpcHREYXRhOiB0cnVlLFxuICBpbXBvcnRTZXR0aW5nczogdHJ1ZSxcbiAgbm90aWZ5VXBkYXRlczogZmFsc2UsXG4gIG5vdGlmeVVwZGF0ZXNHbG9iYWw6IGZhbHNlLCAvLyBgdHJ1ZWAgaWdub3JlcyBzY3JpcHQuY29uZmlnLm5vdGlmeVVwZGF0ZXNcbiAgdmVyc2lvbjogbnVsbCxcbiAgLyoqIEB0eXBlIHtWTVNjcmlwdEluamVjdEludG99ICovXG4gIGRlZmF1bHRJbmplY3RJbnRvOiBBVVRPLFxuICBmZkluamVjdDogdHJ1ZSxcbiAgeGhySW5qZWN0OiBmYWxzZSxcbiAgZmlsdGVyczoge1xuICAgIC8qKiBAdHlwZSB7J25hbWUnIHwgJ2NvZGUnIHwgJ2FsbCd9ICovXG4gICAgc2VhcmNoU2NvcGU6ICduYW1lJyxcbiAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgc2hvd09yZGVyOiBmYWxzZSxcbiAgICAvKiogQHR5cGUgeydleGVjJyB8ICdhbHBoYScgfCAndXBkYXRlJ30gKi9cbiAgICBzb3J0OiAnZXhlYycsXG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHZpZXdTaW5nbGVDb2x1bW46IGZhbHNlLFxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICB2aWV3VGFibGU6IGZhbHNlLFxuICB9LFxuICBmaWx0ZXJzUG9wdXA6IHtcbiAgICAvKiogQHR5cGUgeydleGVjJyB8ICdhbHBoYSd9ICovXG4gICAgc29ydDogJ2V4ZWMnLFxuICAgIGVuYWJsZWRGaXJzdDogZmFsc2UsXG4gICAgZ3JvdXBSdW5BdDogdHJ1ZSxcbiAgICAvKiogQHR5cGUgeycnIHwgJ2hpZGUnIHwgJ2dyb3VwJ30gd2hlcmUgJycgPSBzaG93ICovXG4gICAgaGlkZURpc2FibGVkOiAnJyxcbiAgfSxcbiAgZWRpdG9yOiB7XG4gICAgbGluZVdyYXBwaW5nOiBmYWxzZSxcbiAgICBpbmRlbnRXaXRoVGFiczogZmFsc2UsXG4gICAgaW5kZW50VW5pdDogMixcbiAgICB0YWJTaXplOiAyLFxuICAgIHVuZG9EZXB0aDogNTAwLFxuICB9LFxuICBlZGl0b3JUaGVtZTogJycsXG4gIGVkaXRvclRoZW1lTmFtZTogbnVsbCxcbiAgZWRpdG9yV2luZG93OiBmYWxzZSwgLy8gd2hldGhlciBwb3B1cCBvcGVucyBlZGl0b3IgaW4gYSBuZXcgd2luZG93XG4gIGVkaXRvcldpbmRvd1Bvczoge30sIC8vIHsgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0IH1cbiAgZWRpdG9yV2luZG93U2ltcGxlOiB0cnVlLCAvLyB3aGV0aGVyIHRvIG9wZW4gYSBzaW1wbGlmaWVkIHBvcHVwIG9yIGEgbm9ybWFsIGJyb3dzZXIgd2luZG93XG4gIHNjcmlwdFRlbXBsYXRlOiBgXFxcbi8vID09VXNlclNjcmlwdD09XG4vLyBAbmFtZSAgICAgICAgTmV3IHNjcmlwdCB7e25hbWV9fVxuLy8gQG5hbWVzcGFjZSAgICR7VklPTEVOVE1PTktFWX0gU2NyaXB0c1xuLy8gQG1hdGNoICAgICAgIHt7dXJsfX1cbi8vIEBncmFudCAgICAgICBub25lXG4vLyBAdmVyc2lvbiAgICAgMS4wXG4vLyBAYXV0aG9yICAgICAgLVxuLy8gQGRlc2NyaXB0aW9uIHt7ZGF0ZX19XG4vLyA9PS9Vc2VyU2NyaXB0PT1cbmAsXG4gIHNob3dBZHZhbmNlZDogdHJ1ZSxcbiAgLyoqIEB0eXBlIHsnJyB8ICdkYXJrJyB8ICdsaWdodCd9ICovXG4gIHVpVGhlbWU6ICcnLFxufTtcbiIsImltcG9ydCBkZWZhdWx0cyBmcm9tICdAL2NvbW1vbi9vcHRpb25zLWRlZmF1bHRzJztcbmltcG9ydCB7IGluaXRIb29rcywgc2VuZENtZERpcmVjdGx5IH0gZnJvbSAnLic7XG5pbXBvcnQgeyBmb3JFYWNoRW50cnksIG9iamVjdEdldCwgb2JqZWN0U2V0IH0gZnJvbSAnLi9vYmplY3QnO1xuXG5sZXQgb3B0aW9ucyA9IHt9O1xuY29uc3QgeyBob29rLCBmaXJlIH0gPSBpbml0SG9va3MoKTtcbmNvbnN0IHJlYWR5ID0gc2VuZENtZERpcmVjdGx5KCdHZXRBbGxPcHRpb25zJywgbnVsbCwgeyByZXRyeTogdHJ1ZSB9KVxuLnRoZW4oKGRhdGEpID0+IHtcbiAgb3B0aW9ucyA9IGRhdGE7XG4gIGlmIChkYXRhKSBmaXJlKGRhdGEpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVhZHksXG4gIGhvb2ssXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0R2V0KG9wdGlvbnMsIGtleSkgPz8gb2JqZWN0R2V0KGRlZmF1bHRzLCBrZXkpO1xuICB9LFxuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIC8vIHRoZSB1cGRhdGVkIG9wdGlvbnMgb2JqZWN0IHdpbGwgYmUgcHJvcGFnYXRlZCBmcm9tIHRoZSBiYWNrZ3JvdW5kIHNjcmlwdCBhZnRlciBhIHBhdXNlXG4gICAgLy8gc28gbWVhbndoaWxlIHRoZSBsb2NhbCBjb2RlIHNob3VsZCBiZSBhYmxlIHRvIHNlZSB0aGUgbmV3IHZhbHVlIHVzaW5nIG9wdGlvbnMuZ2V0KClcbiAgICBvYmplY3RTZXQob3B0aW9ucywga2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHNlbmRDbWREaXJlY3RseSgnU2V0T3B0aW9ucycsIHsga2V5LCB2YWx1ZSwgcmVwbHk6IHRydWUgfSk7XG4gIH0sXG4gIHVwZGF0ZShkYXRhKSB7XG4gICAgLy8gS2V5cyBpbiBgZGF0YWAgbWF5IGJlIHsgZmxhdHRlbmVkLmxpa2UudGhpczogJ2ZvbycgfVxuICAgIGNvbnN0IGV4cGFuZGVkRGF0YSA9IHt9O1xuICAgIGRhdGE6OmZvckVhY2hFbnRyeSgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBvYmplY3RTZXQob3B0aW9ucywga2V5LCB2YWx1ZSk7XG4gICAgICBvYmplY3RTZXQoZXhwYW5kZWREYXRhLCBrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICBmaXJlKGV4cGFuZGVkRGF0YSk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgcmVhY3RpdmUgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgc2hvd0NvbmZpcm1hdGlvbiB9IGZyb20gJ0AvY29tbW9uL3VpJztcbmltcG9ydCB7IGkxOG4gfSBmcm9tICcuL3V0aWwnO1xuXG5mdW5jdGlvbiBwYXJzZShoYXNoKSB7XG4gIGNvbnN0IFtwYXRobmFtZSwgc2VhcmNoID0gJyddID0gaGFzaC5zcGxpdCgnPycpO1xuICBjb25zdCBxdWVyeSA9IHNlYXJjaC5zcGxpdCgnJicpLnJlZHVjZSgocmVzLCBzZXEpID0+IHtcbiAgICBpZiAoc2VxKSB7XG4gICAgICBjb25zdCBba2V5LCB2YWxdID0gc2VxLnNwbGl0KCc9Jyk7XG4gICAgICByZXNbZGVjb2RlVVJJQ29tcG9uZW50KGtleSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0sIHt9KTtcbiAgY29uc3QgcGF0aHMgPSBwYXRobmFtZS5zcGxpdCgnLycpO1xuICByZXR1cm4ge1xuICAgIGhhc2gsIHBhdGhuYW1lLCBwYXRocywgcXVlcnksXG4gIH07XG59XG5cbmNvbnN0IHN0YWNrID0gW107XG5leHBvcnQgY29uc3Qgcm91dGUgPSByZWFjdGl2ZSh7fSk7XG5leHBvcnQgY29uc3QgbGFzdFJvdXRlID0gKCkgPT4gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gfHwge307XG5cbnVwZGF0ZVJvdXRlKCk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVJvdXRlKG5vQ29uZmlybSkge1xuICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSk7XG4gIGlmIChub0NvbmZpcm0gfHwgIXJvdXRlLmNvbmZpcm1DaGFuZ2UpIHtcbiAgICBPYmplY3QuYXNzaWduKHJvdXRlLCBwYXJzZShoYXNoKSk7XG4gIH0gZWxzZSBpZiAocm91dGUuaGFzaCAhPT0gaGFzaCkge1xuICAgIC8vIHJlc3RvcmUgdGhlIHBpbm5lZCByb3V0ZVxuICAgIHNldFJvdXRlKHJvdXRlLmhhc2gsIGZhbHNlLCB0cnVlKTtcbiAgICByb3V0ZS5jb25maXJtQ2hhbmdlKGhhc2gpO1xuICB9XG59XG5cbi8vIHBvcHN0YXRlIHNob3VsZCBiZSB0aGUgZmlyc3QgdG8gZW5zdXJlIGhhc2hjaGFuZ2UgbGlzdGVuZXJzIHNlZSB0aGUgY29ycmVjdCBsYXN0Um91dGVcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsICgpID0+IHN0YWNrLnBvcCgpKTtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgKCkgPT4gdXBkYXRlUm91dGUoKSwgZmFsc2UpO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0Um91dGUoaGFzaCwgcmVwbGFjZSwgbm9Db25maXJtKSB7XG4gIGxldCBoYXNoU3RyaW5nID0gYCR7aGFzaH1gO1xuICBpZiAoaGFzaFN0cmluZ1swXSAhPT0gJyMnKSBoYXNoU3RyaW5nID0gYCMke2hhc2hTdHJpbmd9YDtcbiAgaWYgKHJlcGxhY2UpIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoJycsIG51bGwsIGhhc2hTdHJpbmcpO1xuICB9IGVsc2Uge1xuICAgIHN0YWNrLnB1c2goT2JqZWN0LmFzc2lnbih7fSwgcm91dGUpKTtcbiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoJycsIG51bGwsIGhhc2hTdHJpbmcpO1xuICB9XG4gIHVwZGF0ZVJvdXRlKG5vQ29uZmlybSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmxvYWRTZW50cnkob25Db25maXJtLCBvbkNhbmNlbCkge1xuICBhc3luYyBmdW5jdGlvbiBjb25maXJtUG9wU3RhdGUoaGFzaCkge1xuICAgIGlmIChhd2FpdCBzaG93Q29uZmlybWF0aW9uKGkxOG4oJ2NvbmZpcm1Ob3RTYXZlZCcpKSkge1xuICAgICAgLy8gcG9wc3RhdGUgY2Fubm90IGJlIHByZXZlbnRlZCBzbyB3ZSBwaW4gY3VycmVudCBgcm91dGVgIGFuZCBkaXNwbGF5IGEgY29uZmlybWF0aW9uXG4gICAgICBzZXRSb3V0ZShoYXNoLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICBvbkNvbmZpcm0/LigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkNhbmNlbD8uKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHRvZ2dsZShzdGF0ZSkge1xuICAgIGNvbnN0IG9uT2ZmID0gYCR7c3RhdGUgPyAnYWRkJyA6ICdyZW1vdmUnfUV2ZW50TGlzdGVuZXJgO1xuICAgIGdsb2JhbFtvbk9mZl0oJ2JlZm9yZXVubG9hZCcsIG9uVW5sb2FkKTtcbiAgICByb3V0ZS5jb25maXJtQ2hhbmdlID0gc3RhdGUgJiYgY29uZmlybVBvcFN0YXRlO1xuICB9XG4gIHJldHVybiB0b2dnbGU7XG59XG5cbmZ1bmN0aW9uIG9uVW5sb2FkKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAvLyBtb2Rlcm4gYnJvd3NlciBzaG93IHRoZWlyIG93biBtZXNzYWdlIHRleHRcbiAgZS5yZXR1cm5WYWx1ZSA9IGkxOG4oJ2NvbmZpcm1Ob3RTYXZlZCcpO1xufVxuIiwiLy8gVUEgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYWJvdXQ6Y29uZmlnIGluIEZGIG9yIGRldnRvb2xzIGluIENocm9tZVxuLy8gc28gd2UnbGwgdGVzdCBmb3Igd2luZG93LmNocm9tZS5hcHAgd2hpY2ggaXMgb25seSBkZWZpbmVkIGluIENocm9tZVxuLy8gYW5kIGZvciBicm93c2VyLnJ1bnRpbWUuZ2V0QnJvd3NlckluZm8gaW4gRmlyZWZveCA1MStcblxuLyoqIEB0eXBlIHtWTVVzZXJBZ2VudH0gKi9cbmNvbnN0IHVhID0ge307XG5jb25zdCBrVWFGdWxsVmVyc2lvbiA9ICd1YUZ1bGxWZXJzaW9uJzsgLy8gZm9yIG5ldyBDaHJvbWUgd2hpY2ggc2ltcGxpZmllcyBVQSB2ZXJzaW9uIGFzICMuMC4wLjBcbmNvbnN0IHVhRGF0YSA9IG5hdmlnYXRvci51c2VyQWdlbnREYXRhO1xuZXhwb3J0IGRlZmF1bHQgdWE7XG5cbi8vIHVzaW5nIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgdGhhdCB3b24ndCBiZSBzZW50IHRvIGNvbnRlbnQgc2NyaXB0cyB2aWEgR2V0SW5qZWN0ZWRcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHVhLCB7XG4gIC4uLklTX0ZJUkVGT1ggPyB7XG4gICAgZmlyZWZveDoge1xuICAgICAgdmFsdWU6IG1hdGNoTmF2VUEoKSwgLy8gd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSByZWFsIHZlcnNpb24gbnVtYmVyIGluIHJlYWR5KClcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIH0sXG4gIH0gOiB7XG4gICAgY2hyb21lOiB7XG4gICAgICB2YWx1ZTogdWFEYXRhICYmIHBhcnNlRmxvYXQodWFEYXRhLmJyYW5kc1swXT8udmVyc2lvbikgfHwgbWF0Y2hOYXZVQSh0cnVlKSxcbiAgICB9LFxuICB9LFxuICByZWFkeToge1xuICAgIHZhbHVlOiBQcm9taXNlLmFsbChbXG4gICAgICBicm93c2VyLnJ1bnRpbWUuZ2V0UGxhdGZvcm1JbmZvKCksXG4gICAgICBicm93c2VyLnJ1bnRpbWUuZ2V0QnJvd3NlckluZm8/LigpLFxuICAgICAgdWFEYXRhPy5nZXRIaWdoRW50cm9weVZhbHVlcyhba1VhRnVsbFZlcnNpb25dKSxcbiAgICBdKS50aGVuKChbeyBvcywgYXJjaCB9LCB7IG5hbWUsIHZlcnNpb24gfSA9IHt9LCB7W2tVYUZ1bGxWZXJzaW9uXTogZnVsbFZlcn0gPSB7fV0pID0+IHtcbiAgICAgIE9iamVjdC5hc3NpZ24odWEsIHtcbiAgICAgICAgYXJjaCxcbiAgICAgICAgb3MsXG4gICAgICAgIGJyb3dzZXJOYW1lOiBuYW1lPy50b0xvd2VyQ2FzZSgpIHx8ICdjaHJvbWUnLFxuICAgICAgICBicm93c2VyVmVyc2lvbjogZnVsbFZlciB8fCB2ZXJzaW9uIHx8IG1hdGNoTmF2VUEodHJ1ZSwgdHJ1ZSksXG4gICAgICB9KTtcbiAgICAgIGlmIChJU19GSVJFRk9YKSB7XG4gICAgICAgIHVhLmZpcmVmb3ggPSBwYXJzZUZsb2F0KHZlcnNpb24pIHx8IDA7XG4gICAgICB9XG4gICAgfSksXG4gIH0sXG59KTtcblxuZnVuY3Rpb24gbWF0Y2hOYXZVQShhc0Nocm9tZSwgYXNTdHJpbmcpIHtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGBcXFxccyR7YXNDaHJvbWUgPyAnQ2hyb20oZXxpdW0pJyA6ICdGaXJlZm94J30vKFxcXFxkK1suMC05XSopfCRgLCAnaScpO1xuICBjb25zdCB2ZXIgPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHJlKS5wb3AoKTtcbiAgcmV0dXJuIGFzU3RyaW5nID8gdmVyIDogcGFyc2VGbG9hdCh2ZXIpO1xufVxuIiwiaW1wb3J0IENvZGVNaXJyb3IgZnJvbSAnY29kZW1pcnJvcic7XG5cbmNvbnN0IElEID0gJ2F1dG9jb21wbGV0ZU9uVHlwaW5nJztcbmNvbnN0IERFRkFVTFQgPSAxMDA7XG5jb25zdCBPUFRJT05TID0gJ29wdGlvbnMnO1xuY29uc3QgU1RBVEUgPSAnc3RhdGUnO1xuY29uc3QgSElOVF9PUFRJT05TID0gJ2hpbnRPcHRpb25zJztcbmNvbnN0IENPTVBMRVRFX1NJTkdMRSA9ICdjb21wbGV0ZVNpbmdsZSc7XG5jb25zdCBQSUNLRUQgPSAncGlja2VkJztcbmNvbnN0IFRJTUVSID0gJ3RpbWVyJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJldHVybi1hc3NpZ25cbmNvbnN0IGdldE15U3RhdGUgPSAoeyBbU1RBVEVdOiBzdGF0ZSB9KSA9PiAoc3RhdGVbSURdIHx8IChzdGF0ZVtJRF0gPSB7fSkpO1xuXG5jb25zdCBkZWxheWVkQ29tcGxldGUgPSBjbSA9PiB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjbVtPUFRJT05TXTtcbiAgY29uc3QgaGludE9wdGlvbnMgPSBvcHRpb25zW0hJTlRfT1BUSU9OU10gfHwgKG9wdGlvbnNbSElOVF9PUFRJT05TXSA9IHt9KTtcbiAgY29uc3QgbXlTdGF0ZSA9IGdldE15U3RhdGUoY20pO1xuICBoaW50T3B0aW9uc1tDT01QTEVURV9TSU5HTEVdID0gZmFsc2U7XG4gIG15U3RhdGVbVElNRVJdID0gMDtcbiAgbXlTdGF0ZVtQSUNLRURdID0gZmFsc2U7XG4gIGNtLmV4ZWNDb21tYW5kKCdhdXRvY29tcGxldGUnKTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaGludE9wdGlvbnNbQ09NUExFVEVfU0lOR0xFXSA9IHRydWU7XG4gIH0pO1xufTtcblxuY29uc3QgY2FuY2VsRGVsYXkgPSBteVN0YXRlID0+IHtcbiAgaWYgKG15U3RhdGVbVElNRVJdKSB7XG4gICAgY2xlYXJUaW1lb3V0KG15U3RhdGVbVElNRVJdKTtcbiAgICBteVN0YXRlW1RJTUVSXSA9IDA7XG4gIH1cbn07XG5cbmNvbnN0IG9uQ2hhbmdlcyA9IChjbSwgW2luZm9dKSA9PiB7XG4gIGNvbnN0IG15U3RhdGUgPSBnZXRNeVN0YXRlKGNtKTtcbiAgY29uc3QgbGFzdFR5cGVkID0gaW5mby50ZXh0W2luZm8udGV4dC5sZW5ndGggLSAxXTtcbiAgaWYgKGNtW1NUQVRFXS5jb21wbGV0aW9uQWN0aXZlXG4gICAgfHwgaW5mby5vcmlnaW4gJiYgIWluZm8ub3JpZ2luLmluY2x1ZGVzKCdpbnB1dCcpXG4gICAgfHwgIWxhc3RUeXBlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXlTdGF0ZVtQSUNLRURdKSB7XG4gICAgbXlTdGF0ZVtQSUNLRURdID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICgvWy1hLXohXSQvaS50ZXN0KGxhc3RUeXBlZCkpIHtcbiAgICBjYW5jZWxEZWxheShteVN0YXRlKTtcbiAgICBteVN0YXRlW1RJTUVSXSA9IHNldFRpbWVvdXQoZGVsYXllZENvbXBsZXRlLCBjbVtPUFRJT05TXVtJRF0sIGNtKTtcbiAgfVxufTtcblxuY29uc3Qgb25QaWNrZWQgPSBjbSA9PiB7XG4gIGdldE15U3RhdGUoY20pW1BJQ0tFRF0gPSB0cnVlO1xufTtcblxuQ29kZU1pcnJvci5kZWZpbmVPcHRpb24oSUQsIERFRkFVTFQsIChjbSwgdmFsdWUpID0+IHtcbiAgY29uc3QgbXlTdGF0ZSA9IGdldE15U3RhdGUoY20pO1xuICBjb25zdCBvbk9mZiA9IHZhbHVlID8gJ29uJyA6ICdvZmYnO1xuICBjbVtvbk9mZl0oJ2NoYW5nZXMnLCBvbkNoYW5nZXMpO1xuICBjbVtvbk9mZl0oJ3BpY2snLCBvblBpY2tlZCk7XG4gIGlmIChteVN0YXRlICYmICF2YWx1ZSkge1xuICAgIGNhbmNlbERlbGF5KG15U3RhdGUpO1xuICAgIGRlbGV0ZSBjbVtTVEFURV1bSURdO1xuICB9XG59KTtcbiIsIi8vIEphdmFzY3JpcHQgbWl4ZWQgbW9kZSBmb3IgQ29kZU1pcnJvclxuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2Vcbi8vIE1vZCBvZiB0aGUgaW5hY3RpdmUgaHR0cHM6Ly9naXRodWIuY29tL29yaW9ubGVlL2NvZGVtaXJyb3ItanMtbWl4ZWRcblxuaW1wb3J0IENvZGVNaXJyb3IgZnJvbSAnY29kZW1pcnJvcic7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvbW9kZS94bWwveG1sJztcbmltcG9ydCAnY29kZW1pcnJvci9tb2RlL2phdmFzY3JpcHQvamF2YXNjcmlwdCc7XG5pbXBvcnQgJ2NvZGVtaXJyb3IvbW9kZS9jc3MvY3NzJztcbmltcG9ydCAnY29kZW1pcnJvci9tb2RlL2h0bWxtaXhlZC9odG1sbWl4ZWQnO1xuXG5Db2RlTWlycm9yLmRlZmluZU1vZGUoJ2phdmFzY3JpcHQtbWl4ZWQnLCAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IFNUWUxFX1BBU1MgPSAnWFhYLVBBU1MnO1xuICBjb25zdCBJU19FTkRfQkFDS1RJQ0tfUkUgPSAvKF58W15cXFxcXSlgL3k7XG4gIGNvbnN0IE5FWFRfUVVPVEVfUkUgPSB7XG4gICAgXCInXCI6IC8uKj8nLyxcbiAgICAnXCInOiAvLio/XCIvLFxuICAgICdgJzogLy4qP2AvLFxuICB9O1xuICAvLyBVc2luZyAjIHRvIHByZXZlbnQgaW5saW5pbmcgaW4gVGVyc2VyXG4gIGNvbnN0IGtFbnN1cmVQcm9wZXJMb2NhbE1vZGVTdGF0ZVBvc3RKc0V4cHIgPSAnI2Vuc3VyZVByb3BlckxvY2FsTW9kZVN0YXRlUG9zdEpzRXhwcic7XG4gIGNvbnN0IGtJbkpzRXhwckluU3RyaW5nVGVtcGxhdGUgPSAnI2luSnNFeHBySW5TdHJpbmdUZW1wbGF0ZSc7XG4gIGNvbnN0IGtJbmRleE9mSnNFeHByU3RhcnQgPSAnI2luZGV4T2ZKc0V4cHJTdGFydCc7XG4gIGNvbnN0IGtKc0V4cHJEZXB0aEluU3RyaW5nVGVtcGxhdGUgPSAnI2pzRXhwckRlcHRoSW5TdHJpbmdUZW1wbGF0ZSc7XG4gIGNvbnN0IGtKc1N0YXRlID0gJyNqc1N0YXRlJztcbiAgY29uc3Qga0xvY2FsSHRtbFBsYWluU3RyaW5nRW5kUG9zID0gJyNsb2NhbEh0bWxQbGFpblN0cmluZ0VuZFBvcyc7XG4gIGNvbnN0IGtMb2NhbE1vZGUgPSAnI2xvY2FsTW9kZSc7XG4gIGNvbnN0IGtMb2NhbFN0YXRlID0gJyNsb2NhbFN0YXRlJztcbiAgY29uc3Qga01heWJlTG9jYWxDb250ZXh0ID0gJyNtYXliZUxvY2FsQ29udGV4dCc7XG4gIGNvbnN0IGtRdW90ZUNoYXJTdXJyb3VuZEpzRXhwciA9ICcjcXVvdGVDaGFyU3Vycm91bmRKc0V4cHInO1xuICBjb25zdCBrVG9rZW5pemUgPSAndG9rZW5pemUnO1xuICBjb25zdCBrVG9rZW5pemVQb3N0SnNFeHByID0gJyN0b2tlbml6ZVBvc3RKc0V4cHInO1xuICBjb25zdCB7IFN0cmluZ1N0cmVhbSB9ID0gQ29kZU1pcnJvcjtcbiAgY29uc3QgY21Db3B5U3RhdGUgPSBDb2RlTWlycm9yLmNvcHlTdGF0ZTtcbiAgY29uc3QgY21TdGFydFN0YXRlID0gQ29kZU1pcnJvci5zdGFydFN0YXRlO1xuICBjb25zdCBjbVBhc3MgPSBDb2RlTWlycm9yLlBhc3M7XG5cbiAgY29uc3QganNNb2RlID0gQ29kZU1pcnJvci5nZXRNb2RlKGNvbmZpZywgeyBuYW1lOiAnamF2YXNjcmlwdCcgfSk7XG4gIGNvbnN0IGpzVG9rZW5RdWFzaSA9ICgoKSA9PiB7XG4gICAgLy8gY3JlYXRlIGEgbmV3IHN0cmVhbSBvZiBhIG5vbi1lbmRpbmcgKDFzdCBsaW5lIG9mIGEgbXVsdGlsaW5lKVxuICAgIC8vIHN0cmluZyB0ZW1wbGF0ZSB0byBvYnRhaW4gdG9rZW5RdWFzaSB0b2tlbml6ZXJcbiAgICBjb25zdCBkdW1teVN0cmVhbSA9IG5ldyBTdHJpbmdTdHJlYW0oJ2AjZHVtbXknLCAyLCB7fSk7XG4gICAgY29uc3QgZHVtbXlTdGF0ZSA9IGpzTW9kZS5zdGFydFN0YXRlKCk7XG4gICAganNNb2RlLnRva2VuKGR1bW15U3RyZWFtLCBkdW1teVN0YXRlKTtcbiAgICByZXR1cm4gZHVtbXlTdGF0ZVtrVG9rZW5pemVdO1xuICB9KSgpO1xuXG4gIGNvbnN0IGNzc01vZGUgPSBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCB7IG5hbWU6ICdjc3MnIH0pO1xuXG4gIC8vIHVzZSBodG1sbWl4ZWQgdG8gc3VwcG9ydCBoaWdobGlnaHRpbmcgY3NzIGluIDxzdHlsZT4gKGFuZCB0byBhIGxlc3NlciBleHRlbnQsIGpzIGluIDxzY3JpcHQ+KVxuICBjb25zdCBodG1sbWl4ZWRNb2RlID0gQ29kZU1pcnJvci5nZXRNb2RlKGNvbmZpZywgeyBuYW1lOiAnaHRtbG1peGVkJyB9KTtcbiAgLy8gZm9yIHRva2VuaXppbmcgcGxhaW4gc3RyaW5nLCB3aGVyZSBtYXRjaENsb3Npbmcgd291bGQgY2F1c2UgdG9vIG1hbnkgZmFsc2UgZXJyb3JzXG4gIC8vIGFzIHRoZSBodG1sIG9mdGVuIHNwYW5zIGFjcm9zcyBtdWx0aXBsZSBzdHJpbmdzLlxuICAvLyBmb3IgcGxhaW4gc3RyaW5nICwgdXNlIGJhc2ljIGh0bWwgbW9kZSBzbyB0aGF0IGl0IGNhbiBzdXBwb3J0IG5vbi1tYXRjaGluZyBjbG9zZSB0YWdzXG4gIC8vIG1peGVkIG1vZGUgaXMgdW5saWtlbHkgdG8gYmUgdmVyeSBoZWxwZnVsIGZvciBwbGFpbiBzdHJpbmcgYW55d2F5XG4gIGNvbnN0IGh0bWxOb01hdGNoQ2xvc2luZ01vZGUgPSBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCB7XG4gICAgbmFtZTogJ3htbCcsXG4gICAgaHRtbE1vZGU6IHRydWUsXG4gICAgbWF0Y2hDbG9zaW5nOiBmYWxzZSxcbiAgfSk7XG4gIGNvbnN0IFtmb3JjZUh0bWxNb2RlVG9BdHRyQ29udGludWVkU3RhdGUsIGh0bWxTdGF0ZUZvckF0dHJWYWx1ZV0gPSAoKCkgPT4ge1xuICAgIGNvbnN0IGV4dHJhY3RJbm5hcmRzID0gc3RyaW5nID0+IHtcbiAgICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJpbmdTdHJlYW0oc3RyaW5nLCAyLCB7fSk7XG4gICAgICBjb25zdCBzdGF0ZSA9IGh0bWxtaXhlZE1vZGUuc3RhcnRTdGF0ZSgpO1xuICAgICAgY29uc3QgeyBodG1sU3RhdGUgfSA9IHN0YXRlO1xuICAgICAgd2hpbGUgKHN0cmVhbS5jdXJyZW50KCkgIT09IHN0cmluZykge1xuICAgICAgICBodG1sbWl4ZWRNb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgaHRtbFN0YXRlLnN0YXRlLFxuICAgICAgICBodG1sU3RhdGVba1Rva2VuaXplXSxcbiAgICAgIF07XG4gICAgfTtcbiAgICAvLyB0cmllZCB0byBvYnRhaW4gdGhlIHN0YXRlcyB3aGVuIHRoZSB0b2tlbml6ZXIgZW5jb3VudGVycyBhbiAqaW5jb21wbGV0ZSogYXR0ciB2YWx1ZVxuICAgIC8vICh0aGF0IHdvdWxkIGVuZCBpbiBzZWNvbmQgbGluZSlcbiAgICBjb25zdCBhdHRyQ29udGludWVkU3RhdGUgPSB7XG4gICAgICAnXCInOiBleHRyYWN0SW5uYXJkcygnPHAgY2xhc3M9XCJzb21lQ2xhc3MnKSxcbiAgICAgIFwiJ1wiOiBleHRyYWN0SW5uYXJkcygnPHAgY2xhc3M9XFwnc29tZUNsYXNzJyksXG4gICAgfTtcbiAgICAvLyByZWNvcmQgdGhlIHN0YXRlIHdoZW4gdGhlIHRva2VuaXplciBlbmNvdW50ZXJzIGEgKmNvbXBsZXRlKiBhdHRyIHZhbHVlXG4gICAgLy8gc2luZ2xlLXF1b3RlIGF0dHIgdmFsIGhhcyB0aGUgc2FtZSBzdGF0ZVxuICAgIGNvbnN0IHN0YXRlRm9yQXR0clZhbHVlID0gZXh0cmFjdElubmFyZHMoJzxwIGNsYXNzPVwib3RoZXJDbGFzc1wiJylbMF07XG4gICAgLyoqXG4gICAgICogRm9yY2UgaHRtbCB0b2tlbml6ZXIgdG8gdHJlYXQgbmV4dCB0b2tlbiBhcyBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBVc2UgY2FzZTpcbiAgICAgKiAtIGh0bWwgdG9rZW5pemVyIGVuY291bnRlcnMgYW4ganMgZXhwcmVzc2lvbiBpbnNpZGUgYSBjb21wbGV0ZSBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKiBlLmcuLCB0aGUgdmFsdWUgaW4gY2xhc3M9XCJmb28gJHtzb21lT3RoZXJDbGFzcygpfSBiYXJcIlxuICAgICAqIC0gdGhlIGh0bWwgdG9rZW5pemVyIHdvdWxkIG5leHQgZXhwZWN0IGFub3RoZXIgYXR0cmlidXRlIG9yID5cbiAgICAgKiAtIGJ1dCBzaW5jZSB3ZSBsb2NhbGx5IHByb2Nlc3MgdGhlIGpzIGV4cHJlc3Npb24sIGFuZCB0aGVuIHBhc3MgdGhlIHJlbWFpbmluZyB0ZXh0XG4gICAgICogICBiYWNrIHRvIGh0bWwgdG9rZW5pemVyLCBlLmcuICBiYXJcIiwgaW4gdGhlIGFib3ZlIGV4YW1wbGVcbiAgICAgKiAtIHdlIHdhbnQgaHRtbCB0b2tlbml6ZXIgcHJvY2VzcyBpdCBhcyBwYXJ0IG9mIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIC0gdGhpcyBmdW5jdGlvbiBmb3JjZXMgdGhlIHRva2VuaXplciB0byBkbyBzby5cbiAgICAgKlxuICAgICAqIFRoZSB1c2UgY2FzZSBhbmQgdGhlIHNvbHV0aW9uIGFyZSBib3RoIGFuYWxvZ291cyB0byBmb3JjZUpzTW9kZVRvUXVhc2koKSxcbiAgICAgKiB3aGljaCBoYW5kbGVzIHRva2VuaXppbmcgYSBzaW5nbGUtbGluZSBzdHJpbmcgdGVtcGxhdGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yY2VIdG1sTW9kZVRvQXR0ckNvbnRpbnVlZFN0YXRlKHN0cmVhbSwgaHRtbFN0YXRlKSB7XG4gICAgICAvKlxuICAgICAgICogRGV0ZWN0IHF1b3RlIHR5cGUgYnkgY2hlY2tpbmcgY3VycmVudCB0b2tlbiBsYXN0IGNoYXIgKHVzZSBsYXN0IGNoYXIgaW5zdGVhZCBvZlxuICAgICAgICogZmlyc3QgY2hhciwgYmVjYXVzZSBsYXN0IGNoYXIgYWxzbyB3b3JrcyBmb3IgbXVsdGktbGluZWQgY2hhciB2YWx1ZVxuICAgICAgICogd2hpbGUgZmlyc3QgY2hhciBvbmx5IHdvcmtzIGZvciB0aGUgZmlyc3QgbGluZSlcbiAgICAgICAqIGNhc2UgaXQncyBwYXJ0IG9mIGEgbXVsdGktbGluZWQgYXR0ciB2YWx1ZSwgYW5kIGlzIG5vdCB0aGUgbGFzdCBsaW5lIHlldFxuICAgICAgICogKGkuZS4sIG5vIHF1b3RlIGF0IHRoZSBlbmQpIG5vdGhpbmcgbmVlZHMgdG8gYmUgZG9uZSBhcyBpdCdzIGFscmVhZHkgaW4gdGhlIHByb3BlciBzdGF0ZS5cbiAgICAgICAqIE9QRU46IHRoZSBsb2dpYyBicmVha3MgZG93biBpZiB0aGUgbGFzdCBjaGFyYWN0ZXIgb2YgdGhlIGxpbmUgaGFwcGVucyB0byBiZSBhIHF1b3RlXG4gICAgICAgKiAsIGJ1dCBub3QgdGhlIGVuZGluZyBxdW90ZS5cbiAgICAgICAqIEUuZy4sIHRoZSBzaW5nbGUgcXVvdGUgaW4gdGhlIGZvbGxvd2luZyBleGFtcGxlIGlzIGp1c3QgcGFydCBvZiB0aGUgdmFsdWVcbiAgICAgICAqICA8cCAgdGl0bGU9XCJmb28gYmFyXG4gICAgICAgKiAgc29tZXRoaW5nICdcbiAgICAgICAqICBkZWZcIj5cbiAgICAgICAqIFRvIHByb3Blcmx5IGhhbmRsZSBpdCwgd2UgbmVlZCB0byBrbm93IHRoZSBxdW90ZSB0eXBlIGZvciB0aGUgY3VycmVudCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICAgKiBIb3dldmVyLCB0aGUgcXVvdGUgdHlwZSBpcyBub3QgZXhwb3NlZCBieSB0aGUgdW5kZXJseWluZyBodG1sIHRva2VuaXplci5cbiAgICAgICAqL1xuICAgICAgY29uc3QgY29udCA9IGF0dHJDb250aW51ZWRTdGF0ZVtzdHJlYW0uc3RyaW5nW3N0cmVhbS5wb3MgLSAxXV07XG4gICAgICBpZiAoY29udCkge1xuICAgICAgICBodG1sU3RhdGUuc3RhdGUgPSBjb250WzBdO1xuICAgICAgICBodG1sU3RhdGVba1Rva2VuaXplXSA9IGNvbnRbMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICBmb3JjZUh0bWxNb2RlVG9BdHRyQ29udGludWVkU3RhdGUsXG4gICAgICBzdGF0ZUZvckF0dHJWYWx1ZSxcbiAgICBdO1xuICB9KSgpO1xuXG4gIC8vIEhvbGRzIGlucHV0IHBhcmFtZXRlcnMgYW5kIHJldHVybiB2YWx1ZXMgZm9yIGEgcnVsZSBleGVjdXRpb25cbiAgY29uc3QgcnVuQ3R4ID0gbmV3IGNsYXNzIFJ1bkNvbnRleHQge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBjdXJyZW50IHRva2VuIGRldGVybWluZWQgYnkgdGhlIG91dGVyIGphdmFzY3JpcHQgbW9kZSB0b2tlbml6ZXIuXG4gICAgICovXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZVtrSnNTdGF0ZV0ubGFzdFR5cGU7XG4gICAgfVxuXG4gICAgZ2V0IHRleHQoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc3RyZWFtLmN1cnJlbnQoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndGV4dCcsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gYSBtYXAgb2YgYWxsIHJ1bGVzLCBrZXllZCBieSBpZC90eXBlIGZvciBxdWljayBsb29rdXAgZHVyaW5nIG1hdGNoaW5nXG4gIGNvbnN0IHJ1bGVzQnlJZCA9IHt9O1xuICBjb25zdCBydWxlc0J5VHlwZSA9IHt9O1xuICBjb25zdCBydWxlc0J5TGFuZ0NtdCA9IFtdO1xuXG4gIGZ1bmN0aW9uIHRva2VuSXNDaGFyRXNjYXBlZChzdHJlYW0sIGNoYXJQb3MpIHtcbiAgICAvLyBhc3N1bWUgY2hhclBvcyBpcyB3aXRoaW4gY3VycmVudCB0b2tlbixcbiAgICAvLyBpLmUuLCBzdHJlYW0uc3RhcnQgPD0gY2hhclBvcyA8IHN0cmVhbS5wb3NcbiAgICAvLyBjb25zaWRlciBjYXNlcywgZm9yIHRoZSA1IGJlbG93OlxuICAgIC8vICAwMTIzXFw1NiAgOiBlc2NhcGVkXG4gICAgLy8gIDAxMlxcXFw1NiAgOiBub3QgZXNjYXBlZFxuICAgIC8vICAwMVxcXFxcXDU2ICA6IGVzY2FwZWRcbiAgICBsZXQgaXNFc2NhcGVkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IGNoYXJQb3MgLSAxOyBpID49IHN0cmVhbS5zdGFydDsgaSAtPSAxKSB7XG4gICAgICBpZiAoc3RyZWFtLnN0cmluZ1tpXSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGlzRXNjYXBlZCA9ICFpc0VzY2FwZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzRXNjYXBlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGluZGV4IG9mIHNlYXJjaFZhbHVlIHdpdGhpbiB0aGUgY3VycmVudCB0b2tlbiwgaS5lLiwgc3RyZWFtLmN1cnJlbnQoKSxcbiAgICogZXhjbHVkaW5nIHRob3NlIHByZWZpeGVkIHdpdGggZXNjYXBlLiBFLmcuLCBpZiBzZWFyY2hWYWx1ZSBpcyBcIiR7XCIsIGl0IHdpbGwgaWdub3JlXG4gICAqIHRob3NlIHN0cmluZyB3aXRoIHRoZSBwYXR0ZXJuIG9mIFwiXFwke1wiLCBhcyB0aGUgZG9sbGFyIHNpZ24gaXMgZXNjYXBlZC5cbiAgICpcbiAgICogVGhlIHJldHVybmVkIGluZGV4IGlzIHJlbGF0aXZlIHRvIHRoZSB0b2tlbiwgcmF0aGVyIHRoYW4gdGhlIGVudGlyZSBzdHJlYW0uXG4gICAqL1xuICBmdW5jdGlvbiB0b2tlbkluZGV4T2ZVbmVzY2FwZWQoc3RyZWFtLCBzZWFyY2hWYWx1ZSkge1xuICAgIC8vIGNvbXBhcmluZyB0byB0aGUgYWx0ZXJuYXRpdmUgb2Ygc3RyZWFtLmN1cnJlbnQoKS5tYXRjaChzZWFyY2hWYWx1ZVJlZ2V4KSxcbiAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGF2b2lkcyBhIHN1YnN0cmluZyBjcmVhdGlvbiBhbmQgcmVnZXggbWF0Y2hcbiAgICBjb25zdCBzZWFyY2hFbmRJZHhFeGNsdXNpdmUgPSBzdHJlYW0ucG9zO1xuICAgIGNvbnN0IHRva2VuU3RhcnRJZHggPSBzdHJlYW0uc3RhcnQ7XG4gICAgbGV0IHNlYXJjaFN0YXJ0SWR4ID0gc3RyZWFtLnN0YXJ0O1xuICAgIHdoaWxlIChzZWFyY2hTdGFydElkeCA8IHNlYXJjaEVuZElkeEV4Y2x1c2l2ZSkge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0gc3RyZWFtLnN0cmluZy5pbmRleE9mKHNlYXJjaFZhbHVlLCBzZWFyY2hTdGFydElkeCk7XG4gICAgICBpZiAoY2FuZGlkYXRlIDwgMCB8fCBjYW5kaWRhdGUgPj0gc2VhcmNoRW5kSWR4RXhjbHVzaXZlKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIC8vIGVuc3VyZSBpdCdzIG5vdCBhbiBlc2NhcGVkIG9uZVxuICAgICAgaWYgKGNhbmRpZGF0ZSA9PT0gdG9rZW5TdGFydElkeCAvLyBjYW5kaWRhdGUgaXMgdGhlIHN0YXJ0IG9mIHRoZSB0b2tlbiwgaXQgaXMgbm90IGVzY2FwZWRcbiAgICAgIHx8ICF0b2tlbklzQ2hhckVzY2FwZWQoc3RyZWFtLCBjYW5kaWRhdGUpKSB7XG4gICAgICAgIC8vIGNhc2UgZmluZCBhIG1hdGNoXG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgLSB0b2tlblN0YXJ0SWR4O1xuICAgICAgfVxuICAgICAgLy8gZWxzZSBjYXNlIGFuIGVzY2FwZWQgJHssIGNvbnRpbnVlIHRvIHNlYXJjaFxuICAgICAgc2VhcmNoU3RhcnRJZHggPSBjYW5kaWRhdGUgKyBzZWFyY2hWYWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiAtMTsgLy8gcmVhY2ggYmV5b25kIHRva2VuIGJvdW5kYXJ5XG4gIH1cblxuICAvKiogQHRoaXMge1J1bGV9ICovXG4gIGZ1bmN0aW9uIHByZXBSZXBhcnNlU3RyaW5nVGVtcGxhdGVJbkxvY2FsTW9kZSh7c3RyZWFtLCBzdGF0ZX0pIHtcbiAgICAvLyBzcGl0IG91dCBiZWdpbm5pbmcgYmFja3RpY2sgYXMgYSB0b2tlbiwgYW5kIGxlYXZlIHRoZSByZXN0IG9mIHRoZSB0ZXh0IGZvciBsb2NhbCBtb2RlIHBhcnNpbmdcbiAgICBzdHJlYW0uYmFja1VwKHN0cmVhbS5wb3MgLSBzdHJlYW0uc3RhcnQgLSAodGhpcy5oYXNCZWdpbkJhY2t0aWNrICE9PSBmYWxzZSkpO1xuICAgIC8vIHdvcmthcm91bmQgbmVlZGVkIGZvciAxLWxpbmUgc3RyaW5nIHRlbXBsYXRlLFxuICAgIC8vIHRvIGVuc3VyZSB0aGUgZW5kaW5nIGJhY2t0aWNrIGlzIHBhcnNlZCBjb3JyZWN0bHkuXG4gICAgc3RhdGVba0pzU3RhdGVdW2tUb2tlbml6ZV0gPSBqc1Rva2VuUXVhc2k7XG4gICAgLy8gc3dpdGNoIHRvIGxvY2FsIG1vZGUgZm9yIHN1YnNlcXVlbnQgdGV4dFxuICAgIHN0YXRlW2tMb2NhbE1vZGVdID0gdGhpcy5tb2RlO1xuICAgIHN0YXRlW2tMb2NhbFN0YXRlXSA9IGNtU3RhcnRTdGF0ZShzdGF0ZVtrTG9jYWxNb2RlXSk7XG4gICAgc3RhdGVba0luSnNFeHBySW5TdHJpbmdUZW1wbGF0ZV0gPSBmYWxzZTtcbiAgICBzdGF0ZVtrSnNFeHByRGVwdGhJblN0cmluZ1RlbXBsYXRlXSA9IDA7XG4gIH1cblxuICAvKiogQHRoaXMge1J1bGV9ICovXG4gIGZ1bmN0aW9uIGlzRW5kQmFja3RpY2soe3N0cmVhbSwgc3RhdGV9KSB7XG4gICAgLy8gY2hlY2sgaXQgaGl0cyBlbmRpbmcgYmFja3RpY2sgZm9yIHN0cmluZyB0ZW1wbGF0ZSxcbiAgICAvLyBpZ25vcmluZyB0aGUgYmFja3RpY2tzIHRoYXQgYXBwZWFyIGluc2lkZSBhIEpTIGV4cHJlc3Npb24uXG4gICAgaWYgKCFzdGF0ZVtrSW5Kc0V4cHJJblN0cmluZ1RlbXBsYXRlXSkge1xuICAgICAgSVNfRU5EX0JBQ0tUSUNLX1JFLmxhc3RJbmRleCA9IE1hdGgubWF4KDAsIHN0cmVhbS5wb3MgLSAxKTtcbiAgICAgIHJldHVybiBJU19FTkRfQkFDS1RJQ0tfUkUudGVzdChzdHJlYW0uc3RyaW5nKTtcbiAgICB9XG4gIH1cblxuICAvKiogQHRoaXMge1J1bGV9ICovXG4gIGZ1bmN0aW9uIGV4aXRMb2NhbE1vZGVXaXRoRW5kQmFja3RpY2soY3R4KSB7XG4gICAgLy8gcGFyc2UgdGhlIGVuZGluZyBKUyBzdHJpbmcgdGVtcGxhdGUgYmFja3RpY2sgaW4ganMgbW9kZVxuICAgIGN0eC5zdHlsZSA9IGpzTW9kZS50b2tlbihjdHguc3RyZWFtLCBjdHguc3RhdGVba0pzU3RhdGVdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1ck1vZGVTdGF0ZU9mSHRtbG1peGVkKGh0bWxtaXhlZFN0YXRlKSB7XG4gICAgcmV0dXJuIGh0bWxtaXhlZFN0YXRlW2tMb2NhbE1vZGVdXG4gICAgICA/IGh0bWxtaXhlZFN0YXRlW2tMb2NhbFN0YXRlXVxuICAgICAgOiBodG1sbWl4ZWRTdGF0ZS5odG1sU3RhdGU7XG4gIH1cblxuICBPYmplY3QuYXNzaWduKGh0bWxtaXhlZE1vZGUsIHtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHRoZSBwb3NpdGlvbiBvZiAnJHsnIHJlbGF0aXZlIHRvIHRoZVxuICAgICAqICAgICAgICAgY3VycmVudCB0b2tlbiBzdGFydCBwb3NpdGlvbiwgaS5lLiwgc3RyZWFtLnN0YXJ0OyAtMSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgW2tJbmRleE9mSnNFeHByU3RhcnRdKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIGNvbnN0IGxvY2FsU3RhdGUgPSBzdGF0ZVtrTG9jYWxTdGF0ZV07XG4gICAgICBjb25zdCBtb2RlTmFtZSA9IGxvY2FsU3RhdGVba0xvY2FsTW9kZV0/Lm5hbWUgfHwgJ2h0bWwnO1xuICAgICAgc3dpdGNoIChtb2RlTmFtZSkge1xuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIHJldHVybiB0b2tlbkluZGV4T2ZVbmVzY2FwZWQoc3RyZWFtLCAnJHsnKTtcbiAgICAgIGNhc2UgJ2Nzcyc6XG4gICAgICAgIC8vIGNzcyBzdGF0ZSBpcyBpbiB0aGUgbG9jYWxTdGF0ZSBvZiBodG1sbWl4ZWRcbiAgICAgICAgcmV0dXJuIGNzc01vZGVba0luZGV4T2ZKc0V4cHJTdGFydF0oc3RyZWFtLCBjdXJNb2RlU3RhdGVPZkh0bWxtaXhlZChsb2NhbFN0YXRlKSk7XG4gICAgICBjYXNlICdqYXZhc2NyaXB0JzpcbiAgICAgICAgcmV0dXJuIC0xOyAvLyBsZXQganMgbW9kZSBoYW5kbGUgJHsgbmF0aXZlbHlcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VucmVjb2duaXplZCBtb2RlOicsIG1vZGVOYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTsgLy8gc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmVcbiAgICB9LFxuXG4gICAgW2tFbnN1cmVQcm9wZXJMb2NhbE1vZGVTdGF0ZVBvc3RKc0V4cHJdKHN0cmVhbSwgc3RhdGUsIHN0eWxlKSB7XG4gICAgICBjb25zdCBsb2NhbFN0YXRlID0gc3RhdGVba0xvY2FsU3RhdGVdO1xuICAgICAgY29uc3QgbW9kZU5hbWUgPSBsb2NhbFN0YXRlW2tMb2NhbE1vZGVdPy5uYW1lIHx8ICdodG1sJztcbiAgICAgIGNvbnN0IG1vZGVTdGF0ZSA9IGN1ck1vZGVTdGF0ZU9mSHRtbG1peGVkKGxvY2FsU3RhdGUpO1xuICAgICAgc3dpdGNoIChtb2RlTmFtZSkge1xuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIGlmIChtb2RlU3RhdGUuc3RhdGUgPT09IGh0bWxTdGF0ZUZvckF0dHJWYWx1ZSkge1xuICAgICAgICAgIC8vIGNhc2UgdGhlIGpzIGV4cHJlc3Npb24gaXMgYW4gYXR0cmlidXRlIHZhbHVlXG4gICAgICAgICAgZm9yY2VIdG1sTW9kZVRvQXR0ckNvbnRpbnVlZFN0YXRlKHN0cmVhbSwgbW9kZVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Nzcyc6XG4gICAgICAgIGNzc01vZGVba0Vuc3VyZVByb3BlckxvY2FsTW9kZVN0YXRlUG9zdEpzRXhwcl0oc3RyZWFtLCBtb2RlU3RhdGUsIHN0eWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdqYXZhc2NyaXB0JzpcbiAgICAgICAgYnJlYWs7IC8vIE5PLU9QXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zb2xlLmVycm9yKCdVbnJlY29nbml6ZWQgbW9kZTonLCBtb2RlTmFtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgT2JqZWN0LmFzc2lnbihjc3NNb2RlLCB7XG4gICAgW2tJbmRleE9mSnNFeHByU3RhcnRdKHN0cmVhbSkge1xuICAgICAgLy8gSW4gbW9zdCBjYXNlcywgQ1NTIHRva2VuaXplciB0cmVhdHMgJCBhcyBhIHNpbmdsZSB0b2tlbixcbiAgICAgIC8vIGRldGVjdCAkeyBmb3IgdGhvc2UgY2FzZXNcbiAgICAgIGNvbnN0IHsgc3RyaW5nLCBzdGFydCB9ID0gc3RyZWFtO1xuICAgICAgaWYgKHN0cmluZ1tzdGFydF0gPT09ICckJyAmJiBzdHJpbmdbc3RhcnQgKyAxXSA9PT0gJ3snKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgLy8gZWxzZSBsb29rIGZvciAkeyBpbiB0aGUgZW50aXJlIHRva2VuLlxuICAgICAgLy8gICBJdCBvbmx5IHdvcmtzIGZvciBsaW1pdGVkIGNhc2VzIHN1Y2ggYXMgY29udGVudCBwcm9wZXJ0eSB2YWx1ZSxcbiAgICAgIC8vICAgd2hlcmUgQ1NTIHBhcnNlciBzZWVzIGVudGlyZSBleHByZXNzaW9uIGFzIHN0cmluZy5cbiAgICAgIHJldHVybiB0b2tlbkluZGV4T2ZVbmVzY2FwZWQoc3RyZWFtLCAnJHsnKTtcbiAgICB9LFxuXG4gICAgW2tFbnN1cmVQcm9wZXJMb2NhbE1vZGVTdGF0ZVBvc3RKc0V4cHJdKHN0cmVhbSwgc3RhdGUsIHN0eWxlKSB7XG4gICAgICAvLyBmb3IgY2FzZSBxdW90ZWQgc3RyaW5nLCByZW1lbWJlciB0aGUgcXVvdGUgc3R5bGUsIHRvIGJlIHVzZWQgaW4gdG9rZW5pemVQb3N0SnNFeHByXG4gICAgICBpZiAoc3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0YXRlW2tRdW90ZUNoYXJTdXJyb3VuZEpzRXhwcl0gPSBzdHJlYW0uc3RyaW5nW3N0cmVhbS5zdGFydF07XG4gICAgICB9XG4gICAgICAvLyBOb3RlOiB3ZSB3YW50IHRvIGZvcmNlIHRoZSB0ZXh0IGFmdGVyIHRoZSBKUyBleHByZXNzaW9uIGJlIHRva2VuaXplZCBhcyBzdHJpbmcgKHVwIHRpbGwgdGhlIGVuZCBxdW90ZSksXG4gICAgICAvLyBidXQgQ1NTIHRva2VuaXplciBkb2VzIG5vdCBleHBvc2UgaXQsIG5vdCBldmVuIGluIHRoZSBpbmRpcmVjdCB3YXksXG4gICAgICAvLyAoYWtpbiB0byB3aGF0IHdlIGRvIGZvciBIVE1MIGF0dHJpYnV0ZXMsIGFsc28gcXVvdGVkKS5cbiAgICAgIC8vIFdlIGNvbXBlbnNhdGUgaXQgYnkgcmVtZW1iZXJpbmcgdGhlIHN0YXRlIGFuZCBkbyBvdXIgb3duIGluIHRva2VuaXplUG9zdEpzRXhwcigpXG4gICAgfSxcblxuICAgIFtrVG9rZW5pemVQb3N0SnNFeHByXShzdHJlYW0sIHN0YXRlKSB7XG4gICAgICBjb25zdCBxdW90ZUluVXNlID0gc3RhdGVba1F1b3RlQ2hhclN1cnJvdW5kSnNFeHByXTtcbiAgICAgIC8vIGZpcnN0IGVuc3VyZSwgd2UgbGV0IHRoZSBjc3MgdG9rZW5pemVyIGNvbnRpbnVlIHRoZSBuZXh0IHRpbWVcbiAgICAgIHN0YXRlW2tUb2tlbml6ZVBvc3RKc0V4cHJdID0gbnVsbDtcbiAgICAgIHN0YXRlW2tRdW90ZUNoYXJTdXJyb3VuZEpzRXhwcl0gPSBudWxsO1xuICAgICAgaWYgKCFxdW90ZUluVXNlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gTm93IGhhbmRsZSBxdW90ZWQgc3RyaW5nIGNhc2VzIHN1Y2ggYXMgY29udGVudDogXCJzdWZmaXgke3NvbWVFeHByKCl9cHJlZml4XCI7XG4gICAgICAvLyB0byByZXR1cm4gcHJlZml4XCIgYXMgYSBzdHJpbmcgdG9rZW4gaW4gdGhlIGFib3ZlIGNhc2VcbiAgICAgIC8vIHJlZ2V4OiBub24tZ3JlZWR5IG1hdGNoIHVwIHRvIHRoZSBpbW1lZGlhdGUgbmV4dCBxdW90ZSBjaGFyLCB0byBhdm9pZCBvdmVyIG1hdGNoXG4gICAgICAvLyBpbiB0aGUgdW5leHBlY3RlZCBjYXNlIChsaWtlbHkgYnVncykgdGhhdCB3ZSBjYW5ub3QgZmluZCBlbmQgcXVvdGUsIGRvIG5vdGhpbmcgbW9yZVxuICAgICAgLy8gYW5kIGxldCBwYXJlbnQgbW9kZSB0b2tlbml6ZXIgdG8gZG8gaXRzIHdvcmtcbiAgICAgIHJldHVybiBzdHJlYW0ubWF0Y2goTkVYVF9RVU9URV9SRVtxdW90ZUluVXNlXSwgdHJ1ZSkgPyAnc3RyaW5nJyA6IG51bGw7XG4gICAgfSxcbiAgfSk7XG5cbiAgZnVuY3Rpb24gdG9rZW5Kc0V4cHJlc3Npb25JblN0cmluZ1RlbXBsYXRlKHN0cmVhbSwgc3RhdGUpIHtcbiAgICBjb25zdCBzdHlsZSA9IGpzTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlW2tKc1N0YXRlXSk7XG4gICAgLy8gdHJhY2sgJHsgLCB9IHRvIGRldGVybWluZSB3aGVuIHRoZSBleHByZXNzaW9uIGlzIGNvbXBsZXRlLlxuICAgIGlmIChzdHlsZSA9PT0gJ3N0cmluZy0yJyAmJiB0b2tlbkluZGV4T2ZVbmVzY2FwZWQoc3RyZWFtLCAnJHsnKSA+PSAwKSB7XG4gICAgICAvLyBjYXNlIG5lc3RlZCAke1xuICAgICAgc3RhdGVba0pzRXhwckRlcHRoSW5TdHJpbmdUZW1wbGF0ZV0gKz0gMTtcbiAgICB9IGVsc2UgaWYgKHN0eWxlID09PSAnc3RyaW5nLTInICYmIHN0YXRlW2tKc1N0YXRlXS5sYXN0VHlwZSA9PT0gJ30nKSB7XG4gICAgICAvLyBjYXNlIGV4cHJlc3Npb24tZW5kaW5nIH1cbiAgICAgIC8vIE5vdGU6IG11c3QgY2hlY2sgQk9USCBzdHlsZSBhbmQgbGFzdFR5cGUuXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgYmxhbmsgc3BhY2VzIGFmdGVyIH0sXG4gICAgICAvLyB3aGVuIHRva2VuaXppbmcgdGhlIGJsYW5rIHNwYWNlcywgdGhlIHN0eWxlIGlzIG51bGwgYnV0IHRoZSBsYXN0VHlwZSByZW1haW5zIHRvIGJlIH1cbiAgICAgIC8vICh0aGUgb25lIHdpdGggbWVhbmluZ2Z1bCB0b2tlbilcbiAgICAgIC8vIG9uY2UgaXQgcmVhY2hlcyBiYWNrIHRvIDAsIHRoZSBsb2dpYyB3b3VsZCBsZXQgdGhlIHBhcmVudCBsb2NhbCBtb2RlIGhhbmRsZSB0aGUgbmV4dCB0b2tlblxuICAgICAgaWYgKChzdGF0ZVtrSnNFeHByRGVwdGhJblN0cmluZ1RlbXBsYXRlXSAtPSAxKSA8PSAwKSB7XG4gICAgICAgIHN0YXRlW2tJbkpzRXhwckluU3RyaW5nVGVtcGxhdGVdID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGpzRXhwciA9IHN0YXRlW2tMb2NhbE1vZGVdW2tUb2tlbml6ZVBvc3RKc0V4cHJdO1xuICAgICAgICBpZiAoanNFeHByKSB7XG4gICAgICAgICAgLy8gdW5sZXNzIHRoZSBtb2RlIGFsc28gZXhwbGljaXRseSBzcGVjaWZ5IGEgdG9rZW5pemVyLlxuICAgICAgICAgIHN0YXRlW2tUb2tlbml6ZVBvc3RKc0V4cHJdID0ganNFeHByO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIC8vIEZvciB1c2Ugb2YgdG9rZW5JbkxvY2FsTW9kZVN0cmluZ1RlbXBsYXRlLFxuICAvLyB0byBoYW5kbGUgY2FzZXMgdGhhdCB0aGUgdG9rZW4gY29udGFpbnMgc3RyaW5nIHRlbXBsYXRlIGVuZGluZyBiYWNrdGljaywgaS5lLixcbiAgLy8gYmxlZWRpbmcgb3ZlciB0aGUgc3RyaW5nIHRlbXBsYXRlXG4gIGZ1bmN0aW9uIGV4Y2x1ZGVFbmRCYWNrdGlja0Zyb21Ub2tlbihzdHJlYW0sIHN0eWxlKSB7XG4gICAgaWYgKHN0eWxlID09PSAnc3RyaW5nLTInKSB7XG4gICAgICAvLyB0aGUgdG9rZW4gaXMgbWVhbnQgdG8gYmUgYSBzdHJpbmcgdGVtcGxhdGUsIGUuZy4sIHN0cmluZyB0ZW1wbGF0ZSB3aXRoaW4gPHNjcmlwdD4gdGFnXG4gICAgICAvLyBzbyBkbyBub3RoaW5nXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGJhY2t0aWNrUG9zID0gdG9rZW5JbmRleE9mVW5lc2NhcGVkKHN0cmVhbSwgJ2AnKTtcbiAgICBpZiAoYmFja3RpY2tQb3MgPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0cmVhbS5iYWNrVXAoc3RyZWFtLnBvcyAtIHN0cmVhbS5zdGFydCAtIGJhY2t0aWNrUG9zKTtcbiAgfVxuXG4gIC8qKiBAdGhpcyB7UnVsZX0gKi9cbiAgZnVuY3Rpb24gdG9rZW5JbkxvY2FsTW9kZVN0cmluZ1RlbXBsYXRlKGN0eCkge1xuICAgIGNvbnN0IHtzdHJlYW0sIHN0YXRlfSA9IGN0eDtcbiAgICBpZiAoc3RhdGVba0luSnNFeHBySW5TdHJpbmdUZW1wbGF0ZV0pIHtcbiAgICAgIGN0eC5zdHlsZSA9IHRva2VuSnNFeHByZXNzaW9uSW5TdHJpbmdUZW1wbGF0ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN0YXRlW2tUb2tlbml6ZVBvc3RKc0V4cHJdKSB7XG4gICAgICBjdHguc3R5bGUgPSBzdGF0ZVtrVG9rZW5pemVQb3N0SnNFeHByXShzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZWxzZSBub3JtYWwgbG9jYWwgbW9kZSB0b2tlbml6YXRpb25cbiAgICBjb25zdCBzdHlsZSA9IHN0YXRlW2tMb2NhbE1vZGVdLnRva2VuKHN0cmVhbSwgc3RhdGVba0xvY2FsU3RhdGVdKTtcbiAgICBleGNsdWRlRW5kQmFja3RpY2tGcm9tVG9rZW4oc3RyZWFtLCBzdHlsZSk7XG4gICAgY29uc3QganNFeHByU3RhcnQgPSBzdGF0ZVtrTG9jYWxNb2RlXVtrSW5kZXhPZkpzRXhwclN0YXJ0XShzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoanNFeHByU3RhcnQgPCAwKSB7XG4gICAgICBjdHguc3R5bGUgPSBzdHlsZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gY2FzZSB0aGVyZSBpcyBhbiBqcyBleHByZXNzaW9uXG4gICAgc3RhdGVba0xvY2FsTW9kZV1ba0Vuc3VyZVByb3BlckxvY2FsTW9kZVN0YXRlUG9zdEpzRXhwcl0oc3RyZWFtLCBzdGF0ZSwgc3R5bGUpO1xuICAgIC8vIGJhY2t1cCBjdXJyZW50IHRva2VuIHRvIGV4Y2x1ZGUganMgZXhwcmVzc2lvbiwgc28gdGhhdCB0aGUgbmV4dCB0b2tlbiBzdGFydHMgd2l0aCAke1xuICAgIC8vIE1VU1QgaGFwcGVuIGFmdGVyIGVuc3VyZVByb3BlckxvY2FsTW9kZVN0YXRlUG9zdEpzRXhwcigpIGNhbGwsIGFzIHRoZSBlbnN1cmUgY2FsbFxuICAgIC8vIG1pZ2h0IG5lZWQgdG8gYWNjZXNzIHRoZSB0b2tlbiBiZWZvcmUganMgZXhwcmVzc2lvbiBleGNsdXNpb25cbiAgICBzdHJlYW0uYmFja1VwKHN0cmVhbS5wb3MgLSBzdHJlYW0uc3RhcnQgLSBqc0V4cHJTdGFydCk7XG4gICAgc3RhdGVba0luSnNFeHBySW5TdHJpbmdUZW1wbGF0ZV0gPSB0cnVlO1xuICAgIC8vIG5leHQgdGltZSB0aGUgdG9rZW5pemVyIHdpbGwgc2VlICR7Li4uICwgdGhlIGpzIHBhcnNlciwgY3VycmVudGx5IGluIHN0cmluZyB0ZW1wbGF0ZS9xdWFzaSBtb2RlXG4gICAgLy8gd291bGQgcmVjb2duaXplIGl0IGFzIGFuIGpzIGV4cHJlc3Npb24gYW5kIHRva2VuaXplIGFzIHN1Y2guXG4gICAgLy8gTm90ZTogY2Fubm90IGluY3JlbWVudCBzdGF0ZVtrSnNFeHByRGVwdGhJblN0cmluZ1RlbXBsYXRlXSB5ZXQsXG4gICAgLy8gYXMgdGhlICR7IHRvIGJlIGhhbmRsZWQgYnkganMgdG9rZW5pemVyIHRoZSBuZXh0IHRpbWVcbiAgICBjdHguc3R5bGUgPSBzdHlsZTtcbiAgfVxuXG5cbiAgLyoqIEB0aGlzIHtSdWxlfSAqL1xuICBmdW5jdGlvbiBwcmVwUmVwYXJzZVBsYWluU3RyaW5nSW5Mb2NhbE1vZGUoe3N0cmVhbSwgc3RhdGV9KSB7XG4gICAgY29uc3Qgb2xkUG9zID0gc3RyZWFtLnBvcztcbiAgICAvLyBzcGl0IG91dCBiZWdpbm5pbmcgYmVnaW5uaW5nIHF1b3RlIGFzIGEgdG9rZW4sIGFuZCBsZWF2ZSB0aGUgcmVzdCBvZiB0aGUgdGV4dCBmb3IgbG9jYWwgbW9kZSBwYXJzaW5nXG4gICAgc3RyZWFtLmJhY2tVcChzdHJlYW0ucG9zIC0gc3RyZWFtLnN0YXJ0IC0gMSk7XG4gICAgLy8gc3dpdGNoIHRvIGxvY2FsIG1vZGUgZm9yIHN1YnNlcXVlbnQgdGV4dFxuICAgIC8vIGFuZCB1c2UgZW5kIHF1b3RlIHBvc2l0aW9uIHRvIGRldGVjdCB0aGUgZW5kIG9mIHRoZSBsb2NhbCBodG1sIG1vZGVcbiAgICAoc3RhdGVba0xvY2FsU3RhdGVdID0gY21TdGFydFN0YXRlKHN0YXRlW2tMb2NhbE1vZGVdID0gdGhpcy5tb2RlKSlcbiAgICAgIFtrTG9jYWxIdG1sUGxhaW5TdHJpbmdFbmRQb3NdID0gb2xkUG9zO1xuICB9XG5cbiAgLyoqIEB0aGlzIHtSdWxlfSAqL1xuICBmdW5jdGlvbiBleGl0TG9jYWxNb2RlV2l0aEVuZFF1b3RlKGN0eCkge1xuICAgIC8vIHBhcnNlIHRoZSBlbmRpbmcgSlMgc3RyaW5nIHF1b3RlLFxuICAgIC8vIGNhbm5vdCB1c2UgdGhlIGpzTW9kZSB0byBwYXJzZSwgYXMgaXQgd2lsbCBiZSB0cmVhdGVkIGFzIHRoZSBiZWdpbm5pbmcgb2YgYSBzdHJpbmcuXG4gICAgLy8gc28gd2Ugc2ltdWxhdGUgaXQgaGVyZS5cbiAgICBjdHguc3RyZWFtLm5leHQoKTsgLy8gc2hvdWxkIGJlIHNpbmdsZSBvciBkb3VibGUgcXVvdGU7XG4gICAgY3R4LnN0eWxlID0gJ3N0cmluZyc7IC8vIHRoZSBleHBlY3RlZCBzdHlsZVxuICB9XG5cbiAgLyoqIEB0aGlzIHtSdWxlfSAqL1xuICBmdW5jdGlvbiB0b2tlbkluTG9jYWxNb2RlUGxhaW5TdHJpbmcoY3R4KSB7XG4gICAgY29uc3Qge3N0cmVhbSwgc3RhdGV9ID0gY3R4O1xuICAgIGNvbnN0IHN0eWxlID0gc3RhdGVba0xvY2FsTW9kZV0udG9rZW4oc3RyZWFtLCBzdGF0ZVtrTG9jYWxTdGF0ZV0pO1xuICAgIGNvbnN0IHBvcyA9IHN0YXRlW2tMb2NhbFN0YXRlXVtrTG9jYWxIdG1sUGxhaW5TdHJpbmdFbmRQb3NdO1xuICAgIGlmIChzdHJlYW0ucG9zID49IHBvcykge1xuICAgICAgLy8gYmFja1VwIHRleHQgYmV5b25kIHRoZSBzdHJpbmcsIHBsdXMgb25lIHRvIGV4Y2x1ZGUgZW5kIHF1b3RlXG4gICAgICBzdHJlYW0uYmFja1VwKHN0cmVhbS5wb3MgLSBwb3MgKyAxKTtcbiAgICB9XG4gICAgY3R4LnN0eWxlID0gc3R5bGU7XG4gIH1cblxuICAvKiogQHR5cGVkZWYge2Z1bmN0aW9uKFJ1bkNvbnRleHQpOig/Ym9vbGVhbil9IFJ1bGVMYW1iZGEgKi9cblxuICAvKipcbiAgICogQHR5cGVkZWYgUnVsZVxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGlkIC0gY3VycmVudCBjb250ZXh0XG4gICAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gbmV4dCAtIG5leHQgY29udGV4dCBvciBudWxsXG4gICAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdHlwZSAtIHRva2VuIHR5cGVcbiAgICogQHByb3BlcnR5IHs/c3RyaW5nfSBzdHlsZSAtIHRva2VuIHN0eWxlLCBvbmx5ICdjb21tZW50JyBpcyBoYW5kbGVkIGZvciBsYW5ndWFnZSBoaW50c1xuICAgKiBAcHJvcGVydHkge09iamVjdH0gW21vZGVdIC0gQ29kZU1pcnJvciBtb2RlXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2hhc0JlZ2luQmFja3RpY2s9dHJ1ZV1cbiAgICogQHByb3BlcnR5IHtSdWxlTGFtYmRhfHN0cmluZ3xSZWdFeHB9IG1hdGNoIC0gbWF0Y2hpbmcgZnVuY3Rpb24vdGV4dC9yZWdleHAsXG4gICAqIGluIGNhc2Ugb2YgdGV4dC9yZWdleHAgdGhlIGZ1bmN0aW9uIGlzIGF1dG8tY3JlYXRlZCBieSBtYWtlUnVsZXMoKVxuICAgKiBAcHJvcGVydHkge1J1bGVMYW1iZGF9IFtvbk1hdGNoXSAtIHJ1bnMgaWYgbWF0Y2hlZFxuICAgKiBAcHJvcGVydHkge1J1bGVMYW1iZGF9IFtvbk1pc3NdIC0gcnVucyBpZiBub3QgbWF0Y2hlZFxuICAgKi9cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLFJ1bGVbXT59IHByZWZpeGVkUnVsZUdyb3Vwc1xuICAgKiBAcmV0dXJuIHtSdWxlW119XG4gICAqL1xuICBmdW5jdGlvbiBtYWtlUnVsZXMocHJlZml4ZWRSdWxlR3JvdXBzKSB7XG4gICAgT2JqZWN0LmVudHJpZXMocHJlZml4ZWRSdWxlR3JvdXBzKS5mb3JFYWNoKChbc2VxUHJlZml4LCBydWxlc10pID0+IHtcbiAgICAgIHJ1bGVzLmZvckVhY2goKHJ1bGUsIGkpID0+IHtcbiAgICAgICAgY29uc3Qge21hdGNoLCB0eXBlLCBzdHlsZX0gPSBydWxlO1xuICAgICAgICBpZiAodHlwZW9mIG1hdGNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXRjaCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJ1bGUubWF0Y2ggPSBjdHggPT4gY3R4LnR5cGUgPT09IHR5cGUgJiYgY3R4LnRleHQgPT09IG1hdGNoO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2ggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgIHJ1bGUubWF0Y2ggPSB0eXBlXG4gICAgICAgICAgICAgID8gY3R4ID0+IGN0eC50eXBlID09PSB0eXBlICYmIG1hdGNoLnRlc3QoY3R4LnRleHQpXG4gICAgICAgICAgICAgIDogY3R4ID0+IG1hdGNoLnRlc3QoY3R4LnRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBydWxlLm1hdGNoID0gY3R4ID0+IGN0eC50eXBlID09PSB0eXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocnVsZS5pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcnVsZS5pZCA9IGkgPyBgJHtzZXFQcmVmaXh9LSR7aX1gIDogJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bGUubmV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcnVsZS5uZXh0ID0gYCR7c2VxUHJlZml4fS0ke2kgKyAxfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bGUuaWQpIHtcbiAgICAgICAgICBydWxlc0J5SWRbcnVsZS5pZF0gPSBbcnVsZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlID09PSAnY29tbWVudCcpIHtcbiAgICAgICAgICBydWxlc0J5TGFuZ0NtdC5wdXNoKHJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIChydWxlc0J5VHlwZVt0eXBlIHx8ICcnXSB8fCAocnVsZXNCeVR5cGVbdHlwZSB8fCAnJ10gPSBbXSkpLnB1c2gocnVsZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hdGNoUnVsZShzdHJlYW0sIHN0YXRlLCBqc1Rva2VuU3R5bGUpIHtcbiAgICBydW5DdHguanNUb2tlblN0eWxlID0ganNUb2tlblN0eWxlO1xuICAgIHJ1bkN0eC5zdGF0ZSA9IHN0YXRlO1xuICAgIHJ1bkN0eC5zdHJlYW0gPSBzdHJlYW07XG4gICAgcnVuQ3R4LnN0eWxlID0gU1RZTEVfUEFTUztcbiAgICBkZWxldGUgcnVuQ3R4LnRleHQ7XG4gICAgY29uc3QgaWQgPSBzdGF0ZVtrTWF5YmVMb2NhbENvbnRleHRdIHx8ICcnO1xuICAgIGNvbnN0IHJ1bGVzID0gaWQgPyBydWxlc0J5SWRbaWRdXG4gICAgICA6IGpzVG9rZW5TdHlsZSA9PT0gJ2NvbW1lbnQnICYmIHJ1bkN0eC50ZXh0WzFdID09PSAnKicgPyBydWxlc0J5TGFuZ0NtdFxuICAgICAgICA6IHJ1bGVzQnlUeXBlW3J1bkN0eC50eXBlXTtcbiAgICBpZiAocnVsZXMpIHtcbiAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBydWxlcykge1xuICAgICAgICBpZiAocnVsZS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICBpZiAocnVsZS5tYXRjaChydW5DdHgpKSB7XG4gICAgICAgICAgICBzdGF0ZVtrTWF5YmVMb2NhbENvbnRleHRdID0gcnVsZS5uZXh0O1xuICAgICAgICAgICAgaWYgKHJ1bGUubmV4dCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGxvY2FsIG1vZGUgZG9uZSwgcmVzZXRcbiAgICAgICAgICAgICAgc3RhdGVba0xvY2FsTW9kZV0gPSBudWxsO1xuICAgICAgICAgICAgICBzdGF0ZVtrTG9jYWxTdGF0ZV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVsZS5vbk1hdGNoPy4ocnVuQ3R4KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gLy8gY2FzZSBydWxlIHRyYW5zaXRpb24gY3JpdGVyaWEgbm90IG1hdGNoZWRcbiAgICAgICAgICBpZiAocnVsZS5vbk1pc3MpIHtcbiAgICAgICAgICAgIHJ1bGUub25NaXNzKHJ1bkN0eCk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gZGVmYXVsdCBub3QgbWF0Y2hlZCBsb2dpYzogcmVzZXQgbG9jYWwgbW9kZSBtYXRjaGluZ1xuICAgICAgICAgICAgc3RhdGVba01heWJlTG9jYWxDb250ZXh0XSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBydW5DdHguc3R5bGU7XG4gIH1cblxuICAvLyBkZWZpbmUgdGhlIHRyYW5zaXRpb24gcnVsZXMgdG8gZW50ZXIgbG9jYWwgQ1NTIG1vZGU7XG4gIG1ha2VSdWxlcyh7XG4gICAgLy8gR01fYWRkU3R5bGUoYGNzcy1zdHJpbmdgKTtcbiAgICBjc3MxOiBbXG4gICAgICB7IG1hdGNoOiAnR01fYWRkU3R5bGUnLCB0eXBlOiAndmFyaWFibGUnIH0sXG4gICAgICB7IG1hdGNoOiAnKCcsIHR5cGU6ICcoJyB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAncXVhc2knLCAvLyBpZiBpdCdzIGEgc3RyaW5nIHRlbXBsYXRlXG4gICAgICAgIG5leHQ6ICdjc3MtaW4nLFxuICAgICAgICBtb2RlOiBjc3NNb2RlLFxuICAgICAgICBvbk1hdGNoOiBwcmVwUmVwYXJzZVN0cmluZ1RlbXBsYXRlSW5Mb2NhbE1vZGUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBtYXRjaDogaXNFbmRCYWNrdGljayxcbiAgICAgICAgaWQ6ICdjc3MtaW4nLFxuICAgICAgICBuZXh0OiBudWxsLCAvLyB0aGVuIGV4aXQgbG9jYWwgY3NzIG1vZGVcbiAgICAgICAgb25NYXRjaDogZXhpdExvY2FsTW9kZVdpdGhFbmRCYWNrdGljayxcbiAgICAgICAgb25NaXNzOiB0b2tlbkluTG9jYWxNb2RlU3RyaW5nVGVtcGxhdGUsIC8vIGVsc2Ugc3RheSBpbiBsb2NhbCBtb2RlXG4gICAgICB9LFxuICAgIF0sXG4gICAgLy8gR00uYWRkU3R5bGUoYGNzcy1zdHJpbmdgKTtcbiAgICBjc3MyOiBbXG4gICAgICB7IG1hdGNoOiAnR00nLCB0eXBlOiAndmFyaWFibGUnIH0sXG4gICAgICB7IG1hdGNoOiAnLicsIHR5cGU6ICcuJyB9LFxuICAgICAgeyBtYXRjaDogJ2FkZFN0eWxlJywgdHlwZTogJ3ZhcmlhYmxlJyB9LFxuICAgICAgeyBtYXRjaDogJygnLCB0eXBlOiAnKCcgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3F1YXNpJywgLy8gaWYgaXQncyBhIHN0cmluZyB0ZW1wbGF0ZVxuICAgICAgICBuZXh0OiAnY3NzLWluJyxcbiAgICAgICAgbW9kZTogY3NzTW9kZSxcbiAgICAgICAgb25NYXRjaDogcHJlcFJlcGFyc2VTdHJpbmdUZW1wbGF0ZUluTG9jYWxNb2RlLFxuICAgICAgfSxcbiAgICBdLFxuICAgIC8vIHZhciBzb21lQ1NTID0gLyogY3NzICovIGBjc3Mtc3RyaW5nYFxuICAgIC8vIHZhciBzb21lQ1NTID0gLyogbGFuZz1jc3MgKi8gYGNzcy1zdHJpbmdgXG4gICAgLy8gdmFyIHNvbWVDU1MgPSAvKiBsYW5ndWFnZT1jc3MgKi8gYGNzcy1zdHJpbmdgXG4gICAgY3NzMzogW1xuICAgICAge1xuICAgICAgICBzdHlsZTogJ2NvbW1lbnQnLFxuICAgICAgICBtYXRjaDogL15cXC9cXCpcXHMqKGxhbmcodWFnZSk/XFxzKj1cXHMqKT9jc3NcXHMqXFwqXFwvJC9pXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAncXVhc2knLFxuICAgICAgICBuZXh0OiAnY3NzLWluJyxcbiAgICAgICAgbW9kZTogY3NzTW9kZSxcbiAgICAgICAgb25NYXRjaDogcHJlcFJlcGFyc2VTdHJpbmdUZW1wbGF0ZUluTG9jYWxNb2RlLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcblxuICAvLyBkZWZpbmUgdGhlIHRyYW5zaXRpb24gcnVsZXMgdG8gZW50ZXIgbG9jYWwgaHRtbCBtb2RlO1xuICBtYWtlUnVsZXMoe1xuICAgIC8vIGluc2lkZSBhIGh0bWwgc3RyaW5nIHRlbXBsYXRlXG4gICAgaHRtbDE6IFtcbiAgICAgIHtcbiAgICAgICAgbWF0Y2g6IGlzRW5kQmFja3RpY2ssXG4gICAgICAgIGlkOiAnaHRtbC1pbicsXG4gICAgICAgIG5leHQ6IG51bGwsIC8vIHRoZW4gZXhpdCBsb2NhbCBodG1sIG1vZGVcbiAgICAgICAgb25NYXRjaDogZXhpdExvY2FsTW9kZVdpdGhFbmRCYWNrdGljayxcbiAgICAgICAgb25NaXNzOiB0b2tlbkluTG9jYWxNb2RlU3RyaW5nVGVtcGxhdGUsIC8vIGVsc2Ugc3RheSBpbiBsb2NhbCBtb2RlXG4gICAgICB9LFxuICAgIF0sXG4gICAgLy8gdmFyIHNvbWVIVE1MID0gLyogaHRtbCAqLyBgaHRtbC1zdHJpbmdgXG4gICAgLy8gdmFyIHNvbWVIVE1MID0gLyogbGFuZz1odG1sICovIGBodG1sLXN0cmluZ2BcbiAgICAvLyB2YXIgc29tZUhUTUwgPSAvKiBsYW5ndWFnZT1odG1sICovIGBodG1sLXN0cmluZ2BcbiAgICBodG1sMjogW1xuICAgICAge1xuICAgICAgICBzdHlsZTogJ2NvbW1lbnQnLFxuICAgICAgICBtYXRjaDogL15cXC9cXCpcXHMqKGxhbmcodWFnZSk/XFxzKj1cXHMqKT9odG1sXFxzKlxcKlxcLyQvaSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdxdWFzaScsXG4gICAgICAgIG5leHQ6ICdodG1sLWluJyxcbiAgICAgICAgbW9kZTogaHRtbG1peGVkTW9kZSxcbiAgICAgICAgb25NYXRjaDogcHJlcFJlcGFyc2VTdHJpbmdUZW1wbGF0ZUluTG9jYWxNb2RlLFxuICAgICAgfSxcbiAgICBdLFxuICAgIC8vIGZvciBwbGFpbiBzdHJpbmcgKHNpbmdsZSBvciBkb3VibGUgcXVvdGVkKSB0aGF0IGxvb2tzIGxpa2UgaHRtbFxuICAgIC8vIGUuZy4sICc8ZGl2IGNsYXNzPVwiZm9vXCI+aGVsbG8nLCBcIjwvZGl2PlwiLCAnICA8aHIvPicsIGV0Yy5cbiAgICBodG1sMzogW1xuICAgICAge1xuICAgICAgICBtYXRjaDogL15bJ1wiXVxccyo8XFwvP1thLXpcXGRdKyhcXHN8XFwvPz4pL2ksXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBtb2RlOiBodG1sTm9NYXRjaENsb3NpbmdNb2RlLFxuICAgICAgICBvbk1hdGNoOiBwcmVwUmVwYXJzZVBsYWluU3RyaW5nSW5Mb2NhbE1vZGUsXG4gICAgICB9LFxuICAgICAgLy8gbWF0Y2ggdGhlIGV4cGVjdGVkIGVuZGluZyBxdW90ZSBieSBwb3NpdGlvblxuICAgICAge1xuICAgICAgICBtYXRjaDogY3R4ID0+IGN0eC5zdHJlYW0uc3RhcnQgPj0gY3R4LnN0YXRlW2tMb2NhbFN0YXRlXVtrTG9jYWxIdG1sUGxhaW5TdHJpbmdFbmRQb3NdIC0gMSxcbiAgICAgICAgbmV4dDogbnVsbCwgLy8gdGhlbiBleGl0IGxvY2FsIGh0bWwgbW9kZVxuICAgICAgICBvbk1hdGNoOiBleGl0TG9jYWxNb2RlV2l0aEVuZFF1b3RlLFxuICAgICAgICBvbk1pc3M6IHRva2VuSW5Mb2NhbE1vZGVQbGFpblN0cmluZywgLy8gZWxzZSBzdGF5IGxvY2FsIG1vZGVcbiAgICAgIH0sXG4gICAgXSxcbiAgICAvLyBmb3IgSFRNTCBzdHJpbmcgdGVtcGxhdGUgKHdpdGhvdXQgaW5saW5lIGNvbW1lbnQgYXMgYSBoaW50KVxuICAgIGh0bWw0OiBbXG4gICAgICB7XG4gICAgICAgIG1hdGNoOiAvXmBcXHMqPFxcLz9bYS16XFxkXSsoXFxzfFxcLz8+KS9pLFxuICAgICAgICB0eXBlOiAncXVhc2knLFxuICAgICAgICBuZXh0OiAnaHRtbC1pbicsXG4gICAgICAgIG1vZGU6IGh0bWxtaXhlZE1vZGUsXG4gICAgICAgIG9uTWF0Y2g6IHByZXBSZXBhcnNlU3RyaW5nVGVtcGxhdGVJbkxvY2FsTW9kZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICAvLyBmb3IgSFRNTCBzdHJpbmcgdGVtcGxhdGUgKHdoZXJlIGZpcnN0IGxpbmUgaXMgYmxhbmssIGh0bWwgc3RhcnRlZCBpbiBzZWNvbmQgbGluZSlcbiAgICBodG1sNTogW1xuICAgICAgLy8gZmlyc3QgbGluZSBpcyBibGFua1xuICAgICAge1xuICAgICAgICBtYXRjaDogL15gKFxcXFwpP1xccyokLyxcbiAgICAgICAgdHlwZTogJ3F1YXNpJyxcbiAgICAgIH0sXG4gICAgICAvLyBzZWNvbmQgbGluZSBzdGFydHMgd2l0aCBhIHRhZ1xuICAgICAge1xuICAgICAgICBtYXRjaDogL1xccyo8XFwvP1thLXpcXGRdKyhcXHN8XFwvPz4pL2ksXG4gICAgICAgIHR5cGU6ICdxdWFzaScsXG4gICAgICAgIG5leHQ6ICdodG1sLWluJyxcbiAgICAgICAgbW9kZTogaHRtbG1peGVkTW9kZSxcbiAgICAgICAgaGFzQmVnaW5CYWNrdGljazogZmFsc2UsXG4gICAgICAgIG9uTWF0Y2g6IHByZXBSZXBhcnNlU3RyaW5nVGVtcGxhdGVJbkxvY2FsTW9kZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgZnVuY3Rpb24ganNUb2tlbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgLy8gYWRhcHQgdGhlIGV4aXN0aW5nIGpzTW9kZSB0b2tlbml6ZXIgd2l0aCB0aGUgd3JhcHBlciBzdGF0ZVxuICAgIGxldCB0b2tlblN0eWxlID0gbnVsbDtcbiAgICBpZiAoIXN0YXRlW2tMb2NhbE1vZGVdKSB7XG4gICAgICAvLyB3aGVuIGluIGxvY2FsIGh0bWwvY3NzIGNvbnRleHQsIHNraXAganMgcGFyc2luZyxcbiAgICAgIC8vIHNvIGFzIG5vdCB0byBtZXNzIHVwIGpzIHRva2VuaXplcidzIHN0YXRlLlxuICAgICAgdG9rZW5TdHlsZSA9IGpzTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlW2tKc1N0YXRlXSk7XG4gICAgICBpZiAodG9rZW5TdHlsZSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBjYXNlIHRoZSB0b2tlbiBpcyBub3QgcmVsZXZhbnQgc2VtYW50aWNhbGx5LCBlLmcuLCBzcGFjZSBvciBsaW5lIGJyZWFrO1xuICAgICAgICAvLyBqdXN0IHJldHVybiwgc2tpcCBsb2NhbCBtb2RlIG1hdGNoLCBhcyBzdWNoIHRva2VuIGlzIG5vdCByZWZsZWN0ZWQgaW4gc3RyZWFtL3N0YXRlXG4gICAgICAgIC8vIHNvIHRoZSBsb2NhbCBtb2RlIG1hdGNoZXIgd2lsbCBlbmQgdXAgc2VlaW5nIHByZXZpb3VzIHRva2VuLlxuICAgICAgICByZXR1cm4gc3RhdGVba0pzU3RhdGVdW2tUb2tlbml6ZV0gPT09IGpzVG9rZW5RdWFzaSA/ICdzdHJpbmctMicgOiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBvcHRpbWl6YXRpb246IHNob3J0LWNpcmN1aXQgdG8gc2tpcCBsb2NhbCBtb2RlIG1hdGNoIHdoZW4gdGhlIHJ1bGVzIHdvbid0IGNvdmVyXG4gICAgLy8gTm90ZTogaWYgdGhlIHJ1bGVzIGNoYW5nZSAodGhlIDxzdGFydD4gb25lcyksIHRoZSBjb25kaXRpb25zIGhlcmUgbWlnaHQgbmVlZCB0byBiZSB1cGRhdGVkIGFjY29yZGluZ2x5LlxuICAgIGlmIChzdGF0ZVtrTWF5YmVMb2NhbENvbnRleHRdID09IG51bGxcbiAgICAmJiB0b2tlblN0eWxlICE9PSAndmFyaWFibGUnXG4gICAgJiYgdG9rZW5TdHlsZSAhPT0gJ2NvbW1lbnQnXG4gICAgJiYgdG9rZW5TdHlsZSAhPT0gJ3N0cmluZydcbiAgICAmJiB0b2tlblN0eWxlICE9PSAnc3RyaW5nLTInKSB7XG4gICAgICByZXR1cm4gdG9rZW5TdHlsZTtcbiAgICB9XG4gICAgLy8gbWF0Y2ggdG8gc2VlIGlmIGl0IG5lZWRzIHRvIHN3aXRjaCB0byBsb2NhbCBodG1sIG1vZGUsIHJldHVybiBsb2NhbCBtb2RlIHN0eWxlIGlmIGFwcGxpY2FibGVcbiAgICBjb25zdCBtYXliZUxvY2FsU3R5bGUgPSBtYXRjaFJ1bGUoc3RyZWFtLCBzdGF0ZSwgdG9rZW5TdHlsZSk7XG4gICAgaWYgKG1heWJlTG9jYWxTdHlsZSAhPT0gU1RZTEVfUEFTUykge1xuICAgICAgcmV0dXJuIG1heWJlTG9jYWxTdHlsZTtcbiAgICB9XG4gICAgLy8gRGlmZmVyZW50aWF0ZSByZWdleHBzIGFuZCB0ZW1wbGF0ZXMsIFRPRE86IHJlbW92ZSB3aGVuIGltcGxlbWVudGVkIGluIENvZGVNaXJyb3JcbiAgICBpZiAodG9rZW5TdHlsZSA9PT0gJ3N0cmluZy0yJyAmJiBzdGF0ZVtrSnNTdGF0ZV0ubGFzdFR5cGUgPT09ICdyZWdleHAnKSB7XG4gICAgICByZXR1cm4gJ3N0cmluZy0yIHJlZ2V4cCc7XG4gICAgfVxuICAgIHJldHVybiB0b2tlblN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydFN0YXRlOiAoKSA9PiAoe1xuICAgICAgW2tJbkpzRXhwckluU3RyaW5nVGVtcGxhdGVdOiBmYWxzZSxcbiAgICAgIFtrSnNFeHByRGVwdGhJblN0cmluZ1RlbXBsYXRlXTogMCxcbiAgICAgIFtrSnNTdGF0ZV06IGNtU3RhcnRTdGF0ZShqc01vZGUpLFxuICAgICAgW2tMb2NhbE1vZGVdOiBudWxsLFxuICAgICAgW2tMb2NhbFN0YXRlXTogbnVsbCxcbiAgICAgIFtrTWF5YmVMb2NhbENvbnRleHRdOiBudWxsLFxuICAgICAgW2tRdW90ZUNoYXJTdXJyb3VuZEpzRXhwcl06IG51bGwsXG4gICAgICBba1Rva2VuaXplUG9zdEpzRXhwcl06IG51bGwsXG4gICAgfSksXG5cbiAgICBjb3B5U3RhdGU6IHN0YXRlID0+ICh7XG4gICAgICBba0luSnNFeHBySW5TdHJpbmdUZW1wbGF0ZV06IHN0YXRlW2tJbkpzRXhwckluU3RyaW5nVGVtcGxhdGVdLFxuICAgICAgW2tKc0V4cHJEZXB0aEluU3RyaW5nVGVtcGxhdGVdOiBzdGF0ZVtrSnNFeHByRGVwdGhJblN0cmluZ1RlbXBsYXRlXSxcbiAgICAgIFtrSnNTdGF0ZV06IGNtQ29weVN0YXRlKGpzTW9kZSwgc3RhdGVba0pzU3RhdGVdKSxcbiAgICAgIFtrTG9jYWxNb2RlXTogc3RhdGVba0xvY2FsTW9kZV0sXG4gICAgICBba0xvY2FsU3RhdGVdOiBzdGF0ZVtrTG9jYWxTdGF0ZV1cbiAgICAgICAgPyBjbUNvcHlTdGF0ZShzdGF0ZVtrTG9jYWxNb2RlXSwgc3RhdGVba0xvY2FsU3RhdGVdKVxuICAgICAgICA6IG51bGwsXG4gICAgICBba01heWJlTG9jYWxDb250ZXh0XTogc3RhdGVba01heWJlTG9jYWxDb250ZXh0XSxcbiAgICAgIFtrUXVvdGVDaGFyU3Vycm91bmRKc0V4cHJdOiBzdGF0ZVtrUXVvdGVDaGFyU3Vycm91bmRKc0V4cHJdLFxuICAgICAgW2tUb2tlbml6ZVBvc3RKc0V4cHJdOiBzdGF0ZVtrVG9rZW5pemVQb3N0SnNFeHByXSxcbiAgICB9KSxcblxuICAgIC8vIHRva2VuKHN0cmVhbSwgc3RhdGUpXG4gICAgdG9rZW46IGpzVG9rZW4sXG5cbiAgICBpbmRlbnQoc3RhdGUsIHRleHRBZnRlciwgbGluZSkge1xuICAgICAgY29uc3QgbG9jYWxNb2RlID0gc3RhdGVba0xvY2FsTW9kZV07XG4gICAgICBpZiAoIWxvY2FsTW9kZSkge1xuICAgICAgICByZXR1cm4ganNNb2RlLmluZGVudChzdGF0ZVtrSnNTdGF0ZV0sIHRleHRBZnRlciwgbGluZSk7XG4gICAgICB9XG4gICAgICBpZiAobG9jYWxNb2RlLmluZGVudCkge1xuICAgICAgICByZXR1cm4gbG9jYWxNb2RlLmluZGVudChzdGF0ZVtrTG9jYWxTdGF0ZV0sIHRleHRBZnRlciwgbGluZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY21QYXNzO1xuICAgIH0sXG5cbiAgICBpbm5lck1vZGUoc3RhdGUpIHtcbiAgICAgIHJldHVybiB7IHN0YXRlOiBzdGF0ZVtrTG9jYWxTdGF0ZV0gfHwgc3RhdGVba0pzU3RhdGVdLCBtb2RlOiBzdGF0ZVtrTG9jYWxNb2RlXSB8fCBqc01vZGUgfTtcbiAgICB9LFxuICB9O1xufSwgJ2phdmFzY3JpcHQnLCAneG1sJywgJ2NzcycsICdodG1sbWl4ZWQnKTtcbiIsImltcG9ydCBDb2RlTWlycm9yIGZyb20gJ2NvZGVtaXJyb3InO1xuXG5jb25zdCBLSUxMX09QVCA9ICdraWxsVHJhaWxpbmdTcGFjZU9uU2F2ZSc7XG5jb25zdCBTSE9XX09QVCA9ICdzaG93VHJhaWxpbmdTcGFjZSc7XG5jb25zdCBPVkVSTEFZID0gJ3RyYWlsaW5nc3BhY2UnO1xuY29uc3QgREVGQVVMVFMgPSB7XG4gIFtLSUxMX09QVF06IHRydWUsXG4gIFtTSE9XX09QVF06IHRydWUsXG59O1xuaWYgKCEnJy50cmltRW5kKSB7XG4gIC8vIFRPRE86IHJlbW92ZSB3aGVuIG1pbl9jaHJvbWVfdmVyc2lvbj49NjYsIHN0cmljdF9taW5fdmVyc2lvbj49NjFcbiAgU3RyaW5nLnByb3RvdHlwZS50cmltRW5kID0gZnVuY3Rpb24gXygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGtpbGxUcmFpbGluZ1NwYWNlcyA9IChjbSwgcGxhY2Vob2xkZXJzKSA9PiB7XG4gIGlmICghY20ub3B0aW9uc1tLSUxMX09QVF0pIHtcbiAgICByZXR1cm4gY20uZ2V0VmFsdWUoKTtcbiAgfVxuICBjb25zdCBjdXJzb3JMaW5lcyA9IGNtLmRvYy5zZWwucmFuZ2VzLm1hcChyID0+IHIuaGVhZC5saW5lKTtcbiAgbGV0IHJlcyA9ICcnOyAvLyBwcm9ncmVzc2l2ZSBjb25jYXRlbmF0aW9uIGlzIGVmZmljaWVudCBpbiBtb2Rlcm4gYnJvd3NlcnNcbiAgbGV0IGxpbmUgPSAwO1xuICBjbS5vcGVyYXRpb24oKCkgPT4ge1xuICAgIGNtLmVhY2hMaW5lKCh7IHRleHQgfSkgPT4ge1xuICAgICAgY29uc3QgdHJpbW1lZCA9IHRleHQudHJpbUVuZCgpO1xuICAgICAgY29uc3QgbGVuMSA9IHRyaW1tZWQubGVuZ3RoO1xuICAgICAgY29uc3QgbGVuMiA9IHRleHQubGVuZ3RoO1xuICAgICAgcmVzICs9IChsaW5lID8gJ1xcbicgOiAnJykgKyB0cmltbWVkO1xuICAgICAgLy8gVGhlIHNhdmVkIGNvZGUgaXMgZnVsbHkgdHJpbW1lZCwgYnV0IHdlIGtlZXAgdGhlIHNwYWNlcyBpbiBjdXJzb3IgbGluZShzKVxuICAgICAgaWYgKGxlbjEgIT09IGxlbjIgJiYgIWN1cnNvckxpbmVzLmluY2x1ZGVzKGxpbmUpKSB7XG4gICAgICAgIGNtLnJlcGxhY2VSYW5nZSgnJyxcbiAgICAgICAgICB7IGxpbmUsIGNoOiBsZW4xIH0sXG4gICAgICAgICAgeyBsaW5lLCBjaDogbGVuMiB9LFxuICAgICAgICAgIGAqJHtLSUxMX09QVH1gKTsgLy8gYCpgIHJldXNlcyB0aGUgc2FtZSB1bmRvIHJlY29yZCBmb3IgcGVyZm9ybWFuY2VcbiAgICAgIH1cbiAgICAgIGxpbmUgKz0gMTtcbiAgICB9KTtcbiAgfSk7XG4gIHBsYWNlaG9sZGVycy5mb3JFYWNoKHAgPT4ge1xuICAgIHAuYm9keSA9IHAuYm9keS50cmltRW5kKCk7XG4gIH0pO1xuICByZXR1cm4gcmVzO1xufTtcblxuQ29kZU1pcnJvci5kZWZpbmVPcHRpb24oU0hPV19PUFQsIERFRkFVTFRTW1NIT1dfT1BUXSwgKGNtLCB2YWwsIHByZXYpID0+IHtcbiAgaWYgKHByZXYgPT09IENvZGVNaXJyb3IuSW5pdCkgcHJldiA9IGZhbHNlO1xuICBpZiAocHJldiAmJiAhdmFsKSB7XG4gICAgY20ucmVtb3ZlT3ZlcmxheShPVkVSTEFZKTtcbiAgfSBlbHNlIGlmICghcHJldiAmJiB2YWwpIHtcbiAgICBjbS5hZGRPdmVybGF5KHtcbiAgICAgIHRva2VuKHN0cmVhbSkge1xuICAgICAgICBjb25zdCBzID0gc3RyZWFtLnN0cmluZztcbiAgICAgICAgY29uc3QgaSA9IC9cXHMqJC8uZXhlYyhzKS5pbmRleDtcbiAgICAgICAgaWYgKGkgPiBzdHJlYW0ucG9zKSB7XG4gICAgICAgICAgc3RyZWFtLnBvcyA9IGk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLnBvcyA9IHMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gT1ZFUkxBWTtcbiAgICAgIH0sXG4gICAgICBuYW1lOiBPVkVSTEFZLFxuICAgIH0pO1xuICB9XG59KTtcblxuT2JqZWN0LmFzc2lnbihDb2RlTWlycm9yLmRlZmF1bHRzLCBERUZBVUxUUyk7XG4iLCJleHBvcnQgY29uc3QgaXNIaURQSSA9IG1hdGNoTWVkaWEoJ3NjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxNDRkcGkpJykubWF0Y2hlcztcblxuaWYgKElTX0ZJUkVGT1gpIHsgLy8gRmlyZWZveCBkb2Vzbid0IHNob3cgZmF2aWNvblxuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgZWwucmVsID0gJ2ljb24nO1xuICBlbC5ocmVmID0gYCR7SUNPTl9QUkVGSVh9JHtpc0hpRFBJID8gMzIgOiAxNn0ucG5nYDtcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbCk7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVBcHAsIGgsIG5leHRUaWNrIH0gZnJvbSAndnVlJztcbmltcG9ydCBNb2RhbCBmcm9tICd2dWVsZXRvbi9saWIvbW9kYWwnO1xuaW1wb3J0IHsgaTE4biB9IGZyb20gJ0AvY29tbW9uL3V0aWwnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi9tZXNzYWdlJztcblxuLyoqIFNob3dpbmcgdW5leHBlY3RlZCBlcnJvcnMgaW4gVUkgc28gdGhhdCB0aGUgdXNlcnMgY2FuIG5vdGlmeSB1cyAqL1xuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlID0+IHNob3dVbmhhbmRsZWRFcnJvcihlLmVycm9yKSk7XG5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBlID0+IHNob3dVbmhhbmRsZWRFcnJvcihlLnJlYXNvbikpO1xuZnVuY3Rpb24gc2hvd1VuaGFuZGxlZEVycm9yKGVycikge1xuICBpZiAoIWVycikgcmV0dXJuO1xuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ByZScpO1xuICAvLyB1c2luZyBhbiBpbmxpbmUgc3R5bGUgYmVjYXVzZSB3ZSBkb24ndCBrbm93IGlmIG91ciBDU1MgaXMgbG9hZGVkIGF0IHRoaXMgc3RhZ2VcbiAgZWwuc3R5bGUuY3NzVGV4dCA9IGBcXFxuICAgIHBvc2l0aW9uOmZpeGVkO1xuICAgIHotaW5kZXg6JHsxZTl9O1xuICAgIGxlZnQ6MDtcbiAgICByaWdodDowO1xuICAgIGJvdHRvbTowO1xuICAgIGJhY2tncm91bmQ6IzAwMDtcbiAgICBjb2xvcjpyZWQ7XG4gICAgcGFkZGluZzogMWVtO1xuICBgLnJlcGxhY2UoLzsvZywgJyFpbXBvcnRhbnQ7Jyk7XG4gIGVsLnRleHRDb250ZW50ID0gYCR7SVNfRklSRUZPWCAmJiBlcnIubWVzc2FnZSB8fCAnJ31cXG4ke2Vyci5zdGFjayB8fCAnJ31gLnRyaW0oKSB8fCBlcnI7XG4gIGVsLm9uY2xpY2sgPSAoKSA9PiBnZXRTZWxlY3Rpb24oKS5zZXRCYXNlQW5kRXh0ZW50KGVsLCAwLCBlbCwgMSk7XG4gIChkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd01lc3NhZ2UobWVzc2FnZSkge1xuICBjb25zdCBtb2RhbCA9IE1vZGFsLnNob3coKCkgPT4gaChNZXNzYWdlLCB7XG4gICAgbWVzc2FnZSxcbiAgICBvbkRpc21pc3MoKSB7XG4gICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgbWVzc2FnZS5vbkRpc21pc3M/LigpO1xuICAgIH0sXG4gIH0pLCB7XG4gICAgdHJhbnNpdGlvbjogJ2luLW91dCcsXG4gIH0pO1xuICBpZiAobWVzc2FnZS5idXR0b25zKSB7XG4gICAgLy8gVE9ETzogaW1wbGVtZW50IHByb3BlciBrZXlib2FyZCBuYXZpZ2F0aW9uLCBhdXRvZm9jdXMsIGFuZCBFbnRlci9Fc2MgaW4gTW9kYWwgbW9kdWxlXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZsLW1vZGFsIGJ1dHRvbicpLmZvY3VzKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy52bC1tb2RhbCAubW9kYWwtY29udGVudDpob3ZlcicpKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0sIG1lc3NhZ2UudGltZW91dCB8fCAyMDAwKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgbW9kYWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBjZmdcbiAqIEBwYXJhbSB7c3RyaW5nIHwgZmFsc2V9IFtjZmcuaW5wdXQ9ZmFsc2VdIGlmIG5vdCBmYWxzZSwgc2hvd3MgYSB0ZXh0IGlucHV0IHdpdGggdGhpcyBzdHJpbmdcbiAqIEBwYXJhbSB7P09iamVjdHxmYWxzZX0gW2NmZy5va10gYWRkaXRpb25hbCBwcm9wcyBmb3IgdGhlIE9rIGJ1dHRvbiBvciBgZmFsc2VgIHRvIHJlbW92ZSBpdFxuICogQHBhcmFtIHs/T2JqZWN0fGZhbHNlfSBbY2ZnLmNhbmNlbF0gc2FtZSBmb3IgdGhlIENhbmNlbCBidXR0b25cbiAqIEByZXR1cm4ge1Byb21pc2U8P3N0cmluZ3xib29sZWFuPn1cbiAqICAgYGlucHV0YCBpcyBmYWxzZTogPGJvb2xlYW4+IGkuZS4gdHJ1ZSBvbiBPaywgZmFsc2Ugb3RoZXJ3aXNlO1xuICogICBgaW5wdXRgIGlzIHN0cmluZzogPD9zdHJpbmc+IGkuZS4gc3RyaW5nIG9uIE9rLCBudWxsIG90aGVyd2lzZTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dDb25maXJtYXRpb24odGV4dCwgeyBvaywgY2FuY2VsLCBpbnB1dCA9IGZhbHNlIH0gPSB7fSkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgY29uc3QgaGFzSW5wdXQgPSBpbnB1dCAhPT0gZmFsc2U7XG4gICAgY29uc3Qgb25DYW5jZWwgPSAoKSA9PiByZXNvbHZlKGhhc0lucHV0ID8gbnVsbCA6IGZhbHNlKTtcbiAgICBjb25zdCBvbk9rID0gdmFsID0+IHJlc29sdmUoIWhhc0lucHV0IHx8IHZhbCk7XG4gICAgc2hvd01lc3NhZ2Uoe1xuICAgICAgaW5wdXQsXG4gICAgICB0ZXh0LFxuICAgICAgYnV0dG9uczogW1xuICAgICAgICBvayAhPT0gZmFsc2UgJiYgeyB0ZXh0OiBpMThuKCdidXR0b25PSycpLCBvbkNsaWNrOiBvbk9rLCAuLi5vayB9LFxuICAgICAgICBjYW5jZWwgIT09IGZhbHNlICYmIHsgdGV4dDogaTE4bignYnV0dG9uQ2FuY2VsJyksIG9uQ2xpY2s6IG9uQ2FuY2VsLCAuLi5jYW5jZWwgfSxcbiAgICAgIF0uZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgb25CYWNrZHJvcENsaWNrOiBvbkNhbmNlbCxcbiAgICAgIG9uRGlzbWlzczogb25DYW5jZWwsIC8vIEVzYyBrZXlcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKiBAcmV0dXJucyB7P251bWJlcn0gTnVtYmVyIG9mIGxpbmVzICsgMSBpZiB0aGUgbGFzdCBsaW5lIGlzIG5vdCBlbXB0eSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGNSb3dzKHZhbCkge1xuICByZXR1cm4gdmFsICYmIChcbiAgICB2YWwubWF0Y2goLyQvZ20pLmxlbmd0aFxuICAgICAgKyAhdmFsLmVuZHNXaXRoKCdcXG4nKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKEFwcCwgZWwpIHtcbiAgY29uc3QgYXBwID0gY3JlYXRlQXBwKEFwcCk7XG4gIE9iamVjdC5hc3NpZ24oYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLCB7XG4gICAgaTE4bixcbiAgICBjYWxjUm93cyxcbiAgfSk7XG4gIGlmICghZWwpIHtcbiAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKGVsKTtcbiAgfVxuICBhcHAubW91bnQoZWwpO1xuICByZXR1cm4gYXBwO1xufVxuXG4vKipcbiAqIEZvY3VzZXMgdGhlIGZpcnN0IGVsZW1lbnQgd2l0aCBgZm9jdXNtZWAgYXR0cmlidXRlIG9yIHJvb3QsIHdoaWNoIGVuYWJsZXMga2V5Ym9hcmQgc2Nyb2xsaW5nLlxuICogTm90IHVzaW5nIGBhdXRvZm9jdXNgIHRvIGF2b2lkIHdhcm5pbmdzIGluIGNvbnNvbGUgb24gcGFnZSBsb2FkLlxuICogQSBjaGlsZCBjb21wb25lbnQgc2hvdWxkIHVzZSBuZXh0VGljayB0byBjaGFuZ2UgZm9jdXMsIHdoaWNoIHJ1bnMgbGF0ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb2N1c01lKGVsKSB7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBlbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tmb2N1c21lXScpIHx8IGVsO1xuICAgIGVsLnRhYkluZGV4ID0gLTE7XG4gICAgZWwuZm9jdXMoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHZGb2N1c0ZhY3RvcnkoKSB7XG4gIGNvbnN0IGhhbmRsZSA9IChlbCwgdmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBvbGRWYWx1ZSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlKSB7XG4gICAgICBlbC50YWJJbmRleCA9IC0xO1xuICAgICAgZWwuZm9jdXMoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgbW91bnRlZChlbCwgYmluZGluZykge1xuICAgICAgaGFuZGxlKGVsLCBiaW5kaW5nLnZhbHVlLCB7fSk7XG4gICAgfSxcbiAgICB1cGRhdGVkKGVsLCBiaW5kaW5nKSB7XG4gICAgICBoYW5kbGUoZWwsIGJpbmRpbmcudmFsdWUsIGJpbmRpbmcub2xkVmFsdWUpO1xuICAgIH0sXG4gIH07XG59XG4vKipcbiAqIFVzYWdlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gRm9jdXMgb24gbW91bnRlZCAtLT5cbiAqIDxkaXYgdi1mb2N1cz4uLi48L2Rpdj5cbiAqXG4gKiA8IS0tIEZvY3VzIHdoZW5ldmVyIGB2YWx1ZWAgYmVjb21lcyB0cnV0aHkgLS0+XG4gKiA8ZGl2IHYtZm9jdXM9XCJ2YWx1ZVwiPi4uLjwvZGl2PlxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCB2Rm9jdXMgPSB2Rm9jdXNGYWN0b3J5KCk7XG4iLCJpbXBvcnQgb3B0aW9ucyBmcm9tICcuLi8uLi9vcHRpb25zJztcbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5sZXQgc3R5bGU7XG5sZXQgc3R5bGVUaGVtZTtcbi8qKiBAdHlwZSB7Q1NTTWVkaWFSdWxlW119ICovXG5sZXQgZGFya01lZGlhUnVsZXM7XG5sZXQgbG9jYWxTdG9yYWdlID0ge307XG4vKiBBY2Nlc3NpbmcgYGxvY2FsU3RvcmFnZWAgaW4gbWF5IHRocm93IGluIFByaXZhdGUgQnJvd3NpbmcgbW9kZSBvciBpZiBkb20uc3RvcmFnZSBpcyBkaXNhYmxlZC5cbiAqIFNpbmNlIGl0IGFsbG93cyBvYmplY3QtbGlrZSBhY2Nlc3MsIHdlJ2xsIG1hcCBpdCB0byBhIHZhcmlhYmxlIHdpdGggYSBmYWxsYmFjayB0byBhIGR1bW15LiAqL1xudHJ5IHtcbiAgKGxvY2FsU3RvcmFnZSA9IGdsb2JhbC5sb2NhbFN0b3JhZ2UgfHwge30pLmZvbztcbn0gY2F0Y2ggKGUpIHtcbiAgLyoga2VlcCB0aGUgZHVtbXkgb2JqZWN0ICovXG59XG5cbmNvbnN0IENBQ0hFX0tFWSA9ICdjYWNoZUN1c3RvbUNTUyc7XG5cbmNvbnN0IHNldFN0eWxlID0gKGNzcywgZWxlbSkgPT4ge1xuICBpZiAoY3NzICYmICFlbGVtKSB7XG4gICAgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0pO1xuICB9XG4gIGlmICgoY3NzIHx8IGVsZW0pICYmIGVsZW0udGV4dENvbnRlbnQgIT09IGNzcykge1xuICAgIGVsZW0udGV4dENvbnRlbnQgPSBjc3M7XG4gIH1cbiAgcmV0dXJuIGVsZW07XG59O1xuXG5jb25zdCBzZXRVaVRoZW1lID0gdGhlbWUgPT4ge1xuICBjb25zdCBkYXJrVGhlbWVDb25kaXRpb24gPSAnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSc7XG4gIGNvbnN0IG1lZGlhVGV4dCA9IHRoZW1lID09PSAnZGFyaycgJiYgJ3NjcmVlbidcbiAgICB8fCB0aGVtZSA9PT0gJ2xpZ2h0JyAmJiAnbm90IGFsbCdcbiAgICB8fCBkYXJrVGhlbWVDb25kaXRpb247XG4gIGlmICghZGFya01lZGlhUnVsZXMpIHtcbiAgICBkYXJrTWVkaWFSdWxlcyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc2hlZXQgb2YgZG9jdW1lbnQuc3R5bGVTaGVldHMpIHtcbiAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBzaGVldC5jc3NSdWxlcykge1xuICAgICAgICBpZiAocnVsZS5jb25kaXRpb25UZXh0Py5pbmNsdWRlcyhkYXJrVGhlbWVDb25kaXRpb24pKSB7XG4gICAgICAgICAgZGFya01lZGlhUnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBkYXJrTWVkaWFSdWxlcy5mb3JFYWNoKHJ1bGUgPT4geyBydWxlLm1lZGlhLm1lZGlhVGV4dCA9IG1lZGlhVGV4dDsgfSk7XG59O1xuXG5zdHlsZSA9IHNldFN0eWxlKGxvY2FsU3RvcmFnZVtDQUNIRV9LRVldIHx8ICcnKTtcblxub3B0aW9ucy5ob29rKChjaGFuZ2VzKSA9PiB7XG4gIGxldCB2O1xuICBpZiAoKHYgPSBjaGFuZ2VzLmVkaXRvclRoZW1lKSAhPSBudWxsXG4gICYmICFnbG9iYWwubG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aCgnL3BvcHVwJykpIHtcbiAgICBzdHlsZVRoZW1lID0gc2V0U3R5bGUodiwgc3R5bGVUaGVtZSk7XG4gIH1cbiAgaWYgKCh2ID0gY2hhbmdlcy51aVRoZW1lKSAhPSBudWxsKSB7XG4gICAgc2V0VWlUaGVtZSh2KTtcbiAgfVxuICBpZiAoKHYgPSBjaGFuZ2VzLmN1c3RvbUNTUykgIT0gbnVsbCkge1xuICAgIHN0eWxlID0gc2V0U3R5bGUodiwgc3R5bGUpO1xuICAgIGlmICh2ICYmIGxvY2FsU3RvcmFnZVtDQUNIRV9LRVldICE9PSB2KSB7XG4gICAgICBsb2NhbFN0b3JhZ2VbQ0FDSEVfS0VZXSA9IHY7XG4gICAgfSBlbHNlIGlmICghdiAmJiBDQUNIRV9LRVkgaW4gbG9jYWxTdG9yYWdlKSB7XG4gICAgICBkZWxldGUgbG9jYWxTdG9yYWdlW0NBQ0hFX0tFWV07XG4gICAgfVxuICB9XG59KTtcblxuaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50KSB7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCd0b3VjaCcpO1xufVxuIiwiLy8gU0FGRVRZIFdBUk5JTkchIEV4cG9ydHMgdXNlZCBieSBgaW5qZWN0ZWRgIG11c3QgbWFrZSA6OnNhZmUoKSBjYWxscyBhbmQgdXNlIF9fcHJvdG9fXzpudWxsXG5cbmltcG9ydCB7IGJyb3dzZXIgfSBmcm9tICdAL2NvbW1vbi9jb25zdHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaTE4bihuYW1lLCBhcmdzKSB7XG4gIHJldHVybiBicm93c2VyLmkxOG4uZ2V0TWVzc2FnZShuYW1lLCBhcmdzKSB8fCBuYW1lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcocGFyYW0pIHtcbiAgaWYgKHBhcmFtID09IG51bGwpIHJldHVybiAnJztcbiAgcmV0dXJuIGAke3BhcmFtfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyID0gdG9TdHJpbmcpIHtcbiAgY29uc3QgY2FjaGVNYXAgPSB7fTtcbiAgZnVuY3Rpb24gbWVtb2l6ZWQoLi4uYXJncykge1xuICAgIC8vIFVzZWQgaW4gc2FmZSBjb250ZXh0XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgY29uc3Qga2V5ID0gcmVzb2x2ZXIoLi4uYXJncyk7XG4gICAgbGV0IGNhY2hlID0gY2FjaGVNYXBba2V5XTtcbiAgICBpZiAoIWNhY2hlKSB7XG4gICAgICBjYWNoZSA9IHtcbiAgICAgICAgdmFsdWU6IGZ1bmMuYXBwbHkodGhpcywgYXJncyksXG4gICAgICB9O1xuICAgICAgY2FjaGVNYXBba2V5XSA9IGNhY2hlO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGUudmFsdWU7XG4gIH1cbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgdGltZSkge1xuICBsZXQgc3RhcnRUaW1lO1xuICBsZXQgdGltZXI7XG4gIGxldCBjYWxsYmFjaztcbiAgdGltZSA9IE1hdGgubWF4KDAsICt0aW1lIHx8IDApO1xuICBmdW5jdGlvbiBjaGVja1RpbWUoKSB7XG4gICAgdGltZXIgPSBudWxsO1xuICAgIGlmIChwZXJmb3JtYW5jZS5ub3coKSA+PSBzdGFydFRpbWUpIGNhbGxiYWNrKCk7XG4gICAgZWxzZSBjaGVja1RpbWVyKCk7XG4gIH1cbiAgZnVuY3Rpb24gY2hlY2tUaW1lcigpIHtcbiAgICBpZiAoIXRpbWVyKSB7XG4gICAgICBjb25zdCBkZWx0YSA9IHN0YXJ0VGltZSAtIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGNoZWNrVGltZSwgZGVsdGEpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkZWJvdW5jZWRGdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCkgKyB0aW1lO1xuICAgIGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIGNoZWNrVGltZXIoKTtcbiAgfVxuICByZXR1cm4gZGVib3VuY2VkRnVuY3Rpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB0aW1lKSB7XG4gIGxldCBsYXN0VGltZSA9IDA7XG4gIHRpbWUgPSBNYXRoLm1heCgwLCArdGltZSB8fCAwKTtcbiAgZnVuY3Rpb24gdGhyb3R0bGVkRnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGlmIChsYXN0VGltZSArIHRpbWUgPCBub3cpIHtcbiAgICAgIGxhc3RUaW1lID0gbm93O1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRocm90dGxlZEZ1bmN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21TdHJpbmcobWluTGVuZ3RoID0gMTAsIG1heExlbmd0aCA9IDApIHtcbiAgZm9yIChsZXQgcm5kID0gJyc7IChybmQgKz0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMikpOykge1xuICAgIGlmIChybmQubGVuZ3RoID49IG1pbkxlbmd0aCkgcmV0dXJuIG1heExlbmd0aCA/IHJuZC5zbGljZSgwLCBtYXhMZW5ndGgpIDogcm5kO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmlxSWQocHJlZml4ID0gJ1ZNJykge1xuICByZXR1cm4gcHJlZml4ICsgZ2V0UmFuZG9tU3RyaW5nKCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEFycmF5fSBidWZcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0XVxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGEgYmluYXJ5IHN0cmluZyBpLmUuIG9uZSBieXRlIHBlciBjaGFyYWN0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcjJzdHJpbmcoYnVmLCBvZmZzZXQgPSAwLCBsZW5ndGggPSAxZTk5KSB7XG4gIC8vIFRoZSBtYXggbnVtYmVyIG9mIGFyZ3VtZW50cyB2YXJpZXMgYmV0d2VlbiBKUyBlbmdpbmVzIGJ1dCBpdCdzID4zMmsgc28gd2UncmUgc2FmZVxuICBjb25zdCBzbGljZVNpemUgPSA4MTkyO1xuICBjb25zdCBzbGljZXMgPSBbXTtcbiAgY29uc3QgYXJyYXlMZW4gPSBidWYubGVuZ3RoOyAvLyBwcmVzZW50IG9uIFVpbnQ4QXJyYXkvQXJyYXlcbiAgY29uc3QgZW5kID0gTWF0aC5taW4oYXJyYXlMZW4gfHwgYnVmLmJ5dGVMZW5ndGgsIG9mZnNldCArIGxlbmd0aCk7XG4gIGNvbnN0IG5lZWRzU2xpY2luZyA9IGFycmF5TGVuID09IG51bGwgfHwgb2Zmc2V0IHx8IGVuZCA+IHNsaWNlU2l6ZTtcbiAgZm9yICg7IG9mZnNldCA8IGVuZDsgb2Zmc2V0ICs9IHNsaWNlU2l6ZSkge1xuICAgIHNsaWNlcy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxcbiAgICAgIG5lZWRzU2xpY2luZ1xuICAgICAgICA/IG5ldyBVaW50OEFycmF5KGJ1Ziwgb2Zmc2V0LCBNYXRoLm1pbihzbGljZVNpemUsIGVuZCAtIG9mZnNldCkpXG4gICAgICAgIDogYnVmKSk7XG4gIH1cbiAgcmV0dXJuIHNsaWNlcy5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBGYXN0ZXIgdGhhbiBidWZmZXIyc3RyaW5nK2J0b2E6IDJ4IGluIENocm9tZSwgMTB4IGluIEZGXG4gKiBAcGFyYW0ge0Jsb2J9IGJsb2JcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0XVxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdXG4gKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IGJhc2U2NC1lbmNvZGVkIGNvbnRlbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBibG9iMmJhc2U2NChibG9iLCBvZmZzZXQgPSAwLCBsZW5ndGggPSAxZTk5KSB7XG4gIGlmIChvZmZzZXQgfHwgbGVuZ3RoIDwgYmxvYi5zaXplKSB7XG4gICAgYmxvYiA9IGJsb2Iuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpO1xuICB9XG4gIHJldHVybiAhYmxvYi5zaXplID8gJycgOiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xuICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSByZWFkZXIucmVzdWx0O1xuICAgICAgcmVzb2x2ZShyZXMuc2xpY2UocmVzLmluZGV4T2YoJywnKSArIDEpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFVcmkydGV4dCh1cmwpIHtcbiAgY29uc3QgaSA9IHVybC5pbmRleE9mKCcsJyk7IC8vIGEgbm9uLWJhc2U2NCBkYXRhOiB1cmkgbWF5IGhhdmUgbWFueSBgLGBcbiAgY29uc3QgbWV0YSA9IHVybC5zbGljZSgwLCBpKTtcbiAgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybC5zbGljZShpICsgMSkpO1xuICB1cmwgPSAvKF58OylcXHMqYmFzZTY0XFxzKig7fCQpLy50ZXN0KG1ldGEpID8gYXRvYih1cmwpIDogdXJsO1xuICByZXR1cm4gL1tcXHg4MC1cXHhGRl0vLnRlc3QodXJsKVxuICAgID8gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHN0cmluZzJ1aW50OGFycmF5KHVybCkpXG4gICAgOiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmcydWludDhhcnJheShzdHIpIHtcbiAgY29uc3QgbGVuID0gc3RyLmxlbmd0aDtcbiAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgYXJyYXlbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmNvbnN0IFZFUlNJT05fUkUgPSAvXiguKj8pLShbLS4wLTlhLXpdKyl8JC9pO1xuY29uc3QgRElHSVRTX1JFID0gL15cXGQrJC87IC8vIHVzaW5nIHJlZ2V4cCB0byBhdm9pZCArJzFlMicgYmVpbmcgcGFyc2VkIGFzIDEwMFxuXG4vKiogQHJldHVybiAtMSB8IDAgfCAxICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVZlcnNpb24odmVyMSwgdmVyMikge1xuICAvLyBVc2VkIGluIHNhZmUgY29udGV4dFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgY29uc3QgWywgbWFpbjEgPSB2ZXIxIHx8ICcnLCBwcmUxXSA9IFZFUlNJT05fUkUuZXhlYyh2ZXIxKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGNvbnN0IFssIG1haW4yID0gdmVyMiB8fCAnJywgcHJlMl0gPSBWRVJTSU9OX1JFLmV4ZWModmVyMik7XG4gIGNvbnN0IGRlbHRhID0gY29tcGFyZVZlcnNpb25DaHVuayhtYWluMSwgbWFpbjIpXG4gICAgfHwgIXByZTEgLSAhcHJlMiAvLyAxLjIuMy1wcmUtcmVsZWFzZSBpcyBsZXNzIHRoYW4gMS4yLjNcbiAgICB8fCBwcmUxICYmIGNvbXBhcmVWZXJzaW9uQ2h1bmsocHJlMSwgcHJlMiwgdHJ1ZSk7IC8vIGlmIHByZTEgaXMgcHJlc2VudCwgcHJlMiBpcyB0b29cbiAgcmV0dXJuIGRlbHRhIDwgMCA/IC0xIDogKyEhZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVWZXJzaW9uQ2h1bmsodmVyMSwgdmVyMiwgaXNTZW12ZXJNb2RlKSB7XG4gIGNvbnN0IHBhcnRzMSA9IHZlcjEuc3BsaXQoJy4nKTtcbiAgY29uc3QgcGFydHMyID0gdmVyMi5zcGxpdCgnLicpO1xuICBjb25zdCBsZW4xID0gcGFydHMxLmxlbmd0aDtcbiAgY29uc3QgbGVuMiA9IHBhcnRzMi5sZW5ndGg7XG4gIGNvbnN0IGxlbiA9IChpc1NlbXZlck1vZGUgPyBNYXRoLm1pbiA6IE1hdGgubWF4KShsZW4xLCBsZW4yKTtcbiAgbGV0IGRlbHRhO1xuICBmb3IgKGxldCBpID0gMDsgIWRlbHRhICYmIGkgPCBsZW47IGkgKz0gMSkge1xuICAgIGNvbnN0IGEgPSBwYXJ0czFbaV07XG4gICAgY29uc3QgYiA9IHBhcnRzMltpXTtcbiAgICBpZiAoaXNTZW12ZXJNb2RlKSB7XG4gICAgICBkZWx0YSA9IERJR0lUU19SRS50ZXN0KGEpICYmIERJR0lUU19SRS50ZXN0KGIpXG4gICAgICAgID8gYSAtIGJcbiAgICAgICAgOiBhID4gYiB8fCBhIDwgYiAmJiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsdGEgPSAocGFyc2VJbnQoYSwgMTApIHx8IDApIC0gKHBhcnNlSW50KGIsIDEwKSB8fCAwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlbHRhIHx8IGlzU2VtdmVyTW9kZSAmJiAobGVuMSAtIGxlbjIpO1xufVxuXG5jb25zdCB1bml0cyA9IFtcbiAgWydtaW4nLCA2MF0sXG4gIFsnaCcsIDI0XSxcbiAgWydkJywgMTAwMCwgMzY1XSxcbiAgWyd5J10sXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFRpbWUoZHVyYXRpb24pIHtcbiAgZHVyYXRpb24gLz0gNjAgKiAxMDAwO1xuICBjb25zdCB1bml0SW5mbyA9IHVuaXRzLmZpbmQoKGl0ZW0pID0+IHtcbiAgICBjb25zdCBtYXggPSBpdGVtWzFdO1xuICAgIGlmICghbWF4IHx8IGR1cmF0aW9uIDwgbWF4KSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zdCBzdGVwID0gaXRlbVsyXSB8fCBtYXg7XG4gICAgZHVyYXRpb24gLz0gc3RlcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gYCR7ZHVyYXRpb24gfCAwfSR7dW5pdEluZm9bMF19YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJ5dGVMZW5ndGgobGVuLCBub0J5dGVzKSB7XG4gIGlmICghbGVuKSByZXR1cm4gJyc7XG4gIGlmIChsZW4gPCAxMDI0ICYmICFub0J5dGVzKSByZXR1cm4gYCR7bGVufSBCYDtcbiAgaWYgKChsZW4gLz0gMTAyNCkgPCAxMDI0KSByZXR1cm4gYCR7TWF0aC5yb3VuZChsZW4pfSBrYDtcbiAgcmV0dXJuIGAkeysobGVuIC8gMTAyNCkudG9GaXhlZCgxKX0gTWA7XG59XG5cbi8vIFVzZWQgYnkgYGluamVjdGVkYFxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvYmosIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVBcnJheShkYXRhKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtkYXRhXTtcbn1cblxuY29uc3QgYmluYXJ5VHlwZXMgPSBbXG4gICdibG9iJyxcbiAgJ2FycmF5YnVmZmVyJyxcbl07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtWTVJlcS5PcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJuIHtQcm9taXNlPFZNUmVxLlJlc3BvbnNlPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RMb2NhbEZpbGUodXJsLCBvcHRpb25zID0ge30pIHtcbiAgLy8gb25seSBHRVQgbWV0aG9kIGlzIGFsbG93ZWQgZm9yIGxvY2FsIGZpbGVzXG4gIC8vIGhlYWRlcnMgaXMgbWVhbmluZ2xlc3NcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAvKiogQHR5cGUge1ZNUmVxLlJlc3BvbnNlfSAqL1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgZ2V0OiBuYW1lID0+IHhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdCB7IFtrUmVzcG9uc2VUeXBlXTogcmVzcG9uc2VUeXBlIH0gPSBvcHRpb25zO1xuICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIGlmIChiaW5hcnlUeXBlcy5pbmNsdWRlcyhyZXNwb25zZVR5cGUpKSB4aHJba1Jlc3BvbnNlVHlwZV0gPSByZXNwb25zZVR5cGU7XG4gICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIC8vIHN0YXR1cyBmb3IgYGZpbGU6YCBwcm90b2NvbCB3aWxsIGFsd2F5cyBiZSBgMGBcbiAgICAgIHJlc3VsdC5zdGF0dXMgPSB4aHIuc3RhdHVzIHx8IDIwMDtcbiAgICAgIHJlc3VsdC5kYXRhID0geGhyW2JpbmFyeVR5cGVzLmluY2x1ZGVzKHJlc3BvbnNlVHlwZSkgPyBrUmVzcG9uc2UgOiBrUmVzcG9uc2VUZXh0XTtcbiAgICAgIGlmIChyZXNwb25zZVR5cGUgPT09ICdqc29uJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3VsdC5kYXRhID0gSlNPTi5wYXJzZShyZXN1bHQuZGF0YSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIC8vIGlnbm9yZSBpbnZhbGlkIEpTT05cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPiAzMDApIHtcbiAgICAgICAgcmVqZWN0KHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9ICgpID0+IHtcbiAgICAgIHJlc3VsdC5zdGF0dXMgPSAtMTtcbiAgICAgIHJlamVjdChyZXN1bHQpO1xuICAgIH07XG4gICAgeGhyLnNlbmQoKTtcbiAgfSk7XG59XG5cbmNvbnN0IGlzTG9jYWxVcmxSZSA9IHJlYC9eKFxuICBmaWxlOlxcL1xcL3xcbiAgYWJvdXQ6fFxuICBkYXRhOnxcbiAgaHR0cHM/OlxcL1xcL1xuICAgIChbXkAvXSpAKT9cbiAgICAoXG4gICAgICBsb2NhbGhvc3R8XG4gICAgICAxMjdcXC4wXFwuMFxcLjF8XG4gICAgICAoMTkyXFwuMTY4fDE3MlxcLjE2fDEwXFwuMClcXC5cXGQrXFwuXFxkK3xcbiAgICAgIFxcWyg6OjF8KGZlODB8ZmMwMCk6OlsuOjAtOWEtZl0rKV18XG4gICAgICBbXi86XStcXC4odGVzdHxleGFtcGxlfGludmFsaWR8bG9jYWxob3N0KVxuICAgIClcbiAgICAoOlxcZCt8XFwvfCQpXG4pL2l4YDtcbmV4cG9ydCBjb25zdCBpc0RhdGFVcmkgPSB1cmwgPT4gL15kYXRhOi9pLnRlc3QodXJsKTtcbmV4cG9ydCBjb25zdCBpc0h0dHBPckh0dHBzID0gdXJsID0+IC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QodXJsKTtcbmV4cG9ydCBjb25zdCBpc1JlbW90ZSA9IHVybCA9PiB1cmwgJiYgIWlzTG9jYWxVcmxSZS50ZXN0KGRlY29kZVVSSSh1cmwpKTtcblxuLyoqXG4gKiBNYWtlIGEgcmVxdWVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7Vk1SZXEuT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybiB7UHJvbWlzZTxWTVJlcS5SZXNwb25zZT59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KHVybCwgb3B0aW9ucyA9IHt9KSB7XG4gIC8vIGZldGNoIGRvZXMgbm90IHN1cHBvcnQgbG9jYWwgZmlsZVxuICBpZiAodXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSkgcmV0dXJuIHJlcXVlc3RMb2NhbEZpbGUodXJsLCBvcHRpb25zKTtcbiAgY29uc3QgeyBib2R5LCBoZWFkZXJzLCBba1Jlc3BvbnNlVHlwZV06IHJlc3BvbnNlVHlwZSB9ID0gb3B0aW9ucztcbiAgY29uc3QgaXNCb2R5T2JqID0gYm9keSAmJiBib2R5Ojooe30pLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICBjb25zdCBbLCBzY2hlbWUsIGF1dGgsIGhvc3RuYW1lLCB1cmxUYWlsXSA9IHVybC5tYXRjaCgvXihbLVxcd10rOlxcL1xcLykoW15AL10qQCk/KFteL10qKSguKil8JC8pO1xuICAvLyBBdm9pZGluZyBMSU5LIGhlYWRlciBwcmVmZXRjaCBvZiBqcyBpbiA0MDQgcGFnZXMgd2hpY2ggY2F1c2UgQ1NQIHZpb2xhdGlvbnMgaW4gb3VyIGNvbnNvbGVcbiAgLy8gVE9ETzogdG9nZ2xlIGEgd2ViUmVxdWVzdC9kZWNsYXJhdGl2ZU5ldFJlcXVlc3QgcnVsZSB0byBzdHJpcCBMSU5LIGhlYWRlcnNcbiAgY29uc3QgYWNjZXB0ID0gKGhvc3RuYW1lID09PSAnZ3JlYXN5Zm9yay5vcmcnIHx8IGhvc3RuYW1lID09PSAnc2xlYXp5Zm9yay5vcmcnKVxuICAgICYmICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCB0ZXh0L3BsYWluLCB0ZXh0L2Nzcyc7XG4gIGNvbnN0IGluaXQgPSBPYmplY3QuYXNzaWduKHtcbiAgICBjYWNoZTogaXNSZW1vdGUodXJsKSA/IHVuZGVmaW5lZCA6ICduby1jYWNoZScsXG4gIH0sIG9wdGlvbnMsIHtcbiAgICBib2R5OiBpc0JvZHlPYmogPyBKU09OLnN0cmluZ2lmeShib2R5KSA6IGJvZHksXG4gICAgaGVhZGVyczogaXNCb2R5T2JqIHx8IGFjY2VwdCB8fCBhdXRoXG4gICAgICA/IE9iamVjdC5hc3NpZ24oe30sXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGlzQm9keU9iaiAmJiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYXV0aCAmJiB7IEF1dGhvcml6YXRpb246IGBCYXNpYyAke2J0b2EoZGVjb2RlVVJJQ29tcG9uZW50KGF1dGguc2xpY2UoMCwgLTEpKSl9YCB9LFxuICAgICAgICBhY2NlcHQgJiYgeyBhY2NlcHQgfSlcbiAgICAgIDogaGVhZGVycyxcbiAgfSk7XG4gIGxldCByZXN1bHQgPSB7IHVybCwgc3RhdHVzOiAtMSB9O1xuICB0cnkge1xuICAgIGNvbnN0IHVybE5vQXV0aCA9IGF1dGggPyBzY2hlbWUgKyBob3N0bmFtZSArIHVybFRhaWwgOiB1cmw7XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHVybE5vQXV0aCwgaW5pdCk7XG4gICAgY29uc3QgbG9hZE1ldGhvZCA9IHtcbiAgICAgIGFycmF5YnVmZmVyOiAnYXJyYXlCdWZmZXInLFxuICAgICAgYmxvYjogJ2Jsb2InLFxuICAgICAganNvbjogJ2pzb24nLFxuICAgIH1bcmVzcG9uc2VUeXBlXSB8fCAndGV4dCc7XG4gICAgLy8gc3RhdHVzIGZvciBgZmlsZTpgIHByb3RvY29sIHdpbGwgYWx3YXlzIGJlIGAwYFxuICAgIHJlc3VsdC5zdGF0dXMgPSByZXNwLnN0YXR1cyB8fCAyMDA7XG4gICAgcmVzdWx0LmhlYWRlcnMgPSByZXNwLmhlYWRlcnM7XG4gICAgcmVzdWx0LmRhdGEgPSBhd2FpdCByZXNwW2xvYWRNZXRob2RdKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oZXJyLCByZXN1bHQpO1xuICAgIHJlc3VsdC5tZXNzYWdlICs9ICdcXG4nICsgdXJsO1xuICB9XG4gIGlmIChyZXN1bHQuc3RhdHVzIDwgMCB8fCByZXN1bHQuc3RhdHVzID4gMzAwKSB0aHJvdyByZXN1bHQ7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIFVzZWQgYnkgYGluamVjdGVkYFxuY29uc3QgU0lNUExFX1ZBTFVFX1RZUEUgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgc3RyaW5nOiAncycsXG4gIG51bWJlcjogJ24nLFxuICBib29sZWFuOiAnYicsXG59O1xuXG4vLyBVc2VkIGJ5IGBpbmplY3RlZGBcbmV4cG9ydCBmdW5jdGlvbiBkdW1wU2NyaXB0VmFsdWUodmFsdWUsIGpzb25EdW1wID0gSlNPTi5zdHJpbmdpZnkpIHtcbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzaW1wbGUgPSBTSU1QTEVfVkFMVUVfVFlQRVt0eXBlb2YgdmFsdWVdO1xuICAgIHJldHVybiBgJHtzaW1wbGUgfHwgJ28nfSR7c2ltcGxlID8gdmFsdWUgOiBqc29uRHVtcCh2YWx1ZSl9YDtcbiAgfVxufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL25vU291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIudmwtZHJvcGRvd24ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4udmwtZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4udmwtZHJvcGRvd24tbWVudSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgei1pbmRleDogMTA7XFxufVxcbi52bC1kcm9wZG93bi1yaWdodCAudmwtZHJvcGRvd24tbWVudSB7XFxuICAgICAgcmlnaHQ6IDA7XFxufVxcbi52bC1kcm9wZG93bi1kb3duIC52bC1kcm9wZG93bi1tZW51IHtcXG4gICAgICB0b3A6IDEwMCU7XFxuICAgICAgbWFyZ2luLXRvcDogNXB4O1xcbn1cXG4udmwtZHJvcGRvd24tdXAgLnZsLWRyb3Bkb3duLW1lbnUge1xcbiAgICAgIGJvdHRvbTogMTAwJTtcXG4gICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnZsLW1vZGFsIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIHotaW5kZXg6IDEwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4udmwtbW9kYWwtYmFja2Ryb3Age1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwuNCk7XFxuICAgIHotaW5kZXg6IC0xO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvbm9Tb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXG4gIC0tdmwtdG9vbHRpcC1iZzogcmdiYSgwLDAsMCwuOCk7XFxuICAtLXZsLXRvb2x0aXAtbWF4LXdpZHRoOiAyNTBweDtcXG4gIC0tdmwtdG9vbHRpcC1hcnJvdy13aWR0aDogNHB4O1xcbiAgLS12bC10b29sdGlwLWFycm93LWhlaWdodDogNnB4O1xcbn1cXG4udmwtdG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb2xvcjogd2hpdGU7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBsaW5lLWhlaWdodDogMS40O1xcbiAgei1pbmRleDogMTAwO1xcbn1cXG4udmwtdG9vbHRpcCA+IGkge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGNvbG9yOiB2YXIoLS12bC10b29sdGlwLWJnKTtcXG59XFxuLnZsLXRvb2x0aXAgPiAudmwtdG9vbHRpcC13cmFwIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4udmwtdG9vbHRpcC13cmFwIHtcXG4gICAgd2lkdGg6IHZhcigtLXZsLXRvb2x0aXAtbWF4LXdpZHRoKTtcXG59XFxuLnZsLXRvb2x0aXAtY29udGVudCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgcGFkZGluZzogOHB4O1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS12bC10b29sdGlwLWJnKTtcXG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG4udmwtdG9vbHRpcC10b3AgPiBpLCAudmwtdG9vbHRpcC1ib3R0b20gPiBpIHtcXG4gICAgICBib3JkZXItbGVmdDogdmFyKC0tdmwtdG9vbHRpcC1hcnJvdy13aWR0aCkgc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiB2YXIoLS12bC10b29sdGlwLWFycm93LXdpZHRoKSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICBtYXJnaW4tbGVmdDogY2FsYyh2YXIoLS12bC10b29sdGlwLWFycm93LXdpZHRoKSotMSk7XFxufVxcbi52bC10b29sdGlwLXRvcC52bC10b29sdGlwLWFsaWduLWNlbnRlciA+IC52bC10b29sdGlwLXdyYXAsIC52bC10b29sdGlwLWJvdHRvbS52bC10b29sdGlwLWFsaWduLWNlbnRlciA+IC52bC10b29sdGlwLXdyYXAge1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGNhbGModmFyKC0tdmwtdG9vbHRpcC1tYXgtd2lkdGgpLy0yKTtcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnZsLXRvb2x0aXAtdG9wLnZsLXRvb2x0aXAtYWxpZ24tc3RhcnQgPiAudmwtdG9vbHRpcC13cmFwLCAudmwtdG9vbHRpcC1ib3R0b20udmwtdG9vbHRpcC1hbGlnbi1zdGFydCA+IC52bC10b29sdGlwLXdyYXAge1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuLnZsLXRvb2x0aXAtdG9wLnZsLXRvb2x0aXAtYWxpZ24tZW5kID4gLnZsLXRvb2x0aXAtd3JhcCwgLnZsLXRvb2x0aXAtYm90dG9tLnZsLXRvb2x0aXAtYWxpZ24tZW5kID4gLnZsLXRvb2x0aXAtd3JhcCB7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIG1hcmdpbi1yaWdodDogLTEwcHg7XFxuICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLnZsLXRvb2x0aXAtbGVmdCA+IGksIC52bC10b29sdGlwLXJpZ2h0ID4gaSB7XFxuICAgICAgYm9yZGVyLXRvcDogdmFyKC0tdmwtdG9vbHRpcC1hcnJvdy13aWR0aCkgc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogdmFyKC0tdmwtdG9vbHRpcC1hcnJvdy13aWR0aCkgc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgbWFyZ2luLXRvcDogY2FsYyh2YXIoLS12bC10b29sdGlwLWFycm93LXdpZHRoKSotMSk7XFxufVxcbi52bC10b29sdGlwLXRvcCA+IGkge1xcbiAgICAgIHRvcDogMDtcXG4gICAgICBib3JkZXItdG9wOiB2YXIoLS12bC10b29sdGlwLWFycm93LWhlaWdodCkgc29saWQgY3VycmVudENvbG9yO1xcbn1cXG4udmwtdG9vbHRpcC10b3AgPiAudmwtdG9vbHRpcC13cmFwIHtcXG4gICAgICBib3R0b206IDA7XFxufVxcbi52bC10b29sdGlwLWJvdHRvbSA+IGkge1xcbiAgICAgIGJvdHRvbTogMDtcXG4gICAgICBib3JkZXItYm90dG9tOiB2YXIoLS12bC10b29sdGlwLWFycm93LWhlaWdodCkgc29saWQgY3VycmVudENvbG9yO1xcbn1cXG4udmwtdG9vbHRpcC1ib3R0b20gPiAudmwtdG9vbHRpcC13cmFwIHtcXG4gICAgICB0b3A6IDA7XFxufVxcbi52bC10b29sdGlwLWxlZnQgPiBpIHtcXG4gICAgICBsZWZ0OiAwO1xcbiAgICAgIGJvcmRlci1sZWZ0OiB2YXIoLS12bC10b29sdGlwLWFycm93LWhlaWdodCkgc29saWQgY3VycmVudENvbG9yO1xcbn1cXG4udmwtdG9vbHRpcC1sZWZ0ID4gLnZsLXRvb2x0aXAtd3JhcCB7XFxuICAgICAgcmlnaHQ6IDA7XFxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcbn1cXG4udmwtdG9vbHRpcC1yaWdodCA+IGkge1xcbiAgICAgIHJpZ2h0OiAwO1xcbiAgICAgIGJvcmRlci1yaWdodDogdmFyKC0tdmwtdG9vbHRpcC1hcnJvdy1oZWlnaHQpIHNvbGlkIGN1cnJlbnRDb2xvcjtcXG59XFxuLnZsLXRvb2x0aXAtcmlnaHQgPiAudmwtdG9vbHRpcC13cmFwIHtcXG4gICAgICBsZWZ0OiAwO1xcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbjpyb290IHtcXG4gIGZvbnQ6IDE0cHggbWVudTtcXG4gIC0tYmc6IHZhcigtLWZpbGwtMCk7XFxuICAtLWZnOiB2YXIoLS1maWxsLTE1KTtcXG4gIC0tZmlsbC0wOiAjZmZmO1xcbiAgLS1maWxsLTAtNTogI2Y3ZjdmNztcXG4gIC0tZmlsbC0xOiAjZWVlOyAvKiBzdGVwID0gMHgxMSovXFxuICAtLWZpbGwtMjogI2RkZDtcXG4gIC0tZmlsbC0zOiAjY2NjO1xcbiAgLS1maWxsLTQ6ICNiYmI7XFxuICAtLWZpbGwtNTogI2FhYTtcXG4gIC0tZmlsbC02OiAjOTk5O1xcbiAgLS1maWxsLTc6ICM4ODg7XFxuICAtLWZpbGwtODogIzc3NztcXG4gIC0tZmlsbC05OiAjNjY2O1xcbiAgLS1maWxsLTEwOiAjNTU1O1xcbiAgLS1maWxsLTExOiAjNDQ0O1xcbiAgLS1maWxsLTEyOiAjMzMzO1xcbiAgLS1maWxsLTEzOiAjMjIyO1xcbiAgLS1maWxsLTE0OiAjMTExO1xcbiAgLS1maWxsLTE1OiAjMDAwO1xcbiAgLS10b29sdGlwLWNvbG9yOiB3aGl0ZTtcXG4gIC0tdG9vbHRpcC1iZzogcmdiYSgwLDAsMCwuOCk7XFxuICAtLXRvb2x0aXAtYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC0tZm9jdXMtYm9yZGVyLWNvbG9yOiB2YXIoLS1maWxsLTEyKTtcXG59XFxuXFxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xcblxcbjpyb290IHtcXG4gICAgLS1mZzogdmFyKC0tZmlsbC0xMSk7XFxuICAgIC0tZmlsbC0wOiAjMWUxZTFlO1xcbiAgICAtLWZpbGwtMC01OiAjMjYyNjI2O1xcbiAgICAtLWZpbGwtMTogIzJkMmQyZDsgLyogc3RlcCA9IDB4MEYqL1xcbiAgICAtLWZpbGwtMjogIzNjM2MzYztcXG4gICAgLS1maWxsLTM6ICM0YjRiNGI7XFxuICAgIC0tZmlsbC00OiAjNWE1YTVhO1xcbiAgICAtLWZpbGwtNTogIzY5Njk2OTtcXG4gICAgLS1maWxsLTY6ICM3ODc4Nzg7XFxuICAgIC0tZmlsbC03OiAjODc4Nzg3O1xcbiAgICAtLWZpbGwtODogIzk2OTY5NjtcXG4gICAgLS1maWxsLTk6ICNhNWE1YTU7XFxuICAgIC0tZmlsbC0xMDogI2I0YjRiNDtcXG4gICAgLS1maWxsLTExOiAjYzNjM2MzO1xcbiAgICAtLWZpbGwtMTI6ICNkMmQyZDI7XFxuICAgIC0tZmlsbC0xMzogI2UxZTFlMTtcXG4gICAgLS1maWxsLTE0OiAjZjBmMGYwO1xcbiAgICAtLWZpbGwtMTU6ICNmZmZmZmY7XFxuICAgIC0tdG9vbHRpcC1ib3JkZXItY29sb3I6ICM4ODg4O1xcbiAgICAtLXNjcm9sbGJhci1iZzogIzFhMWExYTtcXG4gICAgLS1pbnB1dC1iZzogIzExMVxcbn1cXG4gIH1cXG5cXG5ib2R5IHtcXG4gIC8qIG92ZXJmbG93OiBoaWRkZW47IC8vIGF2b2lkIGZsYXNoIG9mIHZpZXdwb3J0IGNhdXNlZCBieSB0b29sdGlwKi9cXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnKTtcXG4gIGNvbG9yOiB2YXIoLS1mZyk7XFxufVxcblxcbi8qIEZvcm0gZWxlbWVudHMgd2lsbCBub3QgaW5oZXJpdCovXFxuXFxuYm9keSxcXG5idXR0b24sXFxuc2VsZWN0LFxcbmlucHV0LFxcbnRleHRhcmVhIHtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBzeXN0ZW0tdWksIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgUm9ib3RvLCBcXFwiUGluZ0ZhbmcgU0NcXFwiLCBcXFwiSGlyYWdpbm8gU2FucyBHQlxcXCIsIFxcXCJNaWNyb3NvZnQgWWFIZWlcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuaDIge1xcbiAgZm9udC1zaXplOiAxLjNyZW07XFxufVxcblxcbmgzIHtcXG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xcbn1cXG5cXG5oMSwgaDIsIGgzIHtcXG4gIG1hcmdpbi10b3A6IDFlbTtcXG4gIG1hcmdpbi1ib3R0b206IC41ZW07XFxufVxcblxcbmEge1xcbiAgY29sb3I6IGRvZGdlcmJsdWU7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcXG5cXG5hIHtcXG4gICAgY29sb3I6ICM3YmFhZmZcXG59XFxuICB9XFxuXFxuYTpmb2N1cyxcXG4gIGE6aG92ZXIge1xcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG4gIH1cXG5cXG5ociB7XFxuICBtYXJnaW46IC41cmVtIDA7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLXdpZHRoOiAxcHggMCAwIDA7XFxufVxcblxcbmlucHV0W3R5cGU9Y2hlY2tib3hdIHtcXG4gIG1hcmdpbi1yaWdodDogLjJlbTtcXG59XFxuXFxuaW5wdXRbdHlwZT1jaGVja2JveF06Zm9jdXMgKyAqIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICB9XFxuXFxuYnV0dG9uLFxcbmlucHV0W3R5cGU9XFxcInRleHRcXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJzZWFyY2hcXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJudW1iZXJcXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJdLFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1maWxsLTMpO1xcbn1cXG5cXG5idXR0b246Zm9jdXMsIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXTpmb2N1cywgaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Zm9jdXMsIGlucHV0W3R5cGU9XFxcIm51bWJlclxcXCJdOmZvY3VzLCBpbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJdOmZvY3VzLCBzZWxlY3Q6Zm9jdXMsIHRleHRhcmVhOmZvY3VzIHtcXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1mb2N1cy1ib3JkZXItY29sb3IpO1xcbiAgfVxcblxcbmlucHV0W2Rpc2FibGVkXSB+ICoge1xcbiAgb3BhY2l0eTogLjU7XFxufVxcblxcbmlucHV0W3R5cGU9dGV4dF0sXFxuaW5wdXRbdHlwZT11cmxdLFxcbmlucHV0W3R5cGU9c2VhcmNoXSxcXG5pbnB1dFt0eXBlPW51bWJlcl0sXFxuaW5wdXRbdHlwZT1wYXNzd29yZF0ge1xcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcXG59XFxuXFxuaW5wdXRbdHlwZT10ZXh0XVtkaXNhYmxlZF0sIGlucHV0W3R5cGU9dXJsXVtkaXNhYmxlZF0sIGlucHV0W3R5cGU9c2VhcmNoXVtkaXNhYmxlZF0sIGlucHV0W3R5cGU9bnVtYmVyXVtkaXNhYmxlZF0sIGlucHV0W3R5cGU9cGFzc3dvcmRdW2Rpc2FibGVkXSB7XFxuICAgIGJhY2tncm91bmQ6IHZhcigtLWZpbGwtMSk7XFxuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxuICB9XFxuXFxudGV4dGFyZWEge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuaW5wdXRbdHlwZT10ZXh0XSxcXG5pbnB1dFt0eXBlPXVybF0sXFxuaW5wdXRbdHlwZT1zZWFyY2hdLFxcbmlucHV0W3R5cGU9bnVtYmVyXSxcXG5pbnB1dFt0eXBlPXBhc3N3b3JkXSxcXG50ZXh0YXJlYSB7XFxuICBwYWRkaW5nOiAwIC41cmVtO1xcbn1cXG5cXG5jb2RlIHtcXG4gIHBhZGRpbmc6IDAgLjJlbTtcXG4gIGJhY2tncm91bmQ6IGhzbGEoNDUsIDc1JSwgNzUlLCAuMjUpO1xcbn1cXG5cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuXFxuY29kZSB7XFxuICAgIGJhY2tncm91bmQ6IGhzbGEoNDAsIDEwMCUsIDUwJSwgLjIpXFxufVxcbiAgfVxcblxcbmZpZWxkc2V0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IC41cmVtO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZmlsbC0zKTtcXG59XFxuXFxuOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi5pY29uIHtcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbn1cXG5cXG4vKiBGaXJlZm94IGRvZXMgbm90IHN1cHBvcnQgYHN2ZyBwYXRoYCBzZWxlY3RvciovXFxuXFxuc3ZnIHtcXG4gIGZpbGw6IGN1cnJlbnRDb2xvcjtcXG59XFxuXFxuYnV0dG9uIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWZpbGwtNSk7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1maWxsLTEpO1xcbn1cXG5cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuXFxuYnV0dG9uIHtcXG4gICAgYmFja2dyb3VuZDogdmFyKC0tZmlsbC0yKVxcbn1cXG4gIH1cXG5cXG5idXR0b24ge1xcbiAgY29sb3I6IHZhcigtLWZnKTtcXG59XFxuXFxuYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpob3ZlciB7XFxuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tZmlsbC03KTtcXG4gIH1cXG5cXG5idXR0b246YWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZDogdmFyKC0tZmlsbC01KTtcXG4gIH1cXG5cXG5idXR0b25bZGlzYWJsZWRdIHtcXG4gICAgb3BhY2l0eTogLjU7XFxuICB9XFxuXFxuYnV0dG9uOm5vdChbZGlzYWJsZWRdKSB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gIH1cXG5cXG5idXR0b24sXFxuLmJ0bi1naG9zdCxcXG4uc2VwIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDAgLjVyZW07XFxuICBmb250LXNpemU6IDFyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcXG59XFxuXFxuLmJ0bi1naG9zdCB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYnRuLWdob3N0OmZvY3VzLFxcbiAgLmJ0bi1naG9zdDpob3ZlciB7XFxuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tZmlsbC01KTtcXG4gICAgYmFja2dyb3VuZDogdmFyKC0tYmcpO1xcbiAgfVxcblxcbi5idG4tZ2hvc3QgPiAuaWNvbiB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBoZWlnaHQ6IDJyZW07XFxuICB9XFxuXFxuLmJ0bi1naG9zdC5hY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1maWxsLTEpO1xcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWZpbGwtNCk7XFxuICB9XFxuXFxuLmJ0bi1kYW5nZXIge1xcbiAgY29sb3I6ICNmMDA7XFxufVxcblxcbnNwYW46Zm9jdXMsXFxuYTpmb2N1cyB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXFxuYVt0YWJpbmRleD1cXFwiMFxcXCJdIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNlcDo6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgdmFyKC0tZmlsbC00KTtcXG4gIH1cXG5cXG51bCxcXG5vbCB7XFxuICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxufVxcblxcbmxpIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XFxufVxcblxcbi5pbmxpbmUtYmxvY2sge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uZmxleCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uZmxleC1jb2wge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLmZsZXgtd3JhcCB7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5mbGV4LWF1dG8ge1xcbiAgZmxleDogYXV0bztcXG59XFxuXFxuLmZsZXgtY29sID4gLmZsZXgtYXV0byB7XFxuICAgIGhlaWdodDogMDtcXG4gIH1cXG5cXG46bm90KC5mbGV4LWNvbCkgPiAuZmxleC1hdXRvIHtcXG4gICAgd2lkdGg6IDA7XFxuICB9XFxuXFxuLmZsZXgtMSB7XFxuICBmbGV4OiAxO1xcbn1cXG5cXG4uY2VudGVyLWl0ZW1zIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5zdHJldGNoLXNlbGYge1xcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcXG59XFxuXFxuLnBvcy1yZWwge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4ubWwtMSwgLm1sLTFjID4gOm50aC1jaGlsZChuICsgMikge1xcbiAgbWFyZ2luLWxlZnQ6IC41ZW07XFxufVxcblxcbi5tci0xLCAubXItMWMgPiA6bnRoLWxhc3QtY2hpbGQobiArIDIpIHtcXG4gIG1hcmdpbi1yaWdodDogLjVlbTtcXG59XFxuXFxuLm1sLTIsIC5tbC0yYyA+IDpudGgtY2hpbGQobiArIDIpIHtcXG4gIG1hcmdpbi1sZWZ0OiAxZW07XFxufVxcblxcbi5tci0yLCAubXItMmMgPiA6bnRoLWxhc3QtY2hpbGQobiArIDIpIHtcXG4gIG1hcmdpbi1yaWdodDogMWVtO1xcbn1cXG5cXG4ubXQtMCwgLm10LTBjID4gOm50aC1jaGlsZChuICsgMikge1xcbiAgbWFyZ2luLXRvcDogMDtcXG59XFxuXFxuLm10LTEsIC5tdC0xYyA+IDpudGgtY2hpbGQobiArIDIpIHtcXG4gIG1hcmdpbi10b3A6IC41ZW07XFxufVxcblxcbi5tYi0xLCAubWItMWMgPiA6bnRoLWxhc3QtY2hpbGQobiArIDIpIHtcXG4gIG1hcmdpbi1ib3R0b206IC41ZW07XFxufVxcblxcbi5tYi0yLCAubWItMmMgPiA6bnRoLWxhc3QtY2hpbGQobiArIDIpIHtcXG4gIG1hcmdpbi1ib3R0b206IDFlbTtcXG59XFxuXFxuLm14LTEsIC5teC0xYyA+ICoge1xcbiAgbWFyZ2luLWxlZnQ6IC41ZW07XFxuICBtYXJnaW4tcmlnaHQ6IC41ZW07XFxufVxcblxcbi5teS0xLCAubXktMWMgPiAqIHtcXG4gIG1hcmdpbi10b3A6IC41ZW07XFxuICBtYXJnaW4tYm90dG9tOiAuNWVtO1xcbn1cXG5cXG4uaC1zY3JlZW4ge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuLmgtMTAwIHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLnctMSB7XFxuICB3aWR0aDogNGVtO1xcbn1cXG5cXG4uZml4ZWQtZnVsbCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcblxcbi5hYnMtZnVsbCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5maXhlZC1mdWxsLFxcbi5hYnMtZnVsbCB7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxufVxcblxcbi5lbGxpcHNpcyB7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udGV4dC1jZW50ZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGV4dC1yaWdodCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuXFxuLnNjcm9sbC15IHtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxufVxcblxcbi5zdWJ0bGUge1xcbiAgY29sb3I6IHZhcigtLWZpbGwtNyk7XFxufVxcblxcbi5mcmFtZSB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1maWxsLTEpO1xcbn1cXG5cXG4uZnJhbWUtYmxvY2sge1xcbiAgICBwYWRkaW5nOiAuNXJlbTtcXG4gIH1cXG5cXG4uZWRpdG9yLWNvZGUgLkNvZGVNaXJyb3Ige1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG5jb2RlLFxcbi5tb25vc3BhY2UtZm9udCxcXG4uZWRpdG9yLWNvZGUgLkNvZGVNaXJyb3IsXFxuLkNvZGVNaXJyb3ItaGludHMuZGVmYXVsdCAvKiBDU1Mgc3BlY2lmaWNpdHkgaGFjayB0byBvdmVycmlkZSBkZWZhdWx0IENNIHN0eWxlICovIHtcXG4gIC8qIFVzZSBgQ291cmllciBOZXdgIHRvIGVuc3VyZSBgJm5ic3A7YCBoYXMgdGhlIHNhbWUgd2lkdGggYXMgYW4gb3JpZ2luYWwgc3BhY2UuICovXFxuICBmb250LWZhbWlseTogXFxcIkZpcmEgQ29kZVxcXCIsIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcXFwiTGliZXJhdGlvbiBNb25vXFxcIiwgXFxcIkNvdXJpZXIgTmV3XFxcIiwgQ291cmllciwgbW9ub3NwYWNlO1xcbn1cXG5cXG5ib2R5IC52bC10b29sdGlwIHtcXG4gIHotaW5kZXg6IDEwMDAwO1xcbn1cXG5cXG5ib2R5IC52bC10b29sdGlwID4gaSB7XFxuICAgIGNvbG9yOiB2YXIoLS10b29sdGlwLWJnKTtcXG4gICAgei1pbmRleDogMTtcXG4gIH1cXG5cXG5ib2R5IC52bC10b29sdGlwLWNvbnRlbnQge1xcbiAgICBtYXJnaW46IC0xcHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLXRvb2x0aXAtYm9yZGVyLWNvbG9yKTtcXG4gICAgY29sb3I6IHZhcigtLXRvb2x0aXAtY29sb3IpO1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS10b29sdGlwLWJnKTtcXG4gIH1cXG5cXG4udmwtZHJvcGRvd24tbWVudSB7XFxuICBwYWRkaW5nOiAuNXJlbTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWZpbGwtNCk7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZyk7XFxufVxcblxcbi5tb2RhbC1jb250ZW50IHtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnKTtcXG4gIGJveC1zaGFkb3c6IDAgMCA0MHB4ICMwMDA7XFxufVxcblxcbi5oYXMtZXJyb3Ige1xcbiAgLyogcmVtaW5kZXI6IG1ha2Ugc3VyZSBhbGwgY29sb3JzIGFyZSByZWFkYWJsZSBpbiBsaWdodC9kYXJrIHNjaGVtZXMqL1xcbiAgYm9yZGVyLWNvbG9yOiAjODAwODtcXG4gIGJhY2tncm91bmQ6ICNmMDAyO1xcbn1cXG5cXG4uaGFzLWVycm9yOmZvY3VzIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZjAwODtcXG4gIH1cXG5cXG5AbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKSB7XFxuICBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdOm5vdCg6Y2hlY2tlZCksXFxuICBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOm5vdCg6Y2hlY2tlZCkge1xcbiAgICBmaWx0ZXI6IGludmVydCgxKTtcXG4gIH1cXG4gIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSxcXG4gIGlucHV0W3R5cGU9XFxcInVybFxcXCJdLFxcbiAgaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl0sXFxuICBpbnB1dFt0eXBlPVxcXCJudW1iZXJcXFwiXSxcXG4gIGlucHV0W3R5cGU9XFxcInBhc3N3b3JkXFxcIl0sXFxuICBzZWxlY3QsXFxuICB0ZXh0YXJlYSB7XFxuICAgIGJhY2tncm91bmQ6IHZhcigtLWlucHV0LWJnKTtcXG4gICAgY29sb3I6IHZhcigtLWZnKTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZmlsbC0zKTtcXG4gIH1cXG4gICAgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdOmZvY3VzLCBpbnB1dFt0eXBlPVxcXCJ1cmxcXFwiXTpmb2N1cywgaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Zm9jdXMsIGlucHV0W3R5cGU9XFxcIm51bWJlclxcXCJdOmZvY3VzLCBpbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJdOmZvY3VzLCBzZWxlY3Q6Zm9jdXMsIHRleHRhcmVhOmZvY3VzIHtcXG4gICAgICBib3JkZXItY29sb3I6IHZhcigtLWZvY3VzLWJvcmRlci1jb2xvcik7XFxuICAgIH1cXG4gIDo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgICB3aWR0aDogMTRweDtcXG4gICAgaGVpZ2h0OiAxNHB4O1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zY3JvbGxiYXItYmcpO1xcbiAgfVxcbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLWJ1dHRvbjpzaW5nbGUtYnV0dG9uIHtcXG4gICAgICBiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IGNlbnRlciwgIzMzMyA0MCUsIHZhcigtLXNjcm9sbGJhci1iZykgNDAlKTtcXG4gICAgfVxcbiAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItYnV0dG9uOnNpbmdsZS1idXR0b246aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KGNpcmNsZSBhdCBjZW50ZXIsICM0NDQgNDAlLCB2YXIoLS1zY3JvbGxiYXItYmcpIDQwJSk7XFxuICAgICAgfVxcbiAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItYnV0dG9uOnNpbmdsZS1idXR0b246YWN0aXZlIHtcXG4gICAgICAgIGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChjaXJjbGUgYXQgY2VudGVyLCAjNTU1IDQwJSwgdmFyKC0tc2Nyb2xsYmFyLWJnKSA0MCUpO1xcbiAgICAgIH1cXG4gICAgOjotd2Via2l0LXNjcm9sbGJhci10cmFjay1waWVjZSB7XFxuICAgICAgYmFja2dyb3VuZDogIzMzMztcXG4gICAgICBib3JkZXI6IDRweCBzb2xpZCB2YXIoLS1zY3JvbGxiYXItYmcpO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gICAgfVxcbiAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2stcGllY2U6aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZDogIzQ0NDtcXG4gICAgICB9XFxuICAgICAgOjotd2Via2l0LXNjcm9sbGJhci10cmFjay1waWVjZTphY3RpdmUge1xcbiAgICAgICAgYmFja2dyb3VuZDogIzU1NTtcXG4gICAgICB9XFxuICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgICAgIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXNjcm9sbGJhci1iZyk7XFxuICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgICAgIGJhY2tncm91bmQ6ICM1NTU7XFxuICAgIH1cXG4gICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQ6ICM2NjY7XFxuICAgICAgfVxcbiAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6YWN0aXZlIHtcXG4gICAgICAgIGJhY2tncm91bmQ6ICM3Nzc7XFxuICAgICAgfVxcbiAgOjotd2Via2l0LXJlc2l6ZXIge1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pbnB1dC1iZykgbGluZWFyLWdyYWRpZW50KC00NWRlZyxcXG4gICAgICB0cmFuc3BhcmVudCAzcHgsICM4ODggM3B4LCAjODg4IDRweCwgdHJhbnNwYXJlbnQgNHB4LFxcbiAgICAgIHRyYW5zcGFyZW50IDZweCwgIzg4OCA2cHgsICM4ODggN3B4LCB0cmFuc3BhcmVudCA3cHgpIG5vLXJlcGVhdDtcXG4gICAgYm9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICB9XFxuICA6LXdlYmtpdC1hdXRvZmlsbCB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDEwMDBweCB2YXIoLS1pbnB1dC1iZykgaW5zZXQ7XFxuICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiAjZmZmO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC52aXNpYmxlLXNtIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7IC8qIFRoaXMgdmFsdWUgaXMgYWxzbyB1c2VkIGluIG90aGVyIGZpbGVzICovXFxuICAuaGlkZGVuLXNtIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogMzE5cHgpIHtcXG4gIC5oaWRkZW4teHMge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvbm9Tb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcXG4vKiBjb3BpZWQgZnJvbSBjb2RlbWlycm9yLmNzcyAqLyAvKiBjb21wYXRpYmxlIHdpdGggb2xkIGJyb3dzZXJzLCBlLmcuIE1heHRob24gNC40LCBDaHJvbWUgNTAtICovXFxuLmVkaXRvci1jb2RlLmZsZXgtYXV0byB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5lZGl0b3ItY29kZS5mbGV4LWF1dG8gPiBkaXYge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHdpZHRoOiAxMDAlO1xcbn1cXG4uZWRpdG9yLXNlYXJjaCB7XFxuICB3aGl0ZS1zcGFjZTogcHJlO1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbn0gLyogd3JhcCBmaWVsZHMgaW4gYSBuYXJyb3cgd2luZG93Ki9cXG4uZWRpdG9yLXNlYXJjaCA+IGZvcm0sXFxuICAuZWRpdG9yLXNlYXJjaCA+IGRpdiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIG1hcmdpbi1yaWdodDogLjVyZW07XFxufVxcbi5lZGl0b3Itc2VhcmNoIGlucHV0W3R5cGU9c2VhcmNoXSB7XFxuICAgIG1pbi13aWR0aDogOGVtO1xcbn1cXG4uZWRpdG9yLXNlYXJjaCBzcGFuID4gaW5wdXQgeyAvKiBhIHRvb2x0aXAnZWQgaW5wdXQqL1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuLmVkaXRvci1zZWFyY2ggLmlzLWVycm9yLCAuZWRpdG9yLXNlYXJjaCAuaXMtZXJyb3I6Zm9jdXMge1xcbiAgICBib3JkZXItY29sb3I6ICNlODU2MDA7XFxuICAgIGJhY2tncm91bmQ6ICNlODU2MDAxMDtcXG59XFxuLnRvby1sb25nLXBsYWNlaG9sZGVyIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXG59IC8qIENvZGVNaXJyb3Igc2hvdy1oaW50cyBmaXggdG8gd29yayBoZXJlICovXFxuLkNvZGVNaXJyb3ItaGludHMge1xcbiAgei1pbmRleDogOTk5OTtcXG59IC8qIGZpeCBjb250ZW50ZWRpdGFibGUgc2VsZWN0aW9uIGNvbG9yIGJ1ZyAqL1xcbi5Db2RlTWlycm9yIC5Db2RlTWlycm9yLWxpbmUgOjotbW96LXNlbGVjdGlvbiB7XFxuICAgIGJhY2tncm91bmQ6ICNkN2Q0ZjA7XFxufVxcbi5Db2RlTWlycm9yIC5Db2RlTWlycm9yLWxpbmUgOjpzZWxlY3Rpb24ge1xcbiAgICBiYWNrZ3JvdW5kOiAjZDdkNGYwO1xcbn0gLyogbXVzdCBiZSB1c2VkIHNlcGFyYXRlbHkgb3RoZXJ3aXNlIHRoZSBlbnRpcmUgcnVsZSBpcyBpZ25vcmVkIGluIENocm9tZSAqL1xcbi5Db2RlTWlycm9yIC5Db2RlTWlycm9yLWxpbmUgOjotbW96LXNlbGVjdGlvbiB7XFxuICAgIGJhY2tncm91bmQ6ICNkN2Q0ZjA7XFxufVxcbi5jbS1tYXRjaGhpZ2hsaWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2xhKDE2OCwgMTAwJSwgNTAlLCAwLjE1KTtcXG59XFxuLmNtLXRyYWlsaW5nc3BhY2Uge1xcbiAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KGNvcm5mbG93ZXJibHVlLCB0cmFuc3BhcmVudCAxcHgpIDAgNTAlIC8gMWNoIDFjaCByZXBlYXQteDtcXG59XFxuZGl2LkNvZGVNaXJyb3Igc3Bhbi5Db2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldCB7IC8qIHRoZSBzYW1lIHNlbGVjdG9yIHVzZWQgaW4gY29kZW1pcnJvci5jc3MgKi9cXG4gIGNvbG9yOiB1bnNldDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbGEoMTAyLCA4MCUsIDUwJSwgMC4zKTtcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tY29tbWVudCB7XFxuICAgIGNvbG9yOiAjOTE4OTgyO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS1zdHJpbmctMiB7IC8qIHRlbXBsYXRlIGxpdGVyYWw6IGBleGFtcGxlYCovXFxuICAgIGNvbG9yOiAjODcwO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS1zdHJpbmctMi5jbS1yZWdleHAge1xcbiAgICBjb2xvcjogI2Q2MDtcXG59XFxuQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaykge1xcbi5jbS1tYXRjaGhpZ2hsaWdodCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbGEoNDAsIDEwMCUsIDUwJSwgMC4xKTtcXG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogaHNsYSg0MCwgMTAwJSwgNTAlLCAwLjI1KTtcXG59XFxuLkNvZGVNaXJyb3ItaGludHMge1xcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iZyk7XFxufVxcbi5Db2RlTWlycm9yLWhpbnQge1xcbiAgICBjb2xvcjogdmFyKC0tZmcpO1xcbn1cXG5saS5Db2RlTWlycm9yLWhpbnQtYWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZDogdmFyKC0tZmcpO1xcbiAgICBjb2xvcjogdmFyKC0tYmcpO1xcbn1cXG4uQ29kZU1pcnJvciB7XFxuICAgIGNvbG9yOiB2YXIoLS1mZyk7XFxuICAgIGJhY2tncm91bmQ6IHZhcigtLWJnKTtcXG59XFxuLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3Itc2Nyb2xsYmFyLWZpbGxlcixcXG4gICAgLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItZ3V0dGVyLWZpbGxlciB7XFxuICAgICAgYmFja2dyb3VuZDogbm9uZTtcXG59XFxuLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItZ3V0dGVycyB7XFxuICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1maWxsLTIpO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWZpbGwtMC01KTtcXG59XFxuLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3Itc2VsZWN0ZWQge1xcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoODAsIDc1LCA2NSwgLjk5KTtcXG59XFxuLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItbGluZSA6Oi1tb3otc2VsZWN0aW9uIHtcXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoODAsIDc1LCA2NSwgLjk5KTtcXG59XFxuLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItbGluZSA6OnNlbGVjdGlvbiB7XFxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDgwLCA3NSwgNjUsIC45OSk7XFxufVxcbiAgICAgIC8qIG11c3QgYmUgdXNlZCBzZXBhcmF0ZWx5IG90aGVyd2lzZSB0aGUgZW50aXJlIHJ1bGUgaXMgaWdub3JlZCBpbiBDaHJvbWUgKi9cXG4uQ29kZU1pcnJvciAuQ29kZU1pcnJvci1saW5lIDo6LW1vei1zZWxlY3Rpb24ge1xcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSg4MCwgNzUsIDY1LCAuOTkpO1xcbn1cXG4uQ29kZU1pcnJvciAuQ29kZU1pcnJvci1ndXR0ZXJtYXJrZXIge1xcbiAgICAgIGNvbG9yOiB3aGl0ZTtcXG59XFxuLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItZ3V0dGVybWFya2VyLXN1YnRsZSB7XFxuICAgICAgICBjb2xvcjogI2QwZDBkMDtcXG59XFxuLkNvZGVNaXJyb3IgLkNvZGVNaXJyb3ItbGluZW51bWJlciB7XFxuICAgICAgY29sb3I6ICM2NjY7XFxufVxcbi5Db2RlTWlycm9yIC5Db2RlTWlycm9yLWN1cnNvciB7XFxuICAgICAgYm9yZGVyLWNvbG9yOiAjZjhmOGYwO1xcbn1cXG4uQ29kZU1pcnJvciAuQ29kZU1pcnJvci1hY3RpdmVsaW5lLWJhY2tncm91bmQge1xcbiAgICAgIGJhY2tncm91bmQ6ICMxYTFhMWE7XFxufVxcbi5Db2RlTWlycm9yIC5Db2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldCB7XFxuICAgICAgb3V0bGluZTogbm9uZTtcXG4gICAgICBiYWNrZ3JvdW5kOiAjNDQ0O1xcbiAgICAgIGNvbG9yOiB5ZWxsb3cgIWltcG9ydGFudDtcXG59XFxuICAgIC8qIG1vc3RseSBjb3BpZWQgZnJvbSBNb25va2FpIHRoZW1lKi9cXG4uY20tcy1kZWZhdWx0IC5jbS1jb21tZW50IHtcXG4gICAgICBjb2xvcjogIzc1NzE1ZTtcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tYXRvbSB7XFxuICAgICAgY29sb3I6ICNhZTgxZmY7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLW51bWJlciB7XFxuICAgICAgY29sb3I6ICNhZTgxZmY7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLWNvbW1lbnQuY20tYXR0cmlidXRlIHtcXG4gICAgICBjb2xvcjogIzk3Yjc1NztcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tY29tbWVudC5jbS1kZWYge1xcbiAgICAgIGNvbG9yOiAjYmM5MjYyO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS1jb21tZW50LmNtLXRhZyB7XFxuICAgICAgY29sb3I6ICNiYzYyODM7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLWNvbW1lbnQuY20tdHlwZSB7XFxuICAgICAgY29sb3I6ICM1OTk4YTY7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLXByb3BlcnR5LFxcbiAgICAuY20tcy1kZWZhdWx0IC5jbS1hdHRyaWJ1dGUge1xcbiAgICAgIGNvbG9yOiAjYTZlMjJlO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS1rZXl3b3JkIHtcXG4gICAgICBjb2xvcjogI2Y5MjY3MjtcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tYnVpbHRpbiB7XFxuICAgICAgY29sb3I6ICM2NmQ5ZWY7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLXN0cmluZyB7XFxuICAgICAgY29sb3I6ICNlNmRiNzQ7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLXN0cmluZy0yIHtcXG4gICAgICBjb2xvcjogI2JjYjE0OTtcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tc3RyaW5nLTIuY20tcmVnZXhwIHtcXG4gICAgICBjb2xvcjogI2ZmMDBmNztcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tdmFyaWFibGUge1xcbiAgICAgIGNvbG9yOiAjZjhmOGYyO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS12YXJpYWJsZS0yIHtcXG4gICAgICBjb2xvcjogIzllZmZmZjtcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tdmFyaWFibGUtMyxcXG4gICAgLmNtLXMtZGVmYXVsdCAuY20tdHlwZSB7XFxuICAgICAgY29sb3I6ICM2NmQ5ZWY7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLWRlZiB7XFxuICAgICAgY29sb3I6ICNmZDk3MWY7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLWJyYWNrZXQge1xcbiAgICAgIGNvbG9yOiAjZjhmOGYyO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS10YWcge1xcbiAgICAgIGNvbG9yOiAjZjkyNjcyO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS1oZWFkZXIge1xcbiAgICAgIGNvbG9yOiAjYWU4MWZmO1xcbn1cXG4uY20tcy1kZWZhdWx0IC5jbS1saW5rIHtcXG4gICAgICBjb2xvcjogI2FlODFmZjtcXG59XFxuLmNtLXMtZGVmYXVsdCAuY20tZXJyb3Ige1xcbiAgICAgIGNvbG9yOiAjZjhmOGYwO1xcbiAgICAgIGJhY2tncm91bmQ6ICNmOTI2NzI7XFxufVxcbi5jbS1zLWRlZmF1bHQgLmNtLW9wZXJhdG9yIHtcXG4gICAgICBjb2xvcjogIzk5OVxcbn1cXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5lZGl0LWV4dGVybmFscyB7XFxuICAtLWJvcmRlcjogNnB4IGRvdWJsZSB2YXIoLS1maWxsLTgpO1xcbiAgYm9yZGVyLXRvcDogdmFyKC0tYm9yZGVyKTtcXG59XFxuLmVkaXQtZXh0ZXJuYWxzID4gLnNlbGVjdCB7XFxuICAgIG1pbi1oZWlnaHQ6IDEuMjVyZW07XFxuICAgIG1heC1oZWlnaHQ6IDE1dmg7XFxuICAgIG92ZXJmbG93LXk6IGF1dG87XFxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1maWxsLTMpO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC41cmVtO1xcbn1cXG4uZWRpdC1leHRlcm5hbHMgPiAuc2VsZWN0W2RhdGEtaGFzLW1haW5dIGRsOmZpcnN0LWNoaWxkIHtcXG4gICAgICBwYWRkaW5nLXRvcDogLjVlbTtcXG4gICAgICBwYWRkaW5nLWJvdHRvbTogLjVlbTtcXG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZmlsbC0zKTtcXG4gICAgICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgICAgIHRvcDogMDtcXG4gICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iZyk7XFxufVxcbi5lZGl0LWV4dGVybmFscyA+IC5zZWxlY3QgZGwge1xcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4uZWRpdC1leHRlcm5hbHMgPiAuc2VsZWN0IGRsLmFjdGl2ZSB7XFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICAgIGNvbG9yOiBibHVlO1xcbn1cXG4uZWRpdC1leHRlcm5hbHMgPiAuc2VsZWN0IGRsLmxvYWRpbmcgZGQge1xcbiAgICAgICAgY29sb3I6IHZhcigtLWZpbGwtNyk7XFxufVxcbi5lZGl0LWV4dGVybmFscyA+IC5zZWxlY3QgZGwuZXJyb3IgZGQge1xcbiAgICAgICAgY29sb3I6IHJlZDtcXG59XFxuLmVkaXQtZXh0ZXJuYWxzID4gLnNlbGVjdCBkbDpub3QoLmVycm9yKSB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5lZGl0LWV4dGVybmFscyA+IC5zZWxlY3QgZGw6bm90KC5lcnJvcik6aG92ZXIgZGQge1xcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuLmVkaXQtZXh0ZXJuYWxzID4gLnNlbGVjdCBkbDpub3QoLmVycm9yKTpob3ZlciBkZCBhIHtcXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcbi5lZGl0LWV4dGVybmFscyA+IC5zZWxlY3QgZHQge1xcbiAgICAgIGNvbG9yOiBkYXJrYmx1ZTtcXG4gICAgICBtYXJnaW4tbGVmdDogMXJlbTtcXG4gICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbn1cXG4uZWRpdC1leHRlcm5hbHMgPiAuc2VsZWN0IGEge1xcbiAgICAgIHBhZGRpbmc6IDAgLjVlbTtcXG4gICAgICBjdXJzb3I6IGFsaWFzO1xcbn1cXG4uZWRpdC1leHRlcm5hbHMgPiAuc2VsZWN0IGE6aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tZmlsbC0zKTtcXG59XFxuLmVkaXQtZXh0ZXJuYWxzID4gLmNvbnRlbnRzID4gaW1nIHtcXG4gICAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICAgIG1heC13aWR0aDogMTAwJTtcXG4gICAgICBtYXgtaGVpZ2h0OiAxMDAlO1xcbiAgICAgIG9iamVjdC1maXQ6IGNvbnRhaW47XFxufVxcbkBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcXG4uZWRpdC1leHRlcm5hbHMgLnNlbGVjdC5lcnJvciBkZCB7XFxuICAgICAgICBjb2xvcjogI2ZmNDc0NztcXG59XFxuLmVkaXQtZXh0ZXJuYWxzIC5zZWxlY3QgZGwuYWN0aXZlIHtcXG4gICAgICAgIGNvbG9yOiBjb3JhbDtcXG59XFxuLmVkaXQtZXh0ZXJuYWxzIC5zZWxlY3QgZGwuYWN0aXZlIGR0IHtcXG4gICAgICAgICAgY29sb3I6IGhvdHBpbms7XFxufVxcbi5lZGl0LWV4dGVybmFscyAuc2VsZWN0IGR0IHtcXG4gICAgICAgIGNvbG9yOiAjYzM0ZWMzO1xcbn1cXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5tZXNzYWdlIHtcXG4gIG1heC13aWR0aDogNTB2dztcXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcXG4gIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAuMnJlbTtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAuMnJlbTtcXG4gIGJveC1zaGFkb3c6IDAgMCAuMnJlbSByZ2JhKDAsMCwwLC4yKTtcXG59XFxuLm1lc3NhZ2UgaW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuLm1lc3NhZ2UtYm9keSA+IHAge1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcXG59XFxuLm1lc3NhZ2UtYm9keSA+IHA6Zmlyc3QtY2hpbGQge1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuLm1lc3NhZ2UtYm9keSA+IHA6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5zZXR0aW5nLWNoZWNrIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL25vU291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLnRvZ2dsZS1idXR0b24ge1xcbiAgd2lkdGg6IDI0cHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiB2YXIoLS1maWxsLTEyKTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWZpbGwtMik7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi50b2dnbGUtYnV0dG9uLmFjdGl2ZSB7XFxuICAgIGNvbG9yOiB2YXIoLS1iZyk7XFxuICAgIGJhY2tncm91bmQ6IHZhcigtLWZpbGwtOSk7XFxufVxcbi50b2dnbGUtYnV0dG9uOmZvY3VzLCAudG9nZ2xlLWJ1dHRvbjpob3ZlciB7XFxuICAgIGZpbHRlcjogYnJpZ2h0bmVzcyguOCk7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00LnVzZVsxXSEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4vc3R5bGUuY3NzP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQudXNlWzFdIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi9zdHlsZS5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00LnVzZVsxXSEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4vc3R5bGUuY3NzP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQudXNlWzFdIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi9zdHlsZS5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00LnVzZVsxXSEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4vc3R5bGUuY3NzP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQudXNlWzFdIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi9zdHlsZS5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzJdIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMV0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzJdIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL2NvZGUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NGRhY2FiMDYmbGFuZz1jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL2NvZGUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NGRhY2FiMDYmbGFuZz1jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vZXh0ZXJuYWxzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJjOTlmMWIwJmxhbmc9Y3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9leHRlcm5hbHMudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MmM5OWYxYjAmbGFuZz1jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vbWVzc2FnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lOTMyNDhiMiZsYW5nPWNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vbWVzc2FnZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lOTMyNDhiMiZsYW5nPWNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9zZXR0aW5nLWNoZWNrLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc3NTNjMjJhJmxhbmc9Y3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9zZXR0aW5nLWNoZWNrLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc3NTNjMjJhJmxhbmc9Y3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL3RvZ2dsZS1idXR0b24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9OTkwZGY5MmEmbGFuZz1jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL3RvZ2dsZS1idXR0b24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9OTkwZGY5MmEmbGFuZz1jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuQnJvd3NlclNwcml0ZVN5bWJvbCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIFNwcml0ZVN5bWJvbCA9IGZ1bmN0aW9uIFNwcml0ZVN5bWJvbChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgdmlld0JveCA9IHJlZi52aWV3Qm94O1xuICB2YXIgY29udGVudCA9IHJlZi5jb250ZW50O1xuXG4gIHRoaXMuaWQgPSBpZDtcbiAgdGhpcy52aWV3Qm94ID0gdmlld0JveDtcbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAoKSB7XG4gIHJldHVybiB0aGlzLmNvbnRlbnQ7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCk7XG59O1xuXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBbJ2lkJywgJ3ZpZXdCb3gnLCAnY29udGVudCddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIGRlbGV0ZSB0aGlzJDFbcHJvcF07IH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xudmFyIHBhcnNlID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgdmFyIGhhc0ltcG9ydE5vZGUgPSAhIWRvY3VtZW50LmltcG9ydE5vZGU7XG4gIHZhciBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGNvbnRlbnQsICdpbWFnZS9zdmcreG1sJykuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBGaXggZm9yIGJyb3dzZXIgd2hpY2ggYXJlIHRocm93aW5nIFdyb25nRG9jdW1lbnRFcnJvclxuICAgKiBpZiB5b3UgaW5zZXJ0IGFuIGVsZW1lbnQgd2hpY2ggaXMgbm90IHBhcnQgb2YgdGhlIGRvY3VtZW50XG4gICAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzk4NjUxOS80NjI0NDAzXG4gICAqL1xuICBpZiAoaGFzSW1wb3J0Tm9kZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5pbXBvcnROb2RlKGRvYywgdHJ1ZSk7XG4gIH1cblxuICByZXR1cm4gZG9jO1xufTtcblxudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuXG5cblxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIGRlZXBtZXJnZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgdW5kZWZpbmVkID09PSAnZnVuY3Rpb24nICYmIHVuZGVmaW5lZC5hbWQpIHtcbiAgICAgICAgdW5kZWZpbmVkKGZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH1cbn0oY29tbW9uanNHbG9iYWwsIGZ1bmN0aW9uICgpIHtcblxuZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsKSB7XG4gICAgdmFyIG5vbk51bGxPYmplY3QgPSB2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG5cbiAgICByZXR1cm4gbm9uTnVsbE9iamVjdFxuICAgICAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgUmVnRXhwXSdcbiAgICAgICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IERhdGVdJ1xufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZUlmTmVjZXNzYXJ5KHZhbHVlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgY2xvbmUgPSBvcHRpb25zQXJndW1lbnQgJiYgb3B0aW9uc0FyZ3VtZW50LmNsb25lID09PSB0cnVlO1xuICAgIHJldHVybiAoY2xvbmUgJiYgaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKSA/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zQXJndW1lbnQpIDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHRhcmdldC5zbGljZSgpO1xuICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbltpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2ldID0gY2xvbmVJZk5lY2Vzc2FyeShlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KGUpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGRlZXBtZXJnZSh0YXJnZXRbaV0sIGUsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmluZGV4T2YoZSkgPT09IC0xKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuICAgIGlmIChpc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeSh0YXJnZXRba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3Nhcnkoc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdGlvbnNBcmd1bWVudCB8fCB7IGFycmF5TWVyZ2U6IGRlZmF1bHRBcnJheU1lcmdlIH07XG4gICAgdmFyIGFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cbiAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGFyZ2V0KSA/IGFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkgOiBjbG9uZUlmTmVjZXNzYXJ5KHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSB8fCBhcnJheS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5IHdpdGggYXQgbGVhc3QgdHdvIGVsZW1lbnRzJylcbiAgICB9XG5cbiAgICAvLyB3ZSBhcmUgc3VyZSB0aGVyZSBhcmUgYXQgbGVhc3QgMiB2YWx1ZXMsIHNvIGl0IGlzIHNhZmUgdG8gaGF2ZSBubyBpbml0aWFsIHZhbHVlXG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG4gICAgICAgIHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9uc0FyZ3VtZW50KVxuICAgIH0pXG59O1xuXG5yZXR1cm4gZGVlcG1lcmdlXG5cbn0pKTtcbn0pO1xuXG52YXIgbmFtZXNwYWNlc18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xudmFyIG5hbWVzcGFjZXMgPSB7XG4gIHN2Zzoge1xuICAgIG5hbWU6ICd4bWxucycsXG4gICAgdXJpOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG4gIH0sXG4gIHhsaW5rOiB7XG4gICAgbmFtZTogJ3htbG5zOnhsaW5rJyxcbiAgICB1cmk6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJ1xuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBuYW1lc3BhY2VzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59KTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIG9iamVjdFRvQXR0cnNTdHJpbmcgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJzKS5tYXAoZnVuY3Rpb24gKGF0dHIpIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyc1thdHRyXS50b1N0cmluZygpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICByZXR1cm4gKGF0dHIgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKTtcbiAgfSkuam9pbignICcpO1xufTtcblxudmFyIHN2ZyA9IG5hbWVzcGFjZXNfMS5zdmc7XG52YXIgeGxpbmsgPSBuYW1lc3BhY2VzXzEueGxpbms7XG5cbnZhciBkZWZhdWx0QXR0cnMgPSB7fTtcbmRlZmF1bHRBdHRyc1tzdmcubmFtZV0gPSBzdmcudXJpO1xuZGVmYXVsdEF0dHJzW3hsaW5rLm5hbWVdID0geGxpbmsudXJpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGVudF1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXR0cmlidXRlc11cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xudmFyIHdyYXBJblN2Z1N0cmluZyA9IGZ1bmN0aW9uIChjb250ZW50LCBhdHRyaWJ1dGVzKSB7XG4gIGlmICggY29udGVudCA9PT0gdm9pZCAwICkgY29udGVudCA9ICcnO1xuXG4gIHZhciBhdHRycyA9IGRlZXBtZXJnZShkZWZhdWx0QXR0cnMsIGF0dHJpYnV0ZXMgfHwge30pO1xuICB2YXIgYXR0cnNSZW5kZXJlZCA9IG9iamVjdFRvQXR0cnNTdHJpbmcoYXR0cnMpO1xuICByZXR1cm4gKFwiPHN2ZyBcIiArIGF0dHJzUmVuZGVyZWQgKyBcIj5cIiArIGNvbnRlbnQgKyBcIjwvc3ZnPlwiKTtcbn07XG5cbnZhciBCcm93c2VyU3ByaXRlU3ltYm9sID0gKGZ1bmN0aW9uIChTcHJpdGVTeW1ib2wkJDEpIHtcbiAgZnVuY3Rpb24gQnJvd3NlclNwcml0ZVN5bWJvbCAoKSB7XG4gICAgU3ByaXRlU3ltYm9sJCQxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBpZiAoIFNwcml0ZVN5bWJvbCQkMSApIEJyb3dzZXJTcHJpdGVTeW1ib2wuX19wcm90b19fID0gU3ByaXRlU3ltYm9sJCQxO1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNwcml0ZVN5bWJvbCQkMSAmJiBTcHJpdGVTeW1ib2wkJDEucHJvdG90eXBlICk7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQnJvd3NlclNwcml0ZVN5bWJvbDtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpc01vdW50ZWQ6IHt9IH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAgICogQHJldHVybiB7QnJvd3NlclNwcml0ZVN5bWJvbH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wuY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSA9IGZ1bmN0aW9uIGNyZWF0ZUZyb21FeGlzdGluZ05vZGUgKG5vZGUpIHtcbiAgICByZXR1cm4gbmV3IEJyb3dzZXJTcHJpdGVTeW1ib2woe1xuICAgICAgaWQ6IG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpLFxuICAgICAgdmlld0JveDogbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKSxcbiAgICAgIGNvbnRlbnQ6IG5vZGUub3V0ZXJIVE1MXG4gICAgfSk7XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgfVxuICAgIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSB0YXJnZXRcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gbW91bnQgKHRhcmdldCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRUYXJnZXQgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICB2YXIgbm9kZSA9IHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcblxuICAgIG1vdW50VGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBjb250ZW50ID0gdGhpcy5zdHJpbmdpZnkoKTtcbiAgICByZXR1cm4gcGFyc2Uod3JhcEluU3ZnU3RyaW5nKGNvbnRlbnQpKS5jaGlsZE5vZGVzWzBdO1xuICB9O1xuXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnVubW91bnQgPSBmdW5jdGlvbiB1bm1vdW50ICgpIHtcbiAgICB0aGlzLm5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgcmV0dXJuIEJyb3dzZXJTcHJpdGVTeW1ib2w7XG59KFNwcml0ZVN5bWJvbCkpO1xuXG5yZXR1cm4gQnJvd3NlclNwcml0ZVN5bWJvbDtcblxufSkpKTtcbiIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qc1wiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanNcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImFycm93XCIsXG4gIFwidXNlXCI6IFwiYXJyb3ctdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcImFycm93XFxcIj48cGF0aCBkPVxcXCJNNjM5LjQ3MiA1NzUuNTc0Yy0xNi40MSAwLTMyLjgxOS02LjI2My00NS4zNDctMTguNzg4bC0yNTQuODIyLTI1NC44M2MtMjUuMDU0LTI1LjAzOC0yNS4wNTQtNjUuNjU0IDAtOTAuNjkgMjUuMDUtMjUuMDUyIDY1LjY0MS0yNS4wNTIgOTAuNjkyIDBsMjU0LjgyNiAyNTQuODNjMjUuMDU0IDI1LjAzNiAyNS4wNTQgNjUuNjUyIDAgOTAuNjktMTIuNTI2IDEyLjUyNS0yOC45MzcgMTguNzg4LTQ1LjM1IDE4Ljc4OHpcXFwiIC8+PHBhdGggZD1cXFwiTTM4NC42NDggODMwLjM5Yy0xNi40MSAwLTMyLjgxOC02LjI2NC00NS4zNDYtMTguNzktMjUuMDU0LTI1LjAzNy0yNS4wNTQtNjUuNjUzIDAtOTAuNjg5bDI1NC44MjMtMjU0LjgxNWMyNS4wNTQtMjUuMDUyIDY1LjY0LTI1LjA1MiA5MC42OTUgMCAyNS4wNTQgMjUuMDM2IDI1LjA1NCA2NS42NTIgMCA5MC42OUw0MjkuOTkzIDgxMS41OTljLTEyLjUyMyAxMi41MjctMjguOTM1IDE4Ljc5LTQ1LjM0NSAxOC43OXpcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qc1wiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanNcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImF1dGhvclwiLFxuICBcInVzZVwiOiBcImF1dGhvci11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDEwMjQgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiYXV0aG9yXFxcIj48cGF0aCBkPVxcXCJNNTEyIDBDMjI5LjIzMiAwIDAgMjI5LjIzMiAwIDUxMmMwIDI4Mi43NjggMjI5LjIzMiA1MTIgNTEyIDUxMiAyODIuNzg0IDAgNTEyLTIyOS4yMzIgNTEyLTUxMkMxMDI0IDIyOS4yMzIgNzk0Ljc4NCAwIDUxMiAwem0wIDkzOC43MDRjLTEwMy44NTYgMC0xOTkuNTItMzQuOTkyLTI3Ny4zMjgtOTMuNDU2IDU3LjcxMi01LjQyNCAxNjQuMzItMjkuNzQ0IDE2NS4zMjgtMTM2LjU2LjI4OC0zMS42MzIgMjEuOTY4LTQ2LjU3NiAwLTY5LjAwOC0yMi40MzItMjIuOTQ0LTM0Ljc1Mi03MC4yMDgtNDQuOC0xMTUuMDA4LTEuODcyLTguMzA0LTcuNDcyLTEzLjY2NC0xNC4wOC0xOC43ODQtMjcuNTUyLTcuODA4LTQ4LjExMi0zNy42OC00OC4xMTItNzMuNTY4IDAtMTguNDggNS42NjQtMzUuMTg0IDE0LjY4OC00OC4zMiAxLjUzNi03LjA3MiAyLjcwNC0xMy45MzYgMi42ODgtMjAuMzA0LS4xNi03MC42ODgtNS43NDQtMTQyLjM2OCAyMi40LTE4NCA5MS44NTYtMTM1Ljg1NiAyNjkuNTg0LTEzNy4wNzIgMzU4LjQxNiAwIDMwLjA2NCA0Ni4zNTIgMjIuNzIgMTEzLjU4NCAyMi40IDE4NC0uMDMyIDYgLjg5NiAxMi42MDggMi4xMjggMTkuNDQgOS4zOTIgMTMuMjY0IDE1LjI4IDMwLjMwNCAxNS4yOCA0OS4xODQgMCAzMy40NTYtMTcuOTY4IDYxLjUyLTQyLjcyIDcxLjUyLTkuNDI0IDcuNi0xOC4xNiAxMy4wODgtMTkuNTA0IDIwLjgzMi03LjU2OCA0NC4xNDQtMjguMzA0IDk1LjgyNC00NC43ODQgMTE1LjAwOC0xMy45MiAxNi4xNzYtLjMyIDM3LjM3NiAwIDY5LjAwOC45NzYgMTA2LjgxNiAxMDcuNiAxMzEuMTM2IDE2NS4zMTIgMTM2LjU2LTc3Ljc3NiA1OC40NjQtMTczLjUwNCA5My40NTYtMjc3LjMxMiA5My40NTZ6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanNcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJjb2RlXCIsXG4gIFwidXNlXCI6IFwiY29kZS11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTA0NSAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDEwNDUgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiY29kZVxcXCI+PHBhdGggZD1cXFwiTTMyNi44NTcgNzk5LjQyOUwyOTguMjg2IDgyOHEtNS43MTUgNS43MTQtMTMuMTQzIDUuNzE0VDI3MiA4MjhMNS43MTQgNTYxLjcxNFEwIDU1NiAwIDU0OC41NzF0NS43MTQtMTMuMTQyTDI3MiAyNjkuMTQzcTUuNzE0LTUuNzE0IDEzLjE0My01LjcxNHQxMy4xNDMgNS43MTRsMjguNTcxIDI4LjU3MXE1LjcxNCA1LjcxNSA1LjcxNCAxMy4xNDNUMzI2Ljg1NyAzMjRMMTAyLjI4NiA1NDguNTcxbDIyNC41NzEgMjI0LjU3MnE1LjcxNCA1LjcxNCA1LjcxNCAxMy4xNDN0LTUuNzE0IDEzLjE0M3ptMzM3LjcxNC02MDkuNzE1TDQ1MS40MyA5MjcuNDNxLTIuMjg2IDcuNDI4LTguODU4IDExLjE0MlQ0MjkuMTQzIDk0MGwtMzUuNDI5LTkuNzE0cS03LjQyOC0yLjI4Ni0xMS4xNDMtOC44NTd0LTEuNDI4LTE0bDIxMy4xNDMtNzM3LjcxNXEyLjI4NS03LjQyOCA4Ljg1Ny0xMS4xNDN0MTMuNDI4LTEuNDI4TDY1MiAxNjYuODU3cTcuNDI5IDIuMjg2IDExLjE0MyA4Ljg1N3QxLjQyOCAxNHptMzc1LjQyOSAzNzJMNzczLjcxNCA4MjhxLTUuNzE0IDUuNzE0LTEzLjE0MyA1LjcxNFQ3NDcuNDMgODI4bC0yOC41NzItMjguNTcxcS01LjcxNC01LjcxNS01LjcxNC0xMy4xNDN0NS43MTQtMTMuMTQzTDk0My40MyA1NDguNTcgNzE4Ljg1NyAzMjRxLTUuNzE0LTUuNzE0LTUuNzE0LTEzLjE0M3Q1LjcxNC0xMy4xNDNsMjguNTcyLTI4LjU3MXE1LjcxNC01LjcxNCAxMy4xNDItNS43MTR0MTMuMTQzIDUuNzE0TDEwNDAgNTM1LjQyOXE1LjcxNCA1LjcxNCA1LjcxNCAxMy4xNDJUMTA0MCA1NjEuNzE0elxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiY29nXCIsXG4gIFwidXNlXCI6IFwiY29nLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMDI0IDEwMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgMTAyNCAxMDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJjb2dcXFwiPjxwYXRoIGQ9XFxcIk0xMDI0IDU3NS4wMDh2LTEyOGwtMTUyLjk5Mi02My43NDRjLTQuMjU2LTEyLTguNzM2LTIzLjYxNi0xNC4yNC0zNS4wMDhsNjEuNzYtMTUzLjc2TDgyOCAxMDRsLTE1Mi4zODQgNjIuNzUyQzY2NCAxNjEuMTIgNjUyLjEyOCAxNTYuMzg0IDYzOS44NzIgMTUyTDU3NS4wMDggMGgtMTI4bC02My4yNjQgMTUxLjQ4OGMtMTIuNzM2IDQuNTEyLTI0Ljk5MiA5LjI0OC0zNy4xMiAxNS4wMDhsLTE1Mi4xMjgtNjEuMTJMMTA0IDE5NS44NzJsNjIuMDE2IDE1MC43NTJjLTYuMDE2IDEyLjM4NC0xMC44OCAyNC45OTItMTUuNTIgMzguMDE2TDAgNDQ4Ljk5MnYxMjhsMTUwLjYyNCA2Mi43NTJjNC42NCAxMi45OTIgOS42MzIgMjUuNjMyIDE1LjYxNiAzOC4wMTZsLTYwLjg2NCAxNTEuNzQ0TDE5NS44NzIgOTIwbDE1MS4xMzYtNjIuMjRjMTIuMTI4IDUuNzYgMjQuNTEyIDEwLjM2OCAzNy4yNDggMTQuNzUyTDQ0OC45OTIgMTAyNGgxMjhsNjMuMzYtMTUyLjI1NmMxMi4xMjgtNC41MTIgMjQuMTI4LTkuMjQ4IDM1LjYxNi0xNC43NTJsMTUzLjUwNCA2MS41MDRMOTE5Ljk2OCA4MjggODU2Ljk2IDY3NS4yNjRjNS4zNzYtMTEuNDg4IDkuNzYtMjMuMTM2IDE0LjAxNi0zNS4wMDhMMTAyNCA1NzUuMDA4ek01MTEuMDA4IDcwNGMtMTA1Ljk4NCAwLTE5Mi04Ni4wMTYtMTkyLTE5MnM4Ni4wMTYtMTkyIDE5Mi0xOTIgMTkyIDg2LjAxNiAxOTIgMTkyLTg2LjAxNiAxOTItMTkyIDE5MnpcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qc1wiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanNcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImNvbW1hbmRcIixcbiAgXCJ1c2VcIjogXCJjb21tYW5kLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMDI0IDEwMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgMTAyNCAxMDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJjb21tYW5kXFxcIj48cGF0aCBkPVxcXCJNNzY4IDg1LjM0cTcwLjY3NiAwIDEyMC42NjggNDkuOTkyVDkzOC42NiAyNTZ0LTQ5Ljk5MiAxMjAuNjY4VDc2OCA0MjYuNjZoLTg1LjM0djE3MC42Nkg3NjhxNzAuNjc2IDAgMTIwLjY2OCA0OS45OTFUOTM4LjY2IDc2Ny45OHQtNDkuOTkyIDEyMC42NjhUNzY4IDkzOC42Mzl0LTEyMC42NjgtNDkuOTkxVDU5Ny4zNCA3NjcuOTh2LTg1LjM0SDQyNi42OHY4NS4zNHEwIDcwLjY3Ni00OS45OTEgMTIwLjY2OFQyNTYuMDIgOTM4LjYzOXQtMTIwLjY2OC00OS45OTFUODUuMzYxIDc2Ny45OHQ0OS45OTEtMTIwLjY2OVQyNTYuMDIgNTk3LjMyaDg1LjM0VjQyNi42NmgtODUuMzRxLTcwLjY3NiAwLTEyMC42NjgtNDkuOTkyVDg1LjM2MSAyNTZ0NDkuOTkxLTEyMC42NjhUMjU2LjAyIDg1LjM0dDEyMC42NjkgNDkuOTkyVDQyNi42OCAyNTZ2ODUuMzRoMTcwLjY2VjI1NnEwLTcwLjY3NiA0OS45OTItMTIwLjY2OFQ3NjggODUuMzR6TTM0MS4zNCA3Njh2LTg1LjM0SDI1NnEtMzUuMzI4IDAtNjAuMzM0IDI1LjAwNlQxNzAuNjYgNzY4dDI1LjAwNiA2MC4zMzRUMjU2IDg1My4zNHQ2MC4zMzQtMjUuMDA2VDM0MS4zNCA3Njh6TTI1NiAxNzAuNjZxLTM1LjMyOCAwLTYwLjMzNCAyNS4wMDZUMTcwLjY2IDI1NnQyNS4wMDYgNjAuMzM0VDI1NiAzNDEuMzRoODUuMzRWMjU2cTAtMzUuMzI4LTI1LjAwNi02MC4zMzRUMjU2IDE3MC42NnptMzQxLjM0IDQyNi42OFY0MjYuNjhINDI2LjY4djE3MC42NmgxNzAuNjZ6TTc2OCA2ODIuNjZoLTg1LjM0Vjc2OHEwIDM1LjMyOCAyNS4wMDYgNjAuMzM0VDc2OCA4NTMuMzR0NjAuMzM0LTI1LjAwNlQ4NTMuMzQgNzY4dC0yNS4wMDYtNjAuMzM0VDc2OCA2ODIuNjZ6bTAtNTEycS0zNS4zMjggMC02MC4zMzQgMjUuMDA2VDY4Mi42NiAyNTZ2ODUuMzRINzY4cTM1LjMyOCAwIDYwLjMzNC0yNS4wMDZUODUzLjM0IDI1NnQtMjUuMDA2LTYwLjMzNFQ3NjggMTcwLjY2elxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiZmlsdGVyXCIsXG4gIFwidXNlXCI6IFwiZmlsdGVyLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMDI0IDEwMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgMTAyNCAxMDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJmaWx0ZXJcXFwiPjxwYXRoIGQ9XFxcIk02Ni44NTcgMGg4OTAuMjg2YzUzLjI1NyAwIDgzLjIxNSA2MS4yNTIgNTAuNTIgMTAzLjI5Mkw2NDAgNTc2djQyMC4zODZjMCAxMi42ODctMTMuMzUzIDIwLjkzOS0yNC43IDE1LjI2NEw0MDEuNjg3IDkwNC44NDVhMzIgMzIgMCAwMS0xNy42OS0yOC42MjFWNTc2TDE2LjM0IDEwMy4yOTJDLTE2LjM1OCA2MS4yNTIgMTMuNiAwIDY2Ljg1NyAwelxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiaG9tZVwiLFxuICBcInVzZVwiOiBcImhvbWUtdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcImhvbWVcXFwiPjxwYXRoIGQ9XFxcIk05MzcuNzcyIDU3My4zNUg4ODAuNGMtMjUuMzQ5IDAtNDUuODk4IDIwLjYxNS00NS44OTggNDYuMDQ3djMxMC44MjJjMCAxOS4wNzUtMTUuNDEzIDM0LjUzNC0zNC40MjMgMzQuNTM0SDYxNi40ODhjLTE5LjAxIDAtMzQuNDIzLTE1LjQ2LTM0LjQyMy0zNC41MzRWNzExLjQ5MUg0NDQuMzczVjkzMC4yMmMwIDE5LjA3NS0xNS40MTIgMzQuNTM0LTM0LjQyNSAzNC41MzRIMjI2LjM1NmMtMTkuMDEgMC0zNC40Mi0xNS40Ni0zNC40Mi0zNC41MzRWNjE5LjM5NmMwLTI1LjQzMS0yMC41NS00Ni4wNDgtNDUuODk5LTQ2LjA0OEg4OC42NjVjLTE5LjAxMyAwLTM0LjQyNS0xNS40NjMtMzQuNDI1LTM0LjUzNSAwLTQuODk5IDEuMDc1LTkuNTIxIDIuOTA5LTEzLjc0M2EzNC40NTggMzQuNDU4IDAgMDE3LjYwMy0xMS41NDZMNDc3LjU3IDc2LjY0YzkuNjU3LTkuNjggMjMuNTUyLTEyLjEzMyAzNS42NDktNy45NSAxMi4wOTYtNC4xODMgMjUuOTkyLTEuNzMgMzUuNjQ5IDcuOTVsNDEyLjgxNiA0MzYuODg0YTM0LjQ5NSAzNC40OTUgMCAwMTcuNjA1IDExLjU0NmMxLjgzNCA0LjIyIDIuOTA2IDguODQ0IDIuOTA2IDEzLjc0MyAwIDE5LjA3Mi0xNS40MTIgMzQuNTM1LTM0LjQyMyAzNC41MzV6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanNcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJpbmZvXCIsXG4gIFwidXNlXCI6IFwiaW5mby11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDEwMjQgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiaW5mb1xcXCI+PHBhdGggZD1cXFwiTTkwMi40IDI4NS42Yy00MC02OC44LTk1LjItMTI0LTE2NC0xNjRzLTE0NC44LTYwLTIyNi40LTYwLTE1Ni44IDIwLTIyNi40IDYwLjgtMTIzLjIgOTQuNC0xNjQgMTYzLjItNjAgMTQ0LjgtNjAgMjI2LjQgMjAgMTU2LjggNjAuOCAyMjYuNCA5NS4yIDEyNCAxNjQgMTY0IDE0NC44IDYwLjggMjI2LjQgNjAuOCAxNTYuOC0yMCAyMjYuNC02MC44IDEyNC05NS4yIDE2NC0xNjRTOTY0IDU5My42IDk2NCA1MTJjLTEuNi04MS42LTIxLjYtMTU2LjgtNjEuNi0yMjYuNHptLTMzMS4yIDQ4MGMwIDMxLjItMjMuMiA1Ni44LTUxLjIgNTYuOGgtMTYuOGMtMjggMC01MS4yLTI1LjYtNTEuMi01Ni44VjQ4Mi40YzAtMzEuMiAyMy4yLTU2LjggNTEuMi01Ni44SDUyMGMyOCAwIDUxLjIgMjUuNiA1MS4yIDU2Ljh2MjgzLjJ6bS02MC00MjQuOGMtMzguNCAwLTY5LjYtMzEuMi02OS42LTY5LjZzMzEuMi02OS42IDY5LjYtNjkuNmMzOC40IDAgNjkuNiAzMS4yIDY5LjYgNjkuNnMtMzEuMiA2OS42LTY5LjYgNjkuNnpcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qc1wiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanNcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcIm1vcmVcIixcbiAgXCJ1c2VcIjogXCJtb3JlLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMDI0IDEwMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgMTAyNCAxMDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJtb3JlXFxcIj5cXG4gIDxjaXJjbGUgY3g9XFxcIjUxMlxcXCIgY3k9XFxcIjE1MFxcXCIgcj1cXFwiMTAwXFxcIiAvPlxcbiAgPGNpcmNsZSBjeD1cXFwiNTEyXFxcIiBjeT1cXFwiNTEyXFxcIiByPVxcXCIxMDBcXFwiIC8+XFxuICA8Y2lyY2xlIGN4PVxcXCI1MTJcXFwiIGN5PVxcXCI4NzRcXFwiIHI9XFxcIjEwMFxcXCIgLz5cXG48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwicGx1c1wiLFxuICBcInVzZVwiOiBcInBsdXMtdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcInBsdXNcXFwiPjxwYXRoIGQ9XFxcIk04OTkuOTAxIDYwMC4zOEg2MDAuNzI4djI5OS4xNzNjMCA3NC4zODMtMTc5LjUwMyA3NC4zODMtMTc5LjUwMyAwVjYwMC4zOEgxMjIuMDUxYy03NC4zODQgMC03NC4zODQtMTc5LjUwMyAwLTE3OS41MDNoMjk5LjE3M1YxMjEuNzAzYzAtNzQuMzg0IDE3OS41MDMtNzQuMzg0IDE3OS41MDMgMHYyOTkuMTc0SDg5OS45Yzc0LjM4NSAwIDc0LjM4NSAxNzkuNTAzLjAwMSAxNzkuNTAzelxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwicXVlc3Rpb25cIixcbiAgXCJ1c2VcIjogXCJxdWVzdGlvbi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDEwMjQgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwicXVlc3Rpb25cXFwiPjxwYXRoIGQ9XFxcIk01MTMuNjcyIDQ5LjE1OGMtMjU2LjM1OCAwLTQ2NC4xNzggMjA3LjgxOS00NjQuMTc4IDQ2NC4xNzYgMCAyNTYuMzU4IDIwNy44MiA0NjQuMTc3IDQ2NC4xNzcgNDY0LjE3N1M5NzcuODUgNzY5LjY5MyA5NzcuODUgNTEzLjMzNGMwLTI1Ni4zNTctMjA3LjgyLTQ2NC4xNzYtNDY0LjE3Ny00NjQuMTc2em0wIDc4OC4zYy0zMC45NCAwLTU2LjAyLTI1LjA4LTU2LjAyLTU2LjAyIDAtMzAuOTQgMjUuMDgxLTU2LjAyMSA1Ni4wMi01Ni4wMjEgMzAuOTQgMCA1Ni4wMjEgMjUuMDggNTYuMDIxIDU2LjAyIDAgMzAuOTQtMjUuMDgxIDU2LjAyMS01Ni4wMiA1Ni4wMjF6bTk4LjAzNy0zMzUuMDkyYy01NS4zOTcgMzcuMjEtNTQuMDIgMTE3LjA4OC01NC4wMiAxMTcuMDg4IDAgMjQuMzEtMTkuNjU3IDQ0LjA4Ny00My45NjcgNDQuMDg3cy00My45NjYtMTkuNTY3LTQzLjk2Ni00My44NzdjMC0xMTcuMDU0IDg0LjEwNy0xNzguMzU2IDEwNC4zMDgtMTkwLjM2IDIzLjk3NC0xMi4wMDUgNDcuMDQyLTM2LjU5IDQ3LjA0Mi02NS44NTcgMC0zOS4yNjgtMzEuNDA0LTcxLjQ5NC0xMDcuNDM0LTcyLjIwNi03Ni4wMjkuNzEyLTEwNy45NCAzMC4wMi0xMDcuOTQgNzAuMDM2IDAgMC0uMDI2IDEuMzMyLS4wMjYgMi4wMTEgMCAyNC4zMS0yMC42NjkgNDQuMDE3LTQ0Ljk3OCA0NC4wMTdzLTQ1LjAwNC0xOS43MDctNDUuMDA0LTQ0LjAxN3YtMi4wMWMwLTg4LjAzNSA3Mi45MTMtMTU3LjM1OSAxOTYuOTYyLTE1OC4wNyAxMjQuMDQ3LjcxMSAxOTUuOTEyIDcyLjAyNyAxOTUuOTEyIDE1OS45NzctLjAwMSA2Ni42NzMtMzMuMzY0IDk5LjY2Ni05Ni44OSAxMzkuMTh6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanNcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJyZWZyZXNoXCIsXG4gIFwidXNlXCI6IFwicmVmcmVzaC11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMjAwIDIwMFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCAyMDAgMjAwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJyZWZyZXNoXFxcIj48cGF0aCBkPVxcXCJNMTgyLjkyNCAxMTcuODU3cTAgLjU1OC0uMTEyLjc4MS03LjE0MiAyOS45MTEtMjkuOTEgNDguNDk0dC01My4zNDggMTguNTgycS0xNi4yOTUgMC0zMS41My02LjEzOHQtMjcuMTc2LTE3LjUyMkwyNi40NTEgMTc2LjQ1cS0yLjEyIDIuMTItNS4wMjIgMi4xMnQtNS4wMjMtMi4xMi0yLjEyLTUuMDIydi01MHEwLTIuOTAyIDIuMTItNS4wMjN0NS4wMjMtMi4xMmg1MHEyLjkwMSAwIDUuMDIyIDIuMTJ0Mi4xMiA1LjAyMy0yLjEyIDUuMDIybC0xNS4yOSAxNS4yOXE3LjkyNCA3LjM2NiAxNy45NjggMTEuMzg0VDEwMCAxNTcuMTQzcTE0Ljk1NSAwIDI3LjkwMi03LjI1NXQyMC43NTktMTkuOTc3cTEuMjI3LTEuODk4IDUuOTE1LTEzLjA1OC44OTMtMi41NjcgMy4zNDgtMi41NjdoMjEuNDI5cTEuNDUgMCAyLjUxIDEuMDZ0MS4wNjEgMi41MTF6bTIuNzktODkuMjg2djUwcTAgMi45MDItMi4xMiA1LjAyM3QtNS4wMjMgMi4xMmgtNTBxLTIuOTAxIDAtNS4wMjItMi4xMnQtMi4xMi01LjAyMyAyLjEyLTUuMDIybDE1LjQwMi0xNS40MDJRMTIyLjQzMyA0Mi44NTcgMTAwIDQyLjg1N3EtMTQuOTU1IDAtMjcuOTAyIDcuMjU1VDUxLjM0IDcwLjA4OXEtMS4yMjcgMS44OTgtNS45MTUgMTMuMDU4LS44OTMgMi41NjctMy4zNDggMi41NjdoLTIyLjIxcS0xLjQ1IDAtMi41MTEtMS4wNnQtMS4wNi0yLjUxMXYtLjc4MVEyMy41NSA1MS40NTEgNDYuNDMgMzIuODY4VDEwMCAxNC4yODZxMTYuMjk1IDAgMzEuNjk2IDYuMTk0dDI3LjM0NCAxNy40NjZsMTQuNTEtMTQuMzk3cTIuMTItMi4xMiA1LjAyMS0yLjEydDUuMDIzIDIuMTIgMi4xMiA1LjAyMnpcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qc1wiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanNcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcInNlYXJjaFwiLFxuICBcInVzZVwiOiBcInNlYXJjaC11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMjAwIDIwMFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCAyMDAgMjAwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJzZWFyY2hcXFwiPjxwYXRoIGQ9XFxcIk0xOTUuMTM4IDE3MS41NWwtNDcuODUtNDcuODYzYy0uNTUtLjU2Mi0xLjE3NS0uOTc0LTEuNzYzLTEuNDM3IDguMDg4LTEyLjQxMiAxMi44LTI3LjE4NyAxMi44LTQzLjEgMC00My43MjUtMzUuNDM3LTc5LjE3NS03OS4xNjItNzkuMTc1QzM1LjQ1LS4wMTIgMCAzNS40MzggMCA3OS4xNjNzMzUuNDYzIDc5LjE2MiA3OS4xNjMgNzkuMTYyYzE1LjkxMiAwIDMwLjctNC43MjUgNDMuMTI1LTEyLjgxMi40NS41ODcuODc1IDEuMTg3IDEuNDEyIDEuNzVsNDcuODYzIDQ3Ljg3NWExNi42NSAxNi42NSAwIDAwMTEuNzg3IDQuODc1IDE2LjY1IDE2LjY1IDAgMDAxMS43ODgtNC44NzVjNi40ODctNi41MTMgNi40ODctMTcuMDc1IDAtMjMuNTg4TTc5LjE2MyAxMzMuMzI1QzQ5LjMgMTMzLjMyNSAyNSAxMDkuMDI1IDI1IDc5LjE2M3MyNC4zMTMtNTQuMTc1IDU0LjE2My01NC4xNzVjMjkuODYyIDAgNTQuMTYyIDI0LjMxMiA1NC4xNjIgNTQuMTc1cy0yNC4zIDU0LjE2Mi01NC4xNjIgNTQuMTYyXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanNcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJ0b2dnbGUtb2ZmXCIsXG4gIFwidXNlXCI6IFwidG9nZ2xlLW9mZi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTE3MSAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDExNzEgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwidG9nZ2xlLW9mZlxcXCI+PHBhdGggZD1cXFwiTTY1OC4yODYgNTEycTAtNTkuNDY1LTIzLjExMy0xMTMuNDQ1dC02Mi41MzgtOTMuNDAzLTkzLjQwMy02Mi41MzctMTEzLjQ0NS0yMy4xMTMtMTEzLjQ0NCAyMy4xMTMtOTMuNDA0IDYyLjUzNy02Mi41MzcgOTMuNDAzVDczLjI5IDUxMnQyMy4xMTMgMTEzLjQ0NSA2Mi41MzcgOTMuNDAzIDkzLjQwNCA2Mi41MzcgMTEzLjQ0NCAyMy4xMTMgMTEzLjQ0NS0yMy4xMTMgOTMuNDAzLTYyLjUzNyA2Mi41MzgtOTMuNDAzVDY1OC4yODYgNTEyem00MzguODU3IDBxMC01OS40NjUtMjMuMTEzLTExMy40NDV0LTYyLjUzNy05My40MDMtOTMuNDA0LTYyLjUzNy0xMTMuNDQ0LTIzLjExM2gtMjIwLjZxNjguMDI0IDUxLjQyIDEwNy43NCAxMjh0MzkuNzE3IDE2NC41NzEtMzkuNzE3IDE2NC41NzItMTA3Ljc0IDEyOGgyMjAuNnE1OS40NjUgMCAxMTMuNDQ0LTIzLjExNHQ5My40MDQtNjIuNTM3IDYyLjUzNy05My40MDMgMjMuMTEzLTExMy40NDV6bTczLjE0MyAwcTAgNzQuMzEzLTI5LjExMSAxNDEuOTd0LTc3Ljk3IDExNi41OS0xMTYuNTkgNzcuOTctMTQxLjk3IDI5LjExMUgzNjUuNzg3cS03NC4zMTMgMC0xNDEuOTctMjkuMTF0LTExNi41OS03Ny45NzEtNzcuOTctMTE2LjU5VC4xNDcgNTEydDI5LjExLTE0MS45NyA3Ny45Ny0xMTYuNTkgMTE2LjU5LTc3Ljk3IDE0MS45Ny0yOS4xMTFoNDM4Ljg1OHE3NC4zMTMgMCAxNDEuOTcgMjkuMTF0MTE2LjU5IDc3Ljk3MSA3Ny45NyAxMTYuNTkgMjkuMTEgMTQxLjk3elxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwidG9nZ2xlLW9uXCIsXG4gIFwidXNlXCI6IFwidG9nZ2xlLW9uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMTcxIDEwMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB2aWV3Qm94PVxcXCIwIDAgMTE3MSAxMDI0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIGlkPVxcXCJ0b2dnbGUtb25cXFwiPjxwYXRoIGQ9XFxcIk0wIDUxMnEwLTc0LjMxMyAyOS4xMS0xNDEuOTd0NzcuOTcxLTExNi41OSAxMTYuNTktNzcuOTcgMTQxLjk3LTI5LjExMWg0MzguODU3cTc0LjMxMyAwIDE0MS45NyAyOS4xMXQxMTYuNTkgNzcuOTcxIDc3Ljk3IDExNi41OVQxMTcwLjE0IDUxMnQtMjkuMTEgMTQxLjk3LTc3Ljk3IDExNi41OS0xMTYuNTkgNzcuOTctMTQxLjk3IDI5LjExMUgzNjUuNjRxLTc0LjMxMyAwLTE0MS45Ny0yOS4xMVQxMDcuMDggNzcwLjU2IDI5LjExIDY1My45NyAwIDUxMnptODA0LjU3MSAyOTIuNTcxcTU5LjQ2NiAwIDExMy40NDUtMjMuMTEzdDkzLjQwMy02Mi41MzcgNjIuNTM4LTkzLjQwMyAyMy4xMTMtMTEzLjQ0NS0yMy4xMTMtMTEzLjQ0NC02Mi41MzgtOTMuNDA0LTkzLjQwMy02Mi41MzctMTEzLjQ0NS0yMy4xMTMtMTEzLjQ0NCAyMy4xMTMtOTMuNDA0IDYyLjUzNy02Mi41MzcgOTMuNDA0LTIzLjExMyAxMTMuNDQ0IDIzLjExMyAxMTMuNDQ1IDYyLjUzNyA5My40MDMgOTMuNDA0IDYyLjUzNyAxMTMuNDQ0IDIzLjExM3pcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qc1wiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanNcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcInRyYXNoXCIsXG4gIFwidXNlXCI6IFwidHJhc2gtdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcInRyYXNoXFxcIj48cGF0aCBkPVxcXCJNOTYwLjA5IDIyNC4wMmMwIDExLjQ1NS04LjkxNiAyMC4zNjQtMjAuMzcyIDIwLjM2NGgtNjEuMDk0djYwMy4zMzRjMCA3MC4wMDQtNDUuODI0IDEyOS44My0xMDEuODMgMTI5LjgzSDI0Ny4yOWMtNTYuMDA3IDAtMTAxLjgzLTU3LjI4LTEwMS44My0xMjcuMjg5VjI0NC4zOUg4NC4zNjRDNzIuOTA5IDI0NC4zOSA2NCAyMzUuNDgyIDY0IDIyNC4wMjZ2LTQwLjczYzAtMTEuNDU2IDguOTA5LTIwLjM2NSAyMC4zNjUtMjAuMzY1aDE5Ni42NTlsNDQuNTUtMTA2LjI5MUMzMzguMjk4IDI1LjQ2IDM3Ni40ODYgMCA0MTAuMjE0IDBINjEzLjg3YzMzLjczNCAwIDcxLjkxNyAyNS40NiA4NC42NTMgNTYuNjRsNDQuNTUgMTA2LjI4NWgxOTYuNjUzYzExLjQ1NiAwIDIwLjM3MSA4LjkwOSAyMC4zNzEgMjAuMzY1djQwLjczem0tMTYyLjkyNSAyMC4zN2gtNTcwLjI0djYwMy4zMzVjMCAzMC41NDcgMTcuMTg0IDQ4LjM3MSAyMC4zNjUgNDguMzcxaDUyOS41MDRjMy4xODcgMCAyMC4zNy0xNy44MTggMjAuMzctNDguMzcxVjI0NC4zOXpNMzg5Ljg1IDc1My41M2MwIDExLjQ1LTguOTEgMjAuMzY0LTIwLjM2NSAyMC4zNjRoLTQwLjczYy0xMS40NTYgMC0yMC4zNjUtOC45MTUtMjAuMzY1LTIwLjM2NFYzODYuOTQ0YzAtMTEuNDU2IDguOTEtMjAuMzY1IDIwLjM2NS0yMC4zNjVoNDAuNzNjMTEuNDU2IDAgMjAuMzY1IDguOTA5IDIwLjM2NSAyMC4zNjVWNzUzLjUzem0yNjQuNzU1LTU5MC42MDVMNjI0LjA1OCA4OC40NmMtMS45MTQtMi41NDEtNy42MzYtNi4zNjItMTAuODE2LTcuMDAySDQxMS40ODhjLTMuODIuNjQtOC45MDkgNC40NTUtMTAuODE2IDcuMDAybC0zMS4xODcgNzQuNDY0aDI4NS4xMnpNNTUyLjc3NSA3NTMuNTNjMCAxMS40NS04LjkxNiAyMC4zNjQtMjAuMzcyIDIwLjM2NGgtNDAuNzNjLTExLjQ1NSAwLTIwLjM2NC04LjkxNS0yMC4zNjQtMjAuMzY0VjM4Ni45NDRjMC0xMS40NTYgOC45MDktMjAuMzY1IDIwLjM2NS0yMC4zNjVoNDAuNzNjMTEuNDU1IDAgMjAuMzcgOC45MDkgMjAuMzcgMjAuMzY1Vjc1My41M3ptMTYyLjkyNCAwYzAgMTEuNDUtOC45MTUgMjAuMzY0LTIwLjM3MSAyMC4zNjRoLTQwLjcyM2MtMTEuNDU2IDAtMjAuMzcxLTguOTE1LTIwLjM3MS0yMC4zNjRWMzg2Ljk0NGMwLTExLjQ1NiA4LjkxNS0yMC4zNjUgMjAuMzctMjAuMzY1aDQwLjcyNGMxMS40NTYgMCAyMC4zNzEgOC45MDkgMjAuMzcxIDIwLjM2NVY3NTMuNTN6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanNcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJ1bmRvXCIsXG4gIFwidXNlXCI6IFwidW5kby11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgdmlld0JveD1cXFwiMCAwIDEwMjQgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwidW5kb1xcXCI+PHBhdGggZD1cXFwiTTU5Ni42NzcgMjQ4LjEyM2MyMDQuOCAwIDM3Mi4xODUgMTY1LjQxNSAzNzIuMTg1IDM3Mi4xODVTODAxLjQ3NyA5OTIuNDkyIDU5Ni42NzcgOTkyLjQ5Mkg0MzUuMmMtMTUuNzU0IDAtMjUuNi0xMS44MTUtMjUuNi0yNy41Njl2LTYzLjAxNWMwLTE1Ljc1NCAxMS44MTUtMjkuNTM5IDI3LjU3LTI5LjUzOWgxNTkuNTA3YzEzOS44MTUgMCAyNTIuMDYxLTExMi4yNDYgMjUyLjA2MS0yNTIuMDYxUzczNi40OTIgMzY4LjI0NiA1OTYuNjc3IDM2OC4yNDZIMzIyLjk1NHMtMTUuNzU0IDAtMjEuNjYyIDEuOTdjLTE1Ljc1NCA3Ljg3Ni0xMS44MTUgMTkuNjkyIDEuOTcgMzMuNDc2bDk2LjQ5MiA5Ni40OTNjMTEuODE1IDExLjgxNSA5Ljg0NiAyOS41MzgtMS45NyA0MS4zNTNsLTQzLjMyMiA0My4zMjRjLTExLjgxNiAxMS44MTUtMjUuNiAxMS44MTUtMzcuNDE2IDEuOTY5bC0yNTYtMjU2YTI0Ljk2IDI0Ljk2IDAgMDEwLTM1LjQ0NmwyNTQuMDMtMjU0LjAzMWMxMS44MTYtMTEuODE2IDMxLjUwOS0xMS44MTYgNDEuMzU1IDBsNDEuMzU0IDQxLjM1NGMxMS44MTUgMTEuODE1IDExLjgxNSAzMS41MDcgMCA0MS4zNTRsLTk2LjQ5MyA5Ni40OTJjLTExLjgxNSAxMS44MTUtMTEuODE1IDI1LjYgNy44NzcgMjUuNmgxMy43ODVsMjczLjcyMyAxLjk3elxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkJyb3dzZXJTcHJpdGUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cblxuXG5cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBkZWVwbWVyZ2UgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIHVuZGVmaW5lZCA9PT0gJ2Z1bmN0aW9uJyAmJiB1bmRlZmluZWQuYW1kKSB7XG4gICAgICAgIHVuZGVmaW5lZChmYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9XG59KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoKSB7XG5cbmZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbCkge1xuICAgIHZhciBub25OdWxsT2JqZWN0ID0gdmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xuXG4gICAgcmV0dXJuIG5vbk51bGxPYmplY3RcbiAgICAgICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IFJlZ0V4cF0nXG4gICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBEYXRlXSdcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVJZk5lY2Vzc2FyeSh2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGNsb25lID0gb3B0aW9uc0FyZ3VtZW50ICYmIG9wdGlvbnNBcmd1bWVudC5jbG9uZSA9PT0gdHJ1ZTtcbiAgICByZXR1cm4gKGNsb25lICYmIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSkgPyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSA6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01lcmdlYWJsZU9iamVjdChlKSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ucHVzaChjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB7fTtcbiAgICBpZiAoaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3NhcnkodGFyZ2V0W2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZUlmTmVjZXNzYXJ5KHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRpb25zQXJndW1lbnQgfHwgeyBhcnJheU1lcmdlOiBkZWZhdWx0QXJyYXlNZXJnZSB9O1xuICAgIHZhciBhcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXG4gICAgaWYgKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRhcmdldCkgPyBhcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIDogY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgfHwgYXJyYXkubGVuZ3RoIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheSB3aXRoIGF0IGxlYXN0IHR3byBlbGVtZW50cycpXG4gICAgfVxuXG4gICAgLy8gd2UgYXJlIHN1cmUgdGhlcmUgYXJlIGF0IGxlYXN0IDIgdmFsdWVzLCBzbyBpdCBpcyBzYWZlIHRvIGhhdmUgbm8gaW5pdGlhbCB2YWx1ZVxuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuICAgICAgICByZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9KVxufTtcblxucmV0dXJuIGRlZXBtZXJnZVxuXG59KSk7XG59KTtcblxuLy8gICAgICBcbi8vIEFuIGV2ZW50IGhhbmRsZXIgY2FuIHRha2UgYW4gb3B0aW9uYWwgZXZlbnQgYXJndW1lbnRcbi8vIGFuZCBzaG91bGQgbm90IHJldHVybiBhIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbi8vIEFuIGFycmF5IG9mIGFsbCBjdXJyZW50bHkgcmVnaXN0ZXJlZCBldmVudCBoYW5kbGVycyBmb3IgYSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuLy8gQSBtYXAgb2YgZXZlbnQgdHlwZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIFxuXG4vKiogTWl0dDogVGlueSAofjIwMGIpIGZ1bmN0aW9uYWwgZXZlbnQgZW1pdHRlciAvIHB1YnN1Yi5cbiAqICBAbmFtZSBtaXR0XG4gKiAgQHJldHVybnMge01pdHR9XG4gKi9cbmZ1bmN0aW9uIG1pdHQoYWxsICAgICAgICAgICAgICAgICApIHtcblx0YWxsID0gYWxsIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLCBvciBgXCIqXCJgIGZvciBhbGwgZXZlbnRzXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgRnVuY3Rpb24gdG8gY2FsbCBpbiByZXNwb25zZSB0byBnaXZlbiBldmVudFxuXHRcdCAqIEBtZW1iZXJPZiBtaXR0XG5cdFx0ICovXG5cdFx0b246IGZ1bmN0aW9uIG9uKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHQoYWxsW3R5cGVdIHx8IChhbGxbdHlwZV0gPSBbXSkpLnB1c2goaGFuZGxlcik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdG9mZjogZnVuY3Rpb24gb2ZmKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHRpZiAoYWxsW3R5cGVdKSB7XG5cdFx0XHRcdGFsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcikgPj4+IDAsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnZva2UgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKiBJZiBwcmVzZW50LCBgXCIqXCJgIGhhbmRsZXJzIGFyZSBpbnZva2VkIGFmdGVyIHR5cGUtbWF0Y2hlZCBoYW5kbGVycy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICBUaGUgZXZlbnQgdHlwZSB0byBpbnZva2Vcblx0XHQgKiBAcGFyYW0ge0FueX0gW2V2dF0gIEFueSB2YWx1ZSAob2JqZWN0IGlzIHJlY29tbWVuZGVkIGFuZCBwb3dlcmZ1bCksIHBhc3NlZCB0byBlYWNoIGhhbmRsZXJcblx0XHQgKiBAbWVtYmVyb2YgbWl0dFxuXHRcdCAqL1xuXHRcdGVtaXQ6IGZ1bmN0aW9uIGVtaXQodHlwZSAgICAgICAgLCBldnQgICAgICkge1xuXHRcdFx0KGFsbFt0eXBlXSB8fCBbXSkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IGhhbmRsZXIoZXZ0KTsgfSk7XG5cdFx0XHQoYWxsWycqJ10gfHwgW10pLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyBoYW5kbGVyKHR5cGUsIGV2dCk7IH0pO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIG5hbWVzcGFjZXNfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbnZhciBuYW1lc3BhY2VzID0ge1xuICBzdmc6IHtcbiAgICBuYW1lOiAneG1sbnMnLFxuICAgIHVyaTogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICB9LFxuICB4bGluazoge1xuICAgIG5hbWU6ICd4bWxuczp4bGluaycsXG4gICAgdXJpOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmFtZXNwYWNlcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufSk7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBvYmplY3RUb0F0dHJzU3RyaW5nID0gZnVuY3Rpb24gKGF0dHJzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhhdHRycykubWFwKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cnNbYXR0cl0udG9TdHJpbmcoKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gICAgcmV0dXJuIChhdHRyICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIik7XG4gIH0pLmpvaW4oJyAnKTtcbn07XG5cbnZhciBzdmcgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rID0gbmFtZXNwYWNlc18xLnhsaW5rO1xuXG52YXIgZGVmYXVsdEF0dHJzID0ge307XG5kZWZhdWx0QXR0cnNbc3ZnLm5hbWVdID0gc3ZnLnVyaTtcbmRlZmF1bHRBdHRyc1t4bGluay5uYW1lXSA9IHhsaW5rLnVyaTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRlbnRdXG4gKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciB3cmFwSW5TdmdTdHJpbmcgPSBmdW5jdGlvbiAoY29udGVudCwgYXR0cmlidXRlcykge1xuICBpZiAoIGNvbnRlbnQgPT09IHZvaWQgMCApIGNvbnRlbnQgPSAnJztcblxuICB2YXIgYXR0cnMgPSBkZWVwbWVyZ2UoZGVmYXVsdEF0dHJzLCBhdHRyaWJ1dGVzIHx8IHt9KTtcbiAgdmFyIGF0dHJzUmVuZGVyZWQgPSBvYmplY3RUb0F0dHJzU3RyaW5nKGF0dHJzKTtcbiAgcmV0dXJuIChcIjxzdmcgXCIgKyBhdHRyc1JlbmRlcmVkICsgXCI+XCIgKyBjb250ZW50ICsgXCI8L3N2Zz5cIik7XG59O1xuXG52YXIgc3ZnJDEgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rJDEgPSBuYW1lc3BhY2VzXzEueGxpbms7XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICBhdHRyczogKCBvYmogPSB7XG4gICAgc3R5bGU6IFsncG9zaXRpb246IGFic29sdXRlJywgJ3dpZHRoOiAwJywgJ2hlaWdodDogMCddLmpvaW4oJzsgJyksXG4gICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gIH0sIG9ialtzdmckMS5uYW1lXSA9IHN2ZyQxLnVyaSwgb2JqW3hsaW5rJDEubmFtZV0gPSB4bGluayQxLnVyaSwgb2JqIClcbn07XG52YXIgb2JqO1xuXG52YXIgU3ByaXRlID0gZnVuY3Rpb24gU3ByaXRlKGNvbmZpZykge1xuICB0aGlzLmNvbmZpZyA9IGRlZXBtZXJnZShkZWZhdWx0Q29uZmlnLCBjb25maWcgfHwge30pO1xuICB0aGlzLnN5bWJvbHMgPSBbXTtcbn07XG5cbi8qKlxuICogQWRkIG5ldyBzeW1ib2wuIElmIHN5bWJvbCB3aXRoIHRoZSBzYW1lIGlkIGV4aXN0cyBpdCB3aWxsIGJlIHJlcGxhY2VkLlxuICogQHBhcmFtIHtTcHJpdGVTeW1ib2x9IHN5bWJvbFxuICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gc3ltYm9sIHdhcyBhZGRlZCwgYGZhbHNlYCAtIHJlcGxhY2VkXG4gKi9cblNwcml0ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChzeW1ib2wpIHtcbiAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIHN5bWJvbHMgPSByZWYuc3ltYm9scztcbiAgdmFyIGV4aXN0aW5nID0gdGhpcy5maW5kKHN5bWJvbC5pZCk7XG5cbiAgaWYgKGV4aXN0aW5nKSB7XG4gICAgc3ltYm9sc1tzeW1ib2xzLmluZGV4T2YoZXhpc3RpbmcpXSA9IHN5bWJvbDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzeW1ib2xzLnB1c2goc3ltYm9sKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzeW1ib2wgJiBkZXN0cm95IGl0XG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCAtIHN5bWJvbCB3YXMgZm91bmQgJiBzdWNjZXNzZnVsbHkgZGVzdHJveWVkLCBgZmFsc2VgIC0gb3RoZXJ3aXNlXG4gKi9cblNwcml0ZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlIChpZCkge1xuICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgc3ltYm9scyA9IHJlZi5zeW1ib2xzO1xuICB2YXIgc3ltYm9sID0gdGhpcy5maW5kKGlkKTtcblxuICBpZiAoc3ltYm9sKSB7XG4gICAgc3ltYm9scy5zcGxpY2Uoc3ltYm9scy5pbmRleE9mKHN5bWJvbCksIDEpO1xuICAgIHN5bWJvbC5kZXN0cm95KCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7U3ByaXRlU3ltYm9sfG51bGx9XG4gKi9cblNwcml0ZS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIGZpbmQgKGlkKSB7XG4gIHJldHVybiB0aGlzLnN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmlkID09PSBpZDsgfSlbMF0gfHwgbnVsbDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5TcHJpdGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoaWQpIHtcbiAgcmV0dXJuIHRoaXMuZmluZChpZCkgIT09IG51bGw7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkgKCkge1xuICB2YXIgcmVmID0gdGhpcy5jb25maWc7XG4gICAgdmFyIGF0dHJzID0gcmVmLmF0dHJzO1xuICB2YXIgc3RyaW5naWZpZWRTeW1ib2xzID0gdGhpcy5zeW1ib2xzLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdHJpbmdpZnkoKTsgfSkuam9pbignJyk7XG4gIHJldHVybiB3cmFwSW5TdmdTdHJpbmcoc3RyaW5naWZpZWRTeW1ib2xzLCBhdHRycyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCk7XG59O1xuXG5TcHJpdGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdGhpcy5zeW1ib2xzLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZGVzdHJveSgpOyB9KTtcbn07XG5cbnZhciBTcHJpdGVTeW1ib2wgPSBmdW5jdGlvbiBTcHJpdGVTeW1ib2wocmVmKSB7XG4gIHZhciBpZCA9IHJlZi5pZDtcbiAgdmFyIHZpZXdCb3ggPSByZWYudmlld0JveDtcbiAgdmFyIGNvbnRlbnQgPSByZWYuY29udGVudDtcblxuICB0aGlzLmlkID0gaWQ7XG4gIHRoaXMudmlld0JveCA9IHZpZXdCb3g7XG4gIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkgKCkge1xuICByZXR1cm4gdGhpcy5jb250ZW50O1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpO1xufTtcblxuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgWydpZCcsICd2aWV3Qm94JywgJ2NvbnRlbnQnXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7IHJldHVybiBkZWxldGUgdGhpcyQxW3Byb3BdOyB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbnZhciBwYXJzZSA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHZhciBoYXNJbXBvcnROb2RlID0gISFkb2N1bWVudC5pbXBvcnROb2RlO1xuICB2YXIgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhjb250ZW50LCAnaW1hZ2Uvc3ZnK3htbCcpLmRvY3VtZW50RWxlbWVudDtcblxuICAvKipcbiAgICogRml4IGZvciBicm93c2VyIHdoaWNoIGFyZSB0aHJvd2luZyBXcm9uZ0RvY3VtZW50RXJyb3JcbiAgICogaWYgeW91IGluc2VydCBhbiBlbGVtZW50IHdoaWNoIGlzIG5vdCBwYXJ0IG9mIHRoZSBkb2N1bWVudFxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc5ODY1MTkvNDYyNDQwM1xuICAgKi9cbiAgaWYgKGhhc0ltcG9ydE5vZGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuaW1wb3J0Tm9kZShkb2MsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIGRvYztcbn07XG5cbnZhciBCcm93c2VyU3ByaXRlU3ltYm9sID0gKGZ1bmN0aW9uIChTcHJpdGVTeW1ib2wkJDEpIHtcbiAgZnVuY3Rpb24gQnJvd3NlclNwcml0ZVN5bWJvbCAoKSB7XG4gICAgU3ByaXRlU3ltYm9sJCQxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBpZiAoIFNwcml0ZVN5bWJvbCQkMSApIEJyb3dzZXJTcHJpdGVTeW1ib2wuX19wcm90b19fID0gU3ByaXRlU3ltYm9sJCQxO1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNwcml0ZVN5bWJvbCQkMSAmJiBTcHJpdGVTeW1ib2wkJDEucHJvdG90eXBlICk7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQnJvd3NlclNwcml0ZVN5bWJvbDtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpc01vdW50ZWQ6IHt9IH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAgICogQHJldHVybiB7QnJvd3NlclNwcml0ZVN5bWJvbH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wuY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSA9IGZ1bmN0aW9uIGNyZWF0ZUZyb21FeGlzdGluZ05vZGUgKG5vZGUpIHtcbiAgICByZXR1cm4gbmV3IEJyb3dzZXJTcHJpdGVTeW1ib2woe1xuICAgICAgaWQ6IG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpLFxuICAgICAgdmlld0JveDogbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKSxcbiAgICAgIGNvbnRlbnQ6IG5vZGUub3V0ZXJIVE1MXG4gICAgfSk7XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgfVxuICAgIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSB0YXJnZXRcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gbW91bnQgKHRhcmdldCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRUYXJnZXQgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICB2YXIgbm9kZSA9IHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcblxuICAgIG1vdW50VGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBjb250ZW50ID0gdGhpcy5zdHJpbmdpZnkoKTtcbiAgICByZXR1cm4gcGFyc2Uod3JhcEluU3ZnU3RyaW5nKGNvbnRlbnQpKS5jaGlsZE5vZGVzWzBdO1xuICB9O1xuXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnVubW91bnQgPSBmdW5jdGlvbiB1bm1vdW50ICgpIHtcbiAgICB0aGlzLm5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgcmV0dXJuIEJyb3dzZXJTcHJpdGVTeW1ib2w7XG59KFNwcml0ZVN5bWJvbCkpO1xuXG52YXIgZGVmYXVsdENvbmZpZyQxID0ge1xuICAvKipcbiAgICogU2hvdWxkIGZvbGxvd2luZyBvcHRpb25zIGJlIGF1dG9tYXRpY2FsbHkgY29uZmlndXJlZDpcbiAgICogLSBgc3luY1VybHNXaXRoQmFzZVRhZ2BcbiAgICogLSBgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlcmBcbiAgICogLSBgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2xgXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgYXV0b0NvbmZpZ3VyZTogdHJ1ZSxcblxuICAvKipcbiAgICogRGVmYXVsdCBtb3VudGluZyBzZWxlY3RvclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgbW91bnRUbzogJ2JvZHknLFxuXG4gIC8qKlxuICAgKiBGaXggZGlzYXBwZWFyaW5nIFNWRyBlbGVtZW50cyB3aGVuIDxiYXNlIGhyZWY+IGV4aXN0cy5cbiAgICogRXhlY3V0ZXMgd2hlbiBzcHJpdGUgbW91bnRlZC5cbiAgICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xODI2NTMzNi83OTYxNTJcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXZlcmRpbWVuc2lvbi9hbmd1bGFyLXN2Zy1iYXNlLWZpeFxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzg5MzQjaXNzdWVjb21tZW50LTU2NTY4NDY2XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgc3luY1VybHNXaXRoQmFzZVRhZzogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3VsZCBzcHJpdGUgbGlzdGVuIGN1c3RvbSBsb2NhdGlvbiBjaGFuZ2UgZXZlbnRcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBsaXN0ZW5Mb2NhdGlvbkNoYW5nZUV2ZW50OiB0cnVlLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gd2luZG93IGV2ZW50IG5hbWUgd2hpY2ggc2hvdWxkIGJlIGVtaXR0ZWQgdG8gdXBkYXRlIHNwcml0ZSB1cmxzXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBsb2NhdGlvbkNoYW5nZUV2ZW50OiAnbG9jYXRpb25DaGFuZ2UnLFxuXG4gIC8qKlxuICAgKiBFbWl0IGxvY2F0aW9uIGNoYW5nZSBldmVudCBpbiBBbmd1bGFyIGF1dG9tYXRpY2FsbHlcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyOiBmYWxzZSxcblxuICAvKipcbiAgICogU2VsZWN0b3IgdG8gZmluZCBzeW1ib2xzIHVzYWdlcyB3aGVuIHVwZGF0aW5nIHNwcml0ZSB1cmxzXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB1c2FnZXNUb1VwZGF0ZTogJ3VzZVsqfGhyZWZdJyxcblxuICAvKipcbiAgICogRml4IEZpcmVmb3ggYnVnIHdoZW4gZ3JhZGllbnRzIGFuZCBwYXR0ZXJucyBkb24ndCB3b3JrIGlmIHRoZXkgYXJlIHdpdGhpbiBhIHN5bWJvbC5cbiAgICogRXhlY3V0ZXMgd2hlbiBzcHJpdGUgaXMgcmVuZGVyZWQsIGJ1dCBub3QgbW91bnRlZC5cbiAgICogQHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zMDY2NzRcbiAgICogQHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zNTM1NzVcbiAgICogQHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjM1MzY0XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2w6IGZhbHNlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gYXJyYXlMaWtlXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xudmFyIGFycmF5RnJvbSA9IGZ1bmN0aW9uIChhcnJheUxpa2UpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycmF5TGlrZSwgMCk7XG59O1xuXG52YXIgYnJvd3NlciA9IHtcbiAgaXNDaHJvbWU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC9jaHJvbWUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyB9LFxuICBpc0ZpcmVmb3g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC9maXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgfSxcblxuICAvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM3NTAzKHY9dnMuODUpLmFzcHhcbiAgaXNJRTogZnVuY3Rpb24gKCkgeyByZXR1cm4gL21zaWUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC90cmlkZW50L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgfSxcbiAgaXNFZGdlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAvZWRnZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Kn0gZGF0YVxuICovXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICBldmVudC5pbml0Q3VzdG9tRXZlbnQobmFtZSwgZmFsc2UsIGZhbHNlLCBkYXRhKTtcbiAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufTtcblxuLyoqXG4gKiBJRSBkb2Vzbid0IGV2YWx1YXRlIDxzdHlsZT4gdGFncyBpbiBTVkdzIHRoYXQgYXJlIGR5bmFtaWNhbGx5IGFkZGVkIHRvIHRoZSBwYWdlLlxuICogVGhpcyB0cmljayB3aWxsIHRyaWdnZXIgSUUgdG8gcmVhZCBhbmQgdXNlIGFueSBleGlzdGluZyBTVkcgPHN0eWxlPiB0YWdzLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vaWNvbmljL1NWR0luamVjdG9yL2lzc3Vlcy8yM1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMDg5ODQ2OS9cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRE9NIEVsZW1lbnQgdG8gc2VhcmNoIDxzdHlsZT4gdGFncyBpblxuICogQHJldHVybiB7QXJyYXk8SFRNTFN0eWxlRWxlbWVudD59XG4gKi9cbnZhciBldmFsU3R5bGVzSUVXb3JrYXJvdW5kID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIHVwZGF0ZWROb2RlcyA9IFtdO1xuXG4gIGFycmF5RnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJykpXG4gICAgLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBzdHlsZS50ZXh0Q29udGVudCArPSAnJztcbiAgICAgIHVwZGF0ZWROb2Rlcy5wdXNoKHN0eWxlKTtcbiAgICB9KTtcblxuICByZXR1cm4gdXBkYXRlZE5vZGVzO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VybF0gSWYgbm90IHByb3ZpZGVkIC0gY3VycmVudCBVUkwgd2lsbCBiZSB1c2VkXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBnZXRVcmxXaXRob3V0RnJhZ21lbnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAodXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5zcGxpdCgnIycpWzBdO1xufTtcblxuLyogZ2xvYmFsIGFuZ3VsYXIgKi9cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICovXG52YXIgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZSwgbmV3VXJsLCBvbGRVcmwpIHtcbiAgICAgIGRpc3BhdGNoRXZlbnQoZXZlbnROYW1lLCB7IG9sZFVybDogb2xkVXJsLCBuZXdVcmw6IG5ld1VybCB9KTtcbiAgICB9KTtcbiAgfV0pO1xufTtcblxudmFyIGRlZmF1bHRTZWxlY3RvciA9ICdsaW5lYXJHcmFkaWVudCwgcmFkaWFsR3JhZGllbnQsIHBhdHRlcm4sIG1hc2ssIGNsaXBQYXRoJztcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN2Z1xuICogQHBhcmFtIHtzdHJpbmd9IFtzZWxlY3Rvcl1cbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbnZhciBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9IGZ1bmN0aW9uIChzdmcsIHNlbGVjdG9yKSB7XG4gIGlmICggc2VsZWN0b3IgPT09IHZvaWQgMCApIHNlbGVjdG9yID0gZGVmYXVsdFNlbGVjdG9yO1xuXG4gIGFycmF5RnJvbShzdmcucXVlcnlTZWxlY3RvckFsbCgnc3ltYm9sJykpLmZvckVhY2goZnVuY3Rpb24gKHN5bWJvbCkge1xuICAgIGFycmF5RnJvbShzeW1ib2wucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHN5bWJvbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBzeW1ib2wpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFttYXRjaGVyXVxuICogQHJldHVybiB7QXR0cltdfVxuICovXG5mdW5jdGlvbiBzZWxlY3RBdHRyaWJ1dGVzKG5vZGVzLCBtYXRjaGVyKSB7XG4gIHZhciBhdHRycyA9IGFycmF5RnJvbShub2RlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuYXR0cmlidXRlcykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlmaWVkID0gYXJyYXlGcm9tKG5vZGUuYXR0cmlidXRlcyk7XG4gICAgdmFyIG1hdGNoZWQgPSBtYXRjaGVyID8gYXJyYXlmaWVkLmZpbHRlcihtYXRjaGVyKSA6IGFycmF5ZmllZDtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChtYXRjaGVkKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBhdHRycztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVMaXN0fE5vZGV9IG5vZGVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtjbG9uZT10cnVlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbnZhciB4TGlua05TID0gbmFtZXNwYWNlc18xLnhsaW5rLnVyaTtcbnZhciB4TGlua0F0dHJOYW1lID0gJ3hsaW5rOmhyZWYnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbnZhciBzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuID0gL1t7fXxcXFxcXFxeXFxbXFxdYFwiPD5dL2c7XG5cbmZ1bmN0aW9uIGVuY29kZXIodXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZShzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gKFwiJVwiICsgKG1hdGNoWzBdLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgXCJcXFxcJCZcIik7IC8vICQmIG1lYW5zIHRoZSB3aG9sZSBtYXRjaGVkIHN0cmluZ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhcnRzV2l0aFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VXaXRoXG4gKiBAcmV0dXJuIHtOb2RlTGlzdH1cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUmVmZXJlbmNlcyhub2Rlcywgc3RhcnRzV2l0aCwgcmVwbGFjZVdpdGgpIHtcbiAgYXJyYXlGcm9tKG5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIGhyZWYgPSBub2RlLmdldEF0dHJpYnV0ZSh4TGlua0F0dHJOYW1lKTtcbiAgICBpZiAoaHJlZiAmJiBocmVmLmluZGV4T2Yoc3RhcnRzV2l0aCkgPT09IDApIHtcbiAgICAgIHZhciBuZXdVcmwgPSBocmVmLnJlcGxhY2Uoc3RhcnRzV2l0aCwgcmVwbGFjZVdpdGgpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyh4TGlua05TLCB4TGlua0F0dHJOYW1lLCBuZXdVcmwpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgU1ZHIGF0dHJpYnV0ZXMgdG8gdXBkYXRlIHVybCgpIHRhcmdldCBpbiB0aGVtXG4gKi9cbnZhciBhdHRMaXN0ID0gW1xuICAnY2xpcFBhdGgnLFxuICAnY29sb3JQcm9maWxlJyxcbiAgJ3NyYycsXG4gICdjdXJzb3InLFxuICAnZmlsbCcsXG4gICdmaWx0ZXInLFxuICAnbWFya2VyJyxcbiAgJ21hcmtlclN0YXJ0JyxcbiAgJ21hcmtlck1pZCcsXG4gICdtYXJrZXJFbmQnLFxuICAnbWFzaycsXG4gICdzdHJva2UnLFxuICAnc3R5bGUnXG5dO1xuXG52YXIgYXR0U2VsZWN0b3IgPSBhdHRMaXN0Lm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKFwiW1wiICsgYXR0ciArIFwiXVwiKTsgfSkuam9pbignLCcpO1xuXG4vKipcbiAqIFVwZGF0ZSBVUkxzIGluIHN2ZyBpbWFnZSAobGlrZSBgZmlsbD1cInVybCguLi4pXCJgKSBhbmQgdXBkYXRlIHJlZmVyZW5jaW5nIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN2Z1xuICogQHBhcmFtIHtOb2RlTGlzdH0gcmVmZXJlbmNlc1xuICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfSBzdGFydHNXaXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZVdpdGhcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHNwcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2Zy5zcHJpdGUnKTtcbiAqIGNvbnN0IHVzYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3VzZScpO1xuICogdXBkYXRlVXJscyhzcHJpdGUsIHVzYWdlcywgJyMnLCAncHJlZml4IycpO1xuICovXG52YXIgdXBkYXRlVXJscyA9IGZ1bmN0aW9uIChzdmcsIHJlZmVyZW5jZXMsIHN0YXJ0c1dpdGgsIHJlcGxhY2VXaXRoKSB7XG4gIHZhciBzdGFydHNXaXRoRW5jb2RlZCA9IGVuY29kZXIoc3RhcnRzV2l0aCk7XG4gIHZhciByZXBsYWNlV2l0aEVuY29kZWQgPSBlbmNvZGVyKHJlcGxhY2VXaXRoKTtcblxuICB2YXIgbm9kZXMgPSBzdmcucXVlcnlTZWxlY3RvckFsbChhdHRTZWxlY3Rvcik7XG4gIHZhciBhdHRycyA9IHNlbGVjdEF0dHJpYnV0ZXMobm9kZXMsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIgbG9jYWxOYW1lID0gcmVmLmxvY2FsTmFtZTtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICByZXR1cm4gYXR0TGlzdC5pbmRleE9mKGxvY2FsTmFtZSkgIT09IC0xICYmIHZhbHVlLmluZGV4T2YoKFwidXJsKFwiICsgc3RhcnRzV2l0aEVuY29kZWQpKSAhPT0gLTE7XG4gIH0pO1xuXG4gIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuIGF0dHIudmFsdWUgPSBhdHRyLnZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAoc3RhcnRzV2l0aEVuY29kZWQpLCAnZycpLCByZXBsYWNlV2l0aEVuY29kZWQpOyB9KTtcbiAgdXBkYXRlUmVmZXJlbmNlcyhyZWZlcmVuY2VzLCBzdGFydHNXaXRoRW5jb2RlZCwgcmVwbGFjZVdpdGhFbmNvZGVkKTtcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgZW1pdHRlciBldmVudHNcbiAqIEBlbnVtXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgRXZlbnRzID0ge1xuICBNT1VOVDogJ21vdW50JyxcbiAgU1lNQk9MX01PVU5UOiAnc3ltYm9sX21vdW50J1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGUgPSAoZnVuY3Rpb24gKFNwcml0ZSQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlKGNmZykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIGlmICggY2ZnID09PSB2b2lkIDAgKSBjZmcgPSB7fTtcblxuICAgIFNwcml0ZSQkMS5jYWxsKHRoaXMsIGRlZXBtZXJnZShkZWZhdWx0Q29uZmlnJDEsIGNmZykpO1xuXG4gICAgdmFyIGVtaXR0ZXIgPSBtaXR0KCk7XG4gICAgdGhpcy5fZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5ub2RlID0gbnVsbDtcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBjb25maWcgPSByZWYuY29uZmlnO1xuXG4gICAgaWYgKGNvbmZpZy5hdXRvQ29uZmlndXJlKSB7XG4gICAgICB0aGlzLl9hdXRvQ29uZmlndXJlKGNmZyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5zeW5jVXJsc1dpdGhCYXNlVGFnKSB7XG4gICAgICB2YXIgYmFzZVVybCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdiYXNlJylbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICBlbWl0dGVyLm9uKEV2ZW50cy5NT1VOVCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnVwZGF0ZVVybHMoJyMnLCBiYXNlVXJsKTsgfSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZUxvY2F0aW9uQ2hhbmdlID0gdGhpcy5faGFuZGxlTG9jYXRpb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVMb2NhdGlvbkNoYW5nZSA9IGhhbmRsZUxvY2F0aW9uQ2hhbmdlO1xuXG4gICAgLy8gUHJvdmlkZSB3YXkgdG8gdXBkYXRlIHNwcml0ZSB1cmxzIGV4dGVybmFsbHkgdmlhIGRpc3BhdGNoaW5nIGN1c3RvbSB3aW5kb3cgZXZlbnRcbiAgICBpZiAoY29uZmlnLmxpc3RlbkxvY2F0aW9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50LCBoYW5kbGVMb2NhdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgLy8gRW1pdCBsb2NhdGlvbiBjaGFuZ2UgZXZlbnQgaW4gQW5ndWxhciBhdXRvbWF0aWNhbGx5XG4gICAgaWYgKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyKSB7XG4gICAgICBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBBZnRlciBzcHJpdGUgbW91bnRlZFxuICAgIGVtaXR0ZXIub24oRXZlbnRzLk1PVU5ULCBmdW5jdGlvbiAoc3ByaXRlTm9kZSkge1xuICAgICAgaWYgKGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCkge1xuICAgICAgICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbChzcHJpdGVOb2RlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFmdGVyIHN5bWJvbCBtb3VudGVkIGludG8gc3ByaXRlXG4gICAgZW1pdHRlci5vbihFdmVudHMuU1lNQk9MX01PVU5ULCBmdW5jdGlvbiAoc3ltYm9sTm9kZSkge1xuICAgICAgaWYgKGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCkge1xuICAgICAgICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbChzeW1ib2xOb2RlLnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJvd3Nlci5pc0lFKCkgfHwgYnJvd3Nlci5pc0VkZ2UoKSkge1xuICAgICAgICBldmFsU3R5bGVzSUVXb3JrYXJvdW5kKHN5bWJvbE5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCBTcHJpdGUkJDEgKSBCcm93c2VyU3ByaXRlLl9fcHJvdG9fXyA9IFNwcml0ZSQkMTtcbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTcHJpdGUkJDEgJiYgU3ByaXRlJCQxLnByb3RvdHlwZSApO1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJyb3dzZXJTcHJpdGU7XG5cbiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgaXNNb3VudGVkOiB7fSB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZSBmb2xsb3dpbmcgb3B0aW9uc1xuICAgKiAtIGBzeW5jVXJsc1dpdGhCYXNlVGFnYFxuICAgKiAtIGBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyYFxuICAgKiAtIGBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbGBcbiAgICogQHBhcmFtIHtPYmplY3R9IGNmZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuX2F1dG9Db25maWd1cmUgPSBmdW5jdGlvbiBfYXV0b0NvbmZpZ3VyZSAoY2ZnKSB7XG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGNvbmZpZyA9IHJlZi5jb25maWc7XG5cbiAgICBpZiAodHlwZW9mIGNmZy5zeW5jVXJsc1dpdGhCYXNlVGFnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLnN5bmNVcmxzV2l0aEJhc2VUYWcgPSB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jhc2UnKVswXSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjZmcubG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uZmlnLmxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXIgPSB0eXBlb2Ygd2luZG93LmFuZ3VsYXIgIT09ICd1bmRlZmluZWQnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2ZnLm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sID0gYnJvd3Nlci5pc0ZpcmVmb3goKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5kZXRhaWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50LmRldGFpbC5vbGRVcmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50LmRldGFpbC5uZXdVcmxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLl9oYW5kbGVMb2NhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVMb2NhdGlvbkNoYW5nZSAoZXZlbnQpIHtcbiAgICB2YXIgcmVmID0gZXZlbnQuZGV0YWlsO1xuICAgIHZhciBvbGRVcmwgPSByZWYub2xkVXJsO1xuICAgIHZhciBuZXdVcmwgPSByZWYubmV3VXJsO1xuICAgIHRoaXMudXBkYXRlVXJscyhvbGRVcmwsIG5ld1VybCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBuZXcgc3ltYm9sLiBJZiBzeW1ib2wgd2l0aCB0aGUgc2FtZSBpZCBleGlzdHMgaXQgd2lsbCBiZSByZXBsYWNlZC5cbiAgICogSWYgc3ByaXRlIGFscmVhZHkgbW91bnRlZCAtIGBzeW1ib2wubW91bnQoc3ByaXRlLm5vZGUpYCB3aWxsIGJlIGNhbGxlZC5cbiAgICogQGZpcmVzIEV2ZW50cyNTWU1CT0xfTU9VTlRcbiAgICogQHBhcmFtIHtCcm93c2VyU3ByaXRlU3ltYm9sfSBzeW1ib2xcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gc3ltYm9sIHdhcyBhZGRlZCwgYGZhbHNlYCAtIHJlcGxhY2VkXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKHN5bWJvbCkge1xuICAgIHZhciBzcHJpdGUgPSB0aGlzO1xuICAgIHZhciBpc05ld1N5bWJvbCA9IFNwcml0ZSQkMS5wcm90b3R5cGUuYWRkLmNhbGwodGhpcywgc3ltYm9sKTtcblxuICAgIGlmICh0aGlzLmlzTW91bnRlZCAmJiBpc05ld1N5bWJvbCkge1xuICAgICAgc3ltYm9sLm1vdW50KHNwcml0ZS5ub2RlKTtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChFdmVudHMuU1lNQk9MX01PVU5ULCBzeW1ib2wubm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTmV3U3ltYm9sO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdHRhY2ggdG8gZXhpc3RpbmcgRE9NIG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gdGFyZ2V0XG4gICAqIEByZXR1cm4ge0VsZW1lbnR8bnVsbH0gYXR0YWNoZWQgRE9NIEVsZW1lbnQuIG51bGwgaWYgbm9kZSB0byBhdHRhY2ggbm90IGZvdW5kLlxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoICh0YXJnZXQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBzcHJpdGUgPSB0aGlzO1xuXG4gICAgaWYgKHNwcml0ZS5pc01vdW50ZWQpIHtcbiAgICAgIHJldHVybiBzcHJpdGUubm9kZTtcbiAgICB9XG5cbiAgICAvKiogQHR5cGUgRWxlbWVudCAqL1xuICAgIHZhciBub2RlID0gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgc3ByaXRlLm5vZGUgPSBub2RlO1xuXG4gICAgLy8gQWxyZWFkeSBhZGRlZCBzeW1ib2xzIG5lZWRzIHRvIGJlIG1vdW50ZWRcbiAgICB0aGlzLnN5bWJvbHMuZm9yRWFjaChmdW5jdGlvbiAoc3ltYm9sKSB7XG4gICAgICBzeW1ib2wubW91bnQoc3ByaXRlLm5vZGUpO1xuICAgICAgdGhpcyQxLl9lbWl0dGVyLmVtaXQoRXZlbnRzLlNZTUJPTF9NT1VOVCwgc3ltYm9sLm5vZGUpO1xuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHN5bWJvbHMgZnJvbSBleGlzdGluZyBET00gbm9kZXMsIGFkZCBhbmQgbW91bnQgdGhlbVxuICAgIGFycmF5RnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N5bWJvbCcpKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN5bWJvbE5vZGUpIHtcbiAgICAgICAgdmFyIHN5bWJvbCA9IEJyb3dzZXJTcHJpdGVTeW1ib2wuY3JlYXRlRnJvbUV4aXN0aW5nTm9kZShzeW1ib2xOb2RlKTtcbiAgICAgICAgc3ltYm9sLm5vZGUgPSBzeW1ib2xOb2RlOyAvLyBoYWNrIHRvIHByZXZlbnQgc3ltYm9sIG1vdW50aW5nIHRvIHNwcml0ZSB3aGVuIGFkZGluZ1xuICAgICAgICBzcHJpdGUuYWRkKHN5bWJvbCk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChFdmVudHMuTU9VTlQsIG5vZGUpO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBjb25maWcgPSByZWYuY29uZmlnO1xuICAgIHZhciBzeW1ib2xzID0gcmVmLnN5bWJvbHM7XG4gICAgdmFyIF9lbWl0dGVyID0gcmVmLl9lbWl0dGVyO1xuXG4gICAgc3ltYm9scy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmRlc3Ryb3koKTsgfSk7XG5cbiAgICBfZW1pdHRlci5vZmYoJyonKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihjb25maWcubG9jYXRpb25DaGFuZ2VFdmVudCwgdGhpcy5faGFuZGxlTG9jYXRpb25DaGFuZ2UpO1xuXG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICB0aGlzLnVubW91bnQoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBmaXJlcyBFdmVudHMjTU9VTlRcbiAgICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gW3RhcmdldF1cbiAgICogQHBhcmFtIHtib29sZWFufSBbcHJlcGVuZD1mYWxzZV1cbiAgICogQHJldHVybiB7RWxlbWVudHxudWxsfSByZW5kZXJlZCBzcHJpdGUgbm9kZS4gbnVsbCBpZiBtb3VudCBub2RlIG5vdCBmb3VuZC5cbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gbW91bnQgKHRhcmdldCwgcHJlcGVuZCkge1xuICAgIGlmICggdGFyZ2V0ID09PSB2b2lkIDAgKSB0YXJnZXQgPSB0aGlzLmNvbmZpZy5tb3VudFRvO1xuICAgIGlmICggcHJlcGVuZCA9PT0gdm9pZCAwICkgcHJlcGVuZCA9IGZhbHNlO1xuXG4gICAgdmFyIHNwcml0ZSA9IHRoaXM7XG5cbiAgICBpZiAoc3ByaXRlLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHNwcml0ZS5ub2RlO1xuICAgIH1cblxuICAgIHZhciBtb3VudE5vZGUgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICB2YXIgbm9kZSA9IHNwcml0ZS5yZW5kZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgaWYgKHByZXBlbmQgJiYgbW91bnROb2RlLmNoaWxkTm9kZXNbMF0pIHtcbiAgICAgIG1vdW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbW91bnROb2RlLmNoaWxkTm9kZXNbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb3VudE5vZGUuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KEV2ZW50cy5NT1VOVCwgbm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIHBhcnNlKHRoaXMuc3RyaW5naWZ5KCkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXRhY2ggc3ByaXRlIGZyb20gdGhlIERPTVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQgKCkge1xuICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBVUkxzIGluIHNwcml0ZSBhbmQgdXNhZ2UgZWxlbWVudHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9sZFVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCAtIFVSTHMgd2FzIHVwZGF0ZWQsIGBmYWxzZWAgLSBzcHJpdGUgaXMgbm90IG1vdW50ZWRcbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLnVwZGF0ZVVybHMgPSBmdW5jdGlvbiB1cGRhdGVVcmxzJDEgKG9sZFVybCwgbmV3VXJsKSB7XG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1c2FnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuY29uZmlnLnVzYWdlc1RvVXBkYXRlKTtcblxuICAgIHVwZGF0ZVVybHMoXG4gICAgICB0aGlzLm5vZGUsXG4gICAgICB1c2FnZXMsXG4gICAgICAoKGdldFVybFdpdGhvdXRGcmFnbWVudChvbGRVcmwpKSArIFwiI1wiKSxcbiAgICAgICgoZ2V0VXJsV2l0aG91dEZyYWdtZW50KG5ld1VybCkpICsgXCIjXCIpXG4gICAgKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCcm93c2VyU3ByaXRlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgcmV0dXJuIEJyb3dzZXJTcHJpdGU7XG59KFNwcml0ZSkpO1xuXG52YXIgcmVhZHkkMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbi8qIVxuICAqIGRvbXJlYWR5IChjKSBEdXN0aW4gRGlheiAyMDE0IC0gTGljZW5zZSBNSVRcbiAgKi9cbiFmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbikge1xuXG4gIHsgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7IH1cblxufSgnZG9tcmVhZHknLCBmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIGZucyA9IFtdLCBsaXN0ZW5lclxuICAgICwgZG9jID0gZG9jdW1lbnRcbiAgICAsIGhhY2sgPSBkb2MuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsXG4gICAgLCBkb21Db250ZW50TG9hZGVkID0gJ0RPTUNvbnRlbnRMb2FkZWQnXG4gICAgLCBsb2FkZWQgPSAoaGFjayA/IC9ebG9hZGVkfF5jLyA6IC9ebG9hZGVkfF5pfF5jLykudGVzdChkb2MucmVhZHlTdGF0ZSk7XG5cblxuICBpZiAoIWxvYWRlZClcbiAgeyBkb2MuYWRkRXZlbnRMaXN0ZW5lcihkb21Db250ZW50TG9hZGVkLCBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihkb21Db250ZW50TG9hZGVkLCBsaXN0ZW5lcik7XG4gICAgbG9hZGVkID0gMTtcbiAgICB3aGlsZSAobGlzdGVuZXIgPSBmbnMuc2hpZnQoKSkgeyBsaXN0ZW5lcigpOyB9XG4gIH0pOyB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIGxvYWRlZCA/IHNldFRpbWVvdXQoZm4sIDApIDogZm5zLnB1c2goZm4pO1xuICB9XG5cbn0pO1xufSk7XG5cbnZhciBzcHJpdGVOb2RlSWQgPSAnX19TVkdfU1BSSVRFX05PREVfXyc7XG52YXIgc3ByaXRlR2xvYmFsVmFyTmFtZSA9ICdfX1NWR19TUFJJVEVfXyc7XG52YXIgaXNTcHJpdGVFeGlzdHMgPSAhIXdpbmRvd1tzcHJpdGVHbG9iYWxWYXJOYW1lXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHNcbnZhciBzcHJpdGU7XG5cbmlmIChpc1Nwcml0ZUV4aXN0cykge1xuICBzcHJpdGUgPSB3aW5kb3dbc3ByaXRlR2xvYmFsVmFyTmFtZV07XG59IGVsc2Uge1xuICBzcHJpdGUgPSBuZXcgQnJvd3NlclNwcml0ZSh7XG4gICAgYXR0cnM6IHtcbiAgICAgIGlkOiBzcHJpdGVOb2RlSWQsXG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZSdcbiAgICB9XG4gIH0pO1xuICB3aW5kb3dbc3ByaXRlR2xvYmFsVmFyTmFtZV0gPSBzcHJpdGU7XG59XG5cbnZhciBsb2FkU3ByaXRlID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ2hlY2sgZm9yIHBhZ2UgYWxyZWFkeSBjb250YWlucyBzcHJpdGUgbm9kZVxuICAgKiBJZiBmb3VuZCAtIGF0dGFjaCB0byBhbmQgcmV1c2UgaXQncyBjb250ZW50XG4gICAqIElmIG5vdCAtIHJlbmRlciBhbmQgbW91bnQgdGhlIG5ldyBzcHJpdGVcbiAgICovXG4gIHZhciBleGlzdGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNwcml0ZU5vZGVJZCk7XG5cbiAgaWYgKGV4aXN0aW5nKSB7XG4gICAgc3ByaXRlLmF0dGFjaChleGlzdGluZyk7XG4gIH0gZWxzZSB7XG4gICAgc3ByaXRlLm1vdW50KGRvY3VtZW50LmJvZHksIHRydWUpO1xuICB9XG59O1xuXG5pZiAoZG9jdW1lbnQuYm9keSkge1xuICBsb2FkU3ByaXRlKCk7XG59IGVsc2Uge1xuICByZWFkeSQxKGxvYWRTcHJpdGUpO1xufVxuXG52YXIgc3ByaXRlJDEgPSBzcHJpdGU7XG5cbnJldHVybiBzcHJpdGUkMTtcblxufSkpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gcnVudGltZSBoZWxwZXIgZm9yIHNldHRpbmcgcHJvcGVydGllcyBvbiBjb21wb25lbnRzXG4vLyBpbiBhIHRyZWUtc2hha2FibGUgd2F5XG5leHBvcnRzLmRlZmF1bHQgPSAoc2ZjLCBwcm9wcykgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IHNmYy5fX3ZjY09wdHMgfHwgc2ZjO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwcm9wcykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9kcm9wZG93bi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTAwNmNiYjFcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9kcm9wZG93bi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vZHJvcGRvd24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9zdHlsZS5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9ob21lL3J1bm5lci93b3JrL3Zpb2xlbnRtb25rZXkvdmlvbGVudG1vbmtleS9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwibm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi9kcm9wZG93bi9kcm9wZG93bi52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiMTAwNmNiYjFcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCcxMDA2Y2JiMScsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzEwMDZjYmIxJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9kcm9wZG93bi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTAwNmNiYjFcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignMTAwNmNiYjEnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL21vZGFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YjFhZTRhNlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL21vZGFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL3N0eWxlLmNzcz92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9Y3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL2hvbWUvcnVubmVyL3dvcmsvdmlvbGVudG1vbmtleS92aW9sZW50bW9ua2V5L25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJub2RlX21vZHVsZXMvdnVlbGV0b24vbGliL21vZGFsL21vZGFsLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI3YjFhZTRhNlwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzdiMWFlNGE2JywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnN2IxYWU0YTYnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL21vZGFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YjFhZTRhNlwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc3YjFhZTRhNicsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vdG9vbHRpcC1jb250ZW50LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mOGVhY2VmNlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3Rvb2x0aXAtY29udGVudC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vdG9vbHRpcC1jb250ZW50LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vc3R5bGUuY3NzP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3NcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvaG9tZS9ydW5uZXIvd29yay92aW9sZW50bW9ua2V5L3Zpb2xlbnRtb25rZXkvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcIm5vZGVfbW9kdWxlcy92dWVsZXRvbi9saWIvdG9vbHRpcC90b29sdGlwLWNvbnRlbnQudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcImY4ZWFjZWY2XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnZjhlYWNlZjYnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCdmOGVhY2VmNicsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vdG9vbHRpcC1jb250ZW50LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mOGVhY2VmNlwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdmOGVhY2VmNicsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vdG9vbHRpcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OGIyMWYwNGVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi90b29sdGlwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi90b29sdGlwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9ob21lL3J1bm5lci93b3JrL3Zpb2xlbnRtb25rZXkvdmlvbGVudG1vbmtleS9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwibm9kZV9tb2R1bGVzL3Z1ZWxldG9uL2xpYi90b29sdGlwL3Rvb2x0aXAudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjhiMjFmMDRlXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnOGIyMWYwNGUnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCc4YjIxZjA0ZScsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vdG9vbHRpcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OGIyMWYwNGVcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignOGIyMWYwNGUnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL2NvZGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRkYWNhYjA2XCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vY29kZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vY29kZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL2NvZGUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NGRhY2FiMDYmbGFuZz1jc3NcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvaG9tZS9ydW5uZXIvd29yay92aW9sZW50bW9ua2V5L3Zpb2xlbnRtb25rZXkvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9jb21tb24vdWkvY29kZS52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiNGRhY2FiMDZcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc0ZGFjYWIwNicsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzRkYWNhYjA2JywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9jb2RlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00ZGFjYWIwNlwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc0ZGFjYWIwNicsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vZXh0ZXJuYWxzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yYzk5ZjFiMFwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2V4dGVybmFscy52dWU/dnVlJnR5cGU9c2NyaXB0JnNldHVwPXRydWUmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9leHRlcm5hbHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL2V4dGVybmFscy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yYzk5ZjFiMCZsYW5nPWNzc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9ob21lL3J1bm5lci93b3JrL3Zpb2xlbnRtb25rZXkvdmlvbGVudG1vbmtleS9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwic3JjL2NvbW1vbi91aS9leHRlcm5hbHMudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjJjOTlmMWIwXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnMmM5OWYxYjAnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCcyYzk5ZjFiMCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vZXh0ZXJuYWxzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yYzk5ZjFiMFwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCcyYzk5ZjFiMCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vaWNvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9M2UyYmQ5ZWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9pY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9ob21lL3J1bm5lci93b3JrL3Zpb2xlbnRtb25rZXkvdmlvbGVudG1vbmtleS9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwic3JjL2NvbW1vbi91aS9pY29uLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCIzZTJiZDllZVwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzNlMmJkOWVlJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnM2UyYmQ5ZWUnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2ljb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNlMmJkOWVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzNlMmJkOWVlJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9sb2NhbGUtZ3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM3MzlhYTVjXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vbG9jYWxlLWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9sb2NhbGUtZ3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL2hvbWUvcnVubmVyL3dvcmsvdmlvbGVudG1vbmtleS92aW9sZW50bW9ua2V5L25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvY29tbW9uL3VpL2xvY2FsZS1ncm91cC52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiMzczOWFhNWNcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCczNzM5YWE1YycsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzM3MzlhYTVjJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9sb2NhbGUtZ3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM3MzlhYTVjXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzM3MzlhYTVjJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9tZXNzYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lOTMyNDhiMlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL21lc3NhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL21lc3NhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9tZXNzYWdlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWU5MzI0OGIyJmxhbmc9Y3NzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiL2hvbWUvcnVubmVyL3dvcmsvdmlvbGVudG1vbmtleS92aW9sZW50bW9ua2V5L25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzXCJcbmNvbnN0IF9fZXhwb3J0c19fID0gLyojX19QVVJFX18qL2V4cG9ydENvbXBvbmVudChzY3JpcHQsIFtbJ3JlbmRlcicscmVuZGVyXSxbJ19fZmlsZScsXCJzcmMvY29tbW9uL3VpL21lc3NhZ2UudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcImU5MzI0OGIyXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnZTkzMjQ4YjInLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCdlOTMyNDhiMicsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vbWVzc2FnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZTkzMjQ4YjJcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignZTkzMjQ4YjInLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL3NldHRpbmctY2hlY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc3NTNjMjJhXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vc2V0dGluZy1jaGVjay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vc2V0dGluZy1jaGVjay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL3NldHRpbmctY2hlY2sudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9Nzc1M2MyMmEmbGFuZz1jc3NcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvaG9tZS9ydW5uZXIvd29yay92aW9sZW50bW9ua2V5L3Zpb2xlbnRtb25rZXkvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9jb21tb24vdWkvc2V0dGluZy1jaGVjay52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiNzc1M2MyMmFcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc3NzUzYzIyYScsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzc3NTNjMjJhJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9zZXR0aW5nLWNoZWNrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03NzUzYzIyYVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc3NzUzYzIyYScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vc2V0dGluZy10ZXh0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zZDRiMzg5YVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3NldHRpbmctdGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vc2V0dGluZy10ZXh0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBleHBvcnRDb21wb25lbnQgZnJvbSBcIi9ob21lL3J1bm5lci93b3JrL3Zpb2xlbnRtb25rZXkvdmlvbGVudG1vbmtleS9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX2ZpbGUnLFwic3JjL2NvbW1vbi91aS9zZXR0aW5nLXRleHQudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjNkNGIzODlhXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnM2Q0YjM4OWEnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCczZDRiMzg5YScsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vc2V0dGluZy10ZXh0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zZDRiMzg5YVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCczZDRiMzg5YScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vdG9nZ2xlLWJ1dHRvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OTkwZGY5MmFcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi90b2dnbGUtYnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL3RvZ2dsZS1idXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL3RvZ2dsZS1idXR0b24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9OTkwZGY5MmEmbGFuZz1jc3NcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIvaG9tZS9ydW5uZXIvd29yay92aW9sZW50bW9ua2V5L3Zpb2xlbnRtb25rZXkvbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInNyYy9jb21tb24vdWkvdG9nZ2xlLWJ1dHRvbi52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiOTkwZGY5MmFcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc5OTBkZjkyYScsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzk5MGRmOTJhJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi90b2dnbGUtYnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05OTBkZjkyYVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc5OTBkZjkyYScsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vZHJvcGRvd24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vZHJvcGRvd24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9tb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9tb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLSEuLi8uLi8uLi9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL3Rvb2x0aXAtY29udGVudC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi90b29sdGlwLWNvbnRlbnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi90b29sdGlwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL3Rvb2x0aXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC90ZW1wbGF0ZUxvYWRlci5qcz8/cnVsZVNldFsxXS5ydWxlc1syXSEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9kcm9wZG93bi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTAwNmNiYjFcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL21vZGFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YjFhZTRhNlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi4vLi4vLi4vdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vdG9vbHRpcC1jb250ZW50LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mOGVhY2VmNlwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi4vLi4vLi4vdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vdG9vbHRpcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OGIyMWYwNGVcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL2NvZGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRkYWNhYjA2XCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9leHRlcm5hbHMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJjOTlmMWIwXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9pY29uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zZTJiZDllZVwiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC90ZW1wbGF0ZUxvYWRlci5qcz8/cnVsZVNldFsxXS5ydWxlc1syXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vbG9jYWxlLWdyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zNzM5YWE1Y1wiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC90ZW1wbGF0ZUxvYWRlci5qcz8/cnVsZVNldFsxXS5ydWxlc1syXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vbWVzc2FnZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZTkzMjQ4YjJcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL3NldHRpbmctY2hlY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc3NTNjMjJhXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9zZXR0aW5nLXRleHQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNkNGIzODlhXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi90b2dnbGUtYnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD05OTBkZjkyYVwiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3NjcmlwdHMvZmFrZS1kZXAtbG9hZGVyLmpzPz9jbG9uZWRSdWxlU2V0LTEwLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vY29kZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vc2NyaXB0cy9mYWtlLWRlcC1sb2FkZXIuanM/P2Nsb25lZFJ1bGVTZXQtMTAudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9jb2RlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3NjcmlwdHMvZmFrZS1kZXAtbG9hZGVyLmpzPz9jbG9uZWRSdWxlU2V0LTEwLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vZXh0ZXJuYWxzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3NjcmlwdHMvZmFrZS1kZXAtbG9hZGVyLmpzPz9jbG9uZWRSdWxlU2V0LTEwLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vZXh0ZXJuYWxzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPWpzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vc2NyaXB0cy9mYWtlLWRlcC1sb2FkZXIuanM/P2Nsb25lZFJ1bGVTZXQtMTAudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9pY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9zY3JpcHRzL2Zha2UtZGVwLWxvYWRlci5qcz8/Y2xvbmVkUnVsZVNldC0xMC51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL2ljb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vc2NyaXB0cy9mYWtlLWRlcC1sb2FkZXIuanM/P2Nsb25lZFJ1bGVTZXQtMTAudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9sb2NhbGUtZ3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3NjcmlwdHMvZmFrZS1kZXAtbG9hZGVyLmpzPz9jbG9uZWRSdWxlU2V0LTEwLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vbG9jYWxlLWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3NjcmlwdHMvZmFrZS1kZXAtbG9hZGVyLmpzPz9jbG9uZWRSdWxlU2V0LTEwLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vbWVzc2FnZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vc2NyaXB0cy9mYWtlLWRlcC1sb2FkZXIuanM/P2Nsb25lZFJ1bGVTZXQtMTAudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9tZXNzYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3NjcmlwdHMvZmFrZS1kZXAtbG9hZGVyLmpzPz9jbG9uZWRSdWxlU2V0LTEwLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vc2V0dGluZy1jaGVjay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vc2NyaXB0cy9mYWtlLWRlcC1sb2FkZXIuanM/P2Nsb25lZFJ1bGVTZXQtMTAudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9zZXR0aW5nLWNoZWNrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL3NjcmlwdHMvZmFrZS1kZXAtbG9hZGVyLmpzPz9jbG9uZWRSdWxlU2V0LTEwLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vc2V0dGluZy10ZXh0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9zY3JpcHRzL2Zha2UtZGVwLWxvYWRlci5qcz8/Y2xvbmVkUnVsZVNldC0xMC51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL3NldHRpbmctdGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9zY3JpcHRzL2Zha2UtZGVwLWxvYWRlci5qcz8/Y2xvbmVkUnVsZVNldC0xMC51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL3RvZ2dsZS1idXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZzZXR1cD10cnVlJmxhbmc9anNcIjsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vc2NyaXB0cy9mYWtlLWRlcC1sb2FkZXIuanM/P2Nsb25lZFJ1bGVTZXQtMTAudXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi90b2dnbGUtYnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmc2V0dXA9dHJ1ZSZsYW5nPWpzXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00LnVzZVsxXSEuLi8uLi8uLi92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4vc3R5bGUuY3NzP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3NcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQudXNlWzFdIS4uLy4uLy4uL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi9zdHlsZS5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzc1wiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNC51c2VbMV0hLi4vLi4vLi4vdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuL3N0eWxlLmNzcz92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9Y3NzXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vY29kZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00ZGFjYWIwNiZsYW5nPWNzc1wiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL2V4dGVybmFscy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yYzk5ZjFiMCZsYW5nPWNzc1wiIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFswXSEuL21lc3NhZ2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZTkzMjQ4YjImbGFuZz1jc3NcIiIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNi51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0hLi9zZXR0aW5nLWNoZWNrLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc3NTNjMjJhJmxhbmc9Y3NzXCIiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTYudXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC02LnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdIS4vdG9nZ2xlLWJ1dHRvbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD05OTBkZjkyYSZsYW5nPWNzc1wiIiwiaW1wb3J0IHsgaW5pdEN1c3RvbUZvcm1hdHRlciwgd2FybiB9IGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWRvbSc7XG5cbmZ1bmN0aW9uIGluaXREZXYoKSB7XG4gICAge1xuICAgICAgICBpbml0Q3VzdG9tRm9ybWF0dGVyKCk7XG4gICAgfVxufVxuXG4vLyBUaGlzIGVudHJ5IGV4cG9ydHMgdGhlIHJ1bnRpbWUgb25seSwgYW5kIGlzIGJ1aWx0IGFzXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgaW5pdERldigpO1xufVxuY29uc3QgY29tcGlsZSA9ICgpID0+IHtcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XG4gICAgICAgIHdhcm4oYFJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICtcbiAgICAgICAgICAgIChgIENvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gYWxpYXMgXCJ2dWVcIiB0byBcInZ1ZS9kaXN0L3Z1ZS5lc20tYnVuZGxlci5qc1wiLmBcbiAgICAgICAgICAgICAgICApIC8qIHNob3VsZCBub3QgaGFwcGVuICovKTtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBjb21waWxlIH07XG4iXSwibmFtZXMiOlsibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJtYXAiLCJPYmplY3QiLCJjcmVhdGUiLCJsaXN0Iiwic3BsaXQiLCJpIiwibGVuZ3RoIiwidmFsIiwidG9Mb3dlckNhc2UiLCJQYXRjaEZsYWdOYW1lcyIsInNsb3RGbGFnc1RleHQiLCJHTE9CQUxTX1dISVRFX0xJU1RFRCIsImlzR2xvYmFsbHlXaGl0ZWxpc3RlZCIsInJhbmdlIiwiZ2VuZXJhdGVDb2RlRnJhbWUiLCJzb3VyY2UiLCJzdGFydCIsImVuZCIsImxpbmVzIiwibmV3bGluZVNlcXVlbmNlcyIsImZpbHRlciIsIl8iLCJpZHgiLCJjb3VudCIsInJlcyIsImoiLCJsaW5lIiwicHVzaCIsInJlcGVhdCIsIk1hdGgiLCJtYXgiLCJTdHJpbmciLCJsaW5lTGVuZ3RoIiwibmV3TGluZVNlcUxlbmd0aCIsInBhZCIsIm1pbiIsImpvaW4iLCJub3JtYWxpemVTdHlsZSIsInZhbHVlIiwiaXNBcnJheSIsIml0ZW0iLCJub3JtYWxpemVkIiwiaXNTdHJpbmciLCJwYXJzZVN0cmluZ1N0eWxlIiwia2V5IiwiaXNPYmplY3QiLCJsaXN0RGVsaW1pdGVyUkUiLCJwcm9wZXJ0eURlbGltaXRlclJFIiwic3R5bGVDb21tZW50UkUiLCJjc3NUZXh0IiwicmV0IiwicmVwbGFjZSIsImZvckVhY2giLCJ0bXAiLCJ0cmltIiwic3RyaW5naWZ5U3R5bGUiLCJzdHlsZXMiLCJub3JtYWxpemVkS2V5Iiwic3RhcnRzV2l0aCIsImh5cGhlbmF0ZSIsIm5vcm1hbGl6ZUNsYXNzIiwibmFtZSIsIm5vcm1hbGl6ZVByb3BzIiwicHJvcHMiLCJjbGFzcyIsImtsYXNzIiwic3R5bGUiLCJIVE1MX1RBR1MiLCJTVkdfVEFHUyIsIlZPSURfVEFHUyIsImlzSFRNTFRhZyIsImlzU1ZHVGFnIiwiaXNWb2lkVGFnIiwic3BlY2lhbEJvb2xlYW5BdHRycyIsImlzU3BlY2lhbEJvb2xlYW5BdHRyIiwiaXNCb29sZWFuQXR0ciIsImluY2x1ZGVCb29sZWFuQXR0ciIsInVuc2FmZUF0dHJDaGFyUkUiLCJhdHRyVmFsaWRhdGlvbkNhY2hlIiwiaXNTU1JTYWZlQXR0ck5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImlzVW5zYWZlIiwidGVzdCIsImNvbnNvbGUiLCJlcnJvciIsInByb3BzVG9BdHRyTWFwIiwiYWNjZXB0Q2hhcnNldCIsImNsYXNzTmFtZSIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJpc0tub3duSHRtbEF0dHIiLCJpc0tub3duU3ZnQXR0ciIsImVzY2FwZVJFIiwiZXNjYXBlSHRtbCIsInN0cmluZyIsIm1hdGNoIiwiZXhlYyIsImh0bWwiLCJlc2NhcGVkIiwiaW5kZXgiLCJsYXN0SW5kZXgiLCJjaGFyQ29kZUF0Iiwic2xpY2UiLCJjb21tZW50U3RyaXBSRSIsImVzY2FwZUh0bWxDb21tZW50Iiwic3JjIiwibG9vc2VDb21wYXJlQXJyYXlzIiwiYSIsImIiLCJlcXVhbCIsImxvb3NlRXF1YWwiLCJhVmFsaWRUeXBlIiwiaXNEYXRlIiwiYlZhbGlkVHlwZSIsImdldFRpbWUiLCJpc1N5bWJvbCIsImFLZXlzQ291bnQiLCJrZXlzIiwiYktleXNDb3VudCIsImFIYXNLZXkiLCJiSGFzS2V5IiwibG9vc2VJbmRleE9mIiwiYXJyIiwiZmluZEluZGV4IiwidG9EaXNwbGF5U3RyaW5nIiwidG9TdHJpbmciLCJvYmplY3RUb1N0cmluZyIsImlzRnVuY3Rpb24iLCJKU09OIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJfa2V5IiwiX192X2lzUmVmIiwiaXNNYXAiLCJzaXplIiwiZW50cmllcyIsInJlZHVjZSIsImlzU2V0IiwidmFsdWVzIiwiaXNQbGFpbk9iamVjdCIsIkVNUFRZX09CSiIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImZyZWV6ZSIsIkVNUFRZX0FSUiIsIk5PT1AiLCJOTyIsIm9uUkUiLCJpc09uIiwiaXNNb2RlbExpc3RlbmVyIiwiZXh0ZW5kIiwiYXNzaWduIiwicmVtb3ZlIiwiZWwiLCJpbmRleE9mIiwic3BsaWNlIiwicHJvdG90eXBlIiwiaGFzT3duIiwiY2FsbCIsIkFycmF5IiwidG9UeXBlU3RyaW5nIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwidG9SYXdUeXBlIiwiaXNJbnRlZ2VyS2V5IiwicGFyc2VJbnQiLCJpc1Jlc2VydmVkUHJvcCIsImlzQnVpbHRJbkRpcmVjdGl2ZSIsImNhY2hlU3RyaW5nRnVuY3Rpb24iLCJmbiIsImNhY2hlIiwiaGl0IiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiYyIsInRvVXBwZXJDYXNlIiwiaHlwaGVuYXRlUkUiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwidG9IYW5kbGVyS2V5IiwiaGFzQ2hhbmdlZCIsIm9sZFZhbHVlIiwiaXMiLCJpbnZva2VBcnJheUZucyIsImZucyIsImFyZyIsImRlZiIsIm9iaiIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsInRvTnVtYmVyIiwibiIsInBhcnNlRmxvYXQiLCJpc05hTiIsIl9nbG9iYWxUaGlzIiwiZ2V0R2xvYmFsVGhpcyIsImdsb2JhbFRoaXMiLCJzZWxmIiwid2luZG93IiwiZ2xvYmFsIiwiaWRlbnRSRSIsImdlblByb3BzQWNjZXNzRXhwIiwibW9kZWxGaWVsZHMiLCJjbG9zZUFmdGVyQ2xpY2siLCJ0eXBlIiwiQm9vbGVhbiIsImRlZmF1bHQiLCJmb2N1c09wZW4iLCJhbGlnbiIsImRpcmVjdGlvbiIsImNvbnRlbnQiLCJlbWl0cyIsInVwZGF0ZSIsImRhdGEiLCJvcGVuIiwibW9kZWxWYWx1ZSIsIndhdGNoIiwicHJldlZhbHVlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25DbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtZXRob2RzIiwib25Ub2dnbGUiLCIkZW1pdCIsIm9uRm9jdXMiLCJvbkJsdXIiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIiRlbCIsImNvbnRhaW5zIiwib25Nb3VzZVVwIiwiY29tcG9uZW50cyIsIm1vZGFsQ2xhc3MiLCJiYWNrZHJvcENsYXNzIiwidHJhbnNpdGlvbiIsInNob3ciLCJiYWNrZHJvcCIsImNsb3NlIiwib25CYWNrZHJvcENsaWNrIiwib25BZnRlckxlYXZlIiwicGxhY2VtZW50IiwiVG9vbHRpcENvbnRlbnQiLCJsaWZlY3ljbGVCZWZvcmVVbm1vdW50IiwidG9vbHRpcHMiLCJ0aHJvdHRsZWRVcGRhdGUiLCJ0aHJvdHRsZVdpdGhSQUYiLCJ1cGRhdGVUb29sdGlwcyIsImZ1bmMiLCJydW5uaW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidG9vbHRpcCIsInJlbmRlciIsImFkZFRvb2x0aXAiLCJyZW1vdmVUb29sdGlwIiwiY2xlYW4iLCJQTEFDRU1FTlRfVE9QIiwiUExBQ0VNRU5UX0JPVFRPTSIsIlBMQUNFTUVOVF9MRUZUIiwiUExBQ0VNRU5UX1JJR0hUIiwiUExBQ0VNRU5UX0FVVE9fWSIsImFjdGl2ZSIsIm5vTW91c2UiLCJnYXAiLCJOdW1iZXIiLCJkaXNhYmxlZCIsImhvdmVyZWQiLCJjb21wdXRlZCIsInNob3VsZEhhbmRsZU1vdXNlIiwic2hvdWxkU2hvdyIsIm9uRW50ZXIiLCJvbkxlYXZlIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhZ2VYT2Zmc2V0IiwibGVmdCIsInBhZ2VZT2Zmc2V0IiwidG9wIiwiYm90dG9tIiwiY2xpZW50SGVpZ2h0Iiwid2lkdGgiLCJoZWlnaHQiLCJyaWdodCIsIndhcm4iLCJjcmVhdGVkIiwibW91bnRlZCIsIl9jcmVhdGVFbGVtZW50QmxvY2siLCIkcHJvcHMiLCJvbk1vdXNldXAiLCIkb3B0aW9ucyIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJvbkNsaWNrIiwiX3JlbmRlclNsb3QiLCJfY3R4Iiwib25Nb3VzZWRvd24iLCIkZGF0YSIsIl9jcmVhdGVCbG9jayIsIl9UZWxlcG9ydCIsInRvIiwiX2NyZWF0ZVZOb2RlIiwiX1RyYW5zaXRpb24iLCJhcHBlYXIiLCJfaG9pc3RlZF8xIiwib25Nb3VzZWVudGVyIiwib25Nb3VzZWxlYXZlIiwib25UaXBzaG93Iiwib25UaXBoaWRlIiwib25UaXB0b2dnbGUiLCJfY29tcG9uZW50X1Rvb2x0aXBDb250ZW50IiwicmVmIiwib25TdWJtaXQiLCJfdG9EaXNwbGF5U3RyaW5nIiwiJGV2ZW50IiwiX2NvbXBvbmVudF90b29sdGlwIiwiZmluZCIsIl9jcmVhdGVDb21tZW50Vk5vZGUiLCJoYXNSZXN1bHQiLCJ0aXRsZSIsImlkIiwicXVlcnkiLCJmaW5kUHJldiIsImZpbmROZXh0IiwiX2hvaXN0ZWRfNyIsInJlcGxhY2VBbGwiLCJfY29tcG9uZW50X3RvZ2dsZV9idXR0b24iLCJvcHRpb25zIiwidXNlUmVnZXgiLCJjYXNlU2Vuc2l0aXZlIiwiJHNldHVwIiwiX0ZyYWdtZW50IiwiX3JlbmRlckxpc3QiLCJ1cmwiLCJjb250ZW50cyIsImhyZWYiLCJ0YXJnZXQiLCJfaG9pc3RlZF82IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaW1hZ2UiLCJjb2RlIiwicmVhZE9ubHkiLCJtb2RlIiwiY29tbWFuZHMiLCJkZXNjIiwiYnV0dG9ucyIsImlucHV0IiwiYnV0dG9uIiwidGV4dCIsInNwZWxsY2hlY2siLCJwbGFjZWhvbGRlciIsInJvd3MiLCJvbkNoYW5nZSIsInRhYmluZGV4Iiwib25LZXlwcmVzcyIsIlZsRHJvcGRvd24iLCJWbE1vZGFsIiwiY3JlYXRlQXBwIiwiaCIsInJlYWN0aXZlIiwic2hvd01vZGFsIiwiY2hpbGRDb21wb25lbnQiLCJhcHAiLCJ1bm1vdW50IiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZCIsIm1vdW50IiwiVmxUb29sdGlwIiwiQ29kZU1pcnJvciIsIlRvb2x0aXAiLCJUb2dnbGVCdXR0b24iLCJkZWJvdW5jZSIsImdldFVuaXFJZCIsImkxOG4iLCJzZW5kQ21kRGlyZWN0bHkiLCJkZWVwRXF1YWwiLCJmb3JFYWNoRW50cnkiLCJvYmplY3RQaWNrIiwiaG9va1NldHRpbmciLCJraWxsVHJhaWxpbmdTcGFjZXMiLCJtYXhEaXNwbGF5TGVuZ3RoIiwiQ1RSTF9PUEVOIiwiQ1RSTF9DTE9TRSIsIkNUUkxfUkUiLCJSZWdFeHAiLCJQTEFDRUhPTERFUl9DTFMiLCJQTEFDRUhPTERFUl9TWU0iLCJTeW1ib2wiLCJjbURlZmF1bHRzIiwiY29udGludWVDb21tZW50cyIsInN0eWxlQWN0aXZlTGluZSIsImZvbGRHdXR0ZXIiLCJndXR0ZXJzIiwidGhlbWUiLCJsaW5lTnVtYmVycyIsIm1hdGNoQnJhY2tldHMiLCJhdXRvQ2xvc2VCcmFja2V0cyIsImhpZ2hsaWdodFNlbGVjdGlvbk1hdGNoZXMiLCJrZXlNYXAiLCJjbUNvbW1hbmRzIiwiY21PcHRpb25zIiwianVtcFBvcyIsInNlYXJjaCIsImNtIiwic2V0T3B0aW9uIiwidXBkYXRlVmFsdWUiLCJvcGVyYXRpb24iLCJzZXRWYWx1ZSIsImNsZWFySGlzdG9yeSIsIm1hcmtDbGVhbiIsImZvY3VzIiwib25CZWZvcmVDaGFuZ2UiLCJjaGFuZ2UiLCJjcmVhdGVQbGFjZWhvbGRlcnMiLCJvbiIsIm9mZiIsInJlbmRlclBsYWNlaG9sZGVycyIsIm9uQ2hhbmdlcyIsIm9yaWdpbiIsImlzQ2xlYW4iLCJjaCIsImZyb20iLCJsZW4iLCJwcmVmaXgiLCJ0ZXh0TGluZSIsImluY2x1ZGVzIiwiZ2V0UmVhbENvbnRlbnQiLCJwbGFjZWhvbGRlcklkIiwicmVwbGFjZWQiLCJwbGFjZWhvbGRlcnMiLCJzZXQiLCJwIiwibWFya2VyIiwibWFya1RleHQiLCJyZXBsYWNlZFdpdGgiLCJ0ZXh0Q29udGVudCIsIm9uY2xpY2siLCJnZXRTZWxlY3Rpb24iLCJzZXRDdXJzb3IiLCJpbml0aWFsaXplIiwiTWFwIiwic3RhdGUiLCJjbU9yaWdDb21tYW5kcyIsImluc2VydFRhYiIsImluc2VydFNvZnRUYWIiLCJhdXRvY29tcGxldGUiLCJzaG93SGludCIsImhpbnQiLCJhdXRvSGludFdpdGhGYWxsYmFjayIsImNhbmNlbCIsImNsZWFyU2VhcmNoIiwiZXhlY0NvbW1hbmQiLCJsaXN0U2VsZWN0aW9ucyIsImNvbW1lbnRTZWxlY3Rpb24iLCJibG9ja0NvbW1lbnQiLCJnZXRDdXJzb3IiLCJmdWxsTGluZXMiLCJpbmRlbnRXaXRoVGFicyIsInNob3dIZWxwIiwiY21kcyIsIm9yaWdDb21tYW5kcyIsIkVzYyIsIkYxIiwic3VibGltZSIsIl9jbSIsIl9uYW1lIiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsIm9uQWN0aXZlIiwib25PZmYiLCJvbktleURvd25Ub2dnbGVyIiwib25LZXlEb3duIiwiZXZ0Iiwia2V5TmFtZSIsImV4dHJhS2V5cyIsInNvbWUiLCJsb29rdXBLZXkiLCJwcmV2ZW50RGVmYXVsdCIsImZpbmRGaWxsUXVlcnkiLCJmb3JjZSIsInNlbCIsImFuY2hvciIsImhlYWQiLCJlbXB0eSIsInF1ZXJ5RmlsbGVkIiwiZG9TZWFyY2giLCJvcHRzIiwiZG9TZWFyY2hJbnRlcm5hbCIsIndyYXBBcm91bmQiLCJyZXZlcnNlZCIsInBvcyIsInJldXNlQ3Vyc29yIiwicmV0cnkiLCJjdXIiLCJjdXJzb3IiLCJlcnIiLCJnZXRTZWFyY2hDdXJzb3IiLCJjYXNlRm9sZCIsImZpbmRNYXJrcyIsIm0iLCJyZXZlYWwiLCJzZXRTZWxlY3Rpb24iLCJzY3JvbGwiLCJkb2MiLCIkbmV4dFRpY2siLCIkcmVmcyIsInNlbGVjdCIsInJlZm9jdXMiLCJoYXNGb2N1cyIsImFsbCIsInNvbWV0aGluZ1NlbGVjdGVkIiwiZXF1YWxzIiwicmVwbGFjZVNlbGVjdGlvbiIsInZwbSIsInZpZXdwb3J0TWFyZ2luIiwidmlld0Zyb20iLCJ2aWV3VG8iLCJkaXNwbGF5IiwiaW5WaWV3Iiwic2Nyb2xsSW50b1ZpZXciLCJkZWZhdWx0VGV4dEhlaWdodCIsIndyYXBwZXIiLCJnb1RvTGluZSIsIm9uQ29weSIsImNsaXBib2FyZERhdGEiLCJzZXREYXRhIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZ2V0IiwiZXhwYW5kS2V5TWFwIiwibWFwcyIsImZhbGx0aHJvdWdoIiwidXNlck9wdHMiLCJpbnRlcm5hbE9wdHMiLCJyZWdpc3RlckhlbHBlciIsImFyZ3MiLCJyZXN1bHQiLCJnZXRIZWxwZXIiLCJhbnl3b3JkIiwiY21kIiwidHQiLCJ0YWJTaXplIiwiaW5kZW50VW5pdCIsIm5ld1VzZXJPcHRzIiwiZ2V0T3B0aW9uIiwicHJldiIsInNhdmVTZWFyY2hMYXRlciIsInNlYXJjaEFnYWluIiwiJHdhdGNoIiwiZGVlcCIsImJlZm9yZVVubW91bnQiLCJ3YXRjaEVmZmVjdCIsImRhdGFVcmkydGV4dCIsImZvcm1hdEJ5dGVMZW5ndGgiLCJtYWtlRGF0YVVyaSIsIlZtQ29kZSIsImRlcGVuZGVuY2llcyIsImRlcHMiLCJtYWluVXJsIiwiaW5zdGFsbCIsInJlcXVpcmUiLCJyZXNvdXJjZXMiLCJtZXRhIiwiaXNNYWluIiwiaXNEYXRhVXJpIiwiaXNSZXEiLCJkZXBzVXJsIiwiY29udGVudFR5cGUiLCJpbWciLCJyYXciLCJjdXN0b20iLCJwYXRoTWFwIiwiZmlsZUV4dCIsImZvcm1hdExlbmd0aCIsInJvdW5kIiwicmVxdWlyZUljb24iLCJjb250ZXh0IiwiU0VQIiwicGFydHMiLCJpMThuS2V5IiwibmV4dFRpY2siLCJvbk1vdW50ZWQiLCJkaXNtaXNzZXJzIiwia2V5Q29kZSIsInBvcCIsInNldHVwIiwicmVmSW5wdXQiLCJkaXNtaXNzIiwiZW1pdCIsIm9uQnV0dG9uQ2xpY2siLCJtZXNzYWdlIiwic2VwIiwibGFiZWwiLCJzeW5jIiwicmV2b2tlIiwiZ2V0VW5sb2FkU2VudHJ5Iiwib2JqZWN0R2V0IiwiZGVmYXVsdHMiLCJqc29uIiwiaGFzU2F2ZSIsImhhc1Jlc2V0Iiwic2F2ZWRWYWx1ZSIsInBhcnNlZERhdGEiLCJwYXJzZSIsImlzRGlydHkiLCJjYW5TYXZlIiwiY2FuUmVzZXQiLCJkZWZhdWx0VmFsdWUiLCJ0b2dnbGVVbmxvYWRTZW50cnkiLCJoYW5kbGUiLCJvblNhdmUiLCJiZ0Vycm9yIiwib25SZXNldCIsImJyb3dzZXIiLCJJU19GSVJFRk9YIiwicnVudGltZSIsIlByb3h5IiwiU2FmZVByb3h5IiwiYmluZCIsIk1FU1NBR0UiLCJTVEFDSyIsImlzU3luY01ldGhvZE5hbWUiLCJwcm94aWZ5VmFsdWUiLCJtZXRhVmFsIiwic3JjVmFsIiwidW5kZWZpbmVkIiwid3JhcEFzeW5jIiwicHJveGlmeUdyb3VwIiwiX19wcm90b19fIiwiZ3JvdXAiLCJ0aGlzQXJnIiwicHJlcHJvY2Vzc29yRnVuYyIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiU2FmZVByb21pc2UiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJzdGFja0luZm8iLCJTYWZlRXJyb3IiLCJjYiIsInJ1bnRpbWVFcnIiLCJjaHJvbWUiLCJsYXN0RXJyb3IiLCJpc1J1bnRpbWUiLCJJU19JTkpFQ1RFRCIsInNhZmVQdXNoIiwic2FmZUFwcGx5IiwibG9nZ2luZyIsIlZJT0xFTlRNT05LRVkiLCJERUJVRyIsIndyYXBSZXNwb25zZSIsInNlbmRSZXNwb25zZUFzeW5jIiwic2VuZFJlc3BvbnNlIiwib25NZXNzYWdlTGlzdGVuZXIiLCJsaXN0ZW5lciIsInNlbmRlciIsImluZm8iLCJQcm9taXNlIiwidW53cmFwUmVzcG9uc2UiLCJyZXNwb25zZSIsIndyYXBTZW5kTWVzc2FnZSIsInNlbmRNZXNzYWdlIiwiZXh0ZW5zaW9uIiwiY29ubmVjdCIsImdldE1hbmlmZXN0IiwiZ2V0VVJMIiwib25NZXNzYWdlIiwiYWRkTGlzdGVuZXIiLCJERVYiLCJoYW5kbGVDb21tYW5kTWVzc2FnZSIsIkVycm9yIiwidGFicyIsImNvdW50ZXIiLCJsb2ciLCJpc1Jlc3BvbnNlIiwibXNnIiwiZnJhbWVJZCIsInRhYiIsImluaXRDYWNoZSIsImxpZmV0aW1lIiwiZGVmYXVsdExpZmV0aW1lIiwib25EaXNwb3NlIiwidGltZXIiLCJtaW5MaWZldGltZSIsImJhdGNoU3RhcnRlZCIsImJhdGNoU3RhcnRUaW1lIiwiZ2V0Tm93IiwicGVyZm9ybWFuY2UiLCJub3ciLCJPVkVSUlVOIiwiZXhwb3J0cyIsImJhdGNoIiwicHV0IiwiZGVsIiwiaGFzIiwiZGVzdHJveSIsImVuYWJsZSIsInNob3VsZEhpdCIsInJlc2NoZWR1bGUiLCJ0aGlzT2JqIiwiZW50cnkiLCJjbGVhclRpbWVvdXQiLCJleHBpcnkiLCJzZXRUaW1lb3V0IiwiY2xvc2VzdEV4cGlyeSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJDSEFSU0VUX1VURjgiLCJGT1JNX1VSTEVOQ09ERUQiLCJJTkZFUlJFRCIsIkhPTUVQQUdFX1VSTCIsIlNVUFBPUlRfVVJMIiwiVVNFUlNDUklQVF9NRVRBX0lOVFJPIiwiTUVUQUJMT0NLX1JFIiwiTUVUQV9TVFIiLCJORVdMSU5FX0VORF9SRSIsIklOSkVDVEFCTEVfVEFCX1VSTF9SRSIsIldBVENIX1NUT1JBR0UiLCJUSU1FT1VUX01BWCIsIlRJTUVPVVRfSE9VUiIsIlRJTUVPVVRfMjRIT1VSUyIsIlRJTUVPVVRfV0VFSyIsIkJMQUNLTElTVCIsIkJMQUNLTElTVF9FUlJPUlMiLCJSVU5fQVRfUkUiLCJLTk9XTl9JTkpFQ1RfSU5UTyIsIkFVVE8iLCJQQUdFIiwiQ09OVEVOVCIsIkRBWV9NUyIsIldFRUtfTVMiLCJwYWQyIiwibnVtIiwicGFkMyIsImdldFllYXIiLCJkYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXREYXlPZlllYXIiLCJmbG9vciIsIkRhdGUiLCJnZXRXZWVrT2ZZZWFyIiwidG9Mb2NhbGVTdHJpbmciLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsIkRBVEVfRk1UIiwiTSIsImdldE1vbnRoIiwiTU0iLCJNTU0iLCJtb250aCIsIk1NTU0iLCJRIiwiRCIsImdldERhdGUiLCJERCIsIkRERCIsIkREREQiLCJkIiwiZ2V0RGF5IiwiZGQiLCJ3ZWVrZGF5IiwiZGRkIiwiZGRkZCIsInciLCJ3dyIsIlkiLCJZWSIsIllZWVkiLCJIIiwiZ2V0SG91cnMiLCJISCIsImdldE1pbnV0ZXMiLCJtbSIsInMiLCJnZXRTZWNvbmRzIiwic3MiLCJTIiwiU1MiLCJTU1MiLCJaWiIsInR6IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ0emEiLCJhYnMiLCJyZSIsImZvcm1hdERhdGUiLCJ0cGwiLCJzb3J0IiwibGl0ZXJhbCIsIm1ha2VQYXVzZSIsImRvd25sb2FkQmxvYiIsImJsb2IiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJkb3dubG9hZCIsImRpc3BhdGNoRXZlbnQiLCJNb3VzZUV2ZW50IiwicmV2b2tlT2JqZWN0VVJMIiwiaGFuZGxlcnMiLCJVcGRhdGVPcHRpb25zIiwiaG9va3MiLCJob29rIiwicmVhZHkiLCJkZWVwQ29weSIsImJsb2IyYmFzZTY0Iiwibm9ybWFsaXplS2V5cyIsIlNldCIsIldlYWtNYXAiLCJXZWFrU2V0IiwiYnJvd3NlcldpbmRvd3MiLCJ3aW5kb3dzIiwiZGVmYXVsdEltYWdlIiwiSUNPTl9QUkVGSVgiLCJCQURfVVJMX0NIQVIiLCJyZXBsYWNlV2l0aEZ1bGxXaWR0aEZvcm0iLCJmcm9tQ2hhckNvZGUiLCJQT1JUX0VSUk9SX1JFIiwiaW5pdEhvb2tzIiwiZmlyZSIsImNhbGxiYWNrIiwic2VuZENtZCIsIkNPTU1BTkRTX1dJVEhfU1JDIiwiZ2V0QmdQYWdlIiwiZ2V0QmFja2dyb3VuZFBhZ2UiLCJmYWtlU3JjIiwiYmciLCJiZ0NvcHkiLCJmYWtlIiwic2VuZFRhYkNtZCIsInRhYklkIiwiaWdub3JlTm9SZWNlaXZlciIsInBheWxvYWQiLCJzZW5kTWVzc2FnZVJldHJ5IiwibWF4RHVyYXRpb24iLCJzdG9yYWdlIiwibG9jYWwiLCJsZWZ0cGFkIiwiZ2V0TG9jYWxlU3RyaW5nIiwibG9jYWxlTWV0YSIsImxhbmd1YWdlcyIsImxhbmciLCJnZXRTY3JpcHRIb21lIiwic2NyaXB0IiwiaG9tZXBhZ2UiLCJ3ZWJzaXRlIiwiZ2V0U2NyaXB0U3VwcG9ydFVybCIsImdldFNjcmlwdE5hbWUiLCJnZXRTY3JpcHRSdW5BdCIsIlJVTl9BVCIsImdldFNjcmlwdFByZXR0eVVybCIsImRpc3BsYXlOYW1lIiwiZXh0ZW5zaW9uUm9vdCIsImVuY29kZVVSSUNvbXBvbmVudCIsImdldFNjcmlwdFVwZGF0ZVVybCIsImNvbmZpZyIsInNob3VsZFVwZGF0ZSIsImRvd25sb2FkVVJMIiwidHJ5VXJsIiwibGFzdEluc3RhbGxVUkwiLCJ1cGRhdGVVUkwiLCJnZXRGdWxsVXJsIiwiYmFzZSIsInByb3RvY29sIiwiZW5jb2RlRmlsZW5hbWUiLCJkZWNvZGVGaWxlbmFtZSIsImZpbGVuYW1lIiwiX20iLCJnIiwiZ2V0QWN0aXZlVGFiIiwiY3VycmVudFdpbmRvdyIsIndpbmRvd0lkIiwiZ2V0Q3VycmVudCIsIm1zIiwidHJ1ZUpvaW4iLCJzZXBhcmF0b3IiLCJsYXN0SW5kZXhPZiIsIm1ha2VSYXciLCJub0pvaW4iLCJoZWFkZXJzIiwiS2V5Ym9hcmRTZXJ2aWNlIiwia2V5Ym9hcmRTZXJ2aWNlIiwiYmluZEtleXMiLCJpc0lucHV0IiwidGFnTmFtZSIsImhhbmRsZUZvY3VzIiwic2V0Q29udGV4dCIsImhhbmRsZUJsdXIiLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImhhbmRsZUVzY2FwZSIsImJsdXIiLCJ0b2dnbGVUaXAiLCJyZWdpc3RlciIsImNsaWNrIiwiY29uZGl0aW9uIiwiaGFuZGxlVGFiTmF2aWdhdGlvbiIsImRpciIsImVscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YWJJbmRleCIsImlzSHR0cE9ySHR0cHMiLCJub29wIiwiS0VZIiwiS0VZX0RFRkFVTFQiLCJsb2FkU2NyaXB0SWNvbiIsInN0b3JlIiwic2hvd0RlZmF1bHQiLCJpY29uIiwiaXNIaURQSSIsInJlbW92ZWQiLCJkZWVwRGlmZiIsInJhd0tleSIsIm9iamVjdFNldCIsInJldFBhcmVudCIsInRyYW5zZm9ybSIsIm1hcEVudHJ5IiwiZm5WYWx1ZSIsImZuS2V5IiwiZm9yRWFjaEtleSIsImZvckVhY2hWYWx1ZSIsImV2ZXJ5Iiwia2V5c0EiLCJkZWVwQ29weURpZmYiLCJzYW1wbGUiLCJkZWVwQ29weURpZmZPYmplY3RzIiwiaXNBcnIiLCJhcnIxIiwiYXJyMiIsImRlZXBTaXplIiwic3VtIiwidiIsImsiLCJpc0FwcGxpZWQiLCJhdXRvVXBkYXRlIiwidXBkYXRlRW5hYmxlZFNjcmlwdHNPbmx5IiwibGFzdFVwZGF0ZSIsImxhc3RNb2RpZmllZCIsInNob3dCYWRnZSIsImJhZGdlQ29sb3IiLCJiYWRnZUNvbG9yQmxvY2tlZCIsImV4cG9ydFZhbHVlcyIsImV4cG9ydE5hbWVUZW1wbGF0ZSIsIkVYUE9TRSIsImNsb3NlQWZ0ZXJJbnN0YWxsIiwidHJhY2tMb2NhbEZpbGUiLCJhdXRvUmVsb2FkIiwiZmVhdHVyZXMiLCJibGFja2xpc3QiLCJzeW5jU2NyaXB0U3RhdHVzIiwiY3VzdG9tQ1NTIiwiaW1wb3J0U2NyaXB0RGF0YSIsImltcG9ydFNldHRpbmdzIiwibm90aWZ5VXBkYXRlcyIsIm5vdGlmeVVwZGF0ZXNHbG9iYWwiLCJ2ZXJzaW9uIiwiZGVmYXVsdEluamVjdEludG8iLCJmZkluamVjdCIsInhockluamVjdCIsImZpbHRlcnMiLCJzZWFyY2hTY29wZSIsInNob3dPcmRlciIsInZpZXdTaW5nbGVDb2x1bW4iLCJ2aWV3VGFibGUiLCJmaWx0ZXJzUG9wdXAiLCJlbmFibGVkRmlyc3QiLCJncm91cFJ1bkF0IiwiaGlkZURpc2FibGVkIiwiZWRpdG9yIiwibGluZVdyYXBwaW5nIiwidW5kb0RlcHRoIiwiZWRpdG9yVGhlbWUiLCJlZGl0b3JUaGVtZU5hbWUiLCJlZGl0b3JXaW5kb3ciLCJlZGl0b3JXaW5kb3dQb3MiLCJlZGl0b3JXaW5kb3dTaW1wbGUiLCJzY3JpcHRUZW1wbGF0ZSIsInNob3dBZHZhbmNlZCIsInVpVGhlbWUiLCJyZXBseSIsImV4cGFuZGVkRGF0YSIsInNob3dDb25maXJtYXRpb24iLCJoYXNoIiwicGF0aG5hbWUiLCJzZXEiLCJwYXRocyIsInN0YWNrIiwicm91dGUiLCJsYXN0Um91dGUiLCJ1cGRhdGVSb3V0ZSIsIm5vQ29uZmlybSIsImxvY2F0aW9uIiwiY29uZmlybUNoYW5nZSIsInNldFJvdXRlIiwiaGFzaFN0cmluZyIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJvbkNvbmZpcm0iLCJvbkNhbmNlbCIsImNvbmZpcm1Qb3BTdGF0ZSIsInRvZ2dsZSIsIm9uVW5sb2FkIiwicmV0dXJuVmFsdWUiLCJ1YSIsImtVYUZ1bGxWZXJzaW9uIiwidWFEYXRhIiwidXNlckFnZW50RGF0YSIsImRlZmluZVByb3BlcnRpZXMiLCJmaXJlZm94IiwibWF0Y2hOYXZVQSIsIndyaXRhYmxlIiwiYnJhbmRzIiwiZ2V0UGxhdGZvcm1JbmZvIiwiZ2V0QnJvd3NlckluZm8iLCJnZXRIaWdoRW50cm9weVZhbHVlcyIsIm9zIiwiYXJjaCIsImZ1bGxWZXIiLCJicm93c2VyTmFtZSIsImJyb3dzZXJWZXJzaW9uIiwiYXNDaHJvbWUiLCJhc1N0cmluZyIsInZlciIsInVzZXJBZ2VudCIsIklEIiwiREVGQVVMVCIsIk9QVElPTlMiLCJTVEFURSIsIkhJTlRfT1BUSU9OUyIsIkNPTVBMRVRFX1NJTkdMRSIsIlBJQ0tFRCIsIlRJTUVSIiwiZ2V0TXlTdGF0ZSIsImRlbGF5ZWRDb21wbGV0ZSIsImhpbnRPcHRpb25zIiwibXlTdGF0ZSIsImNhbmNlbERlbGF5IiwibGFzdFR5cGVkIiwiY29tcGxldGlvbkFjdGl2ZSIsIm9uUGlja2VkIiwiZGVmaW5lT3B0aW9uIiwiZGVmaW5lTW9kZSIsIlNUWUxFX1BBU1MiLCJJU19FTkRfQkFDS1RJQ0tfUkUiLCJORVhUX1FVT1RFX1JFIiwia0Vuc3VyZVByb3BlckxvY2FsTW9kZVN0YXRlUG9zdEpzRXhwciIsImtJbkpzRXhwckluU3RyaW5nVGVtcGxhdGUiLCJrSW5kZXhPZkpzRXhwclN0YXJ0Iiwia0pzRXhwckRlcHRoSW5TdHJpbmdUZW1wbGF0ZSIsImtKc1N0YXRlIiwia0xvY2FsSHRtbFBsYWluU3RyaW5nRW5kUG9zIiwia0xvY2FsTW9kZSIsImtMb2NhbFN0YXRlIiwia01heWJlTG9jYWxDb250ZXh0Iiwia1F1b3RlQ2hhclN1cnJvdW5kSnNFeHByIiwia1Rva2VuaXplIiwia1Rva2VuaXplUG9zdEpzRXhwciIsIlN0cmluZ1N0cmVhbSIsImNtQ29weVN0YXRlIiwiY29weVN0YXRlIiwiY21TdGFydFN0YXRlIiwic3RhcnRTdGF0ZSIsImNtUGFzcyIsIlBhc3MiLCJqc01vZGUiLCJnZXRNb2RlIiwianNUb2tlblF1YXNpIiwiZHVtbXlTdHJlYW0iLCJkdW1teVN0YXRlIiwidG9rZW4iLCJjc3NNb2RlIiwiaHRtbG1peGVkTW9kZSIsImh0bWxOb01hdGNoQ2xvc2luZ01vZGUiLCJodG1sTW9kZSIsIm1hdGNoQ2xvc2luZyIsImZvcmNlSHRtbE1vZGVUb0F0dHJDb250aW51ZWRTdGF0ZSIsImh0bWxTdGF0ZUZvckF0dHJWYWx1ZSIsImV4dHJhY3RJbm5hcmRzIiwic3RyZWFtIiwiaHRtbFN0YXRlIiwiY3VycmVudCIsImF0dHJDb250aW51ZWRTdGF0ZSIsInN0YXRlRm9yQXR0clZhbHVlIiwiY29udCIsInJ1bkN0eCIsIlJ1bkNvbnRleHQiLCJsYXN0VHlwZSIsInJ1bGVzQnlJZCIsInJ1bGVzQnlUeXBlIiwicnVsZXNCeUxhbmdDbXQiLCJ0b2tlbklzQ2hhckVzY2FwZWQiLCJjaGFyUG9zIiwiaXNFc2NhcGVkIiwidG9rZW5JbmRleE9mVW5lc2NhcGVkIiwic2VhcmNoVmFsdWUiLCJzZWFyY2hFbmRJZHhFeGNsdXNpdmUiLCJ0b2tlblN0YXJ0SWR4Iiwic2VhcmNoU3RhcnRJZHgiLCJjYW5kaWRhdGUiLCJwcmVwUmVwYXJzZVN0cmluZ1RlbXBsYXRlSW5Mb2NhbE1vZGUiLCJiYWNrVXAiLCJoYXNCZWdpbkJhY2t0aWNrIiwiaXNFbmRCYWNrdGljayIsImV4aXRMb2NhbE1vZGVXaXRoRW5kQmFja3RpY2siLCJjdHgiLCJjdXJNb2RlU3RhdGVPZkh0bWxtaXhlZCIsImh0bWxtaXhlZFN0YXRlIiwibG9jYWxTdGF0ZSIsIm1vZGVOYW1lIiwibW9kZVN0YXRlIiwicXVvdGVJblVzZSIsInRva2VuSnNFeHByZXNzaW9uSW5TdHJpbmdUZW1wbGF0ZSIsImpzRXhwciIsImV4Y2x1ZGVFbmRCYWNrdGlja0Zyb21Ub2tlbiIsImJhY2t0aWNrUG9zIiwidG9rZW5JbkxvY2FsTW9kZVN0cmluZ1RlbXBsYXRlIiwianNFeHByU3RhcnQiLCJwcmVwUmVwYXJzZVBsYWluU3RyaW5nSW5Mb2NhbE1vZGUiLCJvbGRQb3MiLCJleGl0TG9jYWxNb2RlV2l0aEVuZFF1b3RlIiwibmV4dCIsInRva2VuSW5Mb2NhbE1vZGVQbGFpblN0cmluZyIsIm1ha2VSdWxlcyIsInByZWZpeGVkUnVsZUdyb3VwcyIsInNlcVByZWZpeCIsInJ1bGVzIiwicnVsZSIsIm1hdGNoUnVsZSIsImpzVG9rZW5TdHlsZSIsIm9uTWF0Y2giLCJvbk1pc3MiLCJjc3MxIiwiY3NzMiIsImNzczMiLCJodG1sMSIsImh0bWwyIiwiaHRtbDMiLCJodG1sNCIsImh0bWw1IiwianNUb2tlbiIsInRva2VuU3R5bGUiLCJtYXliZUxvY2FsU3R5bGUiLCJpbmRlbnQiLCJ0ZXh0QWZ0ZXIiLCJsb2NhbE1vZGUiLCJpbm5lck1vZGUiLCJLSUxMX09QVCIsIlNIT1dfT1BUIiwiT1ZFUkxBWSIsIkRFRkFVTFRTIiwidHJpbUVuZCIsImdldFZhbHVlIiwiY3Vyc29yTGluZXMiLCJyYW5nZXMiLCJyIiwiZWFjaExpbmUiLCJ0cmltbWVkIiwibGVuMSIsImxlbjIiLCJyZXBsYWNlUmFuZ2UiLCJJbml0IiwicmVtb3ZlT3ZlcmxheSIsImFkZE92ZXJsYXkiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsInJlbCIsImFwcGVuZENoaWxkIiwiTW9kYWwiLCJNZXNzYWdlIiwic2hvd1VuaGFuZGxlZEVycm9yIiwicmVhc29uIiwic2V0QmFzZUFuZEV4dGVudCIsImRvY3VtZW50RWxlbWVudCIsInNob3dNZXNzYWdlIiwibW9kYWwiLCJvbkRpc21pc3MiLCJxdWVyeVNlbGVjdG9yIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidGltZW91dCIsIm9rIiwiaGFzSW5wdXQiLCJvbk9rIiwiY2FsY1Jvd3MiLCJlbmRzV2l0aCIsIkFwcCIsImdsb2JhbFByb3BlcnRpZXMiLCJmb2N1c01lIiwidkZvY3VzRmFjdG9yeSIsImJpbmRpbmciLCJ1cGRhdGVkIiwidkZvY3VzIiwic3R5bGVUaGVtZSIsImRhcmtNZWRpYVJ1bGVzIiwibG9jYWxTdG9yYWdlIiwiZm9vIiwiQ0FDSEVfS0VZIiwic2V0U3R5bGUiLCJjc3MiLCJlbGVtIiwic2V0VWlUaGVtZSIsImRhcmtUaGVtZUNvbmRpdGlvbiIsIm1lZGlhVGV4dCIsInN0eWxlU2hlZXRzIiwic2hlZXQiLCJjc3NSdWxlcyIsImNvbmRpdGlvblRleHQiLCJtZWRpYSIsImNoYW5nZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJnZXRNZXNzYWdlIiwicGFyYW0iLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJjYWNoZU1hcCIsIm1lbW9pemVkIiwiYXBwbHkiLCJ0aW1lIiwic3RhcnRUaW1lIiwiY2hlY2tUaW1lIiwiY2hlY2tUaW1lciIsImRlbHRhIiwiZGVib3VuY2VkRnVuY3Rpb24iLCJ0aHJvdHRsZSIsImxhc3RUaW1lIiwidGhyb3R0bGVkRnVuY3Rpb24iLCJnZXRSYW5kb21TdHJpbmciLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJybmQiLCJyYW5kb20iLCJidWZmZXIyc3RyaW5nIiwiYnVmIiwib2Zmc2V0Iiwic2xpY2VTaXplIiwic2xpY2VzIiwiYXJyYXlMZW4iLCJieXRlTGVuZ3RoIiwibmVlZHNTbGljaW5nIiwiVWludDhBcnJheSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNEYXRhVVJMIiwib25sb2FkIiwiYXRvYiIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwic3RyaW5nMnVpbnQ4YXJyYXkiLCJhcnJheSIsIlZFUlNJT05fUkUiLCJESUdJVFNfUkUiLCJjb21wYXJlVmVyc2lvbiIsInZlcjEiLCJ2ZXIyIiwibWFpbjEiLCJwcmUxIiwibWFpbjIiLCJwcmUyIiwiY29tcGFyZVZlcnNpb25DaHVuayIsImlzU2VtdmVyTW9kZSIsInBhcnRzMSIsInBhcnRzMiIsInVuaXRzIiwiZm9ybWF0VGltZSIsImR1cmF0aW9uIiwidW5pdEluZm8iLCJzdGVwIiwibm9CeXRlcyIsInRvRml4ZWQiLCJpc0VtcHR5IiwiZW5zdXJlQXJyYXkiLCJiaW5hcnlUeXBlcyIsInJlcXVlc3RMb2NhbEZpbGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImdldFJlc3BvbnNlSGVhZGVyIiwia1Jlc3BvbnNlVHlwZSIsInJlc3BvbnNlVHlwZSIsInN0YXR1cyIsImtSZXNwb25zZSIsImtSZXNwb25zZVRleHQiLCJvbmVycm9yIiwic2VuZCIsImlzTG9jYWxVcmxSZSIsImlzUmVtb3RlIiwiZGVjb2RlVVJJIiwicmVxdWVzdCIsImlzQm9keU9iaiIsInNjaGVtZSIsImF1dGgiLCJob3N0bmFtZSIsInVybFRhaWwiLCJhY2NlcHQiLCJpbml0IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJ1cmxOb0F1dGgiLCJyZXNwIiwiZmV0Y2giLCJsb2FkTWV0aG9kIiwiYXJyYXlidWZmZXIiLCJTSU1QTEVfVkFMVUVfVFlQRSIsIm51bWJlciIsImJvb2xlYW4iLCJkdW1wU2NyaXB0VmFsdWUiLCJqc29uRHVtcCIsInNpbXBsZSJdLCJzb3VyY2VSb290IjoiIn0=